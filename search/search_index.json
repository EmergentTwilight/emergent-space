{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to my notebook ~","text":"Emergent Space"},{"location":"index.html#\u4e3b\u9875\u5b8c\u5584\u4e2d","title":"\u4e3b\u9875\u5b8c\u5584\u4e2d......","text":""},{"location":"index.html#list-callouts-\u63d2\u4ef6\u9884\u89c8\u533a","title":"list callouts \u63d2\u4ef6\u9884\u89c8\u533a","text":"md source<pre><code>- &amp; highlight\n    - ? question\n        - ! warning\n            - ~ bookmark\n                - @ tip\n                    - $ success\n                        - % quote\n</code></pre> <ul> <li> highlight <ul> <li> question <ul> <li> warning <ul> <li> bookmark <ul> <li> tip <ul> <li> success <ul> <li> quote </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"friends.html","title":"Friends","text":"hebown \u7684\u5c0f\u4e16\u754c <p>\u7231\u5929\u9a6c\u884c\u7a7a\uff0c\u4e8e\u662f\u5236\u9020\u4e86\u81ea\u5df1\u7684\u4e16\u754c-&gt;.</p> Leo Li's Blog <p>\u505a\u767d\u65e5\u7684\u68a6\uff0c\u5439\u81ea\u7531\u7684\u98ce</p> Example Blog Title <p>Example Blog Description</p> <p>\u6b22\u8fce\u4ee5\u4ee5\u4e0b\u683c\u5f0f\u7559\u4e0b\u4f60\u7684\u53cb\u94fe</p> <ul> <li>\u535a\u5ba2/\u7b14\u8bb0\u6807\u9898</li> <li>\u535a\u5ba2/\u7b14\u8bb0\u94fe\u63a5</li> <li>\u5934\u56fe/\u5934\u56fe url</li> <li>\u4e00\u53e5 description</li> </ul>"},{"location":"GAMES101/index.html","title":"GAMES101","text":""},{"location":"GAMES101/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>GAMES101 01 Introduction</li> <li>GAMES101 02 A Swift and Brutal Introduction to Linear Algebra</li> <li>GAMES101 03 Transformation</li> <li>GAMES101 04 Rasterization</li> <li>GAMES101 05 Shading</li> <li>GAMES101 06 Geometry</li> <li>GAMES101 07 Ray Tracing</li> <li>GAMES101 08 Materials and Appearances</li> <li>GAMES101 09 Advanced Topics in Rendering</li> <li>GAMES101 10 Cameras, Lenses and Light Fields</li> <li>GAMES101 11 Color and Perception</li> <li>GAMES101 12 Animation</li> </ul>"},{"location":"GAMES101/index.html#info","title":"Info","text":"<p>\u8bfe\u7a0b\u7f51\u7ad9</p> <p></p>"},{"location":"GAMES101/index.html#more-about-cg","title":"More about CG","text":"<ul> <li>book Real-Time Rendering</li> <li>opengl/directX</li> <li>\u51e0\u4f55\uff1a\u5fae\u5206\u51e0\u4f55/\u79bb\u6563\u5fae\u5206\u51e0\u4f55</li> <li>\u6a21\u62df\u4eff\u771f\uff1aGAMES201</li> </ul>"},{"location":"GAMES101/GAMES101%2001%20Introduction.html","title":"01 Introduction","text":""},{"location":"GAMES101/GAMES101%2001%20Introduction.html#what-is-cg","title":"What is CG?","text":"<ul> <li>Video games</li> <li>Movies</li> <li>Animations</li> <li>Design</li> <li>Visualization</li> <li>Virtual Reality</li> <li>Digital Illustration</li> <li>Simulation</li> <li>GUI</li> <li>Typography</li> </ul>"},{"location":"GAMES101/GAMES101%2001%20Introduction.html#why-study-cg","title":"Why study CG?","text":"<ul> <li>CG ios AWESOME</li> </ul>"},{"location":"GAMES101/GAMES101%2001%20Introduction.html#course-topics","title":"Course Topics","text":"<ul> <li>Rasterization: \u5c06\u4e09\u7ef4\u7a7a\u95f4\u7684\u5f62\u72b6\u663e\u793a\u5230\u5c4f\u5e55\u4e0a</li> <li>Curves and Meshes: \u8868\u793a\u66f2\u7ebf\u548c\u66f2\u9762</li> <li>Ray Tracing: \u5149\u7ebf\u6a21\u62df</li> <li> <p>Animation / Simulation: \u7269\u7406\u4eff\u771f</p> </li> <li> <p>OpenGL / DirectX / Vulkan We learn Graphics, not APIs</p> </li> <li>The syntax of Shader</li> <li>3D modeling</li> <li>CV, Deep Learning</li> </ul>"},{"location":"GAMES101/GAMES101%2001%20Introduction.html#differences","title":"Differences","text":"<ul> <li>no clear boundaries</li> </ul>"},{"location":"GAMES101/GAMES101%2001%20Introduction.html#references","title":"References","text":"<p>Fundamentals of Computer Graphics</p>"},{"location":"GAMES101/GAMES101%2001%20Introduction.html#assignments","title":"Assignments","text":"<ul> <li>\u6709\u4ee3\u7801\u6846\u67b6</li> <li>\u6bcf\u5468 no more than 20 lines of code</li> <li>C++</li> <li>Final Project</li> </ul>"},{"location":"GAMES101/GAMES101%2002%20A%20Swift%20and%20Brutal%20Introduction%20to%20Linear%20Algebra.html","title":"02 About Linear Algebra","text":"<p>\u56fe\u5f62\u5b66\u4f9d\u8d56\u7ebf\u6027\u4ee3\u6570\u3001\u5fae\u79ef\u5206\u3001\u7edf\u8ba1\u3001\u5149\u5b66\u3001\u529b\u5b66\u3001\u4fe1\u53f7\u5904\u7406\u3001\u6570\u503c\u5206\u6790...</p>"},{"location":"GAMES101/GAMES101%2002%20A%20Swift%20and%20Brutal%20Introduction%20to%20Linear%20Algebra.html#this-course","title":"This Course","text":"<ul> <li>Linear Algebra<ul> <li>Vectors</li> <li>Matrices</li> </ul> </li> </ul>"},{"location":"GAMES101/GAMES101%2002%20A%20Swift%20and%20Brutal%20Introduction%20to%20Linear%20Algebra.html#vectors","title":"Vectors","text":"<ul> <li>\\(\\vec{a}\\)</li> <li>\\(\\hat{a}=\\vec{a}/||\\vec{a}||\\)</li> <li>\\(\\mathbf{a}^T=(x, y)\\)</li> <li>dot product: \u6c42\u5939\u89d2\u3001\u6c42\u6295\u5f71</li> <li>cross product: <ul> <li>\u786e\u5b9a\u4e00\u4e2a\u5411\u91cf\u5728\u53e6\u4e00\u4e2a\u5411\u91cf\u7684\u5de6\u4fa7\u8fd8\u662f\u53f3\u4fa7</li> <li>\u786e\u5b9a\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u56fe\u5f62\u5185\u90e8\uff0c\u5982\u679c\u5728\u6240\u6709\u8fb9\u7684\u540c\u4fa7\uff0c\u90a3\u4e48\u4e00\u5b9a\u5728\u5185\u90e8</li> </ul> </li> </ul>"},{"location":"GAMES101/GAMES101%2002%20A%20Swift%20and%20Brutal%20Introduction%20to%20Linear%20Algebra.html#matrices","title":"Matrices","text":"<p>matrices is transformations</p> <p></p>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html","title":"03 Transformation","text":""},{"location":"GAMES101/GAMES101%2003%20Transformation.html#why-study-transformation","title":"Why study transformation","text":"<ul> <li>modeling<ul> <li>translation</li> <li>rotation</li> <li>scaling</li> </ul> </li> <li>viewing<ul> <li>3D to 2D projection</li> </ul> </li> </ul>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#2d-transformation","title":"2D Transformation","text":""},{"location":"GAMES101/GAMES101%2003%20Transformation.html#scale","title":"Scale","text":"\\[\\begin{bmatrix} x^{\\prime} \\\\ y^{\\prime} \\end{bmatrix}= \\begin{bmatrix} s_{x} &amp; 0 \\\\ 0 &amp; s_{y} \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\end{bmatrix}\\] <ul> <li>\u5bf9\u89d2\u9635</li> <li>\u53ef\u4ee5\u5b9e\u73b0 reflection\uff0c\u4f8b\u5982 \\(s_{x}=-1, s_{y}=1\\)</li> </ul>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#shear","title":"Shear","text":"\\[\\begin{bmatrix} x^{\\prime} \\\\ y^{\\prime} \\end{bmatrix}= \\begin{bmatrix} 1 &amp; a \\\\ 0 &amp; 1 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\end{bmatrix}\\]"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#rotate","title":"Rotate","text":"\\[\\begin{bmatrix} x^{\\prime} \\\\ y^{\\prime} \\end{bmatrix}= \\begin{bmatrix} \\cos \\theta &amp; -\\sin \\theta \\\\ \\sin \\theta &amp; \\cos \\theta \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\end{bmatrix}\\] <p>\\(\\mathbf{R}_{-\\theta}=\\mathbf{R}_{\\theta}^T\\)\uff0c\u77e9\u9635\u7684\u9006\u7b49\u4e8e\u5176\u8f6c\u7f6e\uff0c\u79f0\u4e3a\u6b63\u4ea4\u77e9\u9635</p>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#conc-linear-transformations-matrices","title":"Conc: Linear Transformations = Matrices","text":"\\[\\begin{bmatrix} x^{\\prime} \\\\ y^{\\prime} \\end{bmatrix}= \\begin{bmatrix} a &amp; b \\\\ c &amp; d \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\end{bmatrix} \\quad \\mathbf{x'=M~x}\\]"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#homogeneous-coordinates","title":"Homogeneous coordinates","text":""},{"location":"GAMES101/GAMES101%2003%20Transformation.html#translation","title":"Translation","text":"<p>Why homogeneous coordinates</p> \\[\\begin{bmatrix} x^{\\prime} \\\\ y^{\\prime} \\end{bmatrix}= \\begin{bmatrix} a &amp; b \\\\ c &amp; d \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\end{bmatrix}+\\begin{bmatrix} t_{x} \\\\ t_{y} \\end{bmatrix}\\] <p>\u5e73\u79fb\u53d8\u6362\u4e2d\u542b\u6709\u5e38\u5411\u91cf\uff0c\u5e0c\u671b\u4f7f\u7528\u7edf\u4e00\u7684\u65b9\u5f0f\u8868\u793a\u53d8\u6362</p> <ul> <li>\\(w\\)-coordinate<ul> <li>2D point: \\((x,y,1)^T\\)</li> <li>2D vector: \\((x,y,0)^T\\) \u5411\u91cf\u5e73\u79fb\u4e0d\u53d8\u6027</li> </ul> </li> <li>\u7406\u89e3<ul> <li>vec+vec=vec</li> <li>point-point=vec</li> <li>point+vec=point</li> </ul> </li> </ul> \\[\\begin{pmatrix} x^{\\prime} \\\\ y^{\\prime} \\\\ w^{\\prime} \\end{pmatrix}= \\begin{pmatrix} 1 &amp; 0 &amp; t_x \\\\ 0 &amp; 1 &amp; t_y \\\\ 0 &amp; 0 &amp; 1 \\end{pmatrix}\\cdot \\begin{pmatrix} x \\\\ y \\\\ 1 \\end{pmatrix}= \\begin{pmatrix} x+t_x \\\\ y+t_y \\\\ 1 \\end{pmatrix}\\] <p>In homogeneous coordinates, \\(\\begin{pmatrix}x\\\\y\\\\w\\end{pmatrix}\\) is the 2D point \\(\\begin{pmatrix}x/w\\\\y/w\\\\1\\end{pmatrix}\\), \\(w\\neq 0\\).</p> \\[\\begin{pmatrix} x^{\\prime} \\\\ y^{\\prime} \\\\ 1 \\end{pmatrix}= \\begin{pmatrix} a &amp; b &amp; t_x \\\\ c &amp; d &amp; t_y \\\\ 0 &amp; 0 &amp; 1 \\end{pmatrix}\\cdot \\begin{pmatrix} x \\\\ y \\\\ 1 \\end{pmatrix}\\] <p>inverse transform</p> <p>\\(M^{-1}\\) \u5c31\u662f\u9006\u53d8\u6362\u7684\u53d8\u6362\u77e9\u9635</p>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#composing-transforms","title":"Composing Transforms","text":"<ul> <li>\\(T_{(1,0)}\\cdot R_{45}\\neq R_{45}\\cdot T_{(1,0)}\\)\uff0c\u65cb\u8f6c\u9ed8\u8ba4\u662f\u7ed5\u7740\u539f\u70b9\u65cb\u8f6c<ul> <li>\u5148\u65cb\u8f6c\u518d\u5e73\u79fb\u6bd4\u8f83\u7b80\u5355\uff0c\u8868\u793a\u4e3a \\(\\mathbf{T} \\cdot \\mathbf{R}\\cdot \\mathbf{x}\\)</li> </ul> </li> <li>\u53d8\u6362\u53e0\u52a0\u7b49\u4ef7\u4e8e\u77e9\u9635\u4e58\u6cd5\uff0c\u4e0d\u6ee1\u8db3\u4ea4\u6362\u5f8b</li> <li>\\(A_{n}(\\ldots A_{2}(A_{1}(\\mathbf{x})))=\\mathbf{A}_{n}\\cdots\\mathbf{A}_{2}\\cdot\\mathbf{A}_{1}\\cdot \\begin{pmatrix} x \\\\ y \\\\ 1 \\end{pmatrix}\\)</li> </ul>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#decomposing-complex-transforms","title":"Decomposing Complex Transforms","text":"<ul> <li>\u5982\u4f55\u7ed5\u4efb\u610f\u70b9 \\(\\mathbf{c}\\) \u65cb\u8f6c</li> <li>\\(\\mathbf{T}(\\mathbf{c})\\cdot \\mathbf{R}(\\alpha)\\cdot \\mathbf{T}(-\\mathbf{c})\\)</li> </ul>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#3d-transformations","title":"3D Transformations","text":"<ul> <li>3D point \\((x,y,z,1)^T\\) \u540c\u6837\u80fd\u591f\u8fdb\u884c\u4eff\u5c04\u4f7f \\(w=1\\)</li> <li>3D vector \\((x,y,z,0)^T\\)</li> </ul> \\[\\begin{pmatrix} x^{\\prime} \\\\ y^{\\prime} \\\\ z^{\\prime} \\\\ 1 \\end{pmatrix}= \\begin{pmatrix} a &amp; b &amp; c &amp; t_x \\\\ d &amp; e &amp; f &amp; t_y \\\\ g &amp; h &amp; i &amp; t_z \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix}\\cdot \\begin{pmatrix} x \\\\ y \\\\ z \\\\ 1 \\end{pmatrix}\\] <p>Summary</p> <p>\u4e00\u822c\u53d8\u6362\u7684\u77e9\u9635\u8868\u793a\u5f62\u5f0f\u4e0b\uff0c\u5148\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\uff0c\u518d\u8fdb\u884c\u5e73\u79fb</p>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#rotation","title":"rotation","text":""},{"location":"GAMES101/GAMES101%2003%20Transformation.html#around-axis","title":"around axis","text":"\\[\\begin{gathered} \\mathbf{R}_{x}(\\alpha)= \\begin{pmatrix} 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; \\cos\\alpha &amp; -\\sin\\alpha &amp; 0 \\\\ 0 &amp; \\sin\\alpha &amp; \\cos\\alpha &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix} \\\\ \\mathbf{R}_{y}(\\alpha)= \\begin{pmatrix} \\cos\\alpha &amp; 0 &amp; \\sin\\alpha &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 \\\\ -\\sin\\alpha &amp; 0 &amp; \\cos\\alpha &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix} \\\\ \\mathbf{R}_{z}(\\alpha)= \\begin{pmatrix} \\cos\\alpha &amp; -\\sin\\alpha &amp; 0 &amp; 0 \\\\ \\sin\\alpha &amp; \\cos\\alpha &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix} \\end{gathered}\\] <ul> <li>\u7ed5 \\(x\\) \u8f74\u65cb\u8f6c\uff0c\u5219 \\(x\\) \u5750\u6807\u4e0d\u53d8</li> <li>\u5176\u4e2d\u7684 \\(\\mathbf{R}_{y}\\) \u7684\u6b63\u8d1f\u53f7\u4e0d\u540c\uff0c\u8fd9\u662f\u56e0\u4e3a \\(x \\times y=z, y\\times z=x\\) \u4f46\u662f \\(z\\times x=y\\)</li> </ul>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#common","title":"common","text":"<ul> <li>\u7ec4\u5408\u7ed5\u8f74\u65cb\u8f6c\u5f97\u5230\u4efb\u610f\u7684 3D rotation: \\(\\mathbf{R}_{xyz}(\\alpha,\\beta,\\gamma)=\\mathbf{R}_x(\\alpha)\\mathbf{R}_y(\\beta)\\mathbf{R}_z(\\gamma)\\)\uff0c\u8fd9\u91cc\u7684 \\(\\alpha,\\beta,\\gamma\\) \u79f0\u4e3a Euler angles</li> <li>\u4e0e\u98de\u884c\u6a21\u62df\u4e2d\u7684 roll, pitch, yaw \u5bf9\u5e94</li> </ul> <p>Rodrigues' Rotation Formula</p> \\[\\mathbf{R}(\\mathbf{n},\\alpha)=\\cos(\\alpha)\\mathbf{I}+(1-\\cos(\\alpha))\\mathbf{n}\\mathbf{n}^T+\\sin(\\alpha)\\underbrace{ \\begin{pmatrix} 0 &amp; &amp; -n_z &amp; &amp; n_y \\\\ n_z &amp; &amp; 0 &amp; &amp; -n_x \\\\ -n_y &amp; &amp; n_x &amp; &amp; 0 \\end{pmatrix}}_{\\mathbf{N}}\\] <p>\u8868\u793a\uff0c\u7ed5\u7740 \\(\\mathbf{n}\\) \u65b9\u5411\u65cb\u8f6c \\(\\alpha\\) \u89d2</p> <p>\u4f46\u662f\u4e0a\u9762\u7684\u516c\u5f0f\u53ea\u80fd\u7ed5\u7740\u8fc7\u539f\u70b9\u7684\u8f74\u65cb\u8f6c\uff0c\u5982\u679c\u8981\u5b9e\u73b0\u7ed5\u7740\u4efb\u610f\u8f74\u65cb\u8f6c\uff0c\u5982 Decomposing Complex Transforms \u5c06\u8f74\u4e0a\u4e00\u70b9\u5e73\u79fb\u5230\u539f\u70b9\u3001\u65cb\u8f6c\u5e76\u5e73\u79fb\u56de\u6765\u5373\u53ef</p>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#viewcamera-transformation","title":"View/Camera Transformation","text":""},{"location":"GAMES101/GAMES101%2003%20Transformation.html#intro","title":"intro","text":"<p>taking a photo: model -&gt; view -&gt; projection, mvp transformations</p>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#define-a-camera","title":"define a camera","text":"<ul> <li>position \\(\\vec{e}\\)</li> <li>gaze direction \\(\\hat{g}\\)</li> <li>up direction \\(\\hat{t}\\) \u753b\u9762\u7684\u5411\u4e0a\u65b9\u5411</li> </ul> <p>Key observation</p> <p>\u5982\u679c\u76f8\u673a\u548c\u5176\u4ed6\u7269\u4f53\u76f8\u5bf9\u9759\u6b62\uff0c\u90a3\u4e48\u770b\u5230\u7684\u7ed3\u679c\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u76f8\u673a\u653e\u5728\u6807\u51c6\u4f4d\u7f6e\u4e0a</p> <ul> <li>\\(\\vec{e}=\\vec{0}\\)</li> <li>\\(\\hat{g}=-Z\\)</li> <li>\\(\\hat{t}=Y\\)</li> </ul> <p>\u8fd9\u6837\u80fd\u6709\u5229\u4e8e\u64cd\u4f5c\u7b80\u5316\uff0c\u4f46\u4e5f\u4f1a\u5e26\u6765\u95ee\u9898</p>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#transform-camera-to-standard-pos","title":"transform camera to standard pos","text":"<ul> <li>\u57fa\u672c\u601d\u60f3<ol> <li>\u5c06\u76f8\u673a\u79fb\u52a8\u5230\u539f\u70b9</li> <li>\u5c06 g \u8f6c\u5230 -Z</li> <li>\u5c06 t \u8f6c\u5230 Y</li> </ol> </li> <li>\\(M_{\\text{view}}=R_{\\text{view}}\\cdot T_{\\text{view}}\\)<ul> <li>\\(T_{\\text{view}}= \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; -x_e \\\\ 0 &amp; 1 &amp; 0 &amp; -y_e \\\\ 0 &amp; 0 &amp; 1 &amp; -z_e \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix}\\)</li> <li>\\(R_{\\text{view}}\\)?</li> </ul> </li> </ul> <p>\u5982\u4f55\u6c42 \\(R_{\\text{view}}\\)</p> <p>\u4ece\u9006\u53d8\u6362\u51fa\u53d1\uff0c\u5148\u6c42\u51fa \\(Y\\to t, g\\to -Z, (g\\times t)\\to X\\)</p> \\[R_{\\text{view}}^{-1}= \\begin{bmatrix} x_{\\hat{g}\\times\\hat{t}} &amp; x_t &amp; x_{-g} &amp; 0 \\\\ y_{\\hat{g}\\times\\hat{t}} &amp; y_t &amp; y_{-g} &amp; 0 \\\\ z_{\\hat{g}\\times\\hat{t}} &amp; z_t &amp; z_{-g} &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix}\\] <p>\u7136\u540e\u8fdb\u884c\u8f6c\u7f6e\u5c31\u80fd\u5f97\u5230</p> \\[R_{\\text{view}}= \\begin{bmatrix} x_{\\hat{g}\\times\\hat{t}} &amp; y_{\\hat{g}\\times\\hat{t}} &amp; z_{\\hat{g}\\times\\hat{t}} &amp; 0 \\\\ x_t &amp; y_t &amp; z_t &amp; 0 \\\\ x_{-g} &amp; y_{-g} &amp; z_{-g} &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix}\\]"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#conc","title":"Conc.","text":"<ul> <li>\u7269\u4f53\u548c\u76f8\u673a\u8fdb\u884c\u76f8\u540c\u7684\u53d8\u6362</li> <li>\u76f8\u673a\u53d8\u6362\u5230\u6807\u51c6\u4f4d\u7f6e</li> <li>\u7136\u540e\u5c31\u80fd\u5904\u7406\u6295\u5f71\u4e86</li> </ul>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#projection-transformation","title":"Projection Transformation","text":"<ul> <li>3D to 2D</li> <li>Orthographic projection \u6b63\u4ea4\u6295\u5f71</li> <li>Perspective projection \u900f\u89c6\u6295\u5f71</li> </ul>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#orthographic-projection","title":"Orthographic Projection","text":""},{"location":"GAMES101/GAMES101%2003%20Transformation.html#simple-way","title":"simple way","text":"<ul> <li>\u76f8\u673a\u5728\u539f\u70b9\uff0c\u671d\u5411 -Z\uff0c\u5411\u4e0a Y</li> <li>\u6254\u6389 Z \u5750\u6807 \u5148\u4e0d\u8003\u8651\u7269\u4f53\u7684\u906e\u6321</li> <li>\u5c06\u6240\u6709\u7684\u5185\u5bb9\u79fb\u52a8\u548c\u7f29\u653e\u5230 \\([-1,1]^2\\)\uff0c\u65b9\u4fbf\u540e\u7eed\u8ba1\u7b97</li> </ul>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#in-general","title":"in general","text":"<ul> <li>\u5c06\u7a7a\u95f4\u4e2d\u4efb\u610f\u4e00\u4e2a\u7acb\u65b9\u4f53 (Cuboid) \\([l,r]\\times[b,t]\\times[f,n]\\) \u6620\u5c04\u5230\u6807\u51c6\u7acb\u65b9\u4f53 \\([-1,1]^3\\)\uff0c\u6ce8\u610f\u53f3\u624b\u7cfb\u4e2d Z \u8d8a\u5927\u8868\u793a\u8ddd\u79bb\u76f8\u673a\u8d8a\u8fd1<ul> <li>\u5148\u5e73\u79fb\uff0c\u4e2d\u5fc3\u70b9\u79fb\u5230\u539f\u70b9</li> <li>\u518d\u7f29\u653e</li> </ul> </li> </ul> \\[M_{ortho}= \\begin{bmatrix} \\frac{2}{r-l} &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; \\frac{2}{t-b} &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; \\frac{2}{n-f} &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix} \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; -\\frac{r+l}{2} \\\\ 0 &amp; 1 &amp; 0 &amp; -\\frac{t+b}{2} \\\\ 0 &amp; 0 &amp; 1 &amp; -\\frac{n+f}{2} \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix}\\] <p>Note</p> <p>OpenGL \u4e4b\u7c7b\u7684 API \u4f7f\u7528\u7684\u662f\u5de6\u624b\u7cfb\uff0cZ \u8d8a\u5927\u8868\u793a\u79bb\u76f8\u673a\u8d8a\u8fdc</p>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#perspective-projection","title":"Perspective Projection","text":"<p>\u5e73\u884c\u7ebf\u4e0d\u518d\u5e73\u884c\u4e86 \u4f8b\u5982\u94c1\u8f68\u76f8\u4ea4</p> <p></p> <ul> <li>\u5c06 Frustum \u538b\u6210\u4e00\u4e2a Cuboid</li> <li>\u7136\u540e\u8fdb\u884c\u6b63\u4ea4\u6295\u5f71</li> </ul>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#squish","title":"squish","text":"<ul> <li>\u89c4\u5b9a n \u5e73\u9762\u4e0d\u53d8</li> <li>\u89c4\u5b9a f \u5e73\u9762 Z \u4e0d\u53d8</li> <li>\u89c4\u5b9a f \u5e73\u9762\u4e2d\u5fc3\u70b9\u4e0d\u53d8</li> </ul>"},{"location":"GAMES101/GAMES101%2003%20Transformation.html#in-homogeneous-coordinates","title":"in homogeneous coordinates","text":"\\[\\begin{pmatrix} x \\\\ y \\\\ z \\\\ 1 \\end{pmatrix}\\Rightarrow \\begin{pmatrix} nx/z \\\\ ny/z \\\\ \\mathrm{unknown} \\\\ 1 \\end{pmatrix}\\overset{\\text{mult. by z}}{\\operatorname*{==}} \\begin{pmatrix} nx \\\\ ny \\\\ \\text{still unknown} \\\\ z \\end{pmatrix}\\] <p>\u6240\u4ee5\u6839\u636e \\(M_{persp\\to ortho}^{(4\\times4)} \\begin{pmatrix} x \\\\ y \\\\ z \\\\ 1 \\end{pmatrix}= \\begin{pmatrix} nx \\\\ ny \\\\ \\mathrm{unknown} \\\\ z \\end{pmatrix}\\)\uff0c\u5df2\u7ecf\u53ef\u4ee5\u63a8\u5bfc\u51fa\u90e8\u5206\u77e9\u9635\uff1a</p> \\[M_{persp\\to ortho}= \\begin{pmatrix} n &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; n &amp; 0 &amp; 0 \\\\ ? &amp; ? &amp; ? &amp; ? \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\end{pmatrix}\\] <p>\u7531\u4e8e n \u5e73\u9762\u4e0a\u7684\u70b9\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff1a</p> \\[\\begin{pmatrix} x \\\\ y \\\\ n \\\\ 1 \\end{pmatrix}\\Rightarrow \\begin{pmatrix} x \\\\ y \\\\ n \\\\ 1 \\end{pmatrix}== \\begin{pmatrix} nx \\\\ ny \\\\ n^2 \\\\ n \\end{pmatrix}\\] <p>\u7b2c\u4e09\u884c\u7ed3\u679c\u4e0e \\(x,y\\) \u90fd\u6ca1\u6709\u5173\u7cfb\uff0c\u6240\u4ee5\u53ef\u80fd\u662f \\((0,0,A,B)\\)\uff0c\u90a3\u4e48\uff1a</p> \\[ \\begin{pmatrix} 0 &amp; 0&amp;A&amp;B \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\\\ n \\\\ 1 \\end{pmatrix}=An+B=n^2 \\] <p>\u540c\u7406\uff0cf \u5e73\u9762\u4e0a\u7684\u70b9 Z \u4e5f\u4e0d\u53d8\uff0c\u6709 \\(Af+B=f^2\\)\uff0c\u8054\u7acb\u5f97\u5230 \\(\\begin{cases}A=n+f \\\\ B=-nf\\end{cases}\\)</p> <p>\u6240\u4ee5\uff1a</p> \\[M_{persp\\to ortho}= \\begin{pmatrix} n &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; n &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; n+f &amp; -nf \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\end{pmatrix}\\] <p>\u4e14 \\(M_{persp}=M_{ortho}M_{persp\\to ortho}\\)</p> <p>\u7ecf\u8fc7\u53d8\u6362\u540e\uff0c\u4e2d\u95f4\u7684\u70b9\u7684 Z \u503c\u5982\u4f55\u53d8\u5316\uff1f</p> <p>\u53d8\u6362\u540e\uff0c\\(z'=\\frac{z(n+f)-nf}{z}=n+f-\\frac{nf}{z}&gt;z\\)\uff0c\u6240\u4ee5\u662f\u53d8\u8fd1\u4e86</p>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html","title":"04 Resterization","text":""},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#perspective-projection-cont","title":"Perspective Projection Cont.","text":""},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#near-plane","title":"near plane","text":"<ul> <li>width, height, aspect ratio</li> <li>field of view: vertical (fovY), horizontal (fovX)</li> <li>\u901a\u5e38\uff0c\u53d6\u539f\u70b9\u5bf9\u79f0</li> </ul> <ul> <li>\\(\\tan\\frac{fovY}{2}=\\frac{t}{|n|}\\)</li> <li>\\(\\text{aspect}=\\frac{r}{t}\\)</li> </ul>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#canonical-cube-to-screen","title":"Canonical Cube to Screen","text":""},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#screen","title":"screen","text":"<ul> <li>an array of pixels</li> <li>resolution</li> <li>a typical raster display</li> </ul>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#pixel","title":"pixel","text":"<ul> <li>r g b</li> <li>\u5b9a\u4e49\u5de6\u4e0b\u89d2\u662f\u539f\u70b9\uff0c\u5411\u53f3\u662f X\uff0c\u5411\u4e0a\u662f Y</li> <li>pixel \\((x,y)\\) is centered at \\((x+0.5,y+0.5)\\)</li> </ul>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#projection","title":"projection","text":"<p>xy coordinates: \\([-1,1]^2\\) to \\([0,\\text{width}]\\times[0,\\text{height}]\\), viewpoint transformation</p> \\[M_{viewport}= \\begin{pmatrix} \\frac{width}{2} &amp; 0 &amp; 0 &amp; \\frac{width}{2} \\\\ 0 &amp; \\frac{height}{2} &amp; 0 &amp; \\frac{height}{2} \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix}\\]"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#rasterization","title":"Rasterization","text":""},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#raster-displays","title":"raster displays","text":"<ul> <li>\u9634\u6781\u5c04\u7ebf\u7ba1\uff1a\u9010\u884c\u626b\u63cf\u3001\u9694\u884c\u626b\u63cf</li> <li>Frame Buffer: pixel arrays in memory</li> </ul>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#a-simple-approach-sampling","title":"a simple approach: sampling","text":"<p>\u4f7f\u7528\u50cf\u7d20\u4e2d\u5fc3\u5bf9\u6a21\u578b\u8fdb\u884c\u91c7\u6837\uff0c\u5224\u65ad\u4e00\u4e2a\u50cf\u7d20\u7684\u4e2d\u5fc3\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5185\u90e8</p> sampling<pre><code>for (int x = 0; x &lt; xmax; ++x)\n    for (int y = 0; y &lt; ymax; ++y)\n        image[x][y] = inside(tri, x + 0.5, y + 0.5);\n</code></pre>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#\u5b9e\u73b0-inside","title":"\u5b9e\u73b0 <code>inside()</code>","text":"<ul> <li>\u8fdb\u884c\u5411\u91cf\u53c9\u79ef\uff0c\u4ece\u5224\u65ad \\(\\vec{P_{0}P}\\) \u548c \\(\\vec{P_{0}P_{1}}\\) \u7684\u4f4d\u7f6e\u5173\u7cfb\u5f00\u59cb\uff0c\u5728\u4e09\u6761\u8fb9\u7684\u540c\u4fa7\u5219\u5728\u4e09\u89d2\u5f62\u5185\u90e8</li> <li>\u521a\u597d\u5728\u4e09\u89d2\u5f62\u8fb9\u4e0a\u65f6\uff0c\u53ef\u4ee5\u89c4\u5b9a\u5176\u5c5e\u4e8e\u5de6\u8fb9\u6216\u4e0a\u8fb9</li> </ul>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#bounding-box","title":"bounding box","text":"<ul> <li>\u53ea\u6709 bounding box \u4e2d\u7684\u50cf\u7d20\u70b9\u624d\u9700\u8981\u8003\u8651</li> </ul> <p>Question</p> <p>\u91c7\u6837\u7cbe\u5ea6\u5c0f\u7684\u65f6\u5019\uff0c\u5bb9\u6613\u4ea7\u751f\u952f\u9f7f</p>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#antialiasing","title":"Antialiasing","text":"<p>recap: \u952f\u9f7f\uff0c\u8d70\u6837</p>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#intro","title":"intro","text":"<ul> <li>sampling artifacts<ul> <li>jaggies - sampling in space</li> <li>moire patterns - undersampling images</li> <li>false motion - sampling in time</li> </ul> </li> <li> \u4fe1\u53f7\u7684\u53d8\u5316\u592a\u5feb\uff0c\u8ddf\u4e0d\u4e0a\u91c7\u6837\u901f\u5ea6 </li> </ul>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#idea-blurringpre-filtering-before-sampling","title":"idea: blurring(pre-filtering) before sampling","text":"<p>Warning</p> <p>\u4e00\u5b9a\u662f filter then sample\uff0c\u4e0d\u80fd\u7528 sample then filter\uff0c\u5426\u5219\u6548\u679c\u4f1a\u66f4\u5dee</p>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#frequncy-domain-\u9891\u57df","title":"Frequncy Domain \u9891\u57df","text":""},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#intro_1","title":"intro","text":"<ul> <li>\\(f=\\frac{1}{T}\\)</li> <li>Fourier Transform: spatial domain (\u65f6\u57df) -&gt; frequency domain (\u9891\u57df)</li> <li>\u9891\u7387\u9ad8\uff0c\u9700\u8981\u7684\u91c7\u6837\u9891\u7387\u4e5f\u66f4\u9ad8 </li> </ul>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#aliases","title":"Aliases","text":"<p>\u9ad8\u9891\u4fe1\u53f7\u7ecf\u8fc7 undersampling \u5f97\u5230\u7684\u7ed3\u679c\u5931\u771f\uff08\u548c\u67d0\u79cd\u4f4e\u9891\u4fe1\u53f7\u4ea7\u751f\u76f8\u540c\u7684\u7ed3\u679c\uff09</p>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#filtering","title":"Filtering","text":""},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#about-highlow-freq","title":"about high/low freq.","text":"<p>= Getting rid of certain freq. contents \u53bb\u6389\u4e00\u7cfb\u5217\u9891\u7387</p> <p></p> <p>\u53f3\u4fa7\u662f\u9891\u57df\u53ef\u89c6\u5316</p> <ul> <li>\u4e2d\u95f4\u4e3a\u4f4e\u9891\uff0c\u8bf4\u660e\u4f4e\u9891\u4fe1\u606f\u6bd4\u8f83\u4e30\u5bcc</li> <li>\u53ef\u4ee5\u5ffd\u7565\u6c34\u5e73\u548c\u7ad6\u76f4\u7684\u4e24\u6761\u7ebf</li> </ul> <p></p> <p>Note</p> <ul> <li>\u9ad8\u9891\u4fe1\u606f\u5bf9\u5e94\u56fe\u50cf\u7684\u8fb9\u754c</li> <li>\u4f4e\u9891\u4fe1\u606f\u5bf9\u5e94\u56fe\u50cf\u5185\u90e8\u5e73\u6ed1\u7684\u90e8\u5206</li> </ul>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#with-convolution","title":"with convolution","text":"<p>= Average = Convolution</p> <ul> <li>Convolution in the spactial domain is equal to multiplication in the freq. domain, and vice versa<ul> <li>option1: filter by convolution in spatial doamin</li> <li>option2:<ul> <li>transform to freq. domain (Fourier)</li> <li>multiply by Fourier transform of convolution kernel</li> <li>transform back to spatial domain (inverse Fourier)</li> </ul> </li> </ul> </li> </ul> <p></p> <p></p> <p>Note</p> <p>\u5377\u79ef\u6838\u8d8a\u5927\uff0c\u5f97\u5230\u7684\u56fe\u50cf\u8d8a\u5e73\u6ed1\uff0c\u9891\u57df\u8d8a\u4f4e</p>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#sampling","title":"Sampling","text":"<p>= repeating freq. contents\uff0c\u5c31\u662f\u5728\u590d\u5236</p> <p></p> <p>Note</p> <ul> <li>\u5de6\u56fe\u4e2d\u7684\u7bad\u5934\u662f\u51b2\u51fb\u51fd\u6570\uff0c\u5bf9\u5e94\u91c7\u6837\u70b9</li> <li>\u9891\u57df\u4e0a\u7684\u6765\u770b\u5c31\u662f\u5377\u79ef\uff0c\u5c06\u539f\u6709\u7684\u9891\u8c31\u590d\u5236\u4e86\u5f88\u591a\u4efd</li> <li>\u65f6\u57df\u4e0a\u7684\u4e58\u79ef\u5bf9\u5e94\u9891\u57df\u4e0a\u7684\u5377\u79ef</li> </ul> <p></p> <p>Note</p> <ul> <li>\u91c7\u6837\u8d8a\u7a00\u758f\uff0c\u9891\u8c31\u8d8a\u5bc6\u96c6\uff0c\u4f1a\u4ea7\u751f\u6df7\u53e0\uff0c\u5bfc\u81f4 aliasing</li> </ul>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#antialiasing_1","title":"Antialiasing","text":"<ul> <li>option1: \u63d0\u9ad8\u91c7\u6837\u7387 costly</li> <li>option2: antialiasing</li> </ul> <p>Note</p> <p>\u51cf\u5c11\u9ad8\u9891\u4fe1\u53f7\uff0c\u5728\u91c7\u6837\u7387\u4f4e\u65f6\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u6df7\u53e0</p>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#solution-computing-average-pixel-value","title":"solution: computing average pixel value","text":"<ul> <li>convolve: \u6bcf\u4e2a\u50cf\u7d20\u53d6\u5e73\u5747\u503c</li> <li>sampling: \u5bf9\u6bcf\u4e2a\u50cf\u7d20\u4e2d\u5fc3\u8fdb\u884c\u91c7\u6837</li> </ul>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#practice-by-supersampling-msaa","title":"practice: by supersampling (MSAA)","text":"<ul> <li>\u6bcf\u4e2a\u50cf\u7d20\u5185\u90e8\u9009\u591a\u4e2a\u91c7\u6837\u70b9\uff0c\u5e76\u53d6\u5e73\u5747</li> </ul>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#antialiasing-today","title":"Antialiasing today","text":"<ul> <li>\u4f7f\u7528\u4e0d\u89c4\u5219\u91c7\u6837\u70b9\u5206\u5e03\u6765\u51cf\u5c11\u8ba1\u7b97\u91cf</li> <li>\u5176\u4ed6\u7684\u6297\u952f\u9f7f\u65b9\u6cd5<ul> <li>FXAA(Fast Approximate AA) \u5c06\u6709\u952f\u9f7f\u8fb9\u66ff\u6362\u4e3a\u65e0\u952f\u9f7f\u8fb9</li> <li>TAA(Temporal AA) \u590d\u7528\u4e0a\u4e00\u5e27\u7684\u7ed3\u679c</li> </ul> </li> <li>\u8d85\u5206\u8fa8\u7387 super resolution<ul> <li>resolution low to high\uff0c\u4f1a\u5bfc\u81f4\u952f\u9f7f</li> <li>DLSS(Deep Learning Super Sampling)</li> </ul> </li> </ul>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#visibilityz-buffering","title":"Visibility/Z-Buffering","text":""},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#painters-algorithm","title":"Painter's Algorithm","text":"<ul> <li>\u5148\u753b\u51fa\u8fdc\u7684\u7269\u4f53\uff0c\u518d\u753b\u51fa\u8fd1\u7684\u7269\u4f53</li> <li> \u4e0d\u9700\u8981\u8003\u8651\u906e\u6321\u5173\u7cfb\uff0c\\(O(n\\log n)\\) </li> <li> \u53ef\u80fd\u65e0\u6cd5\u8fdb\u884c\u6392\u5e8f\u4e92\u76f8\u906e\u6321 </li> </ul>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#z-buffer-\u6df1\u5ea6\u7f13\u51b2","title":"Z-Buffer \u6df1\u5ea6\u7f13\u51b2","text":"<p>\u4fdd\u5b58\u4e00\u4e2a\u50cf\u7d20\u5f53\u524d\u6700\u6d45\u7684\u6df1\u5ea6</p> <p>For simplicity we suppose</p> <ul> <li>z is always positive</li> <li>smaller z -&gt; closer</li> </ul> z-buffering<pre><code>for (each triangle T)\n    for (each sample (x, y, z) in T)\n        if (z &lt; z_buffer(x, y))\n            frame_buffer(x, y) = rgb;\n            z_buffer = z;\n</code></pre> <ul> <li>\\(O(n)\\)</li> <li>\u4e0d\u540c\u987a\u5e8f\u7ed8\u5236\u7684\u7ed3\u679c\u662f\u4e00\u6837\u7684</li> <li>\u5728 GPU \u4e2d\u786c\u4ef6\u5b9e\u73b0</li> <li> \u900f\u660e\u7269\u4f53\u4e0d\u9002\u7528 </li> </ul>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#shadows","title":"Shadows","text":""},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#shadow-mapping","title":"Shadow Mapping","text":"<p>\u5982\u679c\u89c6\u91ce\u4e2d\u7684\u4e00\u4e2a\u70b9\u80fd\u88ab\u5149\u6e90\u770b\u5230\uff0c\u90a3\u4e48\u5c31\u6709\u5149\u7167</p> <p></p> <p>method</p> <ol> <li>\u5149\u6e90\u89c6\u89d2\u4e0b\u8bb0\u5f55\u6df1\u5ea6\u56fe</li> <li>\u5bf9\u4e8e\u76f8\u673a\u770b\u5230\u7684\u4e00\u4e2a\u50cf\u7d20\u70b9\uff0c\u6620\u5c04\u5230\u5149\u6e90\u7684\u6df1\u5ea6\u56fe\u4e0a\uff0c\u5982\u679c\u50cf\u7d20\u5230\u5149\u6e90\u7684\u8ddd\u79bb\u548c\u6df1\u5ea6\u56fe\u7684\u6df1\u5ea6\u4e00\u81f4\uff0c\u90a3\u4e48\u88ab\u7167\u4eae</li> </ol> <p>problems</p> <ul> <li>\u6d6e\u70b9\u6570\u76f8\u7b49\u7684\u5224\u65ad\u6709\u7cbe\u5ea6\u95ee\u9898\uff0c\u9700\u8981\u5141\u8bb8\u4e00\u4e2a\u5c0f\u7684 bias\uff0c\u4f46\u4e5f\u4e0d\u80fd\u4ece\u6839\u672c\u4e0a\u89e3\u51b3\u95ee\u9898</li> <li>\u5149\u6e90\u6df1\u5ea6\u56fe\u7684\u5206\u8fa8\u7387\u4e0d\u80fd\u592a\u5c0f\uff0c\u5426\u5219\u4f1a\u5f62\u6210\u952f\u9f7f</li> <li>\u5f00\u9500\u5f88\u5927\uff0c\u9700\u8981\u6e32\u67d3\u4e24\u904d</li> </ul>"},{"location":"GAMES101/GAMES101%2004%20Rasterization.html#hard-shadow-vs-soft-shadow","title":"Hard Shadow v.s. Soft Shadow","text":"<p>\u56e0\u4e3a\u5149\u6e90\u6709\u4e00\u5b9a\u5927\u5c0f</p>"},{"location":"GAMES101/GAMES101%2005%20Shading.html","title":"05 Shading","text":"<p>intro</p> <p>Shading, noun, The darkening or coloring of an illustration or diagram with parallel lines or a block of color. In this course, the process of applying a material to an object.</p>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#a-simple-shading-model-blinn-phong-reflectance-model","title":"A Simple Shading Model (Blinn-Phong Reflectance Model)","text":"<ul> <li>specular highlights \u9ad8\u5149\uff08\u955c\u9762\u53cd\u5c04\uff09</li> <li>diffuse reflection \u989c\u8272\u6e10\u53d8\uff08\u6f2b\u53cd\u5c04\uff09</li> <li>ambient lighting \u95f4\u63a5\u5149\u7167</li> </ul>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#the-model","title":"the model","text":"<ul> <li>viewer direction, \\(\\hat{v}\\)</li> <li>surface normal, \\(\\hat{n}\\)</li> <li>light direction, \\(\\hat{l}\\)</li> <li>surface parameters: color, shiness, ...</li> </ul> <p>shading is local</p> <p>shading \u5e76\u6ca1\u6709\u8003\u8651\u5149\u7ebf\u7684\u906e\u6321\u5173\u7cfb\uff0c\u4e0d\u4f1a\u753b\u51fa\u9634\u5f71 shading \\(\\neq\\) shadow</p>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#diffuse-refelction","title":"Diffuse Refelction","text":"<p>\u5149\u7ebf\u5411\u7740\u6240\u6709\u65b9\u5411\u5747\u5300\u53cd\u5c04</p> <p></p> <p></p> <p>Note</p> <ul> <li>\u5e73\u884c\u5149\u60c5\u666f\u4e0b\uff0c\u5355\u4f4d\u9762\u79ef\u63a5\u6536\u5149\u5f3a\u4e0e \\(\\cos \\theta=\\hat{l}\\cdot \\hat{n}\\) \u6210\u6b63\u6bd4</li> <li>\u70b9\u5149\u6e90\u60c5\u5883\u4e0b\uff0c\u5355\u4f4d\u9762\u79ef\u63a5\u6536\u5149\u5f3a\u4e0e \\(r^2\\) \u6210\u53cd\u6bd4</li> </ul> <p>Lambertian (Diffuse) Shading:</p> \\[L_{d}=k_{d}(I/r^2) \\max(0,\\hat{n}\\cdot \\hat{l})\\] <ul> <li>\\(k_{d}\\) diffuse coeffficient\uff0c\u4e0e\u8868\u9762\u6027\u8d28\u3001\u6ce2\u957f\u6709\u5173</li> <li>\\(r\\) \u662f\u5149\u6e90\u4e0e shading point \u7684\u8ddd\u79bb</li> </ul>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#specular-term","title":"Specular Term","text":"<p>birght near mirror reflection direction</p> <p></p> <p>bisector vector \\(h\\):</p> \\[\\mathbf{h}=\\text{bisector}(\\mathbf{v},\\mathbf{l})=\\frac{\\mathbf{v}+\\mathbf{l}}{||\\mathbf{v}+\\mathbf{l}||}\\] \\[L_{s}=k_{s}(I/r^2)\\max(0,\\mathbf{n}\\cdot\\mathbf{h})^p\\] <p>\u5176\u4e2d\u6307\u6570 \\(p\\) \u6709\u5229\u4e8e\u63a7\u5236\u955c\u9762\u53cd\u5c04\u8303\u56f4\uff0c\u4e00\u822c\u53d6 100~200</p> <p></p>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#ambient-term","title":"Ambient Term","text":"<p>\u5047\u8bbe\u73af\u5883\u5149\u5f3a\u4e3a\u5b9a\u503c \\(I_{a}\\)</p> <p></p> \\[L_{a}=k_{a}I_{a}\\]"},{"location":"GAMES101/GAMES101%2005%20Shading.html#conclusion","title":"Conclusion","text":"\\[\\begin{aligned} \\mathrm{L} &amp; =L_a+L_d+L_s \\\\  &amp; =k_aI_a+k_d(I/r^2)\\max(0,\\mathbf{n}\\cdot\\mathbf{l})+k_s(I/r^2)\\max(0,\\mathbf{n}\\cdot\\mathbf{h})^p \\end{aligned}\\] <p>Note</p> <p>\u5e76\u4e0d\u8003\u8651 viewer \u8ddd\u79bb\u5bf9\u4eae\u5ea6\u7684\u5f71\u54cd</p>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#shading-frequencies","title":"Shading Frequencies","text":"<p>\u4e0a\u56fe\u4e2d\u5206\u522b\u662f\u5e73\u9762\u7740\u8272(Flat shading)\u3001\u9876\u70b9\u7740\u8272\u518d\u63d2\u503c(Gouraud shading)\u548c\u50cf\u7d20\u7740\u8272(Phong shading)</p> <p></p> <p>Note</p> <p>\u6a21\u578b\u9762\u6570\u8db3\u591f\u591a\u65f6\uff0cFlat \u4e5f\u53ef\u80fd\u548c Phong \u4e00\u6837\u597d</p>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#per-vertex-normal-vectors","title":"per-vertex normal vectors","text":"<p>Note</p> <p>\u53ef\u4ee5\u5e73\u5747\uff0c\u4e5f\u53ef\u4ee5\u52a0\u6743\u5e73\u5747</p>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#per-vertex-normal-vectors_1","title":"per-vertex normal vectors","text":"<p>Note</p> <p>\u4f7f\u7528\u91cd\u5fc3\u5750\u6807\u63d2\u503c\u65b9\u6cd5</p>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#graphics-real-time-rendering-pipeline","title":"Graphics (Real-time Rendering) Pipeline","text":""},{"location":"GAMES101/GAMES101%2005%20Shading.html#shader-programs","title":"Shader Programs","text":"opengl shader example<pre><code>uniform sampler2D myTexture;                      // program param\nuniform vec3 lightDir;                            // program param\nvarying vec2 uv;                                  // per fragment value (interp. by rasterizer)\nvarying vec3 norm;                                // per fragment value (interp. by rasterizer)\n\nvoid diffuseShader() {\n    vec3 kd;\n    kd = texture2d(myTexture, uv);                // material color from texture\n    kd *= clamp(dot(-lightDir, norm), 0.0, 1.0);  // Lambertian shading model\n    gl_FragColor = vec4(kd, 1.0);                 // output fragment color\n}\n</code></pre> <p>Shadertoy BETA</p>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#goal-highly-complex-3d-scenes-in-realtime","title":"Goal: highly complex 3D scenes in realtime","text":""},{"location":"GAMES101/GAMES101%2005%20Shading.html#texture-mapping","title":"Texture Mapping","text":"<p>\u5728\u7269\u4f53\u4e0d\u540c\u4f4d\u7f6e\u5b9a\u4e49\u4e0d\u540c\u7684\u5c5e\u6027</p> <p></p> <p>Note</p> <ul> <li>\u5236\u4f5c\u7eb9\u7406\u65f6\uff0c\u9700\u8981\u5b9e\u73b0\u4e09\u7ef4\u6a21\u578b\u5c3d\u53ef\u80fd\u7b80\u5355\u5730\u5c55\u5f00\u6210\u5e73\u9762\u7eb9\u7406\uff0c\u626d\u66f2\u8d8a\u5c0f\u8d8a\u597d</li> <li>\u6e32\u67d3\u65f6\uff0c\u9700\u8981\u5b9e\u73b0\u7eb9\u7406\u4e09\u89d2\u5f62\u5230\u6a21\u578b\u4e09\u89d2\u5f62\u7684\u6620\u5c04</li> </ul>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#texture-coordinates","title":"Texture Coordinates","text":"<p>Note</p> <ul> <li>\u7ea6\u5b9a \\(u,v\\in[0,1]\\)</li> <li>\u6a21\u578b\u4e0a\u6bcf\u4e2a\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u90fd\u5728\u7eb9\u7406\u56fe\u4e0a\u6709\u4e00\u4e2a \\((u,v)\\) \u6620\u5c04</li> <li>\u4e09\u89d2\u5f62\u5185\u90e8\u7684\u70b9\u7528\u63d2\u503c\u8ba1\u7b97</li> </ul>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#simple-texture-mapping-diffuse-color","title":"Simple Texture Mapping: Diffuse Color","text":"<pre><code>for each rasterized screen sample(x, y):\n    (u, v) = evaluate texture coordinate at (x, y)\n    texcolor = texture.sample(u, v);\n    set sample's color to texcolor;\n</code></pre>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#what-if-the-texture-is-too-small","title":"what if the texture is too small?","text":"<ul> <li>texel \u7eb9\u7406\u5143\u7d20\uff0c\u7eb9\u7d20</li> <li>\u4e00\u4e2a pixel \u4f1a\u6620\u5c04\u5230\u6587\u7406\u4e0a\u7684\u4e00\u4e2a\u5750\u6807\uff0c\u4e0d\u4e00\u5b9a\u80fd\u521a\u597d\u5230\u4e00\u4e2a texel\uff0c\u5982\u679c\u76f4\u63a5\u56db\u820d\u4e94\u5165\u4f1a\u5bfc\u81f4\u5206\u8fa8\u7387\u4e0d\u9ad8<ul> <li>\u9700\u8981\u8fdb\u884c\u63d2\u503c</li> </ul> </li> </ul>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#bilinear-interpolation","title":"Bilinear Interpolation","text":""},{"location":"GAMES101/GAMES101%2005%20Shading.html#bicubic-interpolation","title":"Bicubic Interpolation","text":"<ul> <li>\u53d6\u4e86\u5468\u56f4\u5341\u516d\u4e2a</li> <li>\u8fdb\u884c\u4e09\u6b21\u63d2\u503c</li> </ul>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#what-if-the-texture-is-too-big","title":"what if the texture is too big?","text":"<p>\u8054\u7cfb\u524d\u9762\u7684\u8d70\u6837\u95ee\u9898 GAMES101 04 Rasterization#Antialiasing</p> <p></p> <p>Note</p> <p>\u5728\u8fdc\u5904\uff0c\u4e00\u4e2a\u50cf\u7d20\u8986\u76d6\u7684\u7eb9\u7406\u533a\u57df\u5927\u5c0f\u975e\u5e38\u5927\uff0c\u4f46\u4e5f\u662f\u7528\u50cf\u7d20\u91cd\u5fc3\u91c7\u6837\uff0c\u5bfc\u81f4\u5931\u771f</p>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#supersampling","title":"supersampling?","text":"<ul> <li>\u4e00\u4e2a\u50cf\u7d20\u5185\u6709\u9ad8\u9891\u7684\u4fe1\u606f\uff0c\u4e8e\u662f\u4f7f\u7528\u8d85\u91c7\u6837\u7684\u65b9\u6cd5\uff0c\u4e00\u5b9a\u80fd\u89e3\u51b3</li> <li> \u4f46\u662f\u4f1a\u5bfc\u81f4\u6548\u7387\u5f88\u4f4e </li> </ul>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#mipmap","title":"Mipmap","text":"<p>intro</p> <p>range query: \u7ed9\u5b9a\u4e00\u4e2a\u533a\u57df\uff0c\u5feb\u901f\u5f97\u5230\u533a\u57df\u7684\u5e73\u5747\u503c Mipmap: allowing (fast, approx., square) range query</p> <p></p> <p></p> <ul> <li>\\(O(\\log n)\\) levels</li> <li>\\(O(\\frac{4}{3}n)\\) space</li> </ul>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#step-1-pixel-to-texels","title":"step 1: pixel to texels","text":"<ol> <li>\u5bf9\u4e8e\u9700\u8981\u6e32\u67d3\u7684\u50cf\u7d20\uff0c\u5c06\u5176\u548c\u5176\u56db\u4e2a\u90bb\u5c45\u90fd\u6620\u5c04\u5230\u7eb9\u7406\u56fe\u4e0a\uff0c\u5f97\u5230\u5bf9\u5e94\u5750\u6807</li> <li>\u627e\u5230\u7eb9\u7406\u4e0a\u8ddd\u79bb\u5230\u6700\u8fdc\u90bb\u5c45\u7684\u8ddd\u79bb \\(L\\)</li> <li>\u5c06 texel \u533a\u57df\u8fd1\u4f3c\u4e3a\u8fb9\u957f\u4e3a \\(L\\) \u7684\u6b63\u65b9\u5f62\u533a\u57df</li> </ol>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#step-2-use-mipmap","title":"step 2: use mipmap","text":"<ol> <li>\u5728 \\(D=\\log_{2}L\\) \u5c42\uff0c\u8fd9\u4e2a\u6b63\u65b9\u5f62\u533a\u57df\u7684\u5927\u5c0f\u6b63\u597d\u662f\u4e00\u4e2a\u50cf\u7d20\uff0c\u5728\u8fd9\u4e00\u5c42\u8fdb\u884c\u67e5\u627e</li> <li>\u8fdb\u884c\u53cc\u7ebf\u6027\u63d2\u503c</li> </ol>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#step-3-trilinear-interpolation","title":"step 3: trilinear interpolation","text":"<p>Note</p> <ul> <li>\u4e0a\u56fe\u4e2d\uff0c\u8ddd\u79bb\u8fd1\u7684\u4f4d\u7f6e \\(D\\) \u5f88\u5927\uff0c\u9700\u8981\u5728\u5f88\u6df1\u7684\u5c42\u53bb\u67e5\u8be2</li> <li>\u5b58\u5728\u8fb9\u7f18\uff0c\u4f1a\u5bfc\u81f4\u4e0d\u8fde\u7eed</li> <li>\u9700\u8981\u8ba9 \\(D\\) \u662f\u5c0f\u6570\u65f6\u7684\u53d8\u5316\u8fde\u7eed</li> </ul> <p></p> <p>\u5728\u5c42\u95f4\u8fdb\u884c\u7b2c\u4e09\u6b21\u63d2\u503c</p>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#anisotropic-filtering","title":"Anisotropic Filtering","text":"<p>\u5404\u5411\u5f02\u6027\u8fc7\u6ee4</p> <p>mipmap limitations</p> <p>overblur\uff0c\u8fdc\u5904\u7684\u7ec6\u8282\u90fd\u7cca\u6389\u4e86\uff0c\u539f\u56e0\u662f\u8fd1\u4f3c\u6210\u6b63\u65b9\u5f62\u5dee\u7684\u592a\u591a\u4e86\uff0c\u4f8b\u5982\u5f53 texels \u662f\u4e00\u4e2a\u5f88\u957f\u7684\u77e9\u5f62\u65f6</p> <p></p> <p>Note</p> <ul> <li>mipmap \u53ea\u662f\u9884\u8ba1\u7b97\u4e86\u5bf9\u89d2\u7ebf\u4e0a\u7684</li> <li>\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u9884\u8ba1\u7b97\u4e86\u4e0d\u540c\u6bd4\u4f8b\u77e9\u5f62\u7684\u5c0f\u56fe\uff0c\\(O(4n)\\) space</li> </ul>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#ewa-filtering","title":"EWA Filtering","text":"<p>Note</p> <p>\u540c\u7406\uff0c\u5404\u5411\u5f02\u6027\u8fc7\u6ee4\u65e0\u6cd5\u5904\u7406\u77e9\u5f62\u659c\u7740\u7684\u95ee\u9898</p> <ul> <li>use multiple lookups</li> <li>weighted average</li> <li>mipmap hierarchy still helps</li> <li>can handle irregular footprints</li> </ul>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#application-of-textures","title":"Application of Textures","text":"<p>\u7eb9\u7406\u4e0d\u4e00\u5b9a\u9700\u8981\u662f\u56fe\u50cf\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u5c5e\u6027</p>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#environment-map","title":"Environment map","text":"<ul> <li>\u53ef\u4ee5\u7528\u4e00\u4e2a\u7403\u6765\u8bb0\u5f55\u6574\u4e2a\u73af\u5883\u5149<ul> <li> \u5c55\u5f00\u4e4b\u540e\u4f1a\u6709\u53d8\u5f62\u7c7b\u6bd4\u4e16\u754c\u5730\u56fe </li> </ul> </li> <li>\u7528\u5916\u63a5\u7acb\u65b9\u4f53\u6765\u8bb0\u5f55\u73af\u5883\u5149\uff0c\u53d8\u5f62\u6bd4\u8f83\u5c0f</li> </ul>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#bump-mapping","title":"Bump mapping","text":"<ul> <li>\u51f9\u51f8\u8d34\u56fe\uff0c\u5728\u6a21\u578b\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\u6539\u53d8\u6cd5\u5411\u91cf</li> </ul>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#displacement-mapping","title":"Displacement mapping","text":"<p>Bump mapping limitations</p> <ul> <li>\u8fb9\u7f18\u770b\u4e0d\u5230\u8d77\u4f0f</li> <li>\u51f9\u51f8\u90e8\u5206\u65e0\u6cd5\u5728\u7269\u4f53\u672c\u8eab\u4e0a\u6295\u4e0b\u9634\u5f71</li> </ul> <p></p> <ul> <li> \u9700\u8981\u6a21\u578b\u7684\u4e09\u89d2\u5f62\u8981\u8db3\u591f\u7ec6\uff0c\u91c7\u6837\u7387\u9ad8\u4e8e\u8d34\u56fe </li> <li>direct x: \u5148\u6709\u57fa\u672c\u7684\u6a21\u578b\uff0c\u6309\u7167\u9700\u8981\u589e\u52a0\u4e09\u89d2\u5f62\u4e2a\u6570</li> </ul>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#3d-procedural-noise-solid-modeling","title":"3D Procedural Noise + Solid Modeling","text":"<ul> <li>\u67cf\u6797\u566a\u58f0</li> </ul>"},{"location":"GAMES101/GAMES101%2005%20Shading.html#precomputed-shading","title":"Precomputed shading","text":""},{"location":"GAMES101/GAMES101%2005%20Shading.html#3d-textures","title":"3D Textures","text":""},{"location":"GAMES101/GAMES101%2005%20Shading.html#interpolation-across-triangles-barycentric-coordinates-\u91cd\u5fc3\u5750\u6807","title":"Interpolation Across Triangles: Barycentric Coordinates \u91cd\u5fc3\u5750\u6807","text":""},{"location":"GAMES101/GAMES101%2005%20Shading.html#barycentric-coordinates","title":"Barycentric Coordinates","text":"\\[\\begin{cases} (x,y)&amp;=\\alpha A+\\beta B+\\gamma C \\\\ \\alpha+\\beta+\\gamma&amp;=1 \\end{cases} \\implies (\\alpha,\\beta,\\gamma) \\] <p>\u5982\u679c \\(\\alpha,\\beta,\\gamma\\geq0\\)\uff0c\u90a3\u4e48\u5728\u4e09\u89d2\u5f62\u5185\u3002</p> <p>\u53ef\u4ee5\u901a\u8fc7\u9762\u79ef\u7684\u6bd4\u4f8b\u5173\u7cfb\u6c42\u89e3\u91cd\u5fc3\u5750\u6807\uff1a</p> \\[\\begin{align} \\alpha &amp;=\\frac{A_A}{A_A+A_B+A_C} \\\\ \\beta &amp;=\\frac{A_B}{A_A+A_B+A_C} \\\\ \\gamma &amp;=\\frac{A_C}{A_A+A_B+A_C} \\end{align}\\] <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528\u516c\u5f0f\uff1a</p> \\[\\begin{aligned}  &amp; \\alpha=\\frac{-(x-x_B)(y_C-y_B)+(y-y_B)(x_C-x_B)}{-(x_A-x_B)(y_C-y_B)+(y_A-y_B)(x_C-x_B)} \\\\  &amp; \\beta=\\frac{-(x-x_C)(y_A-y_C)+(y-y_C)(x_A-x_C)}{-(x_B-x_C)(y_A-y_C)+(y_B-y_C)(x_A-x_C)} \\\\  &amp; \\gamma=1-\\alpha-\\beta \\end{aligned}\\]"},{"location":"GAMES101/GAMES101%2005%20Shading.html#using-barycentric-coordinates","title":"Using Barycentric Coordinates","text":"\\[V=\\alpha V_A+\\beta V_B+\\gamma V_C\\] <p>Warning</p> <p>\u7a7a\u95f4\u4e09\u89d2\u5f62\u7ecf\u8fc7\u6295\u5f71\u4e4b\u540e\uff0c\u91cd\u5fc3\u5750\u6807\u5e76\u4e0d\u662f\u4e0d\u53d8\u7684\uff0c\u6240\u4ee5\u8981\u5148\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u5b8c\u6210\u63d2\u503c</p>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html","title":"06 Geometry","text":""},{"location":"GAMES101/GAMES101%2006%20Geometry.html#geometry","title":"Geometry","text":""},{"location":"GAMES101/GAMES101%2006%20Geometry.html#implicit-geometry","title":"Implicit Geometry","text":"<p>\u57fa\u4e8e\u5c06\u70b9\u5206\u7c7b\uff0c\u4f8b\u5982\u4f7f\u7528\u6570\u5b66\u516c\u5f0f\u63cf\u8ff0</p> <p></p> <p>Note</p> <ul> <li>\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u8868\u9762\u4e0a\u5f88\u7b80\u5355</li> <li>\u627e\u5230\u8868\u9762\u4e0a\u6240\u6709\u7684\u70b9\u5f88\u96be</li> </ul>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#algebraic-surfaces","title":"Algebraic Surfaces","text":"<p>\u7b80\u5355\uff0c\u4f46\u662f\u4e0d\u76f4\u89c2</p>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#constructive-solid-geometry-csg","title":"Constructive Solid Geometry (CSG)","text":"<p>\u57fa\u672c\u51e0\u4f55\u7684\u5e03\u5c14\u8fd0\u7b97</p>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#distance-functions","title":"Distance Functions","text":"<p>\u7ed9\u5b9a\u7a7a\u95f4\u4e2d\u4efb\u4f55\u4e00\u4e2a\u70b9\u5230\u8868\u9762\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u4e0d\u540c\u7684\u8ddd\u79bb\u51fd\u6570\u53ef\u4ee5\u878d\u5408</p> <p></p>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#example","title":"example","text":"<p>\u600e\u4e48\u8868\u793a\u4ece A \u5230 B \u7684\u8fd0\u52a8\uff1f</p> <ul> <li>\u7ebf\u6027\u53e0\u52a0\uff0c\u4e2d\u95f4\u662f\u7070\u8272\u7684</li> <li>A B \u5404\u81ea\u5b9a\u4e49\u4e00\u4e2a\u8ddd\u79bb\u51fd\u6570\uff0c\u7136\u540e blend\uff0c\u76f8\u5f53\u4e8e\u627e\u5230\u4e86\u8fb9\u754c\u7684\u4e2d\u95f4\u4f4d\u7f6e\uff0c\u7c7b\u4f3c\u63d2\u5e27</li> </ul>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#level-set-methods","title":"Level Set Methods","text":"<p>Note</p> <ul> <li>\u662f\u8ddd\u79bb\u51fd\u6570\u7684\u53e6\u4e00\u79cd\u8868\u793a</li> <li>e.g. \u6709\u4eba\u4f53\u7684\u4e09\u7ef4\u5bc6\u5ea6\u4fe1\u606f\uff0c\u5728\u5bc6\u5ea6\u4e3a\u67d0\u4e2a\u503c\u7684\u4f4d\u7f6e\u753b\u8868\u9762\uff0c\u53ef\u4ee5\u753b\u51fa\u9aa8\u9abc</li> </ul>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#fractals-\u5206\u5f62","title":"Fractals \u5206\u5f62","text":""},{"location":"GAMES101/GAMES101%2006%20Geometry.html#conc","title":"Conc.","text":"<ul> <li>Pros<ul> <li>compact description (e.g., a function)</li> <li>certain queries easy (inside or outside, distance to surface)</li> <li>good for ray-to-surface intersection</li> <li>for simple shapes, exact description / no sampling error</li> <li>easy to handle changes in topology (e.g., fluid)</li> </ul> </li> <li>Cons<ul> <li>difficult to model complex shapes</li> </ul> </li> </ul>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#explicit-geometry","title":"Explicit Geometry","text":"<p>all points are given directly or via parameter mapping</p> <p></p> <p>Note</p> <ul> <li>\u627e\u5230\u4e00\u4e2a\u8868\u9762\u4e0a\u6240\u6709\u70b9\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u904d\u5386</li> <li>\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u8868\u9762\u4e0a\u5f88\u96be</li> </ul>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#point-cloud","title":"Point Cloud","text":"<p>lists of points, often converted into polygon mesh</p>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#polygon-mesh","title":"Polygon Mesh","text":"<p>often triangle or quad</p>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#wave-front-ogjest-file-obj-format","title":"Wave front Ogjest File (.obj) Format","text":"<p>Note</p> <p>\u5b9a\u4e49\u70b9\u3001\u7eb9\u7406\u5750\u6807\u3001\u6cd5\u5411\u91cf\u548c\u4e09\u89d2\u5f62\u9762\u7684\u8fde\u63a5\u65b9\u5f0f</p>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#bezier-curves","title":"Bezier Curves","text":"<p>Note</p> <p>\u7ed9\u5b9a\u4e00\u4e9b\u63a7\u5236\u70b9\uff0c\u753b\u51fa\u4e00\u6761\u8fde\u7eed\u7684\u66f2\u7ebf</p>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#de-casteljau-algorithm","title":"de Casteljau Algorithm","text":""},{"location":"GAMES101/GAMES101%2006%20Geometry.html#3-point","title":"3 point","text":"\\[ \\begin{aligned} \\mathbf{b}_{0}^{1}(t)&amp;=(1-t)\\mathbf{b}_0+t\\mathbf{b}_1 \\\\ \\mathbf{b}_{1}^{1}(t)&amp;=(1-t)\\mathbf{b}_1+t\\mathbf{b}_2 \\\\ \\\\ \\mathbf{b}_{0}^{2}(t)&amp;=(1-t)\\mathbf{b}_0^1+t\\mathbf{b}_1^1 \\\\ \\\\ \\implies\\mathbf{b}_0^2(t)&amp;=(1-t)^2\\mathbf{b}_0+2t(1-t)\\mathbf{b}_1+t^2\\mathbf{b}_2 \\end{aligned} \\]"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#4-point","title":"4 point","text":"\\[\\mathbf{b}^n(t)=\\mathbf{b}_{0}(1-t)^{3}+\\mathbf{b}_{1}3t(1-t)^{2}+\\mathbf{b}_{2}3t^{2}(1-t)+\\mathbf{b}_{3}t^{3}\\]"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#normal-form","title":"normal form","text":"\\[ \\begin{align} \\mathbf{b}^n(t)&amp;=\\mathbf{b}_0^n(t)=\\sum_{j=0}^n\\mathbf{b}_jB_j^n(t) \\\\ B_i^n(t)&amp;= \\begin{pmatrix} n \\\\ i \\end{pmatrix}t^i(1-t)^{n-i} \\end{align} \\] <p>Bernstein Polynomials</p> <p></p> \\[B_i^n(t)= \\begin{pmatrix} n \\\\ i \\end{pmatrix}t^i(1-t)^{n-i}\\] <p>property</p> <ul> <li>\u8d1d\u585e\u5c14\u66f2\u7ebf\u4eff\u5c04\u53d8\u6362\u524d\u540e\u4e0d\u53d8<ul> <li>\u6295\u5f71\u53d8\u6362\u4f1a\u6539\u53d8</li> </ul> </li> <li>\u51f8\u5305\u6027\uff1a\u66f2\u7ebf\u4e00\u5b9a\u5728\u63a7\u5236\u70b9\u7684\u51f8\u5305\u5185</li> </ul>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#piecewise-bezier-curves","title":"Piecewise Bezier Curves","text":"<p>Problem</p> <ul> <li>\u63a7\u5236\u70b9\u5f88\u591a\u65f6\uff0cbezier curve \u5f88\u5e73\u6ed1\uff0c\u4f46\u662f\u63a7\u5236\u70b9\u51e0\u4e4e\u65e0\u6cd5\u5f71\u54cd\u66f2\u7ebf\u7684\u5f62\u72b6</li> <li>\u4f7f\u7528\u5206\u6bb5 bezier curve \u6765\u89e3\u51b3</li> </ul> <p></p>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#continuity","title":"Continuity","text":"<ul> <li>\\(C^0\\) continuity: \\(\\mathbf{a}_{n}=\\mathbf{b}_{0}\\)</li> <li>\\(C^1\\) continuity: \\(\\mathbf{a}_n=\\mathbf{b}_0=\\frac{1}{2}\\left(\\mathbf{a}_{n-1}+\\mathbf{b}_1\\right)\\)</li> </ul>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#other-curves","title":"other curves","text":"<ul> <li>Splines</li> <li>B-splines<ul> <li>\u5177\u6709\u5c40\u90e8\u6027\uff0c\u6539\u52a8\u4e00\u5904\u4e0d\u5f71\u54cd\u66f2\u7ebf\u7684\u5176\u4ed6\u90e8\u5206</li> </ul> </li> <li>NURBS \u975e\u5747\u5300\u6709\u7406 B \u6837\u6761</li> </ul>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#surfaces","title":"Surfaces","text":""},{"location":"GAMES101/GAMES101%2006%20Geometry.html#bezier-surfaces","title":"Bezier Surfaces","text":"<p>Note</p> <p>\u8054\u7cfb GAMES101 05 Shading#Bilinear Interpolation</p>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#mesh","title":"Mesh","text":"<ul> <li>mesh subdivision \u7f51\u683c\u7ec6\u5206</li> <li>mesh simplification \u7f51\u683c\u7b80\u5316</li> <li>mesh regularization \u7f51\u683c\u6b63\u89c4\u5316</li> </ul>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#subdivision","title":"Subdivision","text":""},{"location":"GAMES101/GAMES101%2006%20Geometry.html#loop-subdivision-triangle-mesh","title":"Loop Subdivision (triangle mesh)","text":"<p>Note</p> <ul> <li>\u5212\u5206\u4e09\u89d2\u5f62</li> <li>\u8c03\u6574\u9876\u70b9\u4f4d\u7f6e\u4f7f\u6a21\u578b\u66f4\u8fde\u7eed</li> </ul> <p></p> \\[N=\\frac{3}{8}(A+B)+\\frac{1}{8}(C+D)\\] <p></p> \\[\\begin{align} O'&amp;=(1-\\text{deg}(O)\\cdot u)O+u\\cdot \\sum_{V_{i}\\in \\text{neighbor}(O)}V_{i} \\\\ u&amp;=\\begin{cases} \\frac{3}{16}\\text{, if }n=3 \\\\ \\frac{3}{8n}\\text{, otherwise} \\end{cases} \\end{align}\\]"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#catmul-clark-subdivision-general-mesh","title":"Catmul-Clark Subdivision (general mesh)","text":"<p>concepts</p> <ul> <li>Non-quad face: \u975e\u56db\u8fb9\u5f62\u9762</li> <li>Extraordinary vertex (\u5947\u5f02\u70b9): \\(\\text{deg}(v)\\neq 4\\)</li> </ul> <p>method</p> <ul> <li>\u6bcf\u4e2a\u9762\u4e2d\u95f4\u53d6\u4e00\u4e2a\u70b9</li> <li>\u6bcf\u6761\u8fb9\u53d6\u4e2d\u70b9</li> <li>\u8fde\u63a5</li> </ul> <p></p> <p>property</p> <ul> <li>\u4e09\u89d2\u5f62\u4e2d\u65b0\u7684\u70b9\u662f\u5947\u5f02\u70b9</li> <li>\u7b2c\u4e00\u6b21\u7ec6\u5206\u4e4b\u540e\uff0c\u6240\u6709\u7684\u975e\u56db\u8fb9\u5f62\u6d88\u5931\uff0c\u589e\u52a0\u4e86\u975e\u56db\u8fb9\u5f62\u9762\u6570\u4e2a\u5947\u5f02\u70b9</li> <li>\u540e\u7eed\u5947\u5f02\u70b9\u4e0d\u4f1a\u589e\u52a0</li> </ul> <p></p>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#simplification","title":"Simplification","text":"<p>collapse edges to point</p>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#quadric-error-metrics","title":"Quadric Error Metrics","text":"<p>Note</p> <ul> <li>\u4f7f\u7528\u5e73\u5747\u503c\uff0c\u4f1a\u5bfc\u81f4\u6a21\u578b\u584c\u9677</li> <li>\u4f7f\u7528\u4e8c\u6b21\u8bef\u5dee\u5ea6\u91cf\uff1a\u6700\u5c0f\u5316\u65b0\u9876\u70b9\u5230\u539f\u6765\u7684\u4e09\u89d2\u5f62\u9762\u7684\u8ddd\u79bb\u5e73\u65b9\u548c</li> </ul>"},{"location":"GAMES101/GAMES101%2006%20Geometry.html#simplification_1","title":"Simplification","text":"<p>\u5982\u4f55\u627e\u5230\u5e94\u8be5\u574d\u7f29\u7684\u8fb9\uff1f</p> <ul> <li>\u5c06\u6a21\u578b\u4e2d\u6240\u6709\u7684\u8fb9\u574d\u7f29\u7684\u8bef\u5dee\u7b97\u51fa\u6765</li> <li>\u6bcf\u6b21\u53d6\u8bef\u5dee\u6700\u5c0f\u7684\u8fdb\u884c\u574d\u7f29</li> </ul> <ul> <li>\u4e00\u6761\u8fb9\u574d\u7f29\u4e4b\u540e\uff0c\u4f1a\u6539\u53d8\u76f8\u90bb\u7684\u51e0\u6761\u8fb9\u7684\u574d\u7f29\u8bef\u5dee\uff0c\u9700\u8981\u66f4\u65b0</li> <li>\u4f7f\u7528\u4f18\u5148\u961f\u5217\u6765\u7ef4\u62a4\uff0c\u65b9\u4fbf\u627e\u5230\u6700\u5c0f\u8bef\u5dee\u7684\u8fb9</li> <li>\u4e00\u4e2a\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u53ea\u662f\u8fd1\u4f3c\u89e3</li> </ul>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html","title":"07 Ray Tracing","text":""},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#intro","title":"Intro","text":"<p>why ray tracing? rasterization couldn't handle global effects well</p> <p></p> <ul> <li>soft shadow</li> <li>glossy reflection</li> <li>indirect illumination</li> </ul> <ul> <li>Ray tracing s accurate, but very slow<ul> <li>rasterization: real-time, ray tracing: offline</li> </ul> </li> </ul>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#light-rays","title":"Light Rays","text":"<ol> <li>\u6cbf\u76f4\u7ebf\u4f20\u64ad</li> <li>\u4e0d\u4f1a\u76f8\u4e92\u78b0\u649e</li> <li>\u4ece\u5149\u6e90\u5230\u76f8\u673a\uff0c\u53ef\u9006\u6027 (reciprocity)</li> </ol>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#ray-casting","title":"Ray Casting","text":"<ol> <li>\u5bf9\u6bcf\u4e2a\u50cf\u7d20\u6295\u5c04\u4e00\u675f\u5149\u7ebf</li> <li>\u5149\u7ebf\u9047\u5230\u573a\u666f\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u5224\u65ad\u8fd9\u4e2a\u70b9\u662f\u5426\u5bf9\u5149\u6e90\u53ef\u89c1</li> <li>\u4f9d\u636e\u5149\u7167\u60c5\u51b5\uff0c\u6e32\u67d3\u50cf\u7d20\u989c\u8272</li> </ol> <p>problem</p> <p>\u4ecd\u7136\u5ffd\u7565\u4e86\u6298\u5c04</p>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#recursive-whitted-style-ray-tracing","title":"Recursive (Whitted-Style) Ray Tracing","text":""},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#ray-equation","title":"Ray Equation","text":"\\[\\begin{aligned} \\mathbf{r}(t)=\\mathbf{o}+t\\mathbf{d}\\quad0\\leq t&lt;\\infty \\end{aligned}\\]"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#ray-intersection","title":"Ray Intersection","text":""},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#with-sphere","title":"with sphere","text":"\\[ \\begin{cases} \\mathbf{r}(t)=\\mathbf{o}+t\\mathbf{d}\\quad0\\leq t&lt;\\infty \\\\ (\\mathbf{p}-\\mathbf{c})^2-R^2=0 \\end{cases}\\implies (\\mathbf{o}+t\\mathbf{d}-\\mathbf{c})^2-R^2=0 \\] <p>\u7136\u540e\u8ba1\u7b97\u4e8c\u6b21\u65b9\u7a0b\uff1a</p> \\[\\begin{aligned}  &amp; at^{2}+bt+c=0,\\mathrm{where} \\\\  &amp; a=\\mathbf{d}\\cdot\\mathbf{d} \\\\  &amp; b=2(\\mathbf{o-c})\\cdot\\mathbf{d} \\\\  &amp; c=(\\mathbf{o}-\\mathbf{c})\\cdot(\\mathbf{o}-\\mathbf{c})-R^2 \\\\  &amp; t=\\frac{-b\\pm\\sqrt{b^{2}-4ac}}{2a} \\end{aligned}\\]"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#with-implicit-surface","title":"with implicit surface","text":"\\[ \\begin{cases} \\mathbf{r}(t)=\\mathbf{o}+t\\mathbf{d}\\quad0\\leq t&lt;\\infty \\\\ f(\\mathbf{p})=0 \\end{cases}\\implies f(\\mathbf{o}+t\\mathbf{d})=0 \\]"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#with-single-triangle","title":"with single triangle","text":"<p>Note</p> <ol> <li>\u4e0e\u4e09\u89d2\u5f62\u6240\u5728\u5e73\u9762\u76f8\u4ea4</li> <li>\u5224\u65ad\u4ea4\u70b9\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5185</li> </ol>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#plane-equation","title":"Plane Equation","text":"<p>plane equation</p> <p>\\(\\mathbf{p}:(\\mathbf{p}-\\mathbf{p}^{\\prime})\\cdot\\mathbf{N}=0 \\implies ax+by+cz+d=0\\)</p> \\[\\begin{aligned}  &amp; \\mathrm{Set~}\\mathbf{p}=\\mathbf{r}(t)\\text{ and solve for }t \\\\  &amp; (\\mathbf{p}-\\mathbf{p}^{\\prime})\\cdot\\mathbf{N}=(\\mathbf{o}+t\\mathbf{d}-\\mathbf{p}^{\\prime})\\cdot\\mathbf{N}=0 \\\\  &amp; t=\\frac{(\\mathbf{p}^{\\prime}-\\mathbf{o})\\cdot\\mathbf{N}}{\\mathbf{d}\\cdot\\mathbf{N}} &amp; \\mathrm{Check:~}0\\leq t&lt;\\infty \\end{aligned}\\]"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#moller-trumbore-algorithm","title":"Moller Trumbore Algorithm","text":"<p>\u76f4\u63a5\u6c42\u89e3\u91cd\u5fc3\u5750\u6807\uff0c\u5224\u65ad\u662f\u5426\u6709 \\(1-b_{1}-b_{2},b_{1},b_{2}\\geq0\\)</p> \\[\\begin{align} \\vec{\\mathbf{O}}+t\\vec{\\mathbf{D}}&amp;=(1-b_{1}-b_{2})\\vec{\\mathbf{P}}_{0}+b_{1}\\vec{\\mathbf{P}}_{1}+b_{2}\\vec{\\mathbf{P}}_{2} \\\\ \\implies \\begin{bmatrix} t \\\\ b_1 \\\\ b_2 \\end{bmatrix}&amp;=\\frac{1}{\\vec{\\mathbf{S}}_1\\bullet\\vec{\\mathbf{E}}_1} \\begin{bmatrix} \\vec{\\mathbf{S}}_2\\bullet\\vec{\\mathbf{E}}_2 \\\\ \\vec{\\mathbf{S}}_1\\bullet\\vec{\\mathbf{S}} \\\\ \\vec{\\mathbf{S}}_2\\bullet\\vec{\\mathbf{D}} \\end{bmatrix} \\\\ \\text{where }&amp; \\begin{cases}  &amp; \\mathbf{\\vec{E}}_{1}=\\mathbf{\\vec{P}}_{1}-\\mathbf{\\vec{P}}_{0} \\\\  &amp; \\mathbf{\\vec{E}}_{2}=\\mathbf{\\vec{P}}_{2}-\\mathbf{\\vec{P}}_{0} \\\\  &amp; \\mathbf{\\vec{S}}=\\mathbf{\\vec{O}}-\\mathbf{\\vec{P}}_{0} \\\\  &amp; \\mathbf{\\vec{S}}_{1}=\\mathbf{\\vec{D}}\\times\\mathbf{\\vec{E}}_{2} \\\\  &amp; \\mathbf{\\vec{S}}_{2}=\\mathbf{\\vec{S}}\\times\\mathbf{\\vec{E}}_{1} \\end{cases} \\end{align}\\]"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#with-triangle-mesh","title":"with triangle mesh","text":"<p>naive solution</p> <p>\u6bcf\u4e2a\u4e09\u89d2\u5f62\u9762\u90fd\u5224\u65ad\u5149\u7ebf\u662f\u5426\u8fc7\u4e09\u89d2\u5f62</p>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#bounding-volumes","title":"Bounding Volumes","text":"<p>\u5982\u679c\u5149\u7ebf\u548c\u5305\u56f4\u76d2\u4e0d\u76f8\u4ea4\uff0c\u4e00\u5b9a\u4e0d\u4f1a\u4e0e\u76d2\u4e2d\u7684\u7269\u4f53\u76f8\u4ea4</p> <p></p> <p>Axis-Aligned Bounding Box (AABB)</p> <ul> <li>\u4efb\u4f55\u4e00\u4e2a\u9762\u90fd\u662f\u4e0e\u5750\u6807\u8f74\u9762\u5e73\u884c\u7684</li> <li>\u6a2a\u5e73\u7ad6\u76f4\u7684\u5e73\u9762\u6c42\u89e3\u4ea4\u70b9\u66f4\u52a0\u65b9\u4fbf</li> </ul> <p></p> <p>Note</p> <ul> <li>\u5206\u522b\u6c42\u51fa\u7a7f\u8fc7\u4e09\u7ec4\u5bf9\u9762\u7684 \\(t_{\\text{min}},t_{\\text{max}}\\)</li> <li>\u6c42\u4ea4\u96c6 \\(t_{\\text{enter}}=\\max\\{t_{\\text{min}}\\}, t_{{\\text{exit}}}=\\min\\{t_{\\text{max}}\\}\\)<ul> <li>\u6700\u665a\u8fdb\u5165\u4e00\u4e2a\u5bf9\u9762\u7684\u65f6\u95f4\u662f\u8fdb\u5165\u76d2\u5b50\u65f6\u95f4</li> <li>\u6700\u65e9\u79bb\u5f00\u4e00\u4e2a\u5bf9\u9762\u7684\u65f6\u95f4\u662f\u79bb\u5f00\u76d2\u5b50\u65f6\u95f4</li> </ul> </li> <li>\u5982\u679c \\(t_{\\text{enter}}&lt;t_{\\text{exit}}\\)\uff0c\u90a3\u4e48\u76f8\u4ea4</li> </ul> <p>ray is not a line</p> <ul> <li>\\(t_{\\text{exit}}&lt;0\\)\uff0c\u76d2\u5b50\u5728\u5149\u7ebf\u540e\u9762\uff0c\u4e0d\u4f1a\u76f8\u4ea4</li> <li>\\(t_{\\text{exit}}\\geq 0, t_{\\text{enter}}&lt;0\\)\uff0c\u5149\u6e90\u5728\u76d2\u5b50\u91cc\u9762</li> <li>\\(t_{\\text{exit}}\\geq 0,t_{\\text{enter}}&lt;t_{\\text{exit}}\\)\uff0c\u90a3\u4e48\u76f8\u4ea4</li> </ul>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#uniform-spatial-partitions-grids","title":"Uniform Spatial Partitions (Grids)","text":"<p>\u5047\u8bbe</p> <ul> <li>\u4e0e AABB \u7684\u6c42\u4ea4\u975e\u5e38\u5feb</li> <li>\u4e0e\u7269\u4f53\u7684\u6c42\u4ea4\u76f8\u5bf9\u8f83\u6162</li> </ul>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#preprocess-build-acceleration-grid","title":"Preprocess - Build Acceleration Grid","text":"<p>Note</p> <ol> <li>\u627e\u5230\u4e00\u4e2a\u5927\u7684\u5305\u56f4\u76d2</li> <li>\u5185\u90e8\u5212\u5206\u7f51\u683c</li> <li>\u8bb0\u5f55\u6709\u7269\u4f53\u7684\u7f51\u683c</li> </ol>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#process","title":"Process","text":"<p>Note</p> <ul> <li>\u5149\u7ebf\u4e0e\u4e00\u4e2a\u76d2\u5b50\u76f8\u4ea4\u65f6\uff0c\u4e0b\u4e00\u4e2a\u76f8\u4ea4\u7684\u76d2\u5b50\u53ea\u53ef\u80fd\u662f\u53f3\u8fb9\u6216\u8005\u4e0a\u9762\u7684\u683c\u5b50</li> <li>\u76f4\u5230\u4e0e\u6709\u7269\u4f53\u7684\u76d2\u5b50\u76f8\u4ea4\u65f6\uff0c\u8fdb\u884c\u4e0e\u7269\u4f53\u76f8\u4ea4\u6c42\u89e3</li> </ul> <p>performance</p> <ul> <li>\u683c\u5b50\u592a\u7a00\u758f\uff0c\u6216\u8005\u683c\u5b50\u592a\u5bc6\u96c6\uff0c\u52a0\u901f\u6548\u679c\u90fd\u4e0d\u597d</li> <li>\\(\\#\\text{cells}=C\\cdot\\#\\text{objs}, C\\approx 27\\text{ in 3D}\\)</li> </ul> <p>performance</p> <ul> <li>\u7269\u4f53\u5206\u5e03\u5747\u5300\u65f6\uff0c\u6548\u7387\u9ad8</li> <li>\u7a7a\u7684\u90e8\u5206\u592a\u591a\u65f6\uff0c\u6548\u7387\u4f4e</li> </ul>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#spatial-partioning","title":"Spatial Partioning","text":"<p>Note</p> <ul> <li>Oct-Tree: \u4e00\u76f4\u5212\u5206\uff0c\u76f4\u5230\u683c\u5b50\u91cc\u7684\u7269\u4f53\u6570\u91cf\u5c0f\u4e8e\u9608\u503c</li> <li>KD-Tree: \u5206\u522b\u5782\u76f4\u4e8e x y z \u8f74\u8fdb\u884c\u9012\u5f52\u5212\u5206</li> <li>BSP-Tree: \u7ef4\u5ea6\u9ad8\u7684\u65f6\u5019\u8ba1\u7b97\u590d\u6742</li> </ul>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#kd-tree","title":"KD-Tree","text":"<p>Note</p> <p>Huffman Tree\uff0c\u5728\u4e2d\u95f4\u8282\u70b9\u5b58\u50a8\u5b50\u8282\u70b9\u6307\u9488</p> <p></p> <p>Note</p> <ul> <li>\u4e0e\u4e00\u4e2a\u8282\u70b9\u7684 AABB \u6709\u4ea4\u70b9\uff0c\u5219\u9700\u8981\u5224\u65ad\u4e0e\u5176\u5b50\u8282\u70b9\u662f\u5426\u6709\u4ea4\u70b9\uff0c\u76f4\u5230\u53f6\u5b50\u8282\u70b9</li> <li>\u5224\u65ad\u4e0e\u6700\u5c0f\u53f6\u5b50\u8282\u70b9\u5185\u7269\u4f53\u662f\u5426\u6709\u4ea4\u70b9</li> </ul> <p>Bug</p> <ul> <li>\u5224\u65ad\u4e00\u4e2a\u4e09\u89d2\u5f62\u4e0e AABB \u76f8\u4ea4\u6bd4\u8f83\u590d\u6742\uff0c\u5373\u4f7f\u4e09\u4e2a\u9876\u70b9\u90fd\u4e0d\u5728\u76d2\u5b50\u5185\uff0c\u4e5f\u53ef\u80fd\u76f8\u4ea4</li> <li>\u4e00\u4e2a\u7269\u4f53\u53ef\u80fd\u548c\u4e0d\u540c\u7684\u76d2\u5b50\u90fd\u6709\u4ea4\u96c6\uff0c\u4f1a\u51fa\u73b0\u5728\u591a\u4e2a\u53f6\u5b50\u8282\u70b9\u91cc</li> </ul>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#object-partition-bounding-volume-hierarchy-bvh","title":"Object Partition &amp; Bounding Volume Hierarchy (BVH)","text":"<p>Note</p> <ul> <li>\u5c06 bounding box \u5185\u7684\u7269\u4f53\u5212\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u91cd\u65b0\u8ba1\u7b97 bounding box\uff0c\u76f4\u5230\u53f6\u5b50\u8282\u70b9\u6709\u8db3\u591f\u5c11\u7684\u4e09\u89d2\u5f62</li> <li>bounding box \u53ef\u80fd\u76f8\u4ea4\uff0c\u91cd\u53e0\u90e8\u5206\u8d8a\u5c0f\u8d8a\u597d</li> </ul> <p>how to subdivide?</p> <ul> <li>choose a dimension to split</li> <li>heuristic #1: \u603b\u662f\u5206\u5272\u6700\u957f\u7684\u8f74</li> <li>heuristic #2: split node at location of median object, \u8ba9\u4e24\u8fb9\u7684\u4e09\u89d2\u5f62\u4e2a\u6570\u76f8\u8fd1</li> </ul> <p>Note</p> <p>\u573a\u666f\u53d8\u5316\u540e\uff0c\u8981\u91cd\u65b0\u8ba1\u7b97 BVH</p> <p></p> <p>Note</p> <p>\u5b9e\u9645\u5e94\u7528\u4e2d BVH \u7684\u5e94\u7528\u66f4\u52a0\u5e7f\u6cdb</p>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#basic-radiometry-\u8f90\u5c04\u5ea6\u91cf\u5b66","title":"Basic Radiometry (\u8f90\u5c04\u5ea6\u91cf\u5b66)","text":"<p>motivation</p> <p>\u8981\u8ba9\u573a\u666f\u66f4\u52a0\u771f\u5b9e\uff0c\u9700\u8981\u7cbe\u786e\u5730\u5b9a\u4e49\u5149\u7684\u5c5e\u6027\uff0c\u4e0d\u80fd\u968f\u4fbf\u5b9a\u4e49\u5404\u79cd\u53c2\u6570</p>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#radiant-energy-and-flux-power","title":"Radiant Energy and Flux (Power)","text":""},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#basic-concepts","title":"Basic concepts","text":"<p>Radiant Energy: \u7535\u78c1\u8f90\u5c04\u7684\u80fd\u91cf</p> \\[Q\\text{ [J = Joule]}\\] <p>Radiant Flux (power): \u5355\u4f4d\u65f6\u95f4\u8f90\u5c04\u80fd\u91cf #photons flowing through a sensor in unit time</p> \\[\\Phi\\equiv\\frac{\\mathrm{d}Q}{\\mathrm{d}t}\\mathrm{[W=Watt]}\\mathrm{[lm=lumen]}^{\\star}\\] <p>Radiant Intensity: the power per unit solid angle (\u7acb\u4f53\u89d2)</p> <p></p> \\[\\begin{aligned} I(\\omega)  \\equiv\\frac{\\mathrm{d}\\Phi}{\\mathrm{d}\\omega}  \\left[\\frac{\\mathrm{W}}{\\mathrm{sr}}\\right]\\left[\\frac{\\mathrm{lm}}{\\mathrm{sr}}  =\\mathrm{cd}=\\mathrm{candela}\\right] \\end{aligned}\\] <p>angles and solid andgles</p> <ul> <li>\\(\\theta=\\frac{l}{r}\\) \u5f27\u957f\u9664\u4ee5\u534a\u5f84</li> <li>\\(\\Omega =\\frac{A}{r^2}\\) \u9762\u79ef\u9664\u4ee5\u534a\u5f84\u5e73\u65b9</li> <li>\u5fae\u5206\u7acb\u4f53\u89d2\uff0c\u6574\u4e2a\u7403\u7684\u7acb\u4f53\u89d2\u4e3a \\(4\\pi\\) </li> <li>\u540e\u9762\u4f1a\u7528 \\(\\omega\\) \u6765\u8868\u793a\u4e00\u4e2a\u5355\u4f4d\u957f\u5ea6\u7684\u65b9\u5411\u5411\u91cf</li> </ul> <p>\u5bf9\u4e8e\u4e00\u4e2a\u5411\u6240\u6709\u65b9\u5411\u5747\u5300\u8f90\u5c04\u7684\u70b9\u5149\u6e90\uff0c\\(I=\\frac{\\Phi}{4\\pi}\\)</p> <p>Irradiance: power per unit area</p> <p></p> \\[E(\\mathbf{x})\\equiv\\frac{\\mathrm{d}\\Phi(\\mathbf{x})}{\\mathrm{d}A}\\left[\\frac{\\mathrm{W}}{\\mathrm{m}^{2}}\\right]\\left[\\frac{\\mathrm{lm}}{\\mathrm{m}^{2}}=\\mathrm{lux}\\right]\\] <p>Note</p> <p></p> <p>\u9700\u8981\u8003\u8651 cosine law</p> <p>Note</p> <p>\u56de\u5fc6\u5e73\u65b9\u53cd\u6bd4\uff0c\u5176\u5b9e intensity(\u5355\u4f4d\u7acb\u4f53\u89d2\u4e0a\u7684\u529f\u7387) \u6ca1\u6709\u8870\u51cf\uff0c\u662f irradiance(\u5355\u4f4d\u9762\u79ef\u63a5\u6536\u80fd\u91cf) \u5728\u8870\u51cf</p> <p>Radiance(Luminance): power per unit solid angle, per projected unit area</p> <p></p> \\[L(\\mathrm{p},\\omega) \\equiv\\frac{\\mathrm{d}^2\\Phi(\\mathrm{p},\\omega)}{\\mathrm{d}\\omega \\mathrm{d}A\\cos\\theta} \\left[\\frac{\\mathrm{W}}{\\mathrm{sr} \\mathrm{m}^2}\\right]\\left[\\frac{\\mathrm{cd}}{\\mathrm{m}^2}=\\frac{\\mathrm{lm}}{\\mathrm{sr} \\mathrm{m}^2}=\\mathrm{nit}\\right]\\] <p>Note</p> <p>\u4e0b\u9762\u7684 cos \u8868\u793a \\(\\omega\\) \u65b9\u5411\u4e0a\u7684\u6295\u5f71\u9762\u79ef</p> <p>Tip</p> <ul> <li>\u4e00\u6b21\u5fae\u5206<ul> <li>Irradiance: power per projected unit area</li> <li>Intensity: power per solid angle</li> </ul> </li> <li>\u4e24\u6b21\u5fae\u5206<ul> <li>Radiance: Irradiance per solid angle</li> <li>Radiance: Intensity per projected unit area</li> </ul> </li> </ul> <p>Exiting Radiance: \u548c Radiance \u4e00\u6837\uff0c\u4f46\u662f\u53d1\u51fa\u7684\u80fd\u91cf</p> <p></p> \\[L(\\mathrm{p},\\omega)=\\frac{\\mathrm{d}I(\\mathrm{p},\\omega)}{\\mathrm{d}A\\cos\\theta}\\]"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#irradiance-vs-radiance","title":"Irradiance vs. Radiance","text":"<ul> <li>Irradiance: \u9762\u79ef\u5fae\u5143 \\(\\mathrm{d}A\\) \u4e0a\u63a5\u6536\u7684\u603b\u80fd\u91cf</li> <li>Radiance: \u9762\u79ef\u5fae\u5143 \\(\\mathrm{d}A\\) \u4ece \\(\\mathrm{d}\\omega\\) \u65b9\u5411\u4e0a\u63a5\u6536\u5230\u7684\u80fd\u91cf</li> </ul> \\[\\begin{aligned} dE(\\mathrm{p},\\omega) &amp; =L_i(\\mathrm{p},\\omega)\\cos\\theta\\mathrm{d}\\omega \\\\ E(\\mathrm{p}) &amp; =\\int_{H^2}L_i(\\mathrm{p},\\omega)\\cos\\theta\\mathrm{d}\\omega \\end{aligned}\\]"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#bidirectional-reflectance-distribution-function-brdf","title":"Bidirectional Reflectance Distribution Function (BRDF)","text":"<p>\u53cc\u5411\u53cd\u5c04\u5206\u5e03\u51fd\u6570 \u4ece \\(\\omega_{i}\\) \u6765\u7684 Radiance \u6253\u5230 \\(\\mathrm{d}A\\) \u4e0a\uff0c\u80fd\u91cf \\(E\\) \u8f6c\u5316\u5230\u53cd\u5c04\u5149\u7ebf\u4e2d\uff0c\u7ed9\u51fa\u4e86\u53cd\u5c04\u5149\u7ebf\u7684\u5206\u5e03</p> <p></p> <ul> <li>differential irradiance incoming (\u5165\u5c04 irradiance): \\(\\mathrm{d}E(\\omega_{i})=L(\\omega_{i})\\cos \\theta_{i}\\mathrm{d}\\omega_{i}\\)</li> <li>differential radiance exiting (due to \\(\\mathrm{d}E(\\omega_{i})\\)): \\(\\mathrm{d}L_{r}(\\omega_{r})\\)</li> </ul> <p></p> \\[\\text{BRDF: }f_r(\\omega_i\\to\\omega_r)=\\frac{\\mathrm{d}L_r(\\omega_r)}{\\mathrm{d}E_i(\\omega_i)}=\\frac{\\mathrm{d}L_r(\\omega_r)}{L_i(\\omega_i)\\cos\\theta_i\\mathrm{d}\\omega_i}\\left[\\frac{1}{\\text{sr}}\\right]\\] <p>Note</p> <p>\u5c06\u6f2b\u53cd\u5c04\u548c\u955c\u9762\u53cd\u5c04\u4e00\u8d77\u8003\u8651</p>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#the-reflection-equation","title":"The Reflection Equation","text":"\\[\\text{The Reflection Equation: }L_r(\\mathrm{p},\\omega_r)=\\int_{H^2}f_r(\\mathrm{p},\\omega_i\\to\\omega_r)L_i(\\mathrm{p},\\omega_i)\\cos\\theta_i\\mathrm{d}\\omega_i\\] <p>Note</p> <p>\u5c06\u6240\u6709\u53ef\u80fd\u7684\u5165\u5c04\u65b9\u5411\u79ef\u5206\uff0c\u5f97\u5230\u89c2\u6d4b\u65b9\u5411\u7684\u80fd\u91cf</p> <p>challenge: recursive equation</p> <p>\u5149\u7ebf\u53ef\u80fd\u5f39\u5c04\u591a\u6b21\uff0c\u4e00\u4e2a\u9762\u79ef\u5fae\u5143\u7684\u5165\u5c04\u5149\u53ef\u80fd\u6765\u81ea\u53e6\u4e00\u4e2a\u9762\u79ef\u5fae\u5143</p>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#the-rendering-equation","title":"The Rendering Equation","text":"<p>\u8003\u8651\u7269\u4f53\u672c\u8eab\u7684\u53d1\u5149\uff0c\u91cd\u5199 reflection eqation</p> \\[\\text{The Rendering Equation: }L_o(p,\\omega_o)=\\underbrace{   L_e(p,\\omega_o)}_{\\text{emitted by the object itself}}+\\int_{\\Omega^+}L_i(p,\\omega_i)f_r(p,\\omega_i,\\omega_o)(n\\cdot\\omega_i)\\mathrm{d}\\omega_i\\] <p>Note</p> <ul> <li>\u5047\u8bbe\u6240\u6709\u7684\u5411\u91cf\u90fd\u662f\u5411\u5916\u7684</li> <li>\\(\\cos \\theta=n\\cdot w_{i}\\)</li> </ul> <p></p> <p>\u8fdb\u884c\u7b80\u5316\uff1a</p> \\[ \\begin{align} \\to &amp;&amp; l(u)&amp;=e(u)+\\int l(v)K(u,v)dv \\\\ \\to &amp;&amp; L&amp;=E+KL \\end{align} \\] <p>\u8fd9\u91cc\u7684 \\(L\\) \u662f\u5168\u5c40\u5149\u7167(Global Illimination)</p> \\[ \\begin{align} L&amp;=E+KL \\\\ (I-K)L&amp;=E \\\\ L&amp;=(I-K)^{-1}E \\\\ L&amp;=(I+K+K^2+K^3+\\dots)E \\\\ L&amp;=E+KE+K^2E+K^3E+\\dots \\end{align} \\] <p></p> <p>Note</p> <ul> <li>\u5149\u7ebf\u5f39\u5c040\u30011\u30012\u3001... \u6b21\u5f97\u5230\u7684\u5149\u7167</li> <li>rasterization \u6700\u591a\u8003\u8651\u4e86\u4e00\u6b21\u5f39\u5c04(direct illumination)\uff0c\u4e5f\u5c31\u662f \\(E+KE\\)</li> <li>\u8003\u8651\u65e0\u9650\u6b21\u5149\u7ebf\u5f39\u5c04\uff0c\u6700\u7ec8\u4eae\u5ea6\u4f1a\u6536\u655b</li> </ul>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#path-tracing","title":"Path Tracing","text":"<p>Whitted-Style recap: \u4e0d\u51c6\u786e\u7684\u4f30\u8ba1</p> <ul> <li>\u9047\u5230\u5149\u6ed1\u9762\uff0c\u8003\u8651\u955c\u9762\u53cd\u5c04\u5149\u7ebf</li> <li>\u9047\u5230\u6f2b\u53cd\u5c04\u9762\uff0c\u4e0d\u8003\u8651\u53cd\u5c04\u5149\u7ebf </li> </ul>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#monte-carlo-integration","title":"Monte Carlo Integration","text":"<p>why</p> <p>we want to solve an integral, but it can be too difficult to solve analytically.</p> <p>\u5bf9\u4e8e\u5b9a\u79ef\u5206 \\(\\int_{a}^b f(x)\\mathrm{d}x\\)\uff0c\u53d6\u968f\u673a\u53d8\u91cf \\(X_i\\sim p(x)\\)\uff0c\u5219 Monte Carlo Integration \u4e3a\uff1a</p> \\[\\int f(x)\\mathrm{d}x\\approx\\frac{1}{N}\\sum_{i=1}^{N}\\frac{f(X_i)}{p(X_i)}\\] <p>\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u662f\u5e73\u5747\u5206\u5e03 \\(X_{i}\\sim p(x)=\\frac{1}{b-a}\\)\uff1a</p> \\[F_N=\\frac{b-a}{N}\\sum_{i=1}^Nf(X_i)\\] <p>Note</p> <ul> <li>\u91c7\u6837\u8d8a\u591a\uff0c\u65b9\u5dee\u8d8a\u5c0f</li> <li>\u5728 x \u4e0a\u79ef\u5206\uff0c\u5c31\u5728 x \u4e0a\u91c7\u6837</li> </ul>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#solve-rendering-equation","title":"Solve Rendering Equation","text":"\\[\\text{The Rendering Equation: }L_o(p,\\omega_o)=\\underbrace{   L_e(p,\\omega_o)}_{\\text{emitted by the object itself}}+\\int_{\\Omega^+}L_i(p,\\omega_i)f_r(p,\\omega_i,\\omega_o)(n\\cdot\\omega_i)\\mathrm{d}\\omega_i\\] <p>challenge</p> <ul> <li>\u5728\u534a\u7403\u9762\u4e0a\u79ef\u5206</li> <li>recursive execution</li> </ul>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#direct-illumination","title":"Direct Illumination","text":"<p>\u8003\u8651\u8981\u6e32\u67d3\u4e00\u4e2a\u50cf\u7d20(pixel, point)\u7684 direct illumination</p> \\[L_o(p,\\omega_o)=\\int_{\\Omega^+}L_i(p,\\omega_i)f_r(p,\\omega_i,\\omega_o)(n\\cdot\\omega_i)\\mathrm{d}\\omega_i\\] <p>\u4f7f\u7528 Monte Carlo \u8fdb\u884c\u91c7\u6837</p> \\[ \\begin{align} f(x)\\text{ in Monte Carlo} &amp; =L_i(p,\\omega_i)f_r(p,\\omega_i,\\omega_o)(n\\cdot\\omega_i) \\\\ p(\\omega_{i})\\text{ in Monte Carlo}&amp;=1/2\\pi \\end{align} \\] <p>\u5f97\u5230</p> \\[\\begin{aligned} L_{o}(p,\\omega_{o}) &amp; =\\int_{\\Omega^+}L_i(p,\\omega_i)f_r(p,\\omega_i,\\omega_o)(n\\cdot\\omega_i)\\mathrm{d}\\omega_i \\\\  &amp; \\approx\\frac{1}{N}\\sum_{i=1}^N\\frac{L_i(p,\\omega_i)f_r(p,\\omega_i,\\omega_o)(n\\cdot\\omega_i)}{p(\\omega_i)} \\end{aligned}\\] direct illumination<pre><code>shade(p, wo)\n    Randomly choose N directions wi~pdf(w)\n    Lo = 0.0\n    For each wi\n        Trace a ray r(p, wi)\n        If ray r hit the light\n            Lo += (1 / N) * L_i * f_r * cosine / pdf(wi)\n</code></pre>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#global-illumination","title":"Global Illumination","text":"<p>\u9012\u5f52\u7279\u6027</p> <p>Q \u53cd\u5c04\u5230 P \u7684\u5149\u7ebf\uff0c\u76f8\u5f53\u4e8e\u4ece P \u70b9\u770b Q \u70b9\u7684 direct illumination</p> global illumination<pre><code>shade(p, wo)\n    Randomly choose N directions wi~pdf(w)\n    Lo = 0.0\n    For each wi\n        Trace a ray r(p, wi)\n        If ray r hit the light\n            Lo += (1 / N) * L_i * f_r * cosine / pdf(wi)\n        Else If ray r hit an object at q:\n            Lo += (1 / N) * shade(q, -wi) * f_r * cosine / pdf(wi)\n    Return Lo\n</code></pre>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#path-tracing_1","title":"Path Tracing","text":"<p>done? NO</p> <ul> <li>\u5149\u7ebf\u6570\u91cf\u7206\u70b8 \\(\\#\\text{rays}=N^{\\#\\text{bounces}}\\)</li> <li>\u53ea\u6709 \\(N=1\\) \u7684\u65f6\u5019\uff0c\u4e0d\u4f1a\u7206\u70b8</li> </ul> global illumination, path tracing<pre><code>shade(p, wo)\n    Randomly choose ONE directions wi~pdf(w)\n    Trace a ray r(p, wi)\n    If ray r hit the light\n        Return L_i * f_r * cosine / pdf(wi)\n    Else If ray r hit an object at q:\n        Return shade(q, -wi) * f_r * cosine / pdf(wi)\n    Return Lo\n</code></pre> <p>Note</p> <p>Path Tracing \u5c31\u662f \\(N=1\\) \u7684\u60c5\u51b5\uff0c\u5982\u679c \\(N\\neq 1\\)\uff0c\u79f0\u4e3a Distributed Ray Tracing</p>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#problem-1-noise-control","title":"Problem 1: Noise Control","text":"<p>too noisy?</p> <p></p> <p>multiple paths\uff0c\u6c42\u5e73\u5747</p> global illumination, path tracing, multiple paths<pre><code>ray_generation(camPos, pixel)\n    Uniformly choose N sample positions within the pixel\n    pixel_radiance = 0.0\n    For each sample in the pixel\n        Shoot a ray r(camPos, cam_to_sample)\n        If ray r hit the scene at p\n            pixel_radience += 1 / N * shade(p, sample_to_cam)\n    Return pixel_radiance\n</code></pre>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#problem-2-recursion","title":"Problem 2: Recursion","text":"<p>Russian Roulette (RR)</p> <ul> <li>with probability \\(0&lt;p&lt;1\\), continue</li> <li>with probability \\(1-p\\), stop</li> <li>\u671f\u671b\u8fdb\u884c \\(\\frac{1}{1-p}\\) \u6b21</li> </ul> <ul> <li>\u4e00\u4e2a\u70b9\u63a5\u6536\u5230\u4e00\u4e2a\u5149\u7ebf\u540e\uff1a<ul> <li>\u4ee5 \\(p\\) \u7684\u6982\u7387\u7ee7\u7eed\u53d1\u5c04\u5149\u7ebf\u8ffd\u8e2a\uff0c\u5f97\u5230 \\(L_{o}/p\\) \uff08\u4eba\u4e3a\u9664\u4ee5 \\(p\\)\uff09</li> <li>\u4ee5 \\(1-p\\) \u7684\u6982\u7387\u4e0d\u8ffd\u8e2a\uff0c\u5f97\u5230 \\(0\\)</li> <li>\u90a3\u4e48\u671f\u671b\u662f \\(E=p \\cdot (L_{o}/p)+(1-p)\\cdot 0=L_{o}\\)\uff0c\u671f\u671b\u4e0e\u771f\u5b9e\u503c\u4e00\u6837\uff01</li> </ul> </li> </ul> global illumination, path tracing<pre><code>shade(p, wo)\n    Manually specify a probability P_RR\n    Randomly select ksi in a uniform dist. in [0, 1]\n    If (ksi &gt; P_RR) Return 0.0\n\n    Randomly choose ONE directions wi~pdf(w)\n    Trace a ray r(p, wi)\n    If ray r hit the light\n        Return L_i * f_r * cosine / pdf(wi) / P_RR\n    Else If ray r hit an object at q:\n        Return shade(q, -wi) * f_r * cosine / pdf(wi) / P_RR\n    Return Lo\n</code></pre>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#advanced-problem-path-tracing-is-not-efficient","title":"Advanced Problem: Path Tracing is not efficient","text":"<p>Note</p> <p>SPP(samples per pixel) \u8db3\u591f\u5927\uff0c\u6548\u679c\u624d\u80fd\u597d\uff0c\u4f46\u662f\u6548\u7387\u4f1a\u53d8\u4f4e</p> <p></p> <p>Note</p> <ul> <li>\u5149\u6e90\u5927\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u9700\u8981\u592a\u591a\u5149\u7ebf</li> <li>\u5149\u6e90\u5c0f\u7684\u65f6\u5019\uff0c\u9700\u8981\u5f88\u591a\u5149\u7ebf</li> <li>\u5747\u5300\u5411\u6240\u6709\u65b9\u5411\u91c7\u6837\uff0c\u4f1a\u9020\u6210\u6d6a\u8d39\uff0c\u9700\u8981\u7528\u975e\u5747\u5300\u7684 PDF</li> </ul>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#sampling-the-light","title":"Sampling the light","text":"<p>\u5982\u4f55\u5b9e\u73b0\u5bf9\u5149\u6e90\u91c7\u6837\uff1f</p> <ul> <li>\u6e32\u67d3\u65b9\u7a0b\u5728\u534a\u7403\u4e0a\u79ef\u5206\uff0c\u5149\u6e90\u91c7\u6837\u5728\u5149\u6e90 \\(A\\) \u4e0a\u79ef\u5206 \\(p=1/A\\)</li> <li>\u9700\u8981\u627e\u5230 \\(A\\) \u548c \\(\\omega\\) \u7684\u5173\u7cfb\u627e\u5230\uff0c\u5c06 Monte Carlo \u5199\u6210\u5728 \\(A\\) \u4e0a\u91c7\u6837</li> </ul> <p>\u6839\u636e\u7acb\u4f53\u89d2\u5173\u7cfb\u5f97\u5230\uff1a</p> \\[d\\omega=\\frac{dA\\cos\\theta^{\\prime}}{\\|x^{\\prime}-x\\|^2}\\] <p>\u6539\u53d8\u79ef\u5206\u57df\uff1a</p> \\[\\begin{aligned} L_o(x,\\omega_o) &amp; =\\int_{\\Omega^+}L_i(x,\\omega_i)f_r(x,\\omega_i,\\omega_o)\\cos\\theta\\mathrm{d}\\omega_i \\\\  &amp; =\\int_AL_i(x,\\omega_i)f_r(x,\\omega_i,\\omega_o)\\frac{\\cos\\theta\\cos\\theta^{\\prime}}{\\|x^{\\prime}-x\\|^2}\\mathrm{d}A \\end{aligned}\\]"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#light-source-vs-other","title":"light source v.s. other","text":"<p>\u5206\u6210\u4e24\u90e8\u5206\u8003\u8651</p> <ul> <li>\u5149\u6e90\u90e8\u5206\u76f4\u63a5\u5728\u5149\u6e90\u4e0a\u91c7\u6837\uff0c\u4e0d\u7528\u4f7f\u7528 RR</li> <li>\u5176\u4ed6\u90e8\u5206\u4ecd\u7136\u4f7f\u7528 RR</li> </ul> sampling the light<pre><code>shade(p, wo)\n    # Contribution from the light source.\n    L_dir = 0.0\n    Uniformly sample the light at x' (pdf_light = 1 / A)\n    Shoot a ray from p to x'\n    If the ray is not blocked in the middle\n        L_dir = L_i * f_r * cos theta * cos theta' / |x'-p| ^ 2 / pdf_light\n\n    # Contribution from other reflections\n    L_indir = 0.0\n    Test Russian Roulette with probability P_RR\n    Uniformly sample the hemishpere toward wi (pdf_hemi = 1 / 2pi)\n    Trace a ray r(p, wi)\n    If ray r hit a non-emiting object at q\n        L_indir = shade(q, -wi) * f_r * cos theta / pdf_hemi / P_RR\n\n    Return L_dir + L_indir\n</code></pre> <p>Important</p> <p>\u6ce8\u610f\u5149\u6e90\u91c7\u6837\u65f6\uff0c\u8981\u4fdd\u8bc1\u5149\u6e90\u4e0d\u88ab\u906e\u6321</p>"},{"location":"GAMES101/GAMES101%2007%20Ray%20Tracing.html#outro","title":"Outro","text":"<ul> <li>Path Tracing is PHOTO-REALISTIC</li> <li>Ray tracing: Previous v.s. Modern Concepts<ul> <li>previous<ul> <li>ray tracing == Whitted-style ray tracing</li> </ul> </li> <li>modern<ul> <li>The general solution fo light transport</li> <li>path tracing</li> <li>photon mapping</li> <li>...</li> </ul> </li> </ul> </li> <li> how to uniformly sample the hemisphere? </li> <li> what's the best pdf? </li> <li>random number matters(low discrepancy sequences)</li> <li>\u7ed3\u5408 hemishpere \u548c light \u4e24\u79cd\u91c7\u6837\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u6548\u679c</li> <li>radiance \u4e0d\u662f color\uff0c\u9700\u8981\u7ecf\u8fc7 gamma correction \u624d\u80fd\u5f97\u5230 rgb color</li> </ul>"},{"location":"GAMES101/GAMES101%2008%20Materials%20and%20Appearances.html","title":"08 Materials and Appearances","text":""},{"location":"GAMES101/GAMES101%2008%20Materials%20and%20Appearances.html#intro","title":"Intro","text":"<ul> <li>\u4e0d\u540c\u7684\u6750\u8d28\u4e0e\u5149\u7ebf\u7684\u4f5c\u7528\u4e0d\u540c</li> <li>\u753b\u9762\u5e94\u8be5\u80fd\u591f\u4f53\u73b0\u6750\u8d28\u7684\u4e0d\u540c</li> </ul> \\[\\text{Material}=\\text{BRDF}\\]"},{"location":"GAMES101/GAMES101%2008%20Materials%20and%20Appearances.html#diffuse-lambertian-material","title":"Diffuse / Lambertian Material","text":"<p>\u5728\u6240\u6709\u65b9\u5411\u4e0a\u79ef\u5206\u5f97\u5230\u7684\u51fa\u5c04\u5149\uff1a</p> \\[\\begin{aligned} L_o(\\omega_o) &amp; =\\int_{H^2}f_rL_i(\\omega_i)\\cos\\theta_i\\mathrm{d}\\omega_i \\\\  &amp; =f_rL_i\\int_{H^2}(\\omega_i)\\cos\\theta_i\\mathrm{d}\\omega_i \\\\  &amp; =\\pi f_rL_i \\end{aligned}\\] <p>\u7531\u4e8e\u5047\u8bbe \\(L_{i}=L_{o}\\)\uff0c\u5f97\u5230 \\(f_{r}=\\frac{1}{\\pi}\\)\uff0c\u5c31\u662f\u4e0d\u5438\u6536\u60c5\u51b5\u4e0b\u7684\u5747\u5300\u6f2b\u53cd\u5c04\uff0c\u53ef\u4ee5\u8003\u8651\u5438\u6536\uff1a</p> \\[f_{r}=\\frac{\\rho}{\\pi}\\quad\\rho\\text{ is albedo(color) \u57fa\u7840\u53cd\u5c04\u7387}\\]"},{"location":"GAMES101/GAMES101%2008%20Materials%20and%20Appearances.html#glossy-material","title":"Glossy Material","text":""},{"location":"GAMES101/GAMES101%2008%20Materials%20and%20Appearances.html#ideal-reflective-refractive-material-bsdf","title":"Ideal Reflective / Refractive Material (BSDF)","text":"<p>S \u8868\u793a\u6563\u5c04\uff0c\u5305\u62ec\u53cd\u5c04\u548c\u6298\u5c04</p> <p></p>"},{"location":"GAMES101/GAMES101%2008%20Materials%20and%20Appearances.html#perfect-specular-reflection","title":"Perfect Specular Reflection","text":""},{"location":"GAMES101/GAMES101%2008%20Materials%20and%20Appearances.html#specular-refraction","title":"Specular Refraction","text":"\\[\\eta_{i}\\sin \\theta_{i}=\\eta_{t}\\sin \\theta_{t}\\] <p>\u5168\u53cd\u5c04\uff0c\u5149\u5bc6\u4ecb\u8d28\u5230\u5149\u758f\u4ecb\u8d28\uff0c\u6298\u5c04\u89d2\u4e3a 90\u00b0</p>"},{"location":"GAMES101/GAMES101%2008%20Materials%20and%20Appearances.html#fresnel-term","title":"Fresnel Term","text":"<p>\u4e0d\u540c\u89d2\u5ea6\u7684\u53cd\u5c04\u7387\u4e0d\u540c</p> <p></p> <p></p> <p>Note</p> <p>\u5bfc\u4f53\u548c\u7edd\u7f18\u4f53\u7684\u53d8\u5316\u8d8b\u52bf\u4e0d\u540c</p> \\[\\begin{align} R_s&amp;=\\left|\\frac{n_1\\cos\\theta_i-n_2\\cos\\theta_i}{n_1\\cos\\theta_i+n_2\\cos\\theta_i}\\right|^2=\\left|\\frac{n_1\\cos\\theta_i-n_2\\sqrt{1-\\left(\\frac{n_1}{n_2}\\sin\\theta_i\\right)^2}}{n_1\\cos\\theta_i+n_2\\sqrt{1-\\left(\\frac{n_1}{n_2}\\sin\\theta_i\\right)^2}}\\right|^2 \\\\ R_p&amp;=\\left|\\frac{n_1\\cos\\theta_i-n_2\\cos\\theta_i}{n_1\\cos\\theta_i+n_2\\cos\\theta_i}\\right|^2=\\left|\\frac{n_1\\sqrt{1-\\left(\\frac{n_1}{n_2}\\sin\\theta_i\\right)^2}-n_2\\cos\\theta_i}{n_1\\sqrt{1-\\left(\\frac{n_1}{n_2}\\sin\\theta_i\\right)^2}+n_2\\cos\\theta_i}\\right|^2\\\\ R_{\\mathrm{eff}}&amp;=\\frac{1}{2}\\left(R_{\\mathrm{s}}+R_{\\mathrm{p}}\\right)  \\end{align}\\]"},{"location":"GAMES101/GAMES101%2008%20Materials%20and%20Appearances.html#approximate-schlicks-approximation","title":"Approximate: Schlick's approximation","text":"\\[\\begin{aligned} R(\\theta) &amp; =R_0+(1-R_0)(1-\\cos\\theta)^5 \\\\ R_{0} &amp; =\\left(\\frac{n_1-n_2}{n_1+n_2}\\right)^2 \\end{aligned}\\]"},{"location":"GAMES101/GAMES101%2008%20Materials%20and%20Appearances.html#microfacet-material","title":"Microfacet Material","text":"<p>Note</p> <p>\u4ece\u8fdc\u5904\u770b\uff0c\u8868\u9762\u4e0a\u5fae\u5c0f\u7684\u7c97\u7cd9\u90e8\u5206\u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd\uff0c\u770b\u5230\u7684\u5c31\u662f\u5149\u6ed1\u7684\u8868\u9762</p> <p></p> <ul> <li>\u4ece\u8fdc\u5904\u770b\uff0c\u5f53\u4f5c\u5e73\u9762+\u7eb9\u7406</li> <li>\u4ece\u8fd1\u5904\u770b\uff0c\u5f53\u4f5c\u51e0\u4f55\u6a21\u578b</li> </ul>"},{"location":"GAMES101/GAMES101%2008%20Materials%20and%20Appearances.html#microfacet-brdf","title":"Microfacet BRDF","text":"<ul> <li>F \u83f2\u6d85\u5c14\u9879\uff0c\u89d2\u5ea6\u5f71\u54cd\u53cd\u5c04\u7387</li> <li>G shadowing-masking term \u5fae\u8868\u9762\u53ef\u80fd\u76f8\u4e92\u906e\u6321\uff0c\u5bfc\u81f4\u4eae\u5ea6\u4e0b\u964d</li> <li>D \u6cd5\u5411\u91cf\u5206\u5e03\uff0c\u5c31\u662f\u6c42\u51fa\u6709\u591a\u5c11\u6cd5\u5411\u91cf\u6cbf\u7740\u534a\u7a0b\u5411\u91cf\u65b9\u5411\uff0c\u8fd9\u6837\u7684\u5411\u91cf\u624d\u80fd\u6b63\u786e\u5c06\u5149\u53cd\u5c04\u5230\u89c6\u91ce\u4e2d</li> </ul>"},{"location":"GAMES101/GAMES101%2008%20Materials%20and%20Appearances.html#isotropic-anisotropic-materials","title":"Isotropic / Anisotropic Materials","text":"<p>\u5404\u5411\u540c\u6027/\u5404\u5411\u5f02\u6027\u6750\u8d28</p> <p></p> <p></p> <p>Note</p> <ul> <li>\u4f8b\u5982\u78e8\u8fc7\u7684\u91d1\u5c5e\u662f\u5404\u5411\u5f02\u6027\u5fae\u8868\u9762</li> <li>\u5404\u5411\u5f02\u6027 BRDF \u4e0e\u65b9\u4f4d\u89d2 \\(\\phi\\) \u6709\u5173</li> </ul>"},{"location":"GAMES101/GAMES101%2008%20Materials%20and%20Appearances.html#properties-of-brdfs","title":"Properties of BRDFs","text":"<ul> <li>\u975e\u8d1f\u6027</li> <li>\u7ebf\u6027\u6027\uff0c\u53ef\u4ee5\u5c06 BRDF \u62c6\u6210\u5f88\u591a\u79cd\uff0c\u5206\u522b\u8ba1\u7b97\u7136\u540e\u76f8\u52a0</li> <li>\u53ef\u9006\u6027(reciprocity)\uff0c\u6cbf\u7740\u9006\u5411\u5149\u8def\u7684 BRDF \u503c\u5b8c\u5168\u4e00\u6837</li> <li>\u80fd\u91cf\u5b88\u6052\uff0c\u51fa\u5c04\u80fd\u91cf\u4e4b\u548c\u4e0d\u4f1a\u8d85\u8fc7\u5165\u5c04\u80fd\u91cf\u4e4b\u548c</li> <li>isotropic vs. anisotropic<ul> <li>isotropic: \\(f_r(\\theta_i,\\phi_i;\\theta_r,\\phi_r)=f_r(\\theta_i,\\theta_r,\\phi_r-\\phi_i)\\)</li> <li>\u6839\u636e reciprocity: \\(f_r(\\theta_i,\\theta_r,\\phi_r-\\phi_i)=f_r(\\theta_r,\\theta_i,\\phi_i-\\phi_r)=f_r(\\theta_i,\\theta_r,|\\phi_r-\\phi_i|)\\) \u53ea\u7528\u8003\u8651\u65b9\u4f4d\u89d2\u7684\u5dee</li> </ul> </li> </ul>"},{"location":"GAMES101/GAMES101%2008%20Materials%20and%20Appearances.html#measuring-brdfs","title":"Measuring BRDFs","text":""},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html","title":"09 Advanced Topics in Rendering","text":""},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#advanced-light-transport","title":"Advanced Light Transport","text":""},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#biased-vs-unbiased-monte-carlo-estimators","title":"Biased vs. Unbiased Monte Carlo Estimators","text":"<p>\u6709\u504f\u3001\u6e10\u8fdb\u65e0\u504f\u548c\u65e0\u504f\u4f30\u8ba1</p>"},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#bidirectional-path-tracing-bdpt","title":"Bidirectional Path Tracing (BDPT)","text":"<p>Note</p> <p>\u4ece\u5149\u6e90\u548c\u76f8\u673a\u51fa\u53d1\uff0c\u5206\u522b\u5f62\u6210\u534a\u8def\u5f84\uff0c\u7136\u540e\u5c06\u534a\u8def\u5f84\u8fde\u63a5</p> <p></p> <p>Note</p> <ul> <li>\u6574\u4e2a\u573a\u666f\u5e94\u8be5\u90fd\u88ab\u95f4\u63a5\u5149\u7167\u4eae\uff0c\u4f46\u662f path tracing \u7684\u7b2c\u4e00\u6b21\u662f diffuse\uff0c\u53ea\u6709\u9009\u5230\u4e86\u5929\u82b1\u677f\u7684\u4f4d\u7f6e\u5e76\u53cd\u5c04\u5230\u5149\u6e90\u624d\u662f\u4eae\u5ea6\u50cf\u7d20</li> <li>\u5982\u679c\u4f7f\u7528 BDPT\uff0c\u76f8\u5f53\u4e8e\u5c06\u5929\u82b1\u677f\u4eae\u7684\u533a\u57df\u53d8\u6210\u4e00\u4e2a\u5927\u7684\u5149\u6e90\u4e86</li> </ul>"},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#metropolis-light-transport-mlt","title":"Metropolis Light Transport (MLT)","text":"<ul> <li>\u4f7f\u7528 Markov Chain Monte Carlo (MCMC)</li> <li>\u6839\u636e\u4e00\u4e2a\u6709\u6548\u7684\u91c7\u6837\u70b9\uff0c\u627e\u5230\u65c1\u8fb9\u91c7\u6837\u70b9\u7684\u6709\u6548\u8def\u5f84\uff08\u5c40\u90e8\u641c\u7d22\uff09</li> </ul> <p>Note</p> <ul> <li>\u53ea\u8981\u627e\u5230\u4e00\u6761\u5230\u5149\u6e90\u7684\u8def\u5f84\uff0c\u5c31\u80fd\u627e\u5230\u66f4\u591a</li> <li>\u80fd\u591f\u6e32\u67d3\u6c34\u5e95\u5149\u7ebf\u805a\u7126\u5f62\u6210\u7684\u5149\u6591\uff01</li> </ul> <p>Question</p> <ul> <li>\u96be\u4ee5\u5206\u6790\u6536\u655b\u901f\u5ea6</li> <li>\u6709\u7684\u50cf\u7d20\u6536\u655b\u5feb\uff0c\u6709\u7684\u6536\u655b\u6162\uff0c\u53ef\u80fd\u56fe\u50cf\u4e0d\u5747\u5300\uff0c\u6bd4\u8f83\u810f</li> </ul>"},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#photon-maping","title":"Photon Maping","text":"<p>caustics</p> <p></p> <ol> <li>\u4ece\u5149\u6e90\u51fa\u53d1\uff0c\u4ea7\u751f\u5149\u5b50\uff0c\u8fdb\u884c\u53cd\u5c04\u6298\u5c04\uff0c\u76f4\u5230\u5149\u5b50\u5230\u8fbe diffuse \u8868\u9762\u7684\u65f6\u5019\u201c\u505c\u5728\u201d\u8868\u9762\u4e0a</li> <li>\u4ece\u76f8\u673a\u51fa\u53d1\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u50cf\u7d20\uff0c\u627e\u5468\u56f4\u6700\u8fd1\u7684 n \u4e2a\u5149\u5b50\uff0c\u7b97\u51fa\u5176\u5360\u636e\u7684\u9762\u79ef\uff0c\u4f30\u8ba1\u5149\u5b50\u5bc6\u5ea6</li> </ol> <p></p> <p>problems</p> <ul> <li>n \u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\uff0c\u975e\u5e38 noisy</li> <li>n \u975e\u5e38\u5927\u7684\u65f6\u5019\uff0c\u4f1a blurry<ul> <li>biased: \u5149\u5b50\u65e0\u9650\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u6709 \\(\\Delta A=\\mathrm{d}A\\)</li> <li>\u53ea\u8981 blurry \u90fd\u53eb\u6709\u504f\uff0c\u4f46\u786e\u5b9e\u662f consistent \u7684</li> </ul> </li> </ul> <p>\u5982\u679c\u53d6\u4e34\u8fd1\u5c0f\u9762\u79ef\u5462\uff1f</p> <p>\u5b8c\u5168\u6709\u504f\u4f30\u8ba1\uff0c\u56e0\u4e3a \\(\\Delta A\\) \u4e0d\u4f1a\u7f29\u5c0f</p>"},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#vertex-connection-and-merging-vcm","title":"Vertex Connection and Merging (VCM)","text":"<ul> <li>\u4e0d\u6d6a\u8d39 BDPT \u4e2d\u5149\u6e90\u53d1\u51fa\u7684\u5149\u5b50</li> <li>\u4f7f\u7528\u4e86 PM \u6765\u8fde\u63a5\u5230\u4e34\u8fd1\u5149\u5b50</li> </ul>"},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#instant-radiosity-ir","title":"Instant Radiosity (IR)","text":"<ul> <li>\u5149\u6e90\u51fa\u6765\u7684 light sub-path \u5230\u8fbe\u7684\u70b9\uff0c\u4f5c\u4e3a\u65b0\u7684\u5149\u6e90 (Virtual Point Lights, VPL)</li> <li> \u4e0d\u80fd\u505a glossy \u7684\u7269\u4f53 </li> </ul>"},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#advanced-appearance-modeling","title":"Advanced Appearance Modeling","text":""},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#non-surface-models","title":"Non-Surface Models","text":""},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#participating-media","title":"Participating Media","text":"<p>fog, cloud</p> <p></p> <p>\u88ab\u5438\u6536\u6216\u8005\u6563\u5c04</p> <p></p> <p>Phase Function (\u76f8\u4f4d\u51fd\u6570) \u5b9a\u4e49\u6563\u5c04\u7684\u5206\u5e03\uff0c\u7c7b\u4f3c BRDF</p> <p></p>"},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#hair-appearance","title":"Hair Appearance","text":""},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#marschner-model","title":"Marschner Model","text":"<p>Note</p> <p>\u8003\u8651\u4e86\u4e09\u79cd\u60c5\u51b5</p> <ul> <li>R \u76f4\u63a5\u53cd\u5c04</li> <li>TT \u4e24\u6b21\u6298\u5c04</li> <li>TRT \u5165\u5c04\u540e\u53cd\u5c04</li> </ul> <p></p> <p>Note</p> <p>\u5c06\u5934\u53d1\u5f53\u4f5c\u73bb\u7483\u5706\u67f1</p> <p>problem</p> <p>\u65e0\u6cd5\u6a21\u62df\u52a8\u7269\u7684\u6bdb\u53d1\uff0c\u52a8\u7269\u6bdb\u53d1\u4e2d\u7684 medulla \u66f4\u5927\uff0c\u4e0e\u5149\u7684\u4f5c\u7528\u6548\u679c\u4e0d\u540c</p>"},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#double-cylinder-model","title":"Double Cylinder Model","text":""},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#granular-material","title":"Granular Material","text":"<p>\u9897\u7c92\u6a21\u578b</p>"},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#surface-models","title":"Surface Models","text":""},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#translucent-material","title":"Translucent Material","text":"<p>\u7c7b\u4f3c\u7389\u77f3\u3001\u76ae\u80a4\u7684\u534a\u900f\u660e\u6750\u8d28</p> <p></p> <p>Note</p> <p>Subsurface Scattering (\u6b21\u8868\u9762\u6563\u5c04)</p> <p></p> <p>BSSRDF</p> <p>\u8003\u8651\u4e0d\u4ece\u5165\u5c04\u70b9\u51fa\u5c04\uff0c\u6240\u4ee5\u8fd8\u4f1a\u5bf9\u9762\u79ef\u79ef\u5206</p> <p></p> <p>Dipole Approximation</p> <p>\u8868\u9762\u4e0a\u4e0b\u5404\u4e00\u4e2a\u5149\u6e90\uff0c\u6a21\u62df\u6b21\u8868\u9762\u6563\u5c04\u7684\u6548\u679c</p>"},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#cloth","title":"Cloth","text":"<p>\u4e09\u79cd\u6e32\u67d3\u65b9\u6cd5</p> <ul> <li>\u5f53\u6210\u7269\u4f53\u8868\u9762</li> <li>\u5f53\u6210\u6563\u5c04\u4ecb\u8d28</li> <li>\u66b4\u529b\u8ba1\u7b97</li> </ul>"},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#details","title":"Details","text":"<p>\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u8f66\u3001\u6c34\u58f6\u7b49\u8868\u9762\u5e76\u975e\u5b8c\u5168\u5149\u6ed1\uff0c\u800c\u662f\u4f1a\u6709\u5212\u75d5\u7ec6\u8282 or \u5404\u5411\u5f02\u6027\u7eb9\u8def</p> <p></p> <p>Note</p> <ul> <li>\u4f7f\u7528\u7cbe\u7ec6\u7684\u3001\u6709\u566a\u58f0\u7684\u6cd5\u7ebf\u8d34\u56fe\u6765\u6dfb\u52a0\u7ec6\u8282</li> <li>\u89e3\u51b3\u8ba1\u7b97\u91cf\u95ee\u9898\uff1a\u5c06\u4e00\u4e2a\u50cf\u7d20\u5bf9\u5e94\u5230\u7684\u8868\u9762\u7684\u6cd5\u7ebf\u8fdb\u884c\u5e73\u5747</li> </ul>"},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#wave-optics","title":"Wave Optics","text":""},{"location":"GAMES101/GAMES101%2009%20Advanced%20Topics%20in%20Rendering.html#procedural-appearance","title":"Procedural Appearance","text":"<p>\u566a\u58f0 -&gt;\u8d34\u56fe</p>"},{"location":"GAMES101/GAMES101%2010%20Cameras%2C%20Lenses%20and%20Light%20Fields.html","title":"10 Cameras, Lenses and Light Fields","text":""},{"location":"GAMES101/GAMES101%2010%20Cameras%2C%20Lenses%20and%20Light%20Fields.html#concepts-in-photography","title":"Concepts in Photography","text":""},{"location":"GAMES101/GAMES101%2010%20Cameras%2C%20Lenses%20and%20Light%20Fields.html#lense","title":"Lense","text":""},{"location":"GAMES101/GAMES101%2010%20Cameras%2C%20Lenses%20and%20Light%20Fields.html#thin-lens","title":"Thin Lens","text":"<ul> <li>\u6ca1\u6709\u539a\u5ea6</li> <li>\u7126\u8ddd\u53ef\u8c03</li> <li>\u5b8c\u7f8e\u805a\u7126</li> </ul>"},{"location":"GAMES101/GAMES101%2010%20Cameras%2C%20Lenses%20and%20Light%20Fields.html#circle-of-confusion-coc","title":"Circle of Confusion (CoC)","text":"<p>\u5f25\u6563\u5706</p> <p></p> <p>Note</p> <p>\u7126\u5916\u6a21\u7cca\u7a0b\u5ea6\u4e0e\u5149\u5708\u5927\u5c0f\u76f8\u5173</p>"},{"location":"GAMES101/GAMES101%2010%20Cameras%2C%20Lenses%20and%20Light%20Fields.html#f-stop","title":"F-Stop","text":"<p>F \u6570\u7b49\u4e8e\u7126\u8ddd\u9664\u4ee5\u5149\u5708\u76f4\u5f84 \\(N=f/D\\)</p>"},{"location":"GAMES101/GAMES101%2010%20Cameras%2C%20Lenses%20and%20Light%20Fields.html#in-rendering","title":"in rendering","text":"<ol> <li>\u6839\u636e\u7269\u8c61\u4f4d\u7f6e\u786e\u5b9a\u50cf\u8ddd\uff0c\u6446\u653e sensor</li> <li>\u8fdb\u884c\u5149\u7ebf\u8ffd\u8e2a</li> </ol> <p>Depth of field \u666f\u6df1</p> <ul> <li>\u6210\u50cf\u540e CoC \u8db3\u591f\u5c0f\u7684\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u6210\u50cf\u6e05\u6670\u7684\u4e00\u6bb5\u8303\u56f4</li> <li>\u5149\u5708\u8d8a\u5c0f\uff0c\u666f\u6df1\u8d8a\u5927</li> <li>\u7126\u8ddd\u8d8a\u5927\uff0c\u666f\u6df1\u8d8a\u5c0f</li> </ul>"},{"location":"GAMES101/GAMES101%2010%20Cameras%2C%20Lenses%20and%20Light%20Fields.html#light-field-lumigraph","title":"Light Field / Lumigraph","text":"<p>\u5168\u5149\u51fd\u6570</p> \\[P(\\theta,\\phi,\\lambda,t,V_x,V_y,V_z)\\] <p>\u65b9\u4f4d\u89d2\u3001\u6ce2\u957f\u3001\u65f6\u95f4\u3001\u7a7a\u95f4\u5750\u6807</p> <p>\u5149\u7ebf</p> \\[P(\\theta,\\phi,V_x,V_y,V_z)\\] <p>\u540c\u65f6\uff0c\u4e24\u70b9\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u6761\u5149\u7ebf</p> <p></p> <p>\u5149\u573a</p> <p>\u8bb0\u5f55\u4e86\u6240\u6709\u65b9\u5411\u770b\u7269\u4f53\u7684\u6240\u6709\u5149\u7684\u4fe1\u606f</p>"},{"location":"GAMES101/GAMES101%2010%20Cameras%2C%20Lenses%20and%20Light%20Fields.html#defining-a-light-field","title":"Defining a Light Field","text":""},{"location":"GAMES101/GAMES101%2010%20Cameras%2C%20Lenses%20and%20Light%20Fields.html#light-field-camera","title":"Light Field Camera","text":"<p>Note</p> <ul> <li>\u6bcf\u4e2a\u50cf\u7d20\u8bb0\u5f55\u7684\u4e0d\u662f irradiance \u800c\u662f radiance</li> <li>\u6bcf\u4e2a\u50cf\u7d20\u90fd\u662f\u5fae\u900f\u955c</li> <li>\u53ef\u4ee5\u540e\u671f\u8c03\u6574\u7126\u8ddd\u3001\u5149\u5708\u7b49</li> </ul> <p></p>"},{"location":"GAMES101/GAMES101%2011%20Color%20and%20Perception.html","title":"11 Color and Perception","text":""},{"location":"GAMES101/GAMES101%2011%20Color%20and%20Perception.html#physical-basis-of-colors","title":"Physical Basis of Colors","text":""},{"location":"GAMES101/GAMES101%2011%20Color%20and%20Perception.html#spectral-power-distribution-spd","title":"Spectral Power Distribution (SPD)","text":"<p>\u8c31\u529f\u7387\u5bc6\u5ea6</p> <p></p> <p>Note</p> <p>SPD \u5177\u6709\u7ebf\u6027\u6027\u8d28</p>"},{"location":"GAMES101/GAMES101%2011%20Color%20and%20Perception.html#biological-basis-of-colors","title":"Biological Basis of Colors","text":"<ul> <li>retinal photoreceptor cells<ul> <li>rods \u68d2\u72b6\u7ec6\u80de\uff0c\u611f\u77e5\u5149\u5f3a</li> <li>cones \u9525\u5f62\u7ec6\u80de\uff0c\u611f\u77e5\u989c\u8272\uff0c\u5206\u4e3a S M L \u4e09\u7c7b\uff0c\u611f\u77e5\u4e0d\u540c\u7684\u6ce2\u957f</li> </ul> </li> </ul> <p>Note</p> <p>\\(S,M,L\\) \u662f\u4e09\u79cd\u9525\u5f62\u7ec6\u80de\u7684\u8f93\u51fa\u91cf</p>"},{"location":"GAMES101/GAMES101%2011%20Color%20and%20Perception.html#metamers","title":"Metamers","text":"<p>\u540c\u8272\u5f02\u8c31\uff0c\u5149\u8c31\u4e0d\u540c\uff0c\u4f46\u662f\u79ef\u5206\u76f8\u540c\uff0cthe theory behind color matching</p> <p></p>"},{"location":"GAMES101/GAMES101%2011%20Color%20and%20Perception.html#color-matching","title":"Color Matching","text":""},{"location":"GAMES101/GAMES101%2011%20Color%20and%20Perception.html#color-spaces","title":"Color Spaces","text":"<ul> <li>Standardized RGB (sRGB)</li> <li>XYZ a universal color space<ul> <li>\u53ea\u662f\u5339\u914d\u51fd\u6570\u4e0d\u540c</li> </ul> </li> </ul> <ul> <li>HSV<ul> <li>hue(\u8272\u8c03), saturation(\u9971\u548c\u5ea6), value(\u4eae\u5ea6)</li> </ul> </li> <li>LAB Space</li> <li>CMYK</li> </ul>"},{"location":"GAMES101/GAMES101%2012%20Animation.html","title":"12 Animation","text":""},{"location":"GAMES101/GAMES101%2012%20Animation.html#mass-spring-system","title":"Mass Spring System","text":""},{"location":"GAMES101/GAMES101%2012%20Animation.html#a-simple-spring","title":"A Simple Spring","text":"\\[\\begin{aligned}  &amp; \\boldsymbol{f}_{a\\to b}=k_S(\\boldsymbol{b}-\\boldsymbol{a}) \\\\  &amp; \\boldsymbol{f}_{b\\to a}=-\\boldsymbol{f}_{a\\to b} \\end{aligned}\\] <p>\u8003\u8651\u5f39\u7c27\u539f\u957f\u5ea6\uff1a</p> \\[\\boldsymbol{f}_{a\\to b}=k_S\\frac{\\boldsymbol{b}-\\boldsymbol{a}}{||\\boldsymbol{b}-\\boldsymbol{a}||}\\left(||\\boldsymbol{b}-\\boldsymbol{a}||-l\\right)\\] <p>\u8003\u8651\u5f39\u7c27\u4e0a\u7684\u5fae\u5c0f\u6469\u64e6\uff1a</p> \\[f_{\\boldsymbol{b}}=-k_d\\frac{\\boldsymbol{b}-\\boldsymbol{a}}{\\|\\boldsymbol{b}-\\boldsymbol{a}\\|}(\\dot{\\boldsymbol{b}}-\\dot{\\boldsymbol{a}})\\cdotp\\frac{\\boldsymbol{b}-\\boldsymbol{a}}{||\\boldsymbol{b}-\\boldsymbol{a}||}\\]"},{"location":"GAMES101/GAMES101%2012%20Animation.html#structures-from-springs","title":"Structures from Springs","text":"<p>Note</p> <p>\u80fd\u591f\u4fdd\u8bc1\u5728\u62c9\u4f38\u3001\u538b\u7f29\u3001\u7ffb\u6298\u7684\u65f6\u5019\u90fd\u4f1a\u5bfc\u81f4\u90e8\u5206\u5f39\u7c27\u957f\u5ea6\u53d8\u5316\uff0c\u4ece\u800c\u80fd\u81ea\u53d1\u7a33\u5b9a\u5230\u5e73\u9762\u5f62\u6001</p> <p>Note</p> <p>Finite Element Method (FEM) \u4e5f\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u7c7b\u4f3c\u7684\u6548\u679c</p>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#particle-systems","title":"Particle Systems","text":"<ul> <li>\u6bcf\u4e2a\u7c92\u5b50\u7684\u8fd0\u52a8\u90fd\u53d6\u51b3\u4e8e\u5916\u529b\u4f5c\u7528</li> <li>\u53ef\u80fd\u9700\u8981\u5f88\u591a\u7684\u7c92\u5b50\uff0c\u4ee5\u53ca\u90bb\u5c45\u641c\u7d22\u7684\u6570\u636e\u7ed3\u6784</li> </ul>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#simulated-flocking","title":"Simulated Flocking","text":"<p>Note</p> <p>\u5b9a\u4e49\u4e2a\u4f53\u548c\u7fa4\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u72b6\u6001\u66f4\u65b0</p>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#kinematics","title":"Kinematics","text":""},{"location":"GAMES101/GAMES101%2012%20Animation.html#forward","title":"Forward","text":""},{"location":"GAMES101/GAMES101%2012%20Animation.html#inverse","title":"Inverse","text":"<p>Note</p> <ul> <li>\u53ef\u80fd\u6ca1\u6709\u552f\u4e00\u89e3\uff0c\u53ef\u80fd\u6ca1\u6709\u89e3</li> <li>\u53ef\u4ee5\u4f7f\u7528\u4f18\u5316\u6cd5\u6765\u89e3\u65b9\u7a0b</li> </ul>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#rigging","title":"Rigging","text":"<p>\u4f8b\u5982\u901a\u8fc7\u63a7\u5236\u9aa8\u9abc\u6216\u8005\u53ef\u52a8\u5355\u5143\u7684\u63a7\u5236\u70b9\uff0c\u6765\u63a7\u5236\u4eba\u7269\u59ff\u52bf\u6216\u8868\u60c5</p>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#motion-capture","title":"Motion Capture","text":""},{"location":"GAMES101/GAMES101%2012%20Animation.html#facial-motion-capture","title":"Facial Motion Capture","text":""},{"location":"GAMES101/GAMES101%2012%20Animation.html#production-pipeline","title":"Production Pipeline","text":""},{"location":"GAMES101/GAMES101%2012%20Animation.html#single-particle-simution","title":"Single Particle Simution","text":"<p>\u6a21\u62df\u4e00\u4e2a\u7c92\u5b50\u5728\u901f\u5ea6\u573a\u4e2d\u7684\u8fd0\u52a8</p> <p></p> <p>\u5e38\u5fae\u5206\u65b9\u7a0b\uff1a</p> \\[\\frac{\\mathrm{d}x}{\\mathrm{d}t}=\\dot{x}=v(x,t)\\]"},{"location":"GAMES101/GAMES101%2012%20Animation.html#eulers-method","title":"Euler's Method","text":"\\[\\begin{aligned}\\boldsymbol{x}^{t+\\Delta t}&amp;=\\boldsymbol{x}^t+\\Delta t\\boldsymbol{\\dot{x}}^t\\\\\\boldsymbol{\\dot{x}}^{t+\\Delta t}&amp;=\\boldsymbol{\\dot{x}}^t+\\Delta t\\boldsymbol{\\ddot{x}}^t\\end{aligned}\\] <p>Note</p> <ul> <li>simple iterative</li> <li>commonly used</li> <li> very inaccurate </li> <li> most often goesunstable </li> </ul>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#errors","title":"Errors","text":"<p>Note</p> <p>\u51cf\u5c0f \\(\\Delta t\\) \u80fd\u591f\u51cf\u5c0f\u8bef\u5dee</p>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#instability","title":"Instability","text":"<p>Note</p> <ul> <li>\u8bef\u5dee\u4f1a\u79ef\u7d2f\uff0c\u9020\u6210\u6a21\u578b\u53d1\u6563</li> <li>\u5b9e\u9645\u8fd0\u7528\u4e2d\uff0c\u8bef\u5dee\u53ef\u4ee5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5ffd\u7565\uff0c\u4f46\u662f\u4e0d\u7a33\u5b9a\u6027\u4e0d\u53ef\u88ab\u5ffd\u7565</li> </ul>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#midpoint-method","title":"Midpoint Method","text":"<p>Note</p> <ol> <li>\u8ba1\u7b97\u6b27\u62c9\u65b9\u6cd5</li> <li>\u5f97\u5230\u6b27\u62c9\u65b9\u6cd5\u4e0b\u7684\u4e2d\u70b9\u901f\u5ea6</li> <li>\u4f7f\u7528\u8fd9\u4e2a\u4e2d\u70b9\u901f\u5ea6</li> </ol> \\[\\begin{aligned} x_{\\mathrm{mid}} &amp; =x(t)+\\Delta t/2\\cdot v(x(t),t) \\\\ x(t+\\Delta t) &amp; =x(t)+\\Delta t\\cdot v(x_{\\mathrm{mid}},t) \\end{aligned}\\]"},{"location":"GAMES101/GAMES101%2012%20Animation.html#modified-euler","title":"Modified Euler","text":"\\[\\begin{aligned}  &amp; \\boldsymbol{x}^{t+\\Delta t}=\\boldsymbol{x}^t+\\frac{\\Delta t}{2}(\\dot{\\boldsymbol{x}}^t+\\dot{\\boldsymbol{x}}^{t+\\Delta t}) \\\\  &amp; \\dot{\\boldsymbol{x}}^{t+\\Delta t}=\\dot{\\boldsymbol{x}}^t+\\Delta t\\ddot{\\boldsymbol{x}}^t \\\\  &amp; \\boldsymbol{x}^{t+\\Delta t}=\\boldsymbol{x}^t+\\Delta t\\dot{\\boldsymbol{x}}^t+\\frac{(\\Delta t)^2}{2}\\ddot{\\boldsymbol{x}}^t \\end{aligned}\\] <p>Note</p> <ul> <li>\u4f7f\u7528\u8d77\u70b9\u548c\u7ec8\u70b9\u5904\u7684\u5e73\u5747\u901f\u5ea6</li> <li>\u5f15\u5165\u4e8c\u6b21\u5173\u7cfb\uff0c\u66f4\u52a0\u51c6\u786e</li> </ul>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#adaptive-step-size","title":"Adaptive Step Size","text":"<p>Note</p> <ul> <li>\u6309\u7167\u4e00\u4e2a\u6b65\u957f \\(\\Delta t\\) \u8ba1\u7b97\u5f97\u5230\u4e00\u4e2a\u7ec8\u70b9</li> <li>\u53d6 \\(\\Delta t/2\\) \u8ba1\u7b97\u4e24\u6b21\u5f97\u5230\u53e6\u4e00\u4e2a\u7ec8\u70b9</li> <li>\u6bcf\u6b21\u90fd\u53d6\u66f4\u5c0f\u7684\u6b65\u957f\uff0c\u76f4\u5230\u5f97\u5230\u7684\u7ec8\u70b9\u4f4d\u7f6e\u76f8\u8fd1</li> </ul>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#implicit-euler-method","title":"Implicit Euler Method","text":"\\[\\begin{aligned} \\boldsymbol{x}^{t+\\Delta t} &amp; =\\boldsymbol{x}^{t}+\\Delta t\\boldsymbol{\\dot{x}}^{t+\\Delta t} \\\\ \\boldsymbol{\\dot{x}}^{t+\\Delta t} &amp; =\\boldsymbol{\\dot{x}}^{t}+\\Delta t\\boldsymbol{\\ddot{x}}^{t+\\Delta t} \\end{aligned}\\] <p>Note</p> <ul> <li>\u76f4\u63a5\u4f7f\u7528\u4e0b\u4e00\u65f6\u523b\u7684\u901f\u5ea6\u52a0\u901f\u5ea6</li> <li>\u7a33\u5b9a\u6027\u597d\uff0c\u4f46\u662f\u9700\u8981\u89e3\u65b9\u7a0b</li> </ul> <p>quantize \"stability\"</p> <ul> <li>\u4e24\u79cd\u8bef\u5dee\u5b9a\u4e49<ul> <li>local truncation error (every step) \u5c40\u90e8\u622a\u65ad\u8bef\u5dee</li> <li>total accumulated error (overall) \u6574\u4f53\u79ef\u7d2f\u8bef\u5dee</li> </ul> </li> <li>\u5047\u8bbe \\(h=\\Delta t\\) \u8868\u793a\u6b65\u957f\uff0c\u8003\u8651\u4e24\u79cd\u8bef\u5dee\u7684\u9636\uff08\u5bf9\u4e8e\u9690\u5f0f\u6b27\u62c9\u65b9\u6cd5\uff09<ul> <li>local: \\(O(h^2)\\)</li> <li>global: \\(O(h)\\)</li> </ul> </li> <li>\u5982\u4f55\u7406\u89e3 \\(O(h)\\)<ul> <li>\u5c06\u6b65\u957f\u51cf\u5c0f\u4e00\u534a\uff0c\u8bef\u5dee\u4e5f\u53ef\u4ee5\u51cf\u5c0f\u4e00\u534a</li> </ul> </li> </ul>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#runge-kutta-families-rk4","title":"Runge-Kutta Families - RK4","text":"<p>a family of advanced methods for solving ODEs, RK4 is a order-four version</p> <p></p>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#position-based-verlet-intergration","title":"Position-Based / Verlet Intergration","text":"<p>Note</p> <ul> <li>\u4e0d\u5b8c\u5168\u57fa\u4e8e\u7269\u7406</li> </ul>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#rigid-body-simulation","title":"Rigid Body Simulation","text":"\\[\\frac{d}{dt} \\begin{pmatrix} {\\mathrm{X}} \\\\ {\\theta} \\\\ {\\dot{\\mathrm{X}}} \\\\ {\\omega} \\end{pmatrix}= \\begin{pmatrix} {\\dot{\\mathrm{X}}} \\\\ {\\omega} \\\\ {\\mathrm{F}/M} \\\\ {\\Gamma/I} \\end{pmatrix}\\] <p>\u662f\u5bf9\u7c92\u5b50\u6a21\u62df\u7684\u6269\u5c55</p>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#fluid-simulation","title":"Fluid Simulation","text":"<ul> <li>\u5047\u8bbe\u7528\u7c92\u5b50\u6a21\u62df\u6c34</li> <li>\u5047\u8bbe\u6c34\u662f\u4e0d\u53ef\u538b\u7f29\u7684</li> <li>\u5982\u679c\u51fa\u73b0\u4e86\u5bc6\u5ea6\u4e0d\u6b63\u786e\u7684\u90e8\u5206\uff0c\u9700\u8981\u4fee\u6b63\u5c0f\u7403\u7684\u4f4d\u7f6e\u6765\u7ea0\u6b63\u5bc6\u5ea6</li> <li>gradient descent \u8fdb\u884c\u5c40\u90e8\u8c03\u6574\uff0c\u76f4\u5230\u5bc6\u5ea6\u4e0d\u8d85\u8fc7\u9608\u503c</li> </ul>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#eulerian-vs-lagrangian","title":"Eulerian vs. Lagrangian","text":"<ul> <li>lagrangian: \u8003\u8651\u7a7a\u95f4\u6240\u6709\u7684\u7f51\u683c</li> <li>eulerian: \u8003\u8651\u5f88\u591a\u7c92\u5b50</li> </ul>"},{"location":"GAMES101/GAMES101%2012%20Animation.html#material-point-methods-mpm","title":"Material Point Methods (MPM)","text":"<ul> <li>\u4f7f\u7528 eulerian \u4e2d\u7684\u7c92\u5b50\u6765\u8868\u793a\u7269\u8d28\u6027\u8d28</li> <li>\u4f7f\u7528 lagrangian \u7684\u7f51\u683c\u8fdb\u884c\u8ba1\u7b97</li> <li>\u540c\u6b65\u66f4\u65b0\u4e24\u79cd\u6570\u636e\u7ed3\u6784</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/index.html","title":"Advanced Data Structure & Algorithm Analysis","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>ADS 01 AVL Trees, Splay Trees and Amortized Analysis</li> <li>ADS 02 Red-Black Trees and B+ Trees</li> <li>ADS 03 Inverted File Index</li> <li>ADS 04 Leftist Heaps and Skew Heaps</li> <li>ADS 05 Binomial Queue</li> <li>ADS 06 Backtracking</li> <li>ADS 07 Divide and Conquer</li> <li>ADS 08 Dynamic Programming</li> <li>ADS 09 Greedy Algorithm</li> <li>ADS 10 NP-Completeness</li> <li>ADS 11 Approximation</li> <li>ADS 12 Local Search</li> <li>ADS 13 Randomized Algorithms</li> <li>ADS 14 Parallel Algorithms</li> <li>ADS 15 External Sorting</li> <li>Final<ul> <li>ADS Cheat Sheet</li> <li>ADS Cheat Sheet Dynamic Programming</li> <li>ADS Final Questions</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/index.html#info","title":"Info","text":"<p>Advanced Data Structure &amp; Algorithm Analysis</p> <ul> <li>\u4ee3\u7801\uff1aCS2045M</li> <li>\u5b66\u5206\uff1a4.0</li> <li>\u5b66\u671f\uff1a2024 \u79cb\u51ac</li> <li>\u6559\u5e08\uff1a\u9648\u660a</li> <li>\u6559\u6750\uff1aIntroductin to Algorithms, 3<sup>rd</sup> Edition</li> </ul> Grading Policy <p>Warning</p> <p>\u6bcf\u4f4d\u8001\u5e08\u7684\u8bc4\u5206\u6807\u51c6\u53ef\u80fd\u4e0d\u540c\uff0c\u4ec5\u4f9b\u53c2\u8003\uff01</p> <ul> <li> <p>Discussions 10 \u53ef\u80fd\u7684\u52a0\u5206</p> </li> <li> <p>Research Project + Peer Review 30 8 \u9009 2\uff0c\u6bcf\u591a\u505a\u4e00\u4e2a\u52a0 2 \u5206</p> <ul> <li>\u62a5\u544a 20<ul> <li>\u4f1a\u7559 2 \u5468\u65f6\u95f4</li> </ul> </li> <li>\u5c55\u793a 6<ul> <li>\u9700\u8981\u62a5\u540d\uff0c\u4e00\u5171 24 \u6b21\uff0c20 \u7ec4</li> <li>\u538b\u7f29\u5c55\u793a\u65f6\u95f4</li> </ul> </li> <li>Peer Review 4 \u53ca\u65f6\u7ed9\u522b\u4eba\u6253\u5206<ul> <li>Pr \u7ed9\u5206\u4e0d\u7b97\u6210\u7ee9\uff0c\u53ea\u6709 TA \u7684\u6253\u5206\u6709\u6548</li> <li>\u6253\u5206\u4e0d\u8ba4\u771f\u4f1a\u6263\u5206\uff0c\u6bcf\u6b21\u6253\u5206\u597d\u7684\u53ef\u80fd\u83b7\u5f97\u52a0\u5206</li> </ul> </li> </ul> </li> <li>MidTerm 10 \u65a9\u6740 40 \u5206</li> <li>\u9489\u9489\u7fa4\u597d\u7684\u63d0\u95ee\u548c\u56de\u7b54\u90fd\u53ef\u80fd\u52a0\u5206</li> <li>Final 40</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/index.html#tips","title":"Tips","text":"<p>\u8fd9\u4efd\u7b14\u8bb0\u5e76\u4e0d\u5b8c\u6574\uff01</p> <ul> <li>\u672c\u7b14\u8bb0\u57fa\u672c\u6db5\u76d6\u4e86\u6240\u6709\u8bfe\u7a0b\u5185\u5bb9\uff0c\u4f46\u65e0\u6cd5\u4fdd\u8bc1\u5b8c\u6574\u6027\u548c\u6b63\u786e\u6027</li> <li>\u6bcf\u7ae0\u8282\u7b14\u8bb0\u672b\u5c3e\u6709\u90e8\u5206 pta \u9898\u76ee\u7684\u8ba2\u6b63/\u601d\u8def\uff0c\u7531\u4e8e\u8bfe\u7a0b\u8981\u6c42\uff0c\u6ca1\u6709\u4efb\u4f55\u6e90\u7801</li> <li>\u542b\u6709\u90e8\u5206\u671f\u672b\u590d\u4e60\u7b14\u8bb0<ul> <li>ADS Cheat Sheet \u662f\u4e00\u4efd\u5e76\u4e0d\u5b8c\u6574\u7684 Cheat Sheet\uff0c\u5176\u4e2d\u7684 Complexity Class \u548c Approximation \u90e8\u5206\u53ef\u80fd\u6709\u5f88\u591a\u9519\u8bef</li> <li>ADS Cheat Sheet Dynamic Programming \u6574\u7406\u4e86\u90e8\u5206\u52a8\u6001\u89c4\u5212\u5185\u5bb9\uff0c\u7b14\u8005\u8ba4\u4e3a\u5bf9\u671f\u672b\u590d\u4e60\u6709\u4e00\u5b9a\u5e2e\u52a9\uff0c\u6bd5\u7adf\u671f\u672b\u51fd\u6570\u9898\u57fa\u672c\u90fd\u662f dp</li> <li>ADS Final Questions \u662f\u5386\u5e74\u5377\u91cc\u4e00\u4e9b\u9519\u9898\u7684\u8ba2\u6b63/\u601d\u8def\uff0c\u4e5f\u4e0d\u4fdd\u8bc1\u6b63\u786e\uff0c\u6b22\u8fce\u5927\u5bb6\u6765\u8ba8\u8bba\u548c\u4fee\u6b63</li> </ul> </li> </ul> <p>Useful Links</p> <ul> <li>\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790 - NoughtQ\u7684\u7b14\u8bb0\u672c</li> <li>OI Wiki - OI Wiki</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html","title":"01 AVL Trees, Splay Trees and Amortized Analysis","text":"","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#1-avl-trees-self-balancing-tree","title":"1 AVL Trees: Self-Balancing Tree","text":"<ul> <li>Target<ul> <li>\u8ba9\u4e8c\u53c9\u6811\u7684 height \u5c3d\u91cf\u5c0f</li> <li>\u51cf\u5c11 Average Search Time</li> </ul> </li> </ul>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#11-definition","title":"1.1 Definition","text":"<ul> <li>\u7a7a\u6811\u5e73\u8861</li> <li>\u975e\u7a7a\u6811\u5e73\u8861\u5f53\u4e14\u4ec5\u5f53<ul> <li>\u5de6\u53f3\u5b50\u6811\u5747\u5e73\u8861</li> <li>\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u76f8\u5dee \\(\\le 1\\)</li> </ul> </li> </ul> <p>Balance Factor \\(BF(node) = h_L-h_R\\)</p>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#12-solution","title":"1.2 Solution","text":"<ul> <li>Trouble Maker: \u63d2\u5165\u4e4b\u540e\u5bfc\u81f4\u4e0d\u5e73\u8861\u7684\u8282\u70b9</li> <li>Trouble Finder: \u63a2\u6d4b\u5230\u4ea7\u751f\u4e86\u4e0d\u5e73\u8861\u7684\u8282\u70b9</li> <li>\u56db\u79cd\u8c03\u6574\u60c5\u51b5\uff1aRR/LL LR/RL<ul> <li>\u53cd\u6620\u7684\u662f Trouble finder \u5230 Trouble maker \u7684\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb</li> </ul> </li> </ul>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#121-rr-rotation","title":"1.2.1 RR rotation","text":"RR rotate<pre><code>avl_ptr single_rotate_right(avl_ptr P){  // N is the rotation center\n    avl_ptr N = P-&gt;right;\n    P-&gt;right = N-&gt;left;\n    N-&gt;left = P;\n    P-&gt;height = max(height(P-&gt;right), height(P-&gt;left)) + 1;\n    N-&gt;height = max(height(N-&gt;right), P-&gt;height) + 1;\n    return N;\n}\n\navl_ptr rr_rotate(avl_ptr trouble_finder){\n    return single_rotate_right(trouble_finder);\n}\n\nrr_rotate(Mar);\n</code></pre>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#122-rotation","title":"1.2.2 rotation","text":"<ul> <li>\u63d2\u5165 Apr \u540e\uff0c\u53d1\u73b0 grandparent \u4ea7\u751f\u4e86\u4e0d\u5e73\u8861\uff0c\u4e8e\u662f\u9700\u8981\u5bf9 Mar \u8fdb\u884c rotate</li> </ul> LL rotate<pre><code>avl_ptr single_rotate_left(avl_ptr P){  // rotation to replace the parent node\n    avl_ptr N = P-&gt;left;\n    P-&gt;left = N-&gt;right;\n    N-&gt;right = P;\n    P-&gt;height = max(height(P-&gt;left), height(P-&gt;right)) + 1;\n    N-&gt;height = max(height(N-&gt;left), P-&gt;height) + 1;\n    return N;\n}\n\navl_ptr ll_rotate(avl_ptr trouble_finder){  // first trouble finder\n    return single_rotate_left(trouble_finder);\n}\n\nll_rotate(Mar);\n</code></pre>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#123-lr-rotation","title":"1.2.3 LR rotation","text":"<p>\u53ef\u4ee5\u5206\u6210\u4ee5\u4e0b\u6b65\u9aa4</p> <ol> <li><code>P</code> \u8fdb\u884c <code>single_rotate_right</code></li> <li><code>G</code> \u8fdb\u884c <code>single_rotate_left</code>\uff0c\u8fd9\u91cc\u7684 <code>G</code> \u4e5f\u5c31\u662f <code>trouble_finder</code></li> </ol> LR rotate<pre><code>avl_ptr lr_rotate(avl_ptr trouble_finder){\n    trouble_finder-&gt;left = single_rotate_right(trouble_finder-&gt;left);\n    return single_rotate_left(trouble_finder);\n}\n\nlr_rotate(May);\n</code></pre>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#124-rl-rotation","title":"1.2.4 RL rotation","text":"RL rotate<pre><code>avl_ptr rl_rotate(avl_ptr trouble_finder){\n    trouble_finder-&gt;right = single_rotate_left(trouble_finder-&gt;right);\n    return single_rotate_right(trouble_finder-&gt;right);\n}\n\nrl_rotate(May);\n</code></pre> <p>\u603b\u7ed3</p> <ul> <li>\u6c38\u8fdc\u53ea\u627e\u7b2c\u4e00\u4e2a Trouble Finder\uff0c\u8fd9\u4e5f\u7b26\u5408\u9012\u5f52\u7684\u904d\u5386\u7ed3\u6784</li> <li>RR \u548c LL \u53ea\u7528\u8f6c\u4e00\u6b21\uff0c\u800c RL \u548c LR \u90fd\u9700\u8981\u8f6c\u4e24\u6b21</li> <li>\u4e3a\u4e86\u7ef4\u62a4\u6811\u7684\u7ed3\u6784\uff0c\u5728 rotate \u65f6\u9700\u8981\u8bb0\u5f55 <code>trouble_finder</code> \u7684 <code>parent</code>\uff08\u82e5\u6709\uff09\uff0c\u5e76\u53ca\u65f6\u66f4\u65b0\u6307\u9488\uff0c<code>single_rotate</code> \u51fd\u6570\u5747\u4f1a\u8fd4\u56de rotate \u540e\u7684\u5b50\u6811\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u5f88\u597d\u5b9e\u73b0</li> </ul>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#13-one-last-question","title":"1.3 One last question","text":"<p>\u7ed9\u5b9a height \u7684 AVL Tree \u7684\u6700\u5c11\u8282\u70b9\u6570\uff1a</p> <p></p> \\[ n_h=n_{h-1}+n_{h-2}+1 \\] <p>\u7531\u6b64\u53ef\u4ee5\u63a8\u5bfc\u51fa\uff1a\u5fc5\u8bb0\u516c\u5f0f</p> \\[ n_h=F_{h+3}-1 \\] <p>\u4e5f\u5c31\u662f\uff1a</p> \\[ \\begin{align} n_h&amp;\\approx\\frac{1}{\\sqrt{5}}(\\frac{1+\\sqrt{5}}{2})^{h+3}-1 \\\\ \\\\ h&amp;=O(\\ln n) \\end{align} \\] <p>\u8fd9\u8bf4\u660e\u4e86 AVL Tree \u7684\u5e73\u8861\u6027\u3002</p> <p>Attention</p> <p>\u8bfe\u672c\u4e2d\u5bf9 height \u6ca1\u6709\u7edf\u4e00\u7684\u5b9a\u4e49\uff0c\u8fd9\u91cc\u8ba4\u4e3a\u6839\u8282\u70b9\u7684\u9ad8\u5ea6\u4e3a 0\uff0c\u8fb9\u624d\u80fd\u63d0\u4f9b\u9ad8\u5ea6</p>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#2-splay-trees-self-adjusting-tree","title":"2 Splay Trees: Self-Adjusting Tree","text":"<ul> <li>Target: Any \\(M\\) consecutive tree operations starting from an empty tree take at most \\(O(M\\log N)\\) time.</li> <li>\u4e3a\u4e86\u964d\u4f4e amortized time\uff0c\u7531\u4e8e\u5b58\u5728 \\(O(N)\\) \u7684\u8bbf\u95ee\u8bf7\u6c42\uff0c\u4e0d\u80fd\u8ba9\u8fd9\u4e2a\u8bf7\u6c42\u6bcf\u6b21\u90fd\u662f \\(O(N)\\)\uff0c\u6240\u4ee5\u8981\u79fb\u52a8\u8282\u70b9\u3002</li> <li>\u53ea\u8981\u67e5\u8be2\u4e00\u4e2a\u8282\u70b9\uff0c\u5c31\u653e\u5230\u6839\u4e0a\u9762\u53bb\u3002</li> </ul>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#21-amortized-time-complexity-\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6","title":"2.1 Amortized Time Complexity \u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6","text":"<ul> <li>Worst Bound: \\(W(C)=O(N)\\)<ul> <li>\u597d\u7b97\u4f46\u6ca1\u7528</li> </ul> </li> <li>Amoritzed Bound: \\(A(C)=\\sum_{i=1}^M c_i\\)<ul> <li>\u8499\u7279\u5361\u6d1b</li> <li>\u53ef\u8ba1\u7b97\u3001\u6709\u610f\u4e49</li> </ul> </li> <li>Average Bound: \\(E(C)=\\int P(c) \\cdot c dc\\)<ul> <li>\u6709\u610f\u4e49\u96be\u8ba1\u7b97</li> </ul> </li> </ul>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#22-solution","title":"2.2 Solution","text":"","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#221-\u591a\u6b21-single_rotate-\u4e3a\u4ec0\u4e48\u4e0d\u884c","title":"2.2.1 \u591a\u6b21 <code>single_rotate</code> \u4e3a\u4ec0\u4e48\u4e0d\u884c\uff1f","text":"","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#222-zig-zag-zig-zig-zig","title":"2.2.2 { Zig-zag, Zig-zig, Zig }","text":"<p>Attention</p> <p>\u8fd9\u91cc\u7684 zig-zig \u88ab\u8ba4\u4e3a\u662f single rotation\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u4f7f\u7528\u4e86\u4e24\u6b21 AVL rotations</p> <p></p> <p>Hint</p> <p>Splaying not only moves the accessed node to the root, but also roughly halves the depth of most nodes on the path. \u6240\u4ee5 Splay Tree \u4e5f\u662f\u5e73\u8861\u6811</p>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#223-insertion","title":"2.2.3 Insertion","text":"<ol> <li>Find \u662f\u5426\u5df2\u7ecf\u5b58\u5728<ol> <li>\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u6309\u7167 BST \u63d2\u5165</li> </ol> </li> <li>splay \u8fd9\u4e2a\u5143\u7d20\u6240\u5728\u7684\u8282\u70b9\u5230\u6839</li> </ol>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#224-deletion","title":"2.2.4 Deletion","text":"<ol> <li>Find(x), x will be the root</li> <li>Remove x, get 2 subtrees \\(T_L\\) and  \\(T_R\\)</li> <li>FindMax(\\(T_L\\)), max element will be the root</li> <li>Make \\(T_R\\) the right child of the root of \\(T_L\\)</li> </ol>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#23-advantage","title":"2.3 Advantage","text":"<ul> <li>\u5b58\u50a8\u7a7a\u95f4\u5c0f\u4e00\u4e9b\uff08\u4e0d\u9700\u8981\u8bb0\u5f55 \\(BF\\) \uff09</li> </ul>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#3-amortized-analysis","title":"3 Amortized Analysis","text":"<p>Target: Any M consecutive operations take at most \\(O(M\\log N)\\)  time.</p> <p>strength: worst-case bound \\(\\ge\\) amortized bound Probablity not involved \\(\\ge\\) average-case bound</p> <p>Note</p> <p>\u4f46\u662f amortized \u7ed3\u679c\u53ef\u80fd\u6bd4 average \u8981\u5c0f</p>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#31-aggregate-analysis-\u805a\u5408\u5206\u6790","title":"3.1 Aggregate analysis \u805a\u5408\u5206\u6790","text":"<p>\u5bf9\u4e8e\u6240\u6709 \\(n\\)\uff0c\u8fde\u7eed\u7684 \\(n\\) \u4e2a\u64cd\u4f5c\u603b\u5171\u82b1\u8d39\u7684\u6700\u574f\u65f6\u95f4\u4e3a \\(T(n)\\)\uff0c\u90a3\u4e48 amortized cost \u4e3a\uff1a</p> \\[T_{amortized}=T(n)/n\\]","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#311-eg-stach-with-multipop","title":"3.1.1 e.g. Stach with <code>MultiPop</code>","text":"<p>\u4ece\u7a7a\u6808\u5f00\u59cb\u8fde\u7eed\u8fdb\u884c \\(n\\) \u4e2a {<code>push</code>, <code>pop</code>, <code>multiPop</code>} \u64cd\u4f5c\uff0c\u6709 \\(sizeof(S)\\le n\\)\u3002\u5373\u4f7f\u5355\u6b21 <code>MultiPop</code> \u53ef\u4ee5\u662f \\(O(sizeof(S))\\)\uff0c\u4f46\u65e0\u6cd5\u8fde\u7eed\u6267\u884c \\(O(n)\\) \u6b21\uff0c\u603b\u590d\u6742\u5ea6\u4e0d\u662f \\(O(n^2)\\) \u800c\u662f \\(O(n)\\)\u3002\u6bcf\u4e2a\u88ab push \u7684\u5143\u7d20\u6700\u591a\u53ea\u80fd pop \u4e00\u6b21\uff0c\u6240\u4ee5</p> \\[T_{amortized}=O(n)/n=O(1)\\] GPT \u7684\u89e3\u91ca <p>\u5047\u8bbe\u6211\u4eec\u8fdb\u884c\u4e86\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u5305\u62ec\u591a\u6b21 <code>push</code>\u3001<code>pop</code> \u548c <code>multipop</code> \u64cd\u4f5c\u3002</p> <ul> <li>\u6bcf\u4e2a <code>push</code> \u64cd\u4f5c\u663e\u7136\u53ea\u9700\u8981 O(1) \u7684\u65f6\u95f4\u3002</li> <li>\u6bcf\u4e2a <code>pop</code> \u64cd\u4f5c\u4e5f\u9700\u8981 O(1) \u7684\u65f6\u95f4\u3002</li> <li>\u5bf9\u4e8e <code>multipop(k)</code>\uff0c\u867d\u7136\u5b83\u53ef\u80fd\u4e00\u6b21\u6267\u884c\u591a\u6b21 <code>pop</code>\uff0c\u4f46\u91cd\u8981\u7684\u662f\uff0c\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u53ea\u80fd\u88ab\u5f39\u51fa\u4e00\u6b21\u3002\u56e0\u6b64\uff0c\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u65e0\u8bba\u662f\u901a\u8fc7 <code>pop</code> \u8fd8\u662f <code>multipop</code> \u5f39\u51fa\u7684\u5143\u7d20\uff0c\u5176\u6570\u91cf\u6700\u591a\u4e3a n \u6b21\uff08\u5373\u81f3\u591a n \u4e2a\u5143\u7d20\u88ab\u538b\u5165\u6808\u5e76\u5f39\u51fa\uff09\u3002</li> </ul> <p>\u56e0\u6b64\uff0c\u5373\u4f7f <code>multipop(k)</code> \u5728\u67d0\u6b21\u64cd\u4f5c\u4e2d\u53ef\u80fd\u6267\u884c k \u6b21 <code>pop</code>\uff0c\u4f46\u6240\u6709 <code>pop</code> \u64cd\u4f5c\uff08\u5305\u62ec\u5728 <code>multipop</code> \u4e2d\u7684\uff09\u603b\u5171\u4e0d\u4f1a\u8d85\u8fc7 n \u6b21\u3002</p> <p>Aggregate Analysis \u7ed3\u8bba\uff1a</p> <ul> <li>\u5982\u679c\u6267\u884c\u4e86 n \u6b21\u64cd\u4f5c\uff08\u5176\u4e2d\u5305\u62ec <code>push</code>\u3001<code>pop</code> \u548c <code>multipop</code> \u64cd\u4f5c\uff09\uff0c\u90a3\u4e48\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\u3002</li> <li>\u4e8e\u662f\u6bcf\u6b21\u64cd\u4f5c\u7684\u644a\u8fd8\u590d\u6742\u5ea6\u662f O(1)\u3002</li> </ul>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#32-accounting-method-\u6838\u7b97\u6cd5","title":"3.2 Accounting method \u6838\u7b97\u6cd5","text":"<p>Amortized cost \\(\\hat c_i\\) \u8d85\u8fc7 actual cost \\(c_i\\) \u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5 pay for \u5176\u4ed6 \\(\\hat c_i &lt; c_i\\) \u7684\u64cd\u4f5c\uff0c\u8981\u4fdd\u8bc1\u644a\u8fd8\u8d39\u7528\u80fd\u591f\u652f\u4ed8\u5b9e\u9645\u8d39\u7528</p> \\[ \\begin{align} \\sum_{i=1}^n \\hat c_i \\ge&amp; \\sum_{i=1}^n c_i \\\\ \\\\ T_{amoritzed}=&amp;\\frac{\\sum_{i=1}^n \\hat c_i}{n} \\end{align} \\]","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#321-eg-stack-with-multipop","title":"3.2.1 e.g. Stack with <code>MultiPop</code>","text":"<p>\u5728 push \u65f6\u5206\u914d \\(\\hat c_i=2\\) \u6765\u652f\u4ed8\u5f39\u51fa\u65f6\u7684\u82b1\u9500\uff0c\u8fd9\u6837 pop \u7684\u644a\u8fd8\u82b1\u9500\u90fd\u662f \\(\\hat c_i=0\\)\uff0c\u6ee1\u8db3\u4e86</p> \\[O(n)=\\sum_{i=1}^n \\hat c_i \\ge \\sum_{i=1}^n c_i\\] <p>\u6240\u4ee5</p> \\[T_{amoritzed}=\\frac{\\sum_{i=1}^n \\hat c_i}{n}=\\frac{O(n)}{n}=O(1)\\]","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#33-potential-method-\u52bf\u80fd\u6cd5","title":"3.3 Potential method \u52bf\u80fd\u6cd5","text":"","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#331-\u52bf\u80fd\u51fd\u6570","title":"3.3.1 \u52bf\u80fd\u51fd\u6570","text":"\u52bf\u80fd\u51fd\u6570\u7684\u9009\u62e9 <p>\u9009\u62e9\u52bf\u80fd\u51fd\u6570\u65f6\uff0c\u6838\u5fc3\u539f\u5219\u662f\u786e\u4fdd\u52bf\u80fd\u51fd\u6570\u80fd\u591f\u51c6\u786e\u53cd\u6620\u6570\u636e\u7ed3\u6784\u72b6\u6001\u7684\u53d8\u5316\uff0c\u5e76\u80fd\u591f\u5e2e\u52a9\u89e3\u91ca\u64cd\u4f5c\u7684\u644a\u8fd8\u4ee3\u4ef7\u3002\u5728\u4e0d\u540c\u7684\u95ee\u9898\u4e2d\uff0c\u52bf\u80fd\u51fd\u6570\u7684\u9009\u62e9\u65b9\u5f0f\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u901a\u5e38\u4f1a\u9075\u5faa\u4ee5\u4e0b\u51e0\u4e2a\u6307\u5bfc\u539f\u5219\uff1a</p> <ol> <li> <p>\u52bf\u80fd\u51fd\u6570\u8981\u4e0e\u6570\u636e\u7ed3\u6784\u72b6\u6001\u76f8\u5173\uff1a \u52bf\u80fd\u51fd\u6570 \\(\\Phi\\) \u901a\u5e38\u662f\u6570\u636e\u7ed3\u6784\u7684\u67d0\u4e9b\u5c5e\u6027\u7684\u51fd\u6570\u3002\u5b83\u5e94\u8be5\u80fd\u591f\u53cd\u6620\u64cd\u4f5c\u524d\u540e\u7cfb\u7edf\u72b6\u6001\u7684\u53d8\u5316\u3002\u5e38\u89c1\u7684\u9009\u62e9\u5305\u62ec\uff1a</p> </li> <li> <p>\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u5143\u7d20\u6570\u91cf\u3002</p> </li> <li> <p>\u6570\u636e\u7ed3\u6784\u7684\u67d0\u79cd\u201c\u590d\u6742\u5ea6\u201d\u6307\u6807\uff0c\u5982\u5806\u7684\u9ad8\u5ea6\u3001\u961f\u5217\u7684\u957f\u5ea6\u7b49\u3002</p> </li> <li> <p>\u52bf\u80fd\u51fd\u6570\u7684\u53d8\u5316\u5e94\u80fd\u89e3\u91ca\u64cd\u4f5c\u7684\u4ee3\u4ef7\uff1a</p> </li> <li>\u5f53\u4e00\u4e2a\u64cd\u4f5c\u589e\u52a0\u7cfb\u7edf\u7684\u590d\u6742\u5ea6\u65f6\uff0c\u52bf\u80fd\u5e94\u8be5\u76f8\u5e94\u589e\u52a0\uff0c\u8fd9\u610f\u5473\u7740\u672a\u6765\u64cd\u4f5c\u53ef\u80fd\u4f1a\u51cf\u5c11\u8fd9\u90e8\u5206\u590d\u6742\u5ea6\uff0c\u52bf\u80fd\u53ef\u4ee5\u7528\u6765\u652f\u4ed8\u9ad8\u4ee3\u4ef7\u7684\u64cd\u4f5c\u3002</li> <li> <p>\u5f53\u4e00\u4e2a\u64cd\u4f5c\u964d\u4f4e\u7cfb\u7edf\u590d\u6742\u5ea6\u65f6\uff0c\u52bf\u80fd\u5e94\u8be5\u51cf\u5c11\uff0c\u8868\u660e\u4e4b\u524d\u5b58\u50a8\u7684\u201c\u6f5c\u5728\u5f00\u9500\u201d\u53ef\u4ee5\u88ab\u5229\u7528\uff0c\u6765\u51cf\u5c11\u5f53\u524d\u64cd\u4f5c\u7684\u6210\u672c\u3002</p> </li> <li> <p>\u786e\u4fdd\u52bf\u80fd\u51fd\u6570\u975e\u8d1f\uff1a \u4e3a\u4e86\u4f7f\u52bf\u80fd\u6cd5\u7684\u5206\u6790\u5408\u7406\uff0c\u52bf\u80fd\u51fd\u6570\u5fc5\u987b\u59cb\u7ec8\u662f\u975e\u8d1f\u7684\u3002\u521d\u59cb\u72b6\u6001\u4e0b\u7684\u52bf\u80fd\u901a\u5e38\u8bbe\u7f6e\u4e3a\u96f6\uff0c\u968f\u7740\u64cd\u4f5c\u7684\u8fdb\u884c\uff0c\u52bf\u80fd\u53ef\u80fd\u4f1a\u589e\u52a0\u6216\u51cf\u5c11\uff0c\u4f46\u603b\u662f\u4fdd\u6301\u975e\u8d1f\u3002</p> </li> <li> <p>\u52bf\u80fd\u7684\u603b\u53d8\u5316\u4e0d\u80fd\u8d85\u8fc7\u5b9e\u9645\u7684\u4ee3\u4ef7\u603b\u548c\uff1a \u9009\u62e9\u52bf\u80fd\u51fd\u6570\u65f6\u8981\u786e\u4fdd\uff0c\u6574\u4e2a\u64cd\u4f5c\u5e8f\u5217\u4e2d\u7684\u52bf\u80fd\u53d8\u5316\u4e0d\u4f1a\u6bd4\u5b9e\u9645\u7684\u64cd\u4f5c\u4ee3\u4ef7\u589e\u957f\u5f97\u66f4\u5feb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u52bf\u80fd\u7684\u589e\u52a0\u4e0d\u80fd\u8fc7\u5ea6\u5938\u5927\u64cd\u4f5c\u7684\u644a\u8fd8\u4ee3\u4ef7\u3002</p> </li> </ol> \\[ \\begin{align} \\hat c_i-c_i=&amp;Credit_i=\\Phi(D_i)-\\Phi(D_{i-1}) \\\\ \\\\ \\sum_{i=1}^n\\hat c_i=&amp;\\sum_{i=1}^n(c_i+\\Phi(D_i)-\\Phi(D_{i-1}))=\\sum_{i=1}^nc_i+\\Phi(D_n)-\\Phi(D_0) \\end{align} \\] <p>\u5176\u4e2d \\(\\Phi(D_n)-\\Phi(D_0)\\ge 0\\)</p> <p>In general, a good potential function should always assume its minimum at the start of the sequence.</p>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#332-eg-stack-with-multipop","title":"3.3.2 e.g. Stack with <code>MultiPop</code>","text":"","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#333-splay-trees-t_amortizedolog-n","title":"3.3.3 Splay Trees: \\(T_{amortized}=O(\\log N)\\)","text":"\\[\\Phi(T)=\\sum_{i \\in T} \\log S(i)\\] <p>\u5176\u4e2d \\(S(i)\\) \u8868\u793a\u4ee5 \\(i\\) \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u8282\u70b9\u6570\u4e4b\u548c\uff0c\u8fd9\u6837\uff0c\u5f53\u6811\u66f4\u52a0\u5e73\u8861\u65f6\uff0c\u52bf\u80fd\u8f83\u5c0f\u3002</p> <p>\u8003\u5bdf\u4e09\u79cd splay \u64cd\u4f5c\u7684\u644a\u8fd8\u82b1\u9500\uff1a</p> <p>zig</p> <p></p> <ul> <li>\\(c_i=1\\)\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u6b21\u65cb\u8f6c</li> <li>\u52bf\u80fd\u51fd\u6570\u4e2d\u53ea\u6709 <code>X, P</code> \u4e24\u4e2a\u8282\u70b9\u7684 rank \u53d1\u751f\u4e86\u53d8\u5316\uff0c\u4e14 \\(R(P)\\) \u53d8\u5c0f\u6240\u4ee5\u53ef\u4ee5\u653e\u7f29</li> </ul> <p>zig-zag</p> <p></p> <ul> <li>\\(c_i=2\\)\uff0c\u56e0\u4e3a\u5b9e\u9645\u65cb\u8f6c 2 \u6b21</li> <li>\u540c\u7406\uff0c\u7531\u4e8e \\(R(P)\\) \u548c \\(R(G)\\) \u90fd\u53d8\u5c0f\uff0c\u53ef\u4ee5\u653e\u7f29</li> <li>\u8fdb\u4e00\u6b65 <code>X</code> \u4e00\u5b9a\u81f3\u5c11\u591a\u4e86\u4e24\u4e2a\u540e\u4ee3 <code>P, G</code>\uff0c\u6240\u4ee5 \\(R_2(X)-R_1(X)\\ge 2\\)\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u653e\u7f29</li> </ul> <p>zig-zig</p> <p></p> <ul> <li>\\(c_i=2\\)\uff0c\u56e0\u4e3a\u5b9e\u9645\u65cb\u8f6c 2 \u6b21</li> <li>\u540c\u7406\uff0c\\(R(G)\\) \u4e00\u5b9a\u51cf\u5c0f\uff0c\u53ef\u4ee5\u653e\u7f29\u6389</li> <li>\\(R(P)\\) \u7684\u53d8\u5316\u60c5\u51b5\u4e0d\u786e\u5b9a\uff0c\u4f46\u4e00\u5b9a\u6709 \\(R_2(P)-R_1(P)\\le R_2(X)-R_1(X)\\)</li> <li>\u4e14\u540c\u7406\u6709 \\(R_2(X)-R_1(X)\\ge 2\\)</li> </ul> <p>\u7efc\u4e0a\uff0c\u6709 \\(\\hat c_i \\le 1+3(R_2(X)-R_1(X))\\)</p> <p>The amortized time to splay a tree with root \\(T\\) at node \\(X\\) is at most \\(3(R(T)-R(X))+1=O(\\log N)\\)</p>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#4-questions","title":"4 Questions","text":"","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#41-hw1","title":"4.1 HW1","text":"","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#411-\u7ed9\u5b9a-avl-\u6811\u9ad8\u6c42\u6700\u5c0f\u8282\u70b9\u6570","title":"4.1.1 \u7ed9\u5b9a AVL \u6811\u9ad8\uff0c\u6c42\u6700\u5c0f\u8282\u70b9\u6570","text":"<p>If the depth of an AVL tree is 6 (the depth of an empty tree is defined to be -1), then the minimum possible number of nodes in this tree is:</p> Answer <p>\\(n_h=F_{h+3}-1\\) \u5fc5\u8bb0\u516c\u5f0f</p>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#412-\u719f\u7ec3\u8fdb\u884c-splay","title":"4.1.2 \u719f\u7ec3\u8fdb\u884c Splay","text":"<p>\u5efa\u8bae\u5c1d\u8bd5\u4e00\u904d</p>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#413-\u9009\u62e9\u5408\u9002\u7684\u52bf\u80fd\u51fd\u6570","title":"4.1.3 \u9009\u62e9\u5408\u9002\u7684\u52bf\u80fd\u51fd\u6570","text":"<p>Consider the following buffer management problem. Initially the buffer size (the number of blocks) is one. Each block can accommodate exactly one item. As soon as a new item arrives, check if there is an available block. If yes, put the item into the block, induced a cost of one. Otherwise, the buffer size is doubled, and then the item is able to put into. Moreover, the old items have to be moved into the new buffer so it costs k+1 to make this insertion, where k is the number of old items. Clearly, if there are N items, the worst-case cost for one insertion can be \u03a9(N). To show that the average cost is O(1), let us turn to the amortized analysis. To simplify the problem, assume that the buffer is full after all the N items are placed. Which of the following potential functions works? \u53c2\u8003 Homework - Jianjun Zhou's Notebook (zhoutimemachine.github.io)</p> <ul> <li>A. The number of items currently in the buffer</li> <li>B. The opposite number of items currently in the buffer</li> <li>C. The number of available blocks currently in the buffer</li> <li>D. The opposite number of available blocks in the buffer</li> </ul> Answer <p>D</p> <ul> <li>\u8bbe \\(size_i\\) \u4e3a\u7b2c \\(i\\) \u6b21\u63d2\u5165\u524d buffer \u7684\u5927\u5c0f\uff0c\u5219 \\(\\hat c_i=c_i+\\Phi_i-\\Phi_{i-1}\\)\u3002\u5982\u679c\u63d2\u5165\u524d buffer \u6ca1\u6ee1\uff0c\\(c_i=1\\)\uff0c\u5426\u5219 \\(c_i=size_i\\)</li> <li> <p>\u7136\u540e\u4f9d\u6b21\u5c1d\u8bd5\u6bcf\u4e2a\u9009\u9879\uff0c\u9009\u62e9\u603b\u662f\u6709 \\(\\hat c_i=O(1)\\) \u7684</p> </li> <li> <p>\u4f7f\u7528\u6392\u9664\u6cd5</p> <ul> <li>\u9996\u5148\uff0c\u63d2\u5165\u7684\u65f6\u5019\u52bf\u80fd\u4e00\u5b9a\u8981\u5206\u644a\u6389\uff0c\u7b80\u5355\u63d2\u5165\u7684\u52bf\u80fd\u80af\u5b9a\u589e\u52a0\uff0c\u6392\u9664 B C</li> <li>\u5176\u6b21\uff0c\u5728\u8fdb\u884c\u6269\u5c55\u7684\u65f6\u5019\uff0c\u52bf\u80fd\u4e00\u5b9a\u80fd\u51cf\u5c11\uff0c\u6765\u5e73\u5747\u6389\u6269\u5c55\u7684\u590d\u6742\u5ea6\uff0cA \u52bf\u80fd +1\uff0cD \u624d\u4f1a\u51cf\u5c11\uff0c\u6545\u9009 D</li> </ul> </li> </ul> <p>Hint</p> <p>\u76f4\u63a5\u5957\u7528\u52bf\u80fd\u51fd\u6570\u5230\u5b9e\u9645\u5f00\u9500\u8d85\u8fc7 O(1) \u7684\u64cd\u4f5c\u4e0a\uff0c\u7136\u540e\u68c0\u9a8c\u662f\u4e0d\u662f\u80fd\u644a\u8fd8\u6210 O(1)</p>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#414-\u7f16\u7a0b\u9898avl-tree-\u63d2\u5165\u5b9e\u73b0","title":"4.1.4 \u7f16\u7a0b\u9898\uff1aAVL Tree \u63d2\u5165\u5b9e\u73b0","text":"<p>Attention</p> <ul> <li>\u7531\u4e8e\u672c\u7ae0\u8282\u8bfe\u4ef6\u6ca1\u6709\u4ee3\u7801\u5b9e\u73b0\uff0c\u53ef\u4ee5\u501f\u9274\u8bfe\u672c\u4e0a\u7684\u4ee3\u7801</li> <li>\u9ad8\u5ea6\u66f4\u65b0\u7684\u65f6\u673a\u5341\u5206\u91cd\u8981</li> </ul> <p>\u5b9e\u73b0 AVL tree \u7684\u63d2\u5165\uff0c\u5e76\u8f93\u51fa\u6839\u8282\u70b9\u5143\u7d20\u3002\u5927\u90e8\u5206\u4ee3\u7801\u6e90\u4e8e\u8bfe\u672c\uff0c\u4f46\u4fee\u590d\u4e86 bug</p>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#42-ex1","title":"4.2 Ex1","text":"","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#421-amortized-bounds-weakerstronger","title":"4.2.1 Amortized bounds weaker/stronger?","text":"<p>Amortized bounds are weaker than the corresponding worst-case bounds, because there is no guarantee for any single operation. (T/F)</p> Answer <p>T \u8bb0\u4f4f Worst \\(\\geq\\) Amortized \\(\\geq\\) Average \u5c31\u597d\u4e86\uff0c\u5927\u7684\u5c31\u662f stronger</p>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#422-\u521d\u59cb\u975e\u96f6\u7684\u52bf\u80fd\u51fd\u6570","title":"4.2.2 \u521d\u59cb\u975e\u96f6\u7684\u52bf\u80fd\u51fd\u6570","text":"<p>Suppose we have a potential function \\(\\Phi\\) such that for all \\(\\Phi(D_{i})\\geq \\Phi(D_{0})\\) for all \\(i\\), but \\(\\Phi(D_{0})\\neq 0\\). Then there exists a potential \\(\\Phi'\\) such that \\(\\Phi'(D_{0})=0\\), \\(\\Phi'(D_{i})\\geq 0\\) for all \\(i\\geq 1\\), and the amortized costs using \\(\\Phi'\\) are the same as the amortized costs using \\(\\Phi\\). (T/F)</p> Answer <p>T\uff0c\u52bf\u80fd\u51fd\u6570\u7684\u521d\u59cb\u503c\u53ef\u4ee5\u4e0d\u662f 0\uff0c\u5176\u5b9e\u5c31\u662f\u5b9a\u4e49\u4e00\u4e2a\u52bf\u80fd\u96f6\u70b9\uff0c\u800c\u4e14\u95ee\u7684\u662f\u5b58\u5728 exist</p>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#423-avl-tree-\u9ad8\u5ea6\u548c\u8282\u70b9\u6570\u5173\u7cfb","title":"4.2.3 AVL Tree \u9ad8\u5ea6\u548c\u8282\u70b9\u6570\u5173\u7cfb","text":"<p>The height of an AVL tree of 30 nodes can be 5. (The height of an empty tree is defined to be -1). (T/F)</p> Answer <p>T \u6839\u636e\u516c\u5f0f\u76f4\u63a5\u6c42\u51fa\u9ad8\u5ea6\u4e3a 5 \u7684 AVL \u7684\u8282\u70b9\u6570\u8303\u56f4\uff0c\\([n_{5},2^{5+1}-1]=[F_{8}-1,63]=[20,63]\\)</p> <p>If there are 14 nodes in an AVL tree, then the maximum depth of the tree is ____. The depth of an empty tree is defined to be 0.</p> Answer <ul> <li>\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u7a7a\u6811\u7684\u9ad8\u5ea6\u4e0d\u662f -1 \u800c\u662f 0\uff0c\u4e5f\u5c31\u662f\u8bf4\u6839\u8282\u70b9\u7684\u9ad8\u5ea6\u662f 1</li> <li>\u6839\u636e \\(n_{h}=F_{h+3}-1\\) \u5f97\u5230\u6700\u5927\u7684\u9ad8\u5ea6\u662f 4\uff0c\u6240\u4ee5\u8fd9\u91cc\u662f 4+1=5</li> </ul>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#424-\u5e73\u8861\u6811\u6027\u8d28\u5224\u65ad","title":"4.2.4 \u5e73\u8861\u6811\u6027\u8d28\u5224\u65ad","text":"<p>Among the following 6 statements about AVL trees and splay trees, how many of them are correct?</p> <p>(1) AVL tree is a kind of height balanced tree. In a legal AVL tree, each node's balance factor can only be 0 or 1.</p> <p>(2) Define a single-node tree's height to be 1. For an AVL tree of height h, there are at most \\(2^h\u22121\\) nodes.</p> <p>(3) Since AVL tree is strictly balanced, if the balance factor of any node changes, this node must be rotated.</p> <p>(4) In a splay tree, if we only have to find a node without any more operation, it is acceptable that we don't push it to root and hence reduce the operation cost. Otherwise, we must push this node to the root position.</p> <p>(5) In a splay tree, for any non-root node X, its parent P and grandparent G (guranteed to exist), the correct operation to splay X to G is to rotate X upward twice.</p> <p>(6) Splaying roughly halves the depth of most nodes on the access path.</p> Answer <p>2 \u5e94\u8be5\u53ea\u6709 (2) (6) \u6b63\u786e\uff0c(4) \u4e0d\u5bf9\uff0c\u5373\u4f7f\u53ea\u662f\u67e5\u627e\u4e5f\u8981\u8fdb\u884c splay\uff0c\u8fd9\u662f Splay Tree \u7684\u5b9a\u4e49</p>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#425-avl-tree-\u63d2\u5165\u64cd\u4f5c","title":"4.2.5 AVL Tree \u63d2\u5165\u64cd\u4f5c","text":"<p>Insert { 9, 8, 7, 2, 3, 5, 6, 4 } one by one into an initially empty AVL tree. How many of the following statements is/are FALSE?</p> <ul> <li>the total number of rotations made is 5 (Note: double rotation counts 2 and single rotation counts 1)</li> <li>the expectation (round to 0.01) of access time is 2.75</li> <li>there are 2 nodes with a balance factor of -1</li> </ul> Answer <p>0 \u6240\u6709\u90fd\u6b63\u786e\uff0c\u7b2c\u4e00\u4e2a\u5dee\u70b9\u7b97\u9519 \u5efa\u8bae\u5f00\u59cb\u753b\u56fe\u4e4b\u524d\u5148\u770b\u770b\u6709\u6ca1\u6709\u9009\u9879\u662f\u548c\u8fc7\u7a0b\u76f8\u5173\u7684</p>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#426-\u4e00\u4e9b\u6b63\u8bef\u5224\u65ad","title":"4.2.6 \u4e00\u4e9b\u6b63\u8bef\u5224\u65ad","text":"<p>Which one of the following statements is FALSE?</p> <ul> <li>A. For red-black trees, the total cost of rebalancing for m consecutive insertions in a tree of n nodes is \\(O(n+m)\\).</li> <li>B. To obtain \\(O(1\\)) armortized time for the function decrease-key, the potential function used for Fibonacci heaps is \\(\\Phi(H)=t(H)+m(H)\\), where \\(t(H)\\) is the number of trees in the root list of heap \\(H\\), and \\(m(H)\\) is the number of marked nodes in \\(H\\).</li> <li>C. Let \\(S(x)\\) be the number of descendants of \\(x\\) (\\(x\\) included). If the potential function used for splay tree is \\(\\Phi(T)=\\sum_{x \\in T}\u200b\\log S(x)\\) , then the amortized cost of one splay operation is \\(O(\\log n)\\).</li> <li>D. In the potential method, the amortized cost of an operation is equal to the actual cost plus the increase in potential due to this operation.</li> </ul> Answer <p>B</p> <ul> <li>A. \u65cb\u8f6c\u663e\u7136\u6b63\u786e\uff0c\u67d3\u8272\u7684\u8bdd\u6bcf\u6b21\u67d3\u8272\u90fd\u4f1a\u589e\u52a0\u4e00\u4e2a\u9ed1\u8272\u8282\u70b9\uff0c\u4e0d\u53ef\u80fd\u589e\u52a0\u8d85\u8fc7 \\(O(m+n)\\) \u4e2a\u9ed1\u8272\u8282\u70b9</li> <li>B. \u6590\u6ce2\u90a3\u5951\u5806\u7684\u52bf\u80fd\u51fd\u6570\u901a\u5e38\u662f \\(\\Phi(H)=t(H)+2m(H)\\)</li> <li>C. \u6839\u636e\u7b14\u8bb0\uff0c\u8fd9\u662f\u6b63\u786e\u7684</li> <li>D. \u6b63\u786e\uff0c\u662f\u5b9a\u4e49</li> </ul>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#43-midterm","title":"4.3 Midterm","text":"","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2001%20AVL%20Trees%2C%20Splay%20Trees%20and%20Amortized%20Analysis.html#431-splay-tree-\u63d2\u5165\u64cd\u4f5c","title":"4.3.1 Splay tree \u63d2\u5165\u64cd\u4f5c","text":"<p>Insert {3,9,6,1,8,7} into an initially empty splay tree, 7 is the parent of 6. (T/F)</p> Answer <p>T Splay tree \u63d2\u5165\u64cd\u4f5c\uff0c\u5148\u6309\u7167 BST \u63d2\u5165\uff0c\u7136\u540e splay \u5230\u6839\u8282\u70b9</p>","tags":["Algorithm/Analysis/Amortized-Analysis","Data-Structure/Tree/AVL-Tree","Data-Structure/Tree/Splay-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html","title":"02 Red-Black Trees and B+ Trees","text":"","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#1-red-black-trees","title":"1 Red-Black Trees","text":"<p>Target: balanced BST</p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#11-definition","title":"1.1 Definition","text":"<ol> <li>\u6bcf\u4e2a\u8282\u70b9\u7ea2\u6216\u9ed1</li> <li>\u6839\u662f\u9ed1\u8272</li> <li>\u6bcf\u4e2a\u53f6\u5b50\uff08NIL\uff09\u90fd\u662f\u9ed1\u8272\uff0cNIL \u662f\u4e00\u4e2a\u5171\u4eab\u7684\u6ca1\u6709 key \u7684\u53f6\u5b50\u8282\u70b9</li> <li>\u7ea2\u8272\u8282\u70b9\u7684\u4e24\u4e2a\u5b69\u5b50\u90fd\u662f\u9ed1\u8272\uff0c\u4e0d\u80fd\u6709\u4e24\u4e2a\u8fde\u7eed\u7684\u7ea2\u8272\u8282\u70b9</li> <li>\u6bcf\u4e2a\u8282\u70b9\u5230\u53f6\u5b50\u7684\u8def\u5f84\u4e0a\u9ed1\u8272\u8282\u70b9\u6570\u91cf\u76f8\u540c\uff0csame black height</li> </ol> <p>Attention</p> <ul> <li>Black height \u8ba1\u7b97\u65f6\u4e0d\u7b97\u81ea\u5df1\uff0c\u7b97 NIL</li> <li>\u6240\u6709\u6709 key \u7684\u8282\u70b9\u90fd\u662f internal node</li> </ul> Red-Black Trees are just a way of representing 2-3-4 trees! <p></p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#12-black-height","title":"1.2 Black Height","text":"<p>\\(Lemma\\): A red-black tree with \\(N\\) internal nodes has height at most \\(2\\ln(N+1)\\), \u56e0\u6b64\u5b83\u662f\u5e73\u8861\u6811</p> <p>\\(Proof\\): \u6570\u5b66\u5f52\u7eb3\uff0c\u5373\u8bc1 \\(N\\ge 2^{h/2}-1\\)</p> <p></p> <p>\u663e\u800c\u6613\u89c1\uff0c\u6ca1\u6709\u8fde\u7eed\u7684\u7ea2\u8272\u8282\u70b9\uff0c\u6240\u4ee5 \\(bh(x)\\ge h(x)/2\\)\uff0c\u8bc1\u6bd5\uff0c\u539f\u547d\u9898\u8bc1\u6bd5</p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#13-insertion","title":"1.3 Insertion","text":"","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#131-basic-bottom-up-insertion","title":"1.3.1 Basic: Bottom-Up Insertion","text":"<p>Note</p> <p>\u4f18\u5148\u9009\u62e9\u7ea2\u8272\uff1a\u4e0d\u7528\u6539\u53d8 bh\uff0c\u6709\u51e0\u7387\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u5176\u4ed6\u64cd\u4f5c\uff1b\u4f46\u5982\u679c\u51fa\u73b0\u7ea2\u8272\u76f8\u90bb\uff0c\u5c31\u8981\u8fdb\u884c\u4ee5\u4e0b\u8c03\u6574</p> <p></p> <ul> <li>Case 1: \u89e3\u51b3\u5c40\u90e8\u95ee\u9898\uff0c\u5411\u4e0a\u9012\u5f52</li> <li>Case 2: \u65cb\u8f6c\uff0c\u5f52\u7eb3\u4e3a Case 3</li> <li>Case 3: \u66f4\u6539\u989c\u8272\uff0c\u4e3a\u4e86\u4fee\u6b63 bh\uff0c\u9700\u8981\u65cb\u8f6c\uff0cCase 3 \u4fee\u6b63\u540e\u5c31\u5b8c\u6210\u4e86\uff0c\u4e0d\u9700\u8981\u5411\u4e0a\u4f20\u9012</li> </ul> <p>\u72b6\u6001\u673a</p> <pre><code>flowchart TD\n    A[Case 1] --&gt;|C| A\n    C[Case3] --&gt;|C&amp;R| D(End)\n    A --&gt;|C| B[Case2]\n    B --&gt;|R| C\n    A --&gt;|C| C\n    A --&gt;|C| D</code></pre> <ul> <li>\u5176\u4e2d <code>C</code> \u4e3a\u67d3\u8272\uff0c<code>R</code> \u4e3a\u65cb\u8f6c</li> <li>\u53ef\u4ee5\u53d1\u73b0\u65cb\u8f6c\u64cd\u4f5c\u6700\u591a\u4e5f\u5c31 2 \u6b21</li> </ul> <p>Dicussion</p> <p> \u4e3a\u4ec0\u4e48\u4e0d\u884c\uff1f</p> <ul> <li>\u6700\u53f3\u4fa7\u8282\u70b9\u76f4\u63a5\u6362\u7ea2\u8272\u53ef\u80fd\u5bfc\u81f4\u51fa\u73b0\u7ea2\u8272\u8282\u70b9\u8fde\u7eed</li> <li>P.right \u5b50\u6811\u7684 bh \u53ef\u80fd\u6539\u53d8</li> </ul>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#132-advanced-top-down-insertion","title":"1.3.2 Advanced: Top-Down Insertion","text":"<p>Question</p> <p>Q1\uff1a\u4e3a\u4ec0\u4e48\u4f7f\u7528 Top-Down A1\uff1a\u4e3a\u4e86\u51cf\u5c11 rotation \u7684\u6b21\u6570\uff0c\u4e0d\u8fdb\u884c percolate up Q2\uff1aTop-Down \u5982\u4f55\u4fdd\u8bc1\u63d2\u5165\u65f6\u6700\u591a\u53ea\u7528 rotate \u4e00\u6b21\uff1f A2\uff1a\u5728 search \u7684\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u64cd\u4f5c\uff0c\u4fdd\u8bc1\u4e86\u63d2\u5165\u8282\u70b9\u7684\u53d4\u53d4\u8282\u70b9\u662f\u9ed1\u8272\uff0c\u76f4\u63a5\u6765\u5230 Case 3</p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#1321-procedure","title":"1.3.2.1 Procedure","text":"<ul> <li>Top-Down search \u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u53d1\u73b0\u4e00\u4e2a\u8282\u70b9 <code>X</code> \u6709\u4e24\u4e2a\u7ea2\u8272\u5b69\u5b50\uff0c\u90a3\u4e48\u5c06 <code>X</code> \u67d3\u6210\u7ea2\u8272\uff0c\u5b69\u5b50\u67d3\u6210\u9ed1\u8272\uff0c\u6ce8\u610f\u6b64\u65f6 <code>X</code> \u7684\u7236\u4eb2\u548c\u53d4\u53d4\u4e0d\u53ef\u80fd\u90fd\u662f\u7ea2\u8272\uff0c\u5426\u5219\u5b83\u4eec\u5c06\u5df2\u7ecf\u90fd\u88ab\u67d3\u6210\u9ed1\u8272<ul> <li>\u82e5 <code>X</code> \u7684\u7236\u4eb2\u662f\u7ea2\u8272\uff0c\u5176\u53d4\u53d4\u8282\u70b9\u5fc5\u4e3a\u9ed1\u8272\uff0c\u5219\u8fdb\u5165 Case \u2154 \u8fdb\u884c\u4fee\u6b63\uff0c\u4e0d\u4f1a\u4ea7\u751f\u9012\u5f52</li> </ul> </li> <li>\u5230\u4e86\u63d2\u5165\u4f4d\u7f6e<ul> <li>\u82e5\u7236\u4eb2\u662f\u7ea2\u8272\uff0c\u53d4\u53d4\u5fc5\u4e3a\u9ed1\u8272\uff0c\u8fdb\u5165 Case \u2154\uff0c\u7ed3\u675f</li> <li>\u82e5\u7236\u4eb2\u4e3a\u9ed1\u8272\uff0c\u7ed3\u675f</li> </ul> </li> </ul> Example","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#14-deletion","title":"1.4 Deletion","text":"","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#141-basic-bottom-up-deletion","title":"1.4.1 Basic: Bottom-Up Deletion","text":"","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#1411-step-1-\u67e5\u627e\u5e76\u5220\u9664","title":"1.4.1.1 Step 1. \u67e5\u627e\u5e76\u5220\u9664","text":"<ol> <li>Delete a leaf node: \u8fd9\u4e2a\u8282\u70b9\u5c31\u662f <code>x</code>\uff0c\u5c06\u7236\u4eb2\u6307\u5411 NIL\u3002\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u662f\u7ea2\u8272\uff0c\u8fdb\u5165 Step 2\uff0c\u5426\u5219\uff0c\u7ed3\u675f</li> <li>Delete a degree 1 node:<ol> <li>\u5148\u5206\u6790\u4e00\u4e0b\uff0c\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u662f degree 1\uff0c\u90a3\u4e48\u5b83\u7684 bh = 1\uff0c\u5b83\u7684\u5b69\u5b50\u4e00\u5b9a\u662f\u7ea2\u8272\uff0c\u5426\u5219 bh \u4e0d\u76f8\u7b49\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4e00\u5b9a\u662f\u9ed1\u8272</li> <li>\u7528\u5b50\u8282\u70b9\u66ff\u4ee3\u5f85\u5220\u9664\u8282\u70b9\uff0c\u5e76\u67d3\u6210\u9ed1\u8272\uff0c\u7ed3\u675f</li> </ol> </li> <li>Delete a degree 2 node: \u5c06\u524d\u9a71\uff08\u540e\u7ee7\uff09\u7684\u503c copy \u8fc7\u6765\u5e76\u5c1d\u8bd5\u5220\u9664\u524d\u9a71\uff08\u540e\u7ee7\uff09\uff0c\u9012\u5f52</li> </ol> <p>\u627e\u5230 key \u4e4b\u540e\u7684\u6d41\u7a0b\u56fe</p> <pre><code>flowchart TD\nA[To delete leaf] --&gt;|is red, delete|B{End}\nA --&gt;|is black, delete|D[Step 2: adjust black height]\nC[To delete degree 1 node] --&gt;|replace, recolor| B\nE[To delete degree 2 node] --&gt;|copy, recur| Z{Begin}\nZ ---&gt; |is leaf|A\nZ ---&gt;|is degree 1| C\nZ ---&gt; |is degree 2|E</code></pre>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#1412-step-2-\u8c03\u6574-black-height","title":"1.4.1.2 Step 2. \u8c03\u6574 Black Height","text":"<p>Target</p> <p><code>x</code> \u662f\u9ed1\u8272\u53f6\u5b50\u8282\u70b9\uff0c\u8ba9 <code>x</code> \u6240\u5728\u7684\u8def\u5f84 bh+1 \u4ee5\u4fdd\u6301\u5e73\u8861</p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#14121-case-1-x-\u6709\u7ea2\u8272\u90bb\u5c45","title":"1.4.1.2.1 Case 1 <code>x</code> \u6709\u7ea2\u8272\u90bb\u5c45","text":"<p>Target</p> <p>\u5c06\u90bb\u5c45\u6362\u6210\u9ed1\u8272\uff0c\u5316\u5f52\u4e3a\u5176\u4ed6 Case</p> <p></p> <ul> <li>\u7531\u4e8e <code>w</code> \u662f\u7ea2\u8272\u7684\uff0c\u5fc5\u6709\u4e24\u4e2a\u9ed1\u8272\u5b69\u5b50 \u8003\u8651 <code>NIL</code></li> <li>\u8fdb\u884c\u67d3\u8272\uff0c\u5de6\u4fa7 bh-1\uff0c\u53f3\u4fa7 bh \u4e0d\u53d8</li> <li>\u8fdb\u884c\u65cb\u8f6c\uff0c\u5de6\u4fa7 bh+1\uff0c\u53f3\u4fa7 bh \u4e0d\u53d8</li> <li>\u6700\u7ec8\u5b9e\u73b0\uff1a<ol> <li>\u4e0d\u6539\u53d8\u5de6\u53f3\u7684 bh</li> <li>\u5c06 <code>x</code> \u7684\u90bb\u5c45\u53d8\u6210\u9ed1\u8272\uff0c\u5316\u5f52\u4e3a\u5176\u4ed6 Case</li> </ol> </li> </ul>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#14122-other-cases-x-\u6709\u9ed1\u8272\u90bb\u5c45","title":"1.4.1.2.2 Other cases <code>x</code> \u6709\u9ed1\u8272\u90bb\u5c45","text":"<p>Target</p> <p>Add 1 black to the path of <code>x</code>, not to change others</p> <p></p> <ul> <li>\u6700\u591a\u65cb\u8f6c\u6b21\u6570\u4e3a 3\uff0c<code>Case 1 -&gt; Case 2 -&gt; Case 4 -&gt; End</code></li> </ul> Example <p></p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#142-advanced-top-down-deletion","title":"1.4.2 Advanced: Top-Down Deletion","text":"<p>Bug</p> <p>\u5e76\u6ca1\u6709\u627e\u5230\u76f8\u5173\u7684\u8d44\u6599\uff1f&amp; \u4e0d\u77e5\u9053\u548c\u524d\u9762\u7684 Bottom-Up \u6709\u4ec0\u4e48\u5177\u4f53\u533a\u522b\uff1f</p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#15-advantage","title":"1.5 Advantage","text":"Number of rotations AVL RBT Insertion \\(\\le 2\\) \\(\\le 2\\) Deletion \\(O(\\log N)\\) \\(\\le 3\\)","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#2-b-trees","title":"2 B+ Trees","text":"","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#21-definition","title":"2.1 Definition","text":"<ol> <li>\u6839\u662f\u53f6\u5b50\u6216\u6709 \\([2, M]\\) \u4e2a\u5b69\u5b50</li> <li>\u6240\u6709\u975e\u53f6\u5b50\u8282\u70b9\uff08\u9664\u4e86\u6839\uff09\u90fd\u6709 \\([\\lceil M/2\\rceil, M]\\) \u4e2a\u5b69\u5b50</li> <li>\u6240\u6709\u53f6\u5b50\u7684\u6df1\u5ea6\u76f8\u540c</li> </ol> <p>Important</p> <ul> <li>\u6240\u6709\u6570\u636e\u90fd\u5728\u53f6\u5b50\u4e0a</li> <li>\u6bcf\u4e2a\u4e2d\u95f4\u8282\u70b9\u6709 \\(M\\) \u4e2a ptr\uff0c\\(M-1\\) \u4e2a key value</li> <li>\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u6709 \\(M\\) \u4e2a key \u548c \\(M\\) \u4e2a ptr\uff0c\u8fd9\u91cc\u7684 ptr \u6307\u5411\u5b9e\u9645\u7684\u6570\u636e\u7ed3\u6784\u800c\u4e0d\u662f\u5176\u4ed6\u8282\u70b9</li> </ul> <p></p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#211-\u590d\u6742\u5ea6\u5206\u6790","title":"2.1.1 \u590d\u6742\u5ea6\u5206\u6790","text":"<p>\u8003\u8651 \\(M\\) order B+ tree \u6709 N \u4e2a\u6570\u636e - \\(Depth(M, N)=O(\\lceil \\log_{\\lceil M/2\\rceil} N\\rceil)\\) - \\(T_{find}=Depth(M, N) \\times O(\\log M)=O(\\log N)\\)</p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#22-insertion","title":"2.2 Insertion","text":"<ol> <li>\u627e\u5230\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u76f4\u63a5\u63d2\u5165</li> <li>\u5982\u679c\u63d2\u5165\u8282\u70b9\u5df2\u6ee1<ol> <li>\u53ef\u4ee5\u67e5\u770b\u540c\u5c42\u7684\u90bb\u5c45\u8fd8\u6709\u6ca1\u6709\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u8fdb\u884c\u8c03\u6574\uff08\u5982\u4e0a\u56fe\uff0c\u5176\u5b9e\u53ef\u4ee5\u5300\u4e00\u4e2a\u4f4d\u7f6e\u51fa\u6765\uff0c\u4f46\u8fd9\u6837\u7684\u5b9e\u73b0\u6bd4\u8f83\u590d\u6742\uff09</li> <li>\u8fdb\u884c\u5206\u88c2\uff0c\u5e76\u5411\u4e0a\u4f20\u9012</li> </ol> </li> </ol> Pseudo code of Btree insertion<pre><code>Btree Insert ( ElementType X,\u00a0 Btree T )\n{\n    Search from root to leaf for X and find the proper leaf node;\n    Insert X;\n\u00a0   while ( this node has M+1 keys ) {\n\u00a0\u00a0\u00a0 \u00a0   split it into 2 nodes with \\lceil (M+1)/2 \\rceil and \\lfloor (M+1)/2 \\rfloor keys, respectively;\n\u00a0\u00a0\u00a0 \u00a0   if (this node is the root)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0   create a new root with two children;\n\u00a0\u00a0\u00a0 \u00a0   check its parent;\n\u00a0   }\n}\n</code></pre> \\[T_{insert}(M, N)=O((M/\\log M)\\log N)\\] <p>Note</p> <p>\\(M\\) \u6700\u597d\u7684\u9009\u62e9\u662f 3 \u6216 4\uff0c\u4f46\u5728\u6570\u636e\u5e93\u4e2d\u7ecf\u5e38\u9009\u51e0\u5343\u7684</p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#23-deletion","title":"2.3 Deletion","text":"<p>\u7c7b\u4f3c Insertion\uff0c\u5f53\u7236\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u65f6\uff0c\u9700\u8981\u79fb\u9664</p> <p>A RB tree corresponds to a 2-3-4 tree</p> <p></p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#3-questions","title":"3 Questions","text":"","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#31-q2","title":"3.1 Q2","text":"","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#311-2-3-tree-\u63d2\u5165","title":"3.1.1 2-3 Tree \u63d2\u5165","text":"<p>When insert three keys into a non-empty 2-3 tree, and if the tree gains height when the first key is in, then it is possible that the 2-3 tree will gain more height after the insertions of the next two keys. (T/F)</p> Answer <p>F\uff0c\u56e0\u4e3a\u5982\u679c\u6811\u9ad8\u589e\u5927\u7684\u8bdd\uff0c\u81f3\u5c11\u662f\u4ece\u5355\u4e2a\u6ee1\u7684\u53f6\u5b50\u8282\u70b9\uff083keys\uff09\u53d8\u6210\u4e00\u6839 2 \u53f6\u5b50\uff084keys\uff09\uff0c\u8fd9\u6837\u5b8c\u5168\u53ef\u4ee5\u5bb9\u7eb3\u5269\u4e0b\u7684\u4e24\u4e2a key \u800c\u4e00\u5b9a\u4e0d\u4f1a\u589e\u52a0\u6811\u9ad8</p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#312-validity-of-a-rbtree","title":"3.1.2 Validity of a RBTree","text":"Answer <p>F\uff0c16 \u8282\u70b9\u7684 <code>NIL</code> \u53f6\u5b50\u9ed1\u9ad8\u5c11\u4e00\uff0c\u603b\u7ed3\u4e3a\u7ea2\u8272\u4e00\u5ea6\u8282\u70b9\u51fa\u73b0\u5c31\u975e\u6cd5</p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#32-hw2","title":"3.2 HW2","text":"","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#321-2-3-tree-\u6700\u591a-key-\u6570\u91cf","title":"3.2.1 2-3 Tree \u6700\u591a key \u6570\u91cf","text":"<p>A 2-3 tree with 3 nonleaf nodes must have 18 keys at most. (T/F)</p> Answer <p>T\u4e00\u5b9a\u662f\u4e00\u4e2a\u6839\u4e24\u4e2a\u4e2d\u95f4\u8282\u70b9\uff0c\u6240\u4ee5 3*6=18</p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#322-2-3-tree-\u7ed3\u6784\u548c\u63d2\u5165\u8be6\u89e3","title":"3.2.2 2-3 Tree \u7ed3\u6784\u548c\u63d2\u5165\u8be6\u89e3","text":"<p>Insert 3, 1, 4, 5, 9, 2, 6, 8, 7, 0 into an initially empty 2-3 tree (with splitting). Which one of the following statements is FALSE?</p> <ul> <li>A. 7 and 8 are in the same node</li> <li>B. the parent of the node containing 5 has 3 children</li> <li>C. the first key stored in the root is 6</li> <li>D. there are 5 leaf nodes</li> </ul> <p>Question: 2-3 \u6811\u4e0e B+ \u6811\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff0c\u6570\u636e\u53ea\u5728\u53f6\u5b50\u8282\u70b9\u8fd8\u662f\u5728\u6240\u6709\u8282\u70b9\uff1f</p> <ul> <li>\u6309\u7167 2-3 Trees | (Search, Insert and Deletion) - GeeksforGeeks \u6240\u7ed9\u7684\u5b9a\u4e49\uff0c2-3 \u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u6700\u591a\u80fd\u6709 2 keys, 3 pointer\uff0c\u5e76\u4e14\u6570\u636e\u4e0d\u5168\u5728\u53f6\u5b50\u4e0a</li> <li>\u6240\u6559\u7684 2-3 \u6811\u5219\u66f4\u50cf\u662f B+ \u6811\uff0c\u6240\u6709\u6570\u636e\u5168\u90fd\u5728\u53f6\u5b50\u8282\u70b9\u4e0a\uff0c\u4e2d\u95f4\u8282\u70b9\u6700\u591a 2 keys, 3 ptrs\uff0c\u53f6\u5b50\u8282\u70b9\u6700\u591a 3 keys</li> </ul> Answer <p>A<sup>1</sup> </p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#323-2-3-tree-\u5220\u9664","title":"3.2.3 2-3 Tree \u5220\u9664","text":"<p>After deleting 9 from the 2-3 tree given in the figure, which one of the following statements is FALSE?</p> <p></p> <ul> <li>A. the root is full</li> <li>B. the second key stored in the root is 6</li> <li>C. 6 and 8 are in the same node</li> <li>D. 6 and 5 are in the same node</li> </ul> Answer <p>D<sup>1</sup> </p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#324-self-printable-b-tree-fold","title":"3.2.4 Self-printable B+ Tree %% fold %%","text":"<ul> <li>\u5b9e\u73b0 <code>OEDER = 3</code> \u7684 B+ \u6811\u63d2\u5165\u548c\u6253\u5370\u5373\u53ef</li> </ul>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#33-midterm-review","title":"3.3 Midterm Review","text":"","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#331-bptree-least-2-degree-node","title":"3.3.1 BPTree least 2-degree node","text":"<p>A B+ tree of order 3 with 21 numbers has at least __ nodes of degree 2.</p> Answer <p>0 \u8fd9\u9898\u4e0d\u80fd<sub>~\u8d2a\u5fc3\uff0c</sub>~\u8ba4\u4e3a 2 \u5ea6\u8282\u70b9\u6700\u5c11\u7684\u60c5\u5883\u4e0b\u5c31\u662f\u53f6\u5b50\u8282\u70b9\u6700\u5c11\uff1b\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u6709 9 \u4e2a\u53f6\u5b50\uff0c\u5c31\u53ef\u4ee5\u6ca1\u6709 2 \u5ea6\u8282\u70b9\u4e86 \u6240\u4ee5\u8d2a\u5fc3\u65b9\u6848\u5e94\u8be5\u662f\u5c3d\u91cf\u6784\u5efa\u5168\u662f 3 \u5ea6\u8282\u70b9\u7684\u6811</p>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#34-midterm","title":"3.4 Midterm","text":"","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2002%20Red-Black%20Trees%20and%20B%2B%20Trees.html#341-rbtree-insert","title":"3.4.1 RBTree Insert","text":"<p>After inserting { 1, 2, 3, 4, 5, 6, 7 } into an initially empty red-black tree, then the number of black nodes in the red-black tree is 4. (T/F)</p> <p>Answer</p> <p>T \u5efa\u8bae\u518d\u5c1d\u8bd5\u4e00\u6b21</p> <ol> <li> <p>\u56fe\u7247\u6765\u81ea Homework - Jianjun Zhou's Notebook \u21a9\u21a9</p> </li> </ol>","tags":["Data-Structure/Tree/B-Plus-Tree","Data-Structure/Tree/Red-Black-Tree"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2003%20Inverted%20File%20Index.html","title":"03 Inverted File Index","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2003%20Inverted%20File%20Index.html#1-intro","title":"1 Intro","text":"<ul> <li>solution 1: traverse every page</li> <li>solution 2: Term-Document Incidence Matrix + Boolean Query<ul> <li>problem: sparse matrix</li> </ul> </li> <li>solution 3: Compact Version - Inverted File Index<ul> <li>inverted: \u6b63\u5e8f\u662f file-term what terms in this file\uff0c\u9006\u5e8f\u662f term-file what files contain this term</li> <li>term dict &amp; posting list </li> </ul> </li> </ul> <p>Why do we keep \"times\" (frequency)?</p> <p>\u5982\u679c\u8981\u8fdb\u884c\u4ea4\u96c6\u67e5\u627e\uff0c\u53ef\u4ee5\u5148\u4ece frequency \u8f83\u5c0f\u7684\u8bcd\u5f00\u59cb\u67e5\uff0c\u51cf\u5c0f\u641c\u7d22\u8303\u56f4\u4e14\u4e00\u822c\u4f7f\u7528\u6392\u597d\u5e8f\u7684\u94fe\u8868\u8fdb\u884c\u4ea4\u96c6\u64cd\u4f5c</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2003%20Inverted%20File%20Index.html#2-inverted-file-index","title":"2 Inverted file index","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2003%20Inverted%20File%20Index.html#21-index-generator","title":"2.1 Index Generator","text":"index generator<pre><code>while ( read a document D ) {\n    while ( read a term T in D ) {\n        if ( Find( Dictionary, T ) == false)\n            Insert( Dictionary, T );\n        Get T's posting list;\n        Insert a node to T's posting list;\n    }\n}\nWrite the inverted index to disk;\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2003%20Inverted%20File%20Index.html#22-problems","title":"2.2 problems","text":"<ol> <li>\u5982\u4f55\u5b9a\u4e49\u4e00\u4e2a term</li> <li>\u5982\u4f55 <code>Find</code></li> <li>\u5982\u4f55 <code>Insert</code></li> <li>\u5982\u4f55\u7ba1\u7406\u5927\u91cf\u6570\u636e</li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2003%20Inverted%20File%20Index.html#23-token-analyzer-stop-filter","title":"2.3 Token Analyzer &amp; Stop Filter","text":"<ul> <li>Word Stemming: \u5c06\u4e0d\u540c\u7684\u8bcd\u6001\u8fd8\u539f\u4e3a\u539f\u672c\u7684\u5f62\u5f0f</li> <li>Stop Words: \u5e38\u89c1\u7684 \"a\", \"the\" \u7b49</li> </ul> <p>Note</p> <p>Byte Pair Encoding \u80fd\u51cf\u5c11 tokenize \u6b65\u9aa4\u4e22\u5931\u7684\u4fe1\u606f\uff0c\u5b9e\u73b0\u81ea\u52a8\u5206\u8bcd</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2003%20Inverted%20File%20Index.html#24-vocabulary-scanner","title":"2.4 Vocabulary Scanner","text":"<p>Tries</p> <p>\u6bcf\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5e38\u7528\u6765\u5b58\u5355\u8bcd</p> <ul> <li>solution 1: Search trees (B, B+, Trie)</li> <li>solution 2: Hashing<ul> <li>pros: \u67e5\u627e\u5355\u4e2a\u5355\u8bcd\u66f4\u5feb</li> <li>cons: scanning in sequential order is not possible \u65e0\u6cd5\u8303\u56f4\u67e5\u627e\uff08\u987a\u5e8f\u67e5\u627e\uff09</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2003%20Inverted%20File%20Index.html#25-memory","title":"2.5 Memory","text":"<ul> <li>\u6309\u7167\u5757\u6765\u5b58\u50a8\uff0c\u6bcf\u6b21\u5185\u5b58\u6ee1\u4e86\u5c31\u5b58\u5165\u78c1\u76d8</li> <li>\u7d22\u5f15\u7ed3\u675f\u540e\u9700\u8981\u8fdb\u884c\u5757\u5408\u5e76 #Algorithm/Sorting/External-Sort</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2003%20Inverted%20File%20Index.html#26-distributed-indexing-\u5206\u5e03\u5f0f\u641c\u7d22","title":"2.6 Distributed indexing \u5206\u5e03\u5f0f\u641c\u7d22","text":"<ul> <li>solution 1: Term-partitioned index</li> <li>solution 2: Document-partitioned index<ul> <li>\u4e00\u822c better</li> <li>\u65b9\u4fbf\u6269\u5c55</li> <li>\u5bb9\u707e\uff0c\u4e92\u8054\u7f51\u4fe1\u606f\u5b58\u5728\u5197\u4f59\uff0c\u4e22\u5931\u5c11\u91cf\u968f\u673a\u6570\u636e\u4ea7\u751f\u7684\u5f71\u54cd\u5c0f\u4e8e\u96c6\u4e2d\u7684\u6570\u636e</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2003%20Inverted%20File%20Index.html#27-dynamic-indexing","title":"2.7 Dynamic indexing","text":"<ul> <li>Auxiliary index \u4f5c\u4e3a Cache\uff0c\u5b58\u50a8\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u66f4\u65b0\u548c\u589e\u52a0</li> <li>\u4ec0\u4e48\u65f6\u5019\u5408\u5e76\uff1f</li> <li>\u5982\u4f55\u5220\u9664\uff1f\u53ef\u4ee5\u4e0d\u8fdb\u884c\u5220\u9664 \u7f51\u9875\u5feb\u7167</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2003%20Inverted%20File%20Index.html#28-compression","title":"2.8 Compression","text":"<ul> <li>Term dict \u53ef\u4ee5\u7528\u5355\u4e2a\u5b57\u7b26\u4e32\uff0c\u538b\u7f29\u7a7a\u683c</li> <li>Posting list \u4e2d\u7684\u4f4d\u7f6e\u7f16\u7801\u53ef\u4ee5\u5b58\u589e\u91cf\uff0c\u7528\u66f4\u5c11\u7684 bit </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2003%20Inverted%20File%20Index.html#29-thresholding","title":"2.9 Thresholding","text":"<p>\u8fdb\u884c\u6392\u5e8f\u4ee5\u51cf\u5c11\u641c\u7d22\u7ed3\u679c</p> <ul> <li>Document: \u6309\u7167\u6743\u91cd\u8fdb\u884c\u6392\u5e8f\uff0c\u53ea\u5c55\u793a\u524d x \u4e2a\u6587\u6863<ul> <li>cons: Boolean queries\uff0c\u540c\u65f6\u8fdb\u884c\u4e24\u4e2a\u5355\u8bcd\u7684\u68c0\u7d22\u65f6\u627e\u4e0d\u5230\u91cd\u8981\u7684\u6587\u6863</li> </ul> </li> <li>Query: \u6309\u7167 query \u4e2d\u7684 term \u8fdb\u884c\u6392\u5e8f\uff0c\u91cd\u8981\u7684\u5355\u8bcd\u662f\u9891\u7387\u4f4e\u7684\uff0c\u53ea\u68c0\u7d22\u524d % \u591a\u5c11\u7684 term</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2003%20Inverted%20File%20Index.html#3-measures-for-a-search-engine","title":"3 Measures for a search engine","text":"<ul> <li>index \u901f\u5ea6</li> <li>search \u901f\u5ea6</li> <li>\u652f\u6301\u7684 query \u79cd\u7c7b\u662f\u5426\u591a\u6837</li> <li>\u7528\u6237\u6ee1\u610f\u5ea6<ul> <li>\u6570\u636e\u68c0\u7d22\u6027\u80fd\u8bc4\u4ef7<ul> <li>\u54cd\u5e94\u65f6\u95f4</li> <li>\u7d22\u5f15\u8303\u56f4\u662f\u5426\u591f\u5927</li> </ul> </li> <li>\u4fe1\u606f\u68c0\u7d22\u6027\u80fd\u8bc4\u4ef7<ul> <li>\u53e6\u5916\u8fd8\u6709\u627e\u5230\u7684\u56de\u7b54\u6709\u591a\u76f8\u5173</li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2003%20Inverted%20File%20Index.html#31-relevance-measurement","title":"3.1 Relevance measurement","text":"<ul> <li>requires 3 elements:<ol> <li>A benchmark document collection</li> <li>A benchmark suite of queries</li> <li>A binary assessment of either Relevant or Irrelevant for each query-doc pair</li> </ol> </li> </ul> Relevant Irrelevant Retrieved \\(R_R\\) (TP) \\(I_R\\) (FP) Not Retrieved \\(R_N\\) (FN) \\(I_N\\) (TN) <ul> <li>\u627e\u5230\u7684\u4e2d\u7684\u51c6\u786e\u7387 \\(\\(Precision=\\frac{TP}{TP+FP}\\)\\)</li> <li>\u6b63\u786e\u7684\u4e2d\u88ab\u627e\u5230\u7684 \\(\\(Recall=\\frac{TP}{TP+FN}\\)\\)</li> </ul> <p>AUC</p> <p>Aera under curve, \u5982\u679c\u6709\u591a\u6761\u66f2\u7ebf\uff0c\u66f2\u7ebf\u66f4\u5927\u7684\u66f4\u597d</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2003%20Inverted%20File%20Index.html#4-hw3","title":"4 HW3","text":"<p>When evaluating the performance of data retrieval, it is important to measure the relevancy of the answer set. (T/F)</p> Answer <p>F, just remember!</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html","title":"04 Leftistf Heaps and Skew Heaps","text":"","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#1-intro","title":"1 Intro","text":"<ul> <li>Leftist heaps -&gt; AVL \u4f9d\u9760\u89c4\u5219\u7ef4\u6301\u5e73\u8861</li> <li>Skew heaps -&gt; splay \u4f9d\u9760\u968f\u673a\u6027\u7ef4\u6301\u5e73\u8861</li> </ul>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#11-heaps","title":"1.1 Heaps","text":"<ul> <li>definition<ul> <li>almost complete binary tree</li> <li>Max/min heap</li> </ul> </li> <li>implementation<ul> <li>array representation</li> </ul> </li> <li>operations<ul> <li>findMin</li> <li>insert</li> <li>deleteMin</li> <li>createHeap</li> <li>heapify</li> <li>merge(meld)</li> </ul> </li> </ul>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#12-how-to-merge-bin-heap","title":"1.2 how to merge bin-heap?","text":"<ul> <li>\u6700\u5feb\u4e5f\u662f \\(O(N_1+N_2)\\)\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u5408\u5e76\u7136\u540e\u5efa\u5806</li> <li>\u4e3a\u4e86\u66f4\u5feb\u5730\u5408\u5e76\u5806\uff0c\u9700\u8981\u5f15\u5165 Leftist Heap</li> </ul>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#2-leftist-heaps","title":"2 Leftist Heaps","text":"<p>Target</p> <p>Speed up merging to \\(O(\\log N)\\)</p> <ul> <li>order property - same as bin heap</li> <li>structure property - binary tree, but unbalanced</li> </ul>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#21-null-path-length-\u96f6\u8def\u5f84\u957f","title":"2.1 Null Path Length \u96f6\u8def\u5f84\u957f","text":"<p>\\(Definition\\): The null path length, \\(Npl(x)\\), of any node X is the length of the shortest path from x to a node without 2 children. Define \\(Npl(NULL)=-1\\)</p> \\[Npl(x)=\\min \\{Npl(C)+1\\,for\\,all\\,C\\,as\\,children\\,of\\,X\\}\\] <p>\\(Definition\\): The leftist heap property is that for every node X in the heap, the null path length of the left child is at least as large as that of the right child.</p> \\[Npl(left) \\ge Npl(right)\\] <p>\\(Property\\): Leftisit Heaps \u7684\u53f3\u8def\u5f84\u8282\u70b9\u6570 \\(\\le \\lfloor \\log(N+1) \\rfloor\\)\u3002\u6362\u4e00\u79cd\u8bf4\u6cd5\u5c31\u662f\uff0c\u53f3\u8def\u5f84\u4e0a\u6709 \\(r\\) \u4e2a\u8282\u70b9\u7684 Leftist Heaps \u81f3\u5c11\u6709 \\(2^r-1\\) \u4e2a\u8282\u70b9\u3002</p> <p>Hint</p> <p>We can perform all the work on the right path, which is guaranteed to be short.</p>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#22-merge","title":"2.2 Merge","text":"Declaration<pre><code>struct TreeNode\n{\n    ElementType Element;\n    PriorityQueue Left;\n    PriorityQueue Right;\n    int Npl;\n};\n</code></pre>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#221-recursive-version","title":"2.2.1 Recursive version","text":"<p>\u8fdb\u884c\u5982\u4e0b\u9012\u5f52\u7684\u64cd\u4f5c <code>Merge</code></p> <ol> <li>Merge \u4e24\u4e2a\u6839\uff0c\u672c\u8d28\u4e0a\u662f\u9009\u62e9\u4e00\u4e2a\u5b50\u6811\uff0c\u7136\u540e call merge \u5269\u4f59\u90e8\u5206</li> <li>\u8fdb\u884c attach\uff0c\u66f4\u65b0\u5b50\u6811</li> <li>\u6839\u636e <code>Npl</code>\uff0c\u68c0\u67e5\u662f\u5426\u9700\u8981\u4ea4\u6362</li> </ol> Leftist Heap Merge (recursive verion)<pre><code>PriorityQueue Merge ( PriorityQueue H1, PriorityQueue H2 )\n{\n    if (H1 == NULL) return H2;\n    if (H2 == NULL) return H1;\n    if (H1-&gt;Element &lt; H2-&gt;Element) return merge(H1, H2);\n    else return merge(H2, H1);\n}\n\nstatic PriorityQueue merge ( PriorityQueue H1, PriorityQueue H2 )\n{\n    if (H1-&gt;Left == NULL)  // H1 is a single node\n        H1-&gt;Left = H2;\n    else {\n        H1-&gt;Right = Merge(H1-&gt;Right, H2);\n        if (H1-&gt;Left-&gt;Npl &lt; H1-&gt;Right-&gt;Npl)\n            SwapChildren(H1);\n        H1-&gt;Npl = H1-&gt;Right-&gt;Npl + 1;\n    }\n    return H1;\n}\n</code></pre> <p>\u5173\u4e8e <code>if (H1-&gt;=Left == NULL) H1-&gt;Left = H2;</code></p> <p>\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u5806\u5df2\u7ecf\u6ca1\u6709\u5de6\u5b69\u5b50\u4e86\uff0c\u90a3\u4e48\u6839\u636e \\(Npl\\)\uff0c\u5b83\u4e00\u5b9a\u6ca1\u6709\u53f3\u5b69\u5b50\uff0c\u8fd9\u65f6\u5019\u4e3a\u4e86\u7ef4\u62a4 \\(Npl\\) \u53ea\u9700\u8981\u5c06\u53e6\u4e00\u4e2a\u5806\u5f53\u4f5c\u5176\u5de6\u5b69\u5b50</p>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#222-iterative-version","title":"2.2.2 Iterative version","text":"<ol> <li>\u6309\u7167\u53f3\u8def\u7ecf\u6392\u5e8f\uff08\u94fe\u8868\u7684\u5408\u5e76\uff09</li> <li>\u6cbf\u7740\u53f3\u8def\u5f84\u4ece\u4e0b\u5f80\u4e0a\u68c0\u67e5\u662f\u5426\u9700\u8981\u4ea4\u6362</li> </ol>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#223-conclusion","title":"2.2.3 Conclusion","text":"<p>\u7531\u4e8e\u90fd\u662f\u6cbf\u7740\u53f3\u8def\u7ecf\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5 \\(T(N)=O(\\log N)\\)</p>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#23-deletemin","title":"2.3 DeleteMin","text":"<ol> <li>\u5220\u9664\u6839\u8282\u70b9</li> <li>\u5408\u5e76\u5269\u4e0b\u7684\u4e24\u4e2a\u5b50\u6811</li> </ol>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#3-skew-heaps","title":"3 Skew Heaps","text":"<p>a simple version of the leftist heaps</p> <p>Target</p> <p>Any \\(M\\) consecutive operations take at most \\(O(M \\log N)\\) time.</p>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#31-merge","title":"3.1 Merge","text":"<p>Always swap the left and right children except that the largest of all the nodes on the right paths does not have its children swapped. \u59cb\u7ec8\u4ea4\u6362\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u9664\u4e86\u5728\u53f3\u8def\u5f84\u4e0a\u6700\u5927\u7684\u8282\u70b9\u4e0d\u4ea4\u6362\u5176\u5b50\u8282\u70b9\u3002</p> <p>Note</p> <ul> <li>Skep Heap \u7684\u4f18\u52bf\u5728\u4e8e\uff0c\u65e0\u9700\u591a\u4f59\u7684\u7a7a\u95f4\u6765\u8bb0\u5f55\u8def\u5f84\u957f\uff0c \u65e0\u9700\u5224\u65ad\u662f\u5426\u9700\u8981\u4ea4\u6362\u5b69\u5b50</li> <li>It is an open problem to determine precisely the expected right path length of both leftist and skep heaps.</li> </ul> <p>Attention</p> <ul> <li>\u5fc5\u987b\u5b8c\u6574\u904d\u5386\u53f3\u8def\u5f84\uff0c\u5373\u4f7f\u4e00\u4e2a\u5806\u5df2\u7ecf\u7a7a\u4e86\u4e5f\u9700\u8981\u904d\u5386\u53e6\u4e00\u4e2a\u5806\u4f59\u4e0b\u7684\u53f3\u8def\u7ecf\uff0c\u4ee5\u6b64\u4fdd\u8bc1\u8fdb\u884c\u4ea4\u6362</li> <li>\u6700\u540e\u4e00\u4e2a\u5408\u5e76\u7684\u8282\u70b9\uff0c\u5176\u4e00\u5b9a\u6ca1\u6709\u53f3\u5b69\u5b50\uff0c\u4e14\u4e0d\u8fdb\u884c\u5b50\u6811\u4ea4\u6362</li> </ul>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#32-amortized-analysis-for-skew-heaps","title":"3.2 Amortized Analysis for Skew Heaps","text":"<p>Question</p> <p>\\(T_{amortized}=O(\\log N)\\) ?</p> <ul> <li>\\(D_{i}=\\) the root of the resulting tree</li> <li>\\(\\Phi(D_{i})=\\) number of heavy nodes</li> </ul> <p>\\(definition\\): \u67d0\u4e00\u8282\u70b9\u7684\u540e\u4ee3\uff08\u5305\u62ec\u81ea\u5df1\uff09\u4e2d\uff0c\u5176\u53f3\u5b50\u6811\u5185\u7684\u5927\u4e8e\u7b49\u4e8e\u4e00\u534a\uff0c\u5219\u5176\u4e3a heavy node\uff0c\u53cd\u4e4b\u4e3a light\u3002\u4e5f\u5c31\u662f \\(R\\geq \\frac{L+R+1}{2}\\)</p> <p></p> <p>Important</p> <p>\u6bcf\u6b21\u5408\u5e76\uff0c\u53ea\u6709\u539f\u672c\u5728\u53f3\u8def\u7ecf\u4e0a\u7684\u8282\u70b9\u624d\u6709\u673a\u4f1a\u6539\u53d8\u8f7b\u91cd\u72b6\u6001</p> <p>\u8003\u8651 \\(H_{i}\\) \u7684\u53f3\u8def\u7ecf\u4e0a\u6709 \\(l_i\\) \u4e2a\u8f7b\u8282\u70b9\uff0c\\(h_i\\) \u4e2a\u91cd\u8282\u70b9\uff0c\u5408\u5e76\u7684\u6700\u574f\u60c5\u51b5\u5c31\u662f\u904d\u5386\u4e86\u4e24\u4e2a\u53f3\u8def\u5f84</p> \\[T_{worst}=l_{1}+h_{1}+l_{2}+h_{2}\\] <p>\u4ee4\u4e24\u68f5\u6811\u4e2d\u53f3\u8def\u5f84\u9664\u5916\u7684\u8282\u70b9\u4e2d\u8fd8\u6709 \\(h\\) \u4e2a\u4e0d\u4f1a\u6539\u53d8\u7684\u91cd\u8282\u70b9\uff0c\u5219 merge \u4e4b\u524d\u6709</p> \\[\\Phi_{i}=h_{1}+h_{2}+h\\] <p>Merge \u540e\uff0c\u7531\u4e8e heavy \u4e00\u5b9a\u53d8\u6210 light\uff0clight \u53ef\u80fd\u53d8\u6210 heavy<sup>1</sup></p> \\[ \\Phi_{i+1} \\leq l_{1}+l_{2}+h \\] <p>\u6240\u4ee5</p> \\[ T_{amortized}=T_{worst}+\\Phi_{i+1}-\\Phi_{i} \\leq 2(l_{1}+l_{2}) \\] <p>\u53c8 \\(l=O(\\log N)\\)\uff0c\u56e0\u6b64 \\(T_{amortized}=O(\\log N)\\)</p>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#4-conclusion","title":"4 Conclusion","text":"Operation FindMin DeleteMin Insert DecreaseKey Merge Binary \\(\\Theta(1)\\) \\(\\Theta(\\log n)\\) BuildHeap in \\(O(n)\\) \\(O(\\log n)\\) \\(\\Theta(n)\\) Leftist Heap \\(\\Theta(1)\\) \\(\\Theta(\\log n)\\) \\(\\Theta(\\log n)\\) \\(O(\\log n)\\) \\(\\Theta(\\log n)\\) Skew Heap \\(\\Theta(1)\\) \\(\\Theta(\\log n)\\) \\(\\Theta(\\log n)\\) * \\(O(\\log n)\\)* \\(\\Theta(\\log n)\\)* <p><code>*</code> is amortized time.</p>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#5-questions","title":"5 Questions","text":"","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#51-q4","title":"5.1 Q4","text":"<p>A leftist heap with the null path length of the root being r must have at least \\(2^{r+1}-1\\) nodes. (T/F)</p> Answer <p>T \u7531\u4e8e \\(Npl(x)=min\\{Npl(x.left), Npl(x.right)\\}+1\\)\uff0c\u5982\u679c \\(Npl(root)=r\\)\uff0c\u90a3\u4e48\u610f\u5473\u7740\u4e0d\u5b58\u5728\u5c0f\u4e8e \\(r\\) \u7684 shorter path\uff0c\u6781\u7aef\u60c5\u51b5\u662f\u9ad8\u4e3a \\(r\\) \u7684\u6ee1\u4e8c\u53c9\u6811\uff0c\u6700\u5c11\u6709 \\(2^{r+1}-1\\) \u4e2a\u8282\u70b9 \u6ce8\u610f\u4e0e \u53f3\u8def\u7ecf\u4e0a\u6709 \\(r\\) \u4e2a\u8282\u70b9\uff0c\u5219 Leftist Heap \u81f3\u5c11\u6709 \\(2^r-1\\) \u4e2a\u8282\u70b9 \u533a\u5206</p>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#52-hw4","title":"5.2 HW4","text":"","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#521-skew-heap-\u63d2\u5165\u81ea\u7136\u6570","title":"5.2.1 Skew Heap \u63d2\u5165\u81ea\u7136\u6570","text":"<p>The result of inserting keys 1 to \\(2^k-1\\) for any \\(k&gt;4\\) in order into an initially empty skew heap is always a full binary tree.</p> Answer <p>T\uff0cMinHeap \u4e5f\u662f\u8fd9\u6837\u7684</p>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#522-leftist-heap-build","title":"5.2.2 Leftist Heap Build","text":"<p>We can perform BuildHeap for leftist heaps by considering each element as a one-node leftist heap, placing all these heaps on a queue, and performing the following step: Until only one heap is on the queue, dequeue two heaps, merge them, and enqueue the result. Which one of the following statements is FALSE?</p> <ul> <li>A. in the \\(k\\)-th run, \\(\\lceil N/2^k \\rceil\\) leftist heaps are formed, each contains \\(2^k\\) nodes</li> <li>B. the worst case is when \\(N=2^K\\) for some integer \\(K\\)</li> <li>C. the time complexity \\(T(N)=O(\\frac{N}{2}\\log 2^0+\\frac{N}{2^2}\\log 2^1 + \\frac{N}{2^3}\\log 2^2+\\dots+\\frac{N}{2^K}\\log 2^{K-1})\\) for some integer \\(K\\) so that \\(N=2^K\\)</li> <li>D. the worst case time complexity of this algorithm is \\(\\Theta(N\\log N)\\)</li> </ul> Answer <p>D</p> <ul> <li>A. \u53ef\u80fd\u9519\u8bef\uff0c\u9519\u8bef\u70b9\u5728\u4e8e \\(2^k\\) \u8fc7\u4e8e\u7edd\u5bf9\uff0c\u4f46\u5982\u679c\u6307\u7684\u662f\u6e10\u8fdb\u5c31\u5bf9\u4e86</li> <li>B. \u53ef\u80fd\u662f\u56e0\u4e3a\u521a\u521a\u597d\u5f62\u6210\u5b8c\u7f8e\u914d\u5bf9\uff1f</li> <li>C. \u5982\u679c \\(N=2^k\\)\uff0c\u90a3\u4e48\u7b2c \\(r\\) \u6b21 run \u6709 \\(N/2^r\\) \u4e2a\u5806\u9700\u8981\u5408\u5e76\uff0c\u6bcf\u4e2a\u5408\u5e76\u7684\u590d\u6742\u5ea6\u662f \\(\\log size(heap)=\\log 2^r=r\\)</li> <li>D. \u5efa\u5806\u7b97\u6cd5\u4e00\u5b9a\u662f\u7ebf\u6027\u7684\uff0c\u4ece C \u4e5f\u53ef\u4ee5\u5f97\u51fa \\(\\Theta(N)\\)\uff0c\u56e0\u4e3a \\(\\sum_{i=1}^K \\frac{i-1}{2^i}\\) \u7684\u7ed3\u679c\u662f\u5e38\u6570</li> </ul>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#53-ex4","title":"5.3 Ex4","text":"","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#531-skew-heaps-merge","title":"5.3.1 Skew Heaps Merge","text":"<p>Merge the two skew heaps in the following figure. How many of the following statements is/are FALSE?</p> <ul> <li>the null path length of 8 is the same as that of 12</li> <li>40 is the left child of 18</li> <li>the depths of 18 and 33 are the same</li> </ul> <p></p> Answer <p>0 \u6ce8\u610f\u53c2\u8003 3.1 Merge \u4e2d\u7684\u8bf4\u6cd5\uff0c\u5373\u4f7f\u4e00\u4e2a\u5806\u7a7a\u4e86\uff0c\u53e6\u4e00\u4e2a\u5806\u7684\u53f3\u8def\u7ecf\u4e5f\u662f\u8981\u8fdb\u884c\u904d\u5386\u4ea4\u6362\u7684\uff0c\u6240\u4ee5\u6700\u540e 35 \u662f 18 \u7684\u53f3\u5b69\u5b50\uff0c40 \u662f\u5de6\u5b69\u5b50</p>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#532-analyzing-self-adjusting-structures","title":"5.3.2 Analyzing Self-Adjusting Structures","text":"<p>In typical applications of data structures, it is not a single operation that is performed, but rather a sequence of operations, and the relevant complexity measure is not the time taken by one operation but the total time of a sequence. Hence instead of imposing any explicit structural constraint, we allow the data structure to be in an arbitrary state, and we design the access and update algorithms to adjust the structure in a simple, uniform way, so that the efficiency of future operations is improved. We call such a data structure self-adjusting. For example skew heaps and splay trees are such kind of structures.</p> <p>Which one of the following statements is FALSE about self-adjusting data structures?</p> <ul> <li>A. They need less space, since no balance information is kept.</li> <li>B. Their access and update algorithms are easy to understand and to implement.</li> <li>C. In an amortized sense, ignoring constant factors, they can be at least as efficient as balanced structures.</li> <li>D. Less local adjustments take place than in the corresponding balanced structures, especially during accesses.</li> </ul> Answer <p>D</p> <ul> <li>A. \u786e\u5b9e\uff0c\u7531\u4e8e\u4e0d\u5b58\u50a8 \\(Npl\\)\uff0c\\(BF\\) \u7b49\u8f85\u52a9\u4fe1\u606f</li> <li>B. trivial</li> <li>C. trivial</li> <li>D. \u81ea\u5e73\u8861\u7ed3\u6784\u6b63\u662f\u4f9d\u9760\u5c40\u90e8\u8c03\u6574\u6765\u5b9e\u73b0 amortized \u610f\u4e49\u4e0a\u7684\u9ad8\u6548\uff0c\u800c balanced \u7531\u4e8e\u53ef\u4ee5\u4f9d\u8d56\u8f85\u52a9\u4fe1\u606f\uff0c\u5c40\u90e8\u8c03\u6574\u53ea\u5728\u8fdd\u53cd\u4e86\u6027\u8d28\u65f6\u8fdb\u884c</li> </ul>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#54-midterm-review","title":"5.4 Midterm Review","text":"","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#541-right-path-length-of-skep-heaps","title":"5.4.1 Right path length of Skep Heaps","text":"<p>The right path of a skew heap can be arbitrarily long. (T/F)</p> Answer <p>T</p> <ul> <li>\u4e00\u65b9\u9762\uff0c\u6ca1\u6709\u7ed3\u6784\u7ea6\u675f</li> <li>\u53e6\u4e00\u65b9\u9762\uff0c\u53ef\u4ee5\u5b9e\u73b0\uff1f\u53c2\u8003 [\u9898\u96c6]Lecture 4. Leftist Heaps and Skew Heaps_the result of inserting keys 1 to 2 k 1 for any k-CSDN\u535a\u5ba2</li> </ul>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#542-which-is-more-balanced","title":"5.4.2 Which is more balanced?","text":"<p>With the same operations, the resulting skew heap is always more balanced than the leftist heap. (T/F)</p> Answer <p>F skew heap \u66f4\u4e0d\u5e73\u8861\u7684\u4f8b\u5b50\u53ef\u4ee5\u5f88\u5bb9\u6613\u4e3e\u51fa\uff1b\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u60f3\uff0cleftist \u7531\u4e8e\u6709\u5e73\u8861\u7ea6\u675f\u6761\u4ef6\uff0c\u80af\u5b9a\u5728\u66f4\u591a\u60c5\u51b5\u4e0b\u6bd4\u968f\u673a\u7684\u66f4\u52a0\u5e73\u8861</p>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#55-midterm","title":"5.5 Midterm","text":"","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2004%20Leftist%20Heaps%20and%20Skew%20Heaps.html#551-heavy-nodes","title":"5.5.1 Heavy Nodes?","text":"<p>Consider the following merge algorithm for skew heaps. A merge is perfomed using a simple routine: merging two skew heaps A and B, if the top of A is less than or equal to the top of B, A becomes the skew heap, its children are swapped and B is merged with the left sub-heap of the root of A. If the left sub-heap is empty, B is assigned to the left sub-heap of A.</p> <p>A node p is heavy if the number of descendants of p\u2019s right subtree is at least half of the number of descendants of p, and light otherwise.</p> <p>The potential function is defined to be the number of heavy nodes. Let heap A and heap B be a n-node tree.</p> <p>Which of the following is FALSE?</p> <ul> <li>A. There are at most \\(O(\\log n)\\) light nodes in the right path of a n-node tree.</li> <li>B. The amortized running time of merge is \\(O(\\log n)\\).</li> <li>C. The only nodes whose heavy/light status can change are nodes that are initially on the right path.</li> <li>D. All heavy nodes in the right path of A and B will become the light nodes after merging.</li> </ul> Answer <p>D \u8fd9\u9898\u4e0d\u5e94\u8be5\u51fa\u7684\uff0c\u8fd9\u91cc\u4fee\u6539\u4e86 skew heap \u5408\u5e76\u7684\u5b9a\u4e49\u4e86\uff0c\u5982\u679c\u6309\u7167\u6b63\u786e\u7684\u5b9a\u4e49\uff0c\u6240\u6709\u53f3\u8def\u7ecf\u4e0a\u7684\u8282\u70b9\u90fd\u4f1a\u8fdb\u884c swap children\uff0c\u8fd9\u6837\u6240\u6709\u7684 heavy nodes \u90fd\u4f1a\u53d8\u6210 light\uff0c\u5426\u5219\u5c31\u65e0\u6cd5\u8fdb\u884c\u590d\u6742\u5ea6\u8bc1\u660e</p> <ol> <li> <p>\u53c2\u8003 skew-heap-analysis.pdf (ntu.edu.tw) \u21a9</p> </li> </ol>","tags":["Data-Structure/Priority-Queue/Leftist-Heap","Data-Structure/Priority-Queue/Skew-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html","title":"05 Binomial Queue","text":"","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#1-structure","title":"1 Structure","text":"<ul> <li>Not a heap-ordered tree, but rather a colloction of heap-ordered trees, forest</li> </ul> <ul> <li>\\(B_k\\) properties<ul> <li>\\(k\\) children, which are \\(B_0, B_1, B_2, \\dots, B_{k-1}\\)</li> <li>\u7531\u4e24\u4e2a \\(B_{k-1}\\) \u6784\u6210\uff0c\u4e00\u4e2a\u63a5\u5728\u53e6\u4e00\u4e2a\u7684\u6839\u4e0a</li> <li>\u6709 \\(2^k\\) \u4e2a\u8282\u70b9</li> <li>\u6df1\u5ea6\u4e3a \\(d\\) \u7684\u8282\u70b9\u6709 \\(C^d_k\\) \u4e2a\uff0cBinomial coefficient</li> </ul> </li> </ul> <p>Note</p> <p>A priority queue of any size can be uniquely represented by a collection of binomial trees.</p>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#11-definition","title":"1.1 Definition","text":"<ul> <li>Binomial Tree (recursive definition) \\(B_i\\): \u4e24\u4e2a \\(B_{i-1}\\)\uff0c\u8ba9\u5176\u4e2d\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u6839\u8282\u70b9\u7684\u5b69\u5b50</li> <li>Binomial Queue: \\(B_i\\) \u7684\u5217\u8868\uff0c\u5b9e\u9645\u662f\u4e00\u4e2a forest</li> </ul> <p>Attention</p> <p>\u6211\u4eec\u4e0d\u4f7f\u7528 binomial heap \u8fd9\u4e2a\u8bcd\uff0c\u5426\u5219\u53ef\u80fd\u6307\u4ee3\u4e0d\u6e05</p>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#2-operations","title":"2 Operations","text":"","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#21-findmin","title":"2.1 FindMin","text":"<ul> <li>at most \\(\\lceil \\log N \\rceil\\) roots, so \\(O(\\log N)\\)</li> <li>keep record of the min, update whenever the tree is changed, then \\(O(1)\\)</li> </ul>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#22-merge","title":"2.2 Merge","text":"<ul> <li>\u4f7f\u7528\u4e8c\u8fdb\u5236\u52a0\u6cd5\u5f97\u5230\u76ee\u6807\u68ee\u6797\u7684\u7ed3\u6784</li> <li>\u76f4\u63a5\u5c06\u540c\u9636\u7684\u6570\u7ec4\u5408\u6210\u4e00\u9897\u66f4\u5927\u7684\u6811\uff0c\u5b8c\u6210\u5408\u5e76</li> <li>\\(T(N)=O(\\log N)\\)</li> </ul> <p>Note</p> <p>keep trees in the bq sorted by height, so that one traversal is enough</p>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#23-insert","title":"2.3 Insert","text":"<p>\u4e5f\u5c31\u662f\u4e8c\u8fdb\u5236\u52a0 1</p> <ul> <li>\u5355\u6b21\u63d2\u5165<ul> <li>\\(T_{worst}=O(\\log N)\\)</li> <li>\\(T_{avg}=O(1)\\)</li> </ul> </li> <li>\u5747\u644a\u5f00\u9500 \\(T_{amortized}=\\Theta(1)\\)</li> </ul>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#24-deletemin","title":"2.4 DeleteMin","text":"<ol> <li>\u627e\u6700\u5c0f \\(O(\\log N)\\) or \\(\\Theta(1)\\)\uff0c\u53d6\u51b3\u4e8e\u662f\u5426\u4fdd\u5b58\u4e86\u6700\u5c0f\u5143\u7d20\u7684\u6307\u9488</li> <li>\u5c06\u8fd9\u68f5\u6811\u62c6\u6563\u653e\u5230\u65b0\u7684\u961f\u5217\u4e2d \\(O(\\log N)\\)</li> <li>\u52a0\u6cd5 \\(O(\\log N)\\)</li> </ol>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#25-conclusion","title":"2.5 Conclusion","text":"Operation FindMin DeleteMin Insert DecreaseKey Merge Binary \\(\\Theta(1)\\) \\(\\Theta(\\log n)\\) BuildHeap in \\(O(n)\\) \\(O(\\log n)\\) \\(\\Theta(n)\\) Leftist Heap \\(\\Theta(1)\\) \\(\\Theta(\\log n)\\) \\(\\Theta(\\log n)\\) \\(O(\\log n)\\) \\(\\Theta(\\log n)\\) Skew Heap \\(\\Theta(1)\\) \\(\\Theta(\\log n)\\) \\(\\Theta(\\log n)\\) * \\(O(\\log n)\\)* \\(\\Theta(\\log n)\\)* Binomial Queue \\(\\Theta(1)\\) \\(\\Theta(\\log n)\\) \\(\\Theta(1)\\)* \\(\\Theta(\\log n)\\) \\(O(\\log n)\\) Skew Binomial \\(\\Theta(1)\\) \\(\\Theta(\\log n)\\) \\(\\Theta(1)\\) \\(\\Theta(\\log n)\\) \\(O(\\log n)\\) <p><code>*</code> is amortized time.</p> <p>Skew Binomial Queue</p> <p>\u7b2c \\(k\\) \u4e2a\u6811\u7684\u5bb9\u91cf\u4e3a \\(2^{k+1}-1\\)\uff0c\u800c\u4e0d\u662f \\(2^k\\)\u3002\u8fd9\u6837\u5e26\u6765\u7684\u6700\u5927\u597d\u5904\u5c31\u662f\uff0c\u6bcf\u6b21 insert \u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u6700\u591a\u53ea\u9700\u8981 carry \u4e00\u6b21\uff0c\u80fd\u505a\u5230 \\(\\Theta(1)\\) \u7684 worst-case insert \u65f6\u95f4\u3002</p> <p></p> <p>For example, 60 is represented as 11200 in skew binary (31 + 15 + 7 + 7), and adding 1 produces 12000 (31 + 15 + 15). Since the next higher digit is guaranteed not to be 2, a carry is performed at most once.<sup>1</sup></p>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#3-implementation","title":"3 Implementation","text":"<p>Binomial queue = array of binomial trees</p> <p>\u4ece\u9700\u6c42\u4fa7\u5165\u624b</p> <ul> <li>DeleteMin \u8981\u62c6\u6811\uff0c\u9700\u8981\u80fd\u5feb\u901f\u627e\u5230\u6240\u6709\u5b50\u6811 -&gt; \u4f7f\u7528 First-child-next-sibling</li> <li>Merge \u9700\u8981\u5b69\u5b50\u6309\u7167 size \u5927\u5c0f\u8fdb\u884c\u6392\u5e8f -&gt; \u6309\u7167 decreasing order \u5b58\u50a8\u5b50\u6811</li> <li>\u4e3a\u4ec0\u4e48\u4e0d\u7528\u6570\u7ec4\uff1f\u5360\u7528\u7a7a\u95f4\u8f83\u5927\uff0c\u800c\u4e14\u4e0d\u597d\u6269\u5bb9</li> </ul> <p></p> Data Structure of Binomial Queue<pre><code>typedef struct BinNode *Position;\ntypedef struct Collection *BinQueue;\ntyepdef struct BinNode *BenTree;\n\nstruct BinNode\n{\n    ElementType Element;\n    Position LeftChild;\n    Position NextSibling;\n};\n\nstruct Collection\n{\n    int CurrentSize;  // total number of nodes\n    BinTree TheTrees[ MaxTrees ];\n}\n</code></pre>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#31-combine-2-treesmerge-fold","title":"3.1 Combine 2 Trees/Merge %% fold %%","text":"Combine 2 Trees<pre><code>BinTree CombineTrees( BinTree T1, BinTree T2 )\n{\n    if (T1-&gt;Element &gt; T2-&gt;Element)\n        return CombineTrees(T2, T1);  // attach the larger one to the smaller one\n    // insert T2 to be the leftmost child of T1\n    T2-&gt;NextSibling = T1-&gt;LeftChild;\n    T1-&gt;LeftChild = T2;\n    return T1;\n}\n</code></pre> <p>Hint</p> <p>\u4ece\u8fd9\u91cc\u5c31\u80fd\u53d1\u73b0\u4e3a\u4ec0\u4e48 <code>LeftChild</code> \u662f\u6700\u5927\u7684\u5b69\u5b50\u4e86\uff0c\u8fd9\u6837\u65b9\u4fbf\u6811\u7684\u5408\u5e76\u64cd\u4f5c\uff1b\u5728\u5408\u5e76\u65f6\u5c06\u6839\u8282\u70b9\u8f83\u5927\u7684\u4e00\u68f5\u6811\u76f4\u63a5\u5f53\u4f5c <code>LeftChild</code>\uff0c\u5c31\u4e0d\u9700\u8981\u904d\u5386\u6240\u6709 children\u3002</p> Binomial Queue Merge<pre><code>BinQueue Merge( BinQueue H1, BinQueue H2 )\n{\n    BinTree T1, T2, Carry = NULL;\n    int i, j;\n\n    if (H1-&gt;CurrentSize + H2-&gt;CurrentSize &gt; Capacity) ErrorMessage();\n    H1-&gt;CurrentSize += H2-&gt;CurrentSize;\n\n    for (i = 0, j = 1; j &lt;= H1-&gt;CurrentSize; i++, j *= 2) {\n        T1 = H1-&gt;TheTrees[i];\n        T2 = H2-&gt;TheTrees[i];\n        if (Carry == NULL) {\n            if (T2 == NULL)  // do nothing\n            else {\n                if (T1 == NULL) {\n                    H1-&gt;TheTrees[i] = T2;\n                    H2-&gt;TheTrees[i] = NULL;\n                } else {\n                    Carry = CombineTrees(T1, T2);\n                    H1-&gt;TheTrees[i] = H2-&gt;TheTrees[i] = NULL;\n                }\n            }\n        } else {\n            if (T2 == NULL) {\n                if (T1 == NULL) {\n                    H1-&gt;TheTrees[i] = Carry;\n                    Carry = NULL;\n                } else {\n                    Carry = CombineTrees(T1, Carry);\n                    H1-&gt;TheTrees[i] = NULL\n                }\n            } else {\n                if (T1 == NULL) {\n                    Carry = CombineTrees(T2, Carry);\n                    H2-&gt;TheTrees[i] = NULL;\n                } else {\n                    H1-&gt;TheTrees[i] = Carry;\n                    Carry = CombineTrees(T1, T2);\n                    H2-&gt;TheTrees[i] = NULL;\n                }\n            }\n        }\n    }\n\n    return H1;\n}\n</code></pre>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#32-deletemin","title":"3.2 DeleteMin","text":"DeleteMin<pre><code>void DeleteMin( BinQueue H )\n{\n    BinQueue DeletedQueue;\n    Position DeletedTree, OldRoot;\n    ElementType MinItem = Infinity;  // the min item to be returned\n    int i, j, MinTree;\n\n    if (IsEmpty(H)) { PrintErrorMessage(); return -Infinity; }\n\n    /* Step 1: find the minimum item */\n    for (i = 0; i &lt; MaxTrees; i++) {\n        if(H-&gt;TheTrees[i] &amp;&amp; H-&gt;TheTrees[i]-&gt;Element &lt; MinItem) {\n            MinItem = H-&gt;TheTrees[i]-&gt;Element;\n            MinTree = i;\n        }\n    }  // this can be optimized by maintaining a ptr to minterm in queue\n    DeletedTree = H-&gt;TheTrees[MinTree];\n\n    /* Step 2: remove MinTree from H, creating H' */\n    H-&gt;TheTrees[MinTree] = NULL;\n\n    /* Step 3.1: remove the root */\n    OldRoot = DeletedTree;\n    DeletedTree = DeletedTree-&gt;LeftChild;\n    free(OldRoot);\n\n    /* Step 3.2: create H'' */\n    DeletedQueue = IntializeBinQueue();\n    DeletedQueue-&gt;CurrentSize = (1&lt;&lt;MinTree) - 1;\n    for (j = MinTree - 1; j &gt;= 0; j--) {\n        DeletedQueue-&gt;TheTrees[j] = DeletedTree;\n        DeletedTree = DeletedTree-&gt;NextSibling;\n        DeletedQueue-&gt;TheTrees[j]-&gt;NextSibling = NULL;\n    }\n    H-&gt;CurrentSize -= DeletedQueue-&gt;CurrentSize + 1;\n\n    /* Step 4: merge H' and H'' */\n    H = merge(H, DeletedQueue);\n\n    return MinItem;\n}\n</code></pre>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#4-amortized-analysis","title":"4 Amortized Analysis","text":"<p>\\(Claim\\): A binomial queue of \\(N\\) elements can be built by \\(N\\) successive insertions in \\(O(N)\\) time.</p>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#41-aggregate-method","title":"4.1 Aggregate Method","text":"","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#411-\u63a8\u5bfc\u65b9\u5f0f-1","title":"4.1.1 \u63a8\u5bfc\u65b9\u5f0f 1","text":"<ul> <li>\u8fdb\u884c\u4e8c\u8fdb\u5236 counting \u65f6\uff0c\u8fdb\u4f4d\u64cd\u4f5c\u53d1\u751f\u7684\u9891\u7387\u4e3a \\(\\frac{1}{2^i}\\)\uff0c\u6bcf\u6b21\u8fdb\u4f4d\u90fd\u7b97\u4e00\u6b21\u64cd\u4f5c\uff0c\u5305\u62ec\u521b\u5efa \\(B_{0}\\)</li> <li>\u8fdb\u884c\u6c42\u548c \\(N\\left( 1+\\frac{1}{2}+\\frac{1}{4}+\\dots+\\frac{1}{2^{\\log N}} \\right) \\leq 2N=O(N)\\)</li> </ul>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#412-\u63a8\u5bfc\u65b9\u5f0f-2","title":"4.1.2 \u63a8\u5bfc\u65b9\u5f0f 2","text":"<ul> <li>\u5982\u4e0a\u56fe\uff0c<code>link=1</code> \u6bcf 4 \u6b21\u53d1\u751f\uff0c<code>link=2</code> \u6bcf 8 \u6b21\u53d1\u751f\uff0c......\uff0c<code>link=i</code> \u6bcf \\(2^{i+1}\\) \u6b21\u53d1\u751f</li> <li>\u8fdb\u884c\u6c42\u548c \\(N+N\\left( \\frac{1}{4}+2\\times \\frac{1}{8} +3\\times \\frac{1}{16} + \\dots\\right) \\leq 2N=O(N)\\)</li> </ul>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#42-potential-method","title":"4.2 Potential Method","text":"<p>\u6839\u636e\u4e0a\u9762\u7684\u4f8b\u5b50\u5df2\u7ecf\u80fd\u591f\u770b\u51fa\uff0c\u52bf\u80fd\u51fd\u6570\u53ef\u4ee5\u5b9a\u4e49\u4e3a \\(\\Phi(H)=\\) # of binomial trees\u3002</p> <p>\u4e00\u6b21\u63d2\u5165\uff0c\u5982\u679c\u5f00\u9500\u4e3a \\(c\\)\uff0c\u90a3\u4e48 # of binomial trees \u4f1a\u589e\u52a0 \\(2-c\\)\uff0c\u56e0\u6b64\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7684\u5747\u644a\u5f00\u9500 \\(\\hat{c_{i}}=c_{i}+(\\Phi_{i}-\\Phi_{i-1})=2\\)\u3002</p> \\[ \\sum_{i=1}^{\\hat{N}}c_{i}+\\Phi_{N}-\\Phi_{0}=2N \\Rightarrow \\sum_{i=1}^N c_{i}=2N-\\Phi_{N}\\leq{2}N=O(N) \\] <p>Thus, \\(T_{worst}=O(\\log N)\\), but \\(T_{amortized}=2\\)</p>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#5-more-about-heapsextened-reading-fold","title":"5 More about heaps/Extened reading %% fold %%","text":"<ol> <li>[1403.0252] A Back-to-Basics Empirical Study of Priority Queues (arxiv.org) \u8fd9\u7bc7\u8bba\u6587\u7684\u6d4b\u8bd5\u65b9\u6cd5\u3001\u6570\u5b66\u63a8\u5bfc\u548c\u5206\u6790\u90fd\u975e\u5e38\u503c\u5f97\u5b66\u4e60</li> <li>Fibonacci heaps \u6590\u6ce2\u90a3\u5951\u5806_\u54d4\u54e9\u54d4\u54e9_bilibili Fibonacci Heaps \u878d\u5408\u4e86\u5f88\u591a\u6570\u636e\u7ed3\u6784\u7684\u601d\u60f3</li> </ol>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#51-fibonacci-heap","title":"5.1 Fibonacci Heap","text":"a possible implementation<pre><code>#ifndef FIBONACCI_HEAP_H\n#define FIBONACCI_HEAP_H\n\n#include \"Heap.hpp\"\n#include &lt;cmath&gt;\n#include &lt;list&gt;\n#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\ntemplate &lt;typename ValueType&gt;\nclass FibonacciHeap : public Heap&lt;ValueType&gt;\n{\nprivate:\n    // Node structure for the Fibonacci heap\n    struct Node\n    {\n        ValueType value;\n        int key;\n        int degree;\n        bool mark;\n        Node *parent;\n        list&lt;Node *&gt; children;\n\n        // Constructor for the Node structure\n        Node(ValueType value, int key)\n            : value(value), key(key), degree(0), mark(false), parent(nullptr) {}\n    };\n\n    // Pointer to the minimum node in the heap\n    Node *min_node;\n    // List of root nodes in the heap\n    list&lt;Node *&gt; root_list;\n    unordered_map&lt;ValueType, Node *&gt; value_to_node;\n    int node_count;\n\n    // Consolidate the trees of the same degree\n    void consolidate()\n    {\n        int max_degree = static_cast&lt;int&gt;(log2(node_count)) + 1;\n        vector&lt;Node *&gt; degree_table(max_degree, nullptr);\n\n        // iterate root list to consolidate trees of the same degree\n        for (auto it = root_list.begin(); it != root_list.end(); it++)\n        {\n            Node *x = *it;\n            int degree = x-&gt;degree;\n\n            while (degree_table[degree] != nullptr)\n            {\n                Node *y = degree_table[degree];\n                if (y-&gt;key &lt; x-&gt;key)\n                    swap(x, y);\n                attach(y, x); // attach y to x\n                degree_table[degree] = nullptr;\n                degree++;\n            }\n\n            degree_table[degree] = x;\n        }\n\n        // rebuild root list\n        min_node = nullptr;\n        root_list.clear();\n        for (Node *node : degree_table)\n        {\n            if (node)\n            {\n                root_list.push_back(node);\n                if (!min_node || node-&gt;key &lt; min_node-&gt;key)\n                    min_node = node;\n            }\n        }\n    }\n\n    // Attach a child node to a parent node\n    void attach(Node *target_child, Node *target_parent)\n    {\n        root_list.remove(target_child);\n        target_parent-&gt;children.push_back(target_child);\n        target_child-&gt;parent = target_parent;\n        target_parent-&gt;mark = false;\n        target_parent-&gt;degree++;\n    }\n\n    // Cut a child node from its parent node\n    void cut(Node *child, Node *parent)\n    {\n        parent-&gt;children.remove(child);\n        parent-&gt;degree--;\n        root_list.push_back(child);\n        child-&gt;parent = nullptr;\n        child-&gt;mark = false;\n    }\n\n    // Perform cascading cut on a node\n    void cascadingCut(Node *node)\n    {\n        Node *parent = node-&gt;parent;\n        if (parent)\n        {\n            if (!parent-&gt;mark)\n                parent-&gt;mark = true;\n            else\n            {\n                cut(node, parent);\n                cascadingCut(parent);\n            }\n        }\n    }\n\npublic:\n    // Constructor for the Fibonacci heap\n    FibonacciHeap() : min_node(nullptr), node_count(0) {}\n\n    // Insert a new node into the heap\n    void insert(ValueType value, int key) override\n    {\n        Node *new_node = new Node(value, key);\n        root_list.push_back(new_node); // lazy insertion\n        if (!min_node || key &lt; min_node-&gt;key)\n            min_node = new_node;\n        value_to_node[value] = new_node;\n        ++node_count;\n    }\n\n    // Extract the minimum node from the heap\n    pair&lt;ValueType, int&gt; extractMin() override\n    {\n        if (!min_node)\n            throw \"Heap is empty\";\n\n        Node *old_min_node = min_node;\n        pair&lt;ValueType, int&gt; result = {old_min_node-&gt;value, old_min_node-&gt;key};\n\n        // add children of the minimun node to root list\n        for (auto child : old_min_node-&gt;children)\n        {\n            child-&gt;parent = nullptr;\n            root_list.push_back(child);\n        }\n\n        // remove the min node\n        root_list.remove(old_min_node);\n        value_to_node.erase(old_min_node-&gt;value);\n        delete old_min_node;\n\n        if (root_list.empty())\n            min_node = nullptr;\n        else\n        {\n            min_node = *root_list.begin();\n            consolidate();\n        }\n\n        --node_count;\n        return result;\n    }\n\n    // Decrease the key of a node\n    void decreaseKey(ValueType value, int new_key) override\n    {\n        if (value_to_node.find(value) == value_to_node.end())\n            throw \"Value not found in heap\";\n\n        Node *node = value_to_node[value];\n        if (new_key &gt; node-&gt;key)\n            throw \"New key is greater than current key\";\n\n        node-&gt;key = new_key;\n        Node *parent = node-&gt;parent;\n\n        if (parent &amp;&amp; node-&gt;key &lt; parent-&gt;key)\n        {\n            cut(node, parent);\n            cascadingCut(parent);\n        }\n\n        if (node-&gt;key &lt; min_node-&gt;key)\n            min_node = node;\n    }\n\n    // Check if the heap is empty\n    bool isEmpty() override\n    {\n        return root_list.empty();\n    }\n};\n\n#endif // FIBONACCI_HEAP_H\n</code></pre>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#511-data-structure","title":"5.1.1 Data Structure","text":"<ul> <li><code>root_list</code> \u6240\u6709\u6811\u7684\u6839\u8282\u70b9\u5217\u8868</li> <li><code>min_node*</code> \u7ef4\u62a4\u4e00\u4e2a\u6307\u5411\u6700\u5c0f key \u8282\u70b9\u7684\u6307\u9488</li> <li>\u6bcf\u4e00\u68f5\u6811\u7528 <code>list</code> \u5b58\u5b69\u5b50\uff0c\u6bcf\u4e2a\u8282\u70b9\u5b58\u7236\u8282\u70b9\u6307\u9488\uff0c\u65b9\u4fbf\u5feb\u6377\u8bbf\u95ee</li> </ul> <p>Data Structure</p> <p> </p>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#512-getmin","title":"5.1.2 GetMin","text":"<p>\u7ef4\u62a4\u6307\u9488 <code>Node* min_node</code>\uff0c\u6240\u4ee5 \\(O(1)\\)</p>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#513-insert","title":"5.1.3 Insert","text":"<ul> <li>\u76f4\u63a5\u6dfb\u52a0\u5230 <code>root_list</code> \u4f5c\u4e3a\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6240\u4ee5 \\(O(1)\\)</li> <li>\u5747\u644a\u5206\u6790\uff0c\u6bcf\u6b21\u4f1a\u5728 <code>ExtractMin</code> \u7684\u65f6\u5019\u8fdb\u884c\u6811\u7684\u5408\u5e76\u64cd\u4f5c\uff0c\\(O(N)\\)\uff0c\u5176\u4e2d \\(N\\) \u662f\u63d2\u5165\u8282\u70b9\u7684\u6570\u91cf\uff0c\u6240\u4ee5\u5355\u6b21\u63d2\u5165\u7684\u5747\u644a\u65f6\u95f4\u4e3a \\(T_{amortized}=O(1)\\)</li> </ul>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#514-decreasekey","title":"5.1.4 DecreaseKey","text":"<ol> <li>\u6839\u636e <code>unordered_map</code> \u8bbf\u95ee\u4f4d\u7f6e\uff0c\\(O(1)\\)</li> <li>\u8fdb\u884c <code>cut</code> \u548c <code>cascadingCut</code> \u64cd\u4f5c\uff0c\u53ef\u80fd\u6709\u9012\u5f52 \\(O(d)\\)\uff0c\u671f\u4e2d \\(d\\) \u662f\u8282\u70b9\u7684\u6df1\u5ea6</li> </ol>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#515-extractmin","title":"5.1.5 ExtractMin","text":"<ol> <li>\u627e\u5230 <code>min_node</code>\uff0c\\(O(1)\\)</li> <li>\u8fdb\u884c <code>attach</code>\uff0c\u4fdd\u8bc1\u6ca1\u6709\u4e24\u68f5\u6811\u7684 degree \u76f8\u7b49\uff0c\u548c Binomial Queue \u7684\u4e8c\u8fdb\u5236\u8fdb\u4f4d\u64cd\u4f5c\u7c7b\u4f3c\uff0c\\(O(T)\\)\uff0c\u5176\u4e2d \\(T\\) \u662f\u6811\u7684\u6570\u91cf</li> </ol>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#6-questions","title":"6 Questions","text":"","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#61-q5","title":"6.1 Q5","text":"","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#611-deletemin-\u65f6\u95f4\u590d\u6742\u5ea6","title":"6.1.1 DeleteMin \u65f6\u95f4\u590d\u6742\u5ea6","text":"<p>For a binomial queue, delete-min takes a constant time on average. (T/F)</p> Answer <p>F \u662f \\(\\Theta(\\log n)\\)</p>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#612-children-order","title":"6.1.2 Children order","text":"<p>To implement a binomial queue, the subtrees of a binomial tree are linked in increasing sizes. (T/F)</p> Answer <p>\u4e3a\u4e86\u4f7f\u5f97\u5408\u5e76\u65f6\u80fd\u5feb\u901f\u627e\u5230\u6839\u8282\u70b9\u8f83\u5927\u7684\u4e00\u68f5\u6811\u7684\u63d2\u5165\u4f4d\u7f6e\uff0c\u5e94\u8be5\u4ece\u5927\u5230\u5c0f\u4fdd\u5b58\u5b69\u5b50\u94fe\u8868\uff0c\u4f7f\u7528\u5934\u63d2\u6cd5\u907f\u514d\u904d\u5386\u94fe\u8868</p>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#62-ex5","title":"6.2 Ex5","text":"","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2005%20Binomial%20Queue.html#621-node-count-at-oddeven-depth","title":"6.2.1 Node count at odd/even depth","text":"<p>In a binomial queue, the total number of the nodes at even depth is always ___ than that of the nodes at odd depth (the root is defined to be at the depth 0).</p> Answer <p>\\(\\geq\\) \u6ce8\u610f\u6839\u8282\u70b9\u6df1\u5ea6\u662f 0\uff0c\u6240\u4ee5 even \u7684\u66f4\u5927</p> <ol> <li> <p>Example taken from Skew binomial heap - Wikipedia \u21a9</p> </li> </ol>","tags":["Data-Structure/Priority-Queue/Binomial-Queue","Data-Structure/Priority-Queue/Fibonacci-Heap"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html","title":"06 Backtracking","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#1-intro","title":"1 Intro","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#11-elements-of-an-algorithm","title":"1.1 Elements of an Algorithm","text":"<ul> <li>Computational Problem: P/NP</li> <li>Feasibility</li> <li>Solution Space<ul> <li>Convex Optimization/Linear Programming: Continuous space</li> <li>Combinatorial Optimization: Discrete &amp; finite space</li> <li>Integer Programming: Discrete &amp; infinite space</li> </ul> </li> <li>Optimality: tradeoff between optimality vs. complexity</li> </ul> <p>Backtracking \u662f\u4e00\u79cd\u679a\u4e3e\u6cd5\uff0c\u53ef\u5e26\u526a\u679d\u5730\u904d\u5386\u89e3\u7a7a\u95f4</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#12-main-takeaways","title":"1.2 Main Takeaways","text":"<ul> <li>Problems<ul> <li>8-Queens</li> <li>Turnpike Reconstruction Problem</li> <li>Tic-Tac-Toe</li> </ul> </li> <li>Definitions<ul> <li>Game Tree</li> <li>Value</li> <li>Position</li> </ul> </li> <li>Algorithm<ul> <li>Minimax Strategy</li> <li>Alpha-Beta Pruning</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#13-rationale-of-the-backtracking-algorithms","title":"1.3 Rationale of the Backtracking Algorithms","text":"<ul> <li>\u679a\u4e3e\u6cd5</li> <li>\u526a\u679d\uff1a\u5982\u679c\u90e8\u5206\u89e3\u4ecd\u7136\u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48\u7ee7\u7eed\u5c1d\u8bd5\u6dfb\u52a0\u65b0\u7684\u5355\u5143\u89e3\uff0c\u6761\u4ef6\u4e0d\u88ab\u6ee1\u8db3\u65f6 backtrack\uff0c\u76f4\u5230\u83b7\u5f97\u6ee1\u8db3\u6761\u4ef6\u7684\u5b8c\u6574\u89e3</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#2-eight-queens","title":"2 Eight Queens","text":"<p>Backtracking eliminates infeasible solutions.</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#21-constrains","title":"2.1 Constrains","text":"\\[ \\begin{align} \\text{Find}\\quad S&amp;=(x_{1},x_{2},\\dots,x_{n})\\\\ s.t.\\quad  S_{i}&amp;=\\{1,2,3,4,5,6,7,8\\} \\quad \\text{for} \\,1\\leq i\\leq{8}\\\\ x_{i}&amp;\\neq x_{j}\\quad \\text{if}\\,i\\neq j \\\\ \\frac{x_{i}-x_{j}}{i-j}&amp;\\neq \\pm 1 \\end{align} \\] <p>\u5bf9\u4e8e \\(n\\)-Queens \u95ee\u9898\uff0c\u89e3\u7a7a\u95f4\u5927\u5c0f\u4e3a \\(O(n!)\\)</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#22-solution","title":"2.2 Solution","text":"<p>Step 1: Construct a game tree Step 2: DFS to examine all the paths</p> <p></p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#3-the-turnpike-reconstruction-problem","title":"3 The Turnpike Reconstruction Problem","text":"<p>\u82e5 \\(x\\) \u8f74\u4e0a\u5b58\u5728 \\(N\\) \u4e2a\u70b9\uff0c\u5750\u6807\u5206\u522b\u4e3a \\(x_1&lt;x_2&lt;\\dots&lt;x_{N}\\)\uff0c\u5047\u8bbe\u4ee5 \\(x_1=0\\) \u4e3a\u539f\u70b9\uff0c\u4e00\u5171\u6709 \\(\\frac{N(N-1)}{2}\\) \u4e2a\u8ddd\u79bb\uff0c\u73b0\u5728\u7684\u95ee\u9898\u662f\uff0c\u6839\u636e\u8fd9\u4e9b\u8ddd\u79bb\u91cd\u5efa\u6240\u6709\u70b9\u7684\u5750\u6807\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#31-solution","title":"3.1 Solution","text":"<p>Step 1: \u6839\u636e\u8ddd\u79bb\u7684\u6570\u91cf\u5f97\u51fa \\(N\\) \u7684\u503c Step 2: \u627e\u5230\u4e24\u4e2a\u7aef\u70b9 \\(x_0, x_N\\) Step 3: \u4ece\u5927\u5230\u5c0f check \u8ddd\u79bb\uff0c\u6700\u7ec8\u627e\u5230\u6b63\u786e\u7684\u89e3</p> <p></p> <p>\u4e3a\u4ec0\u4e48\u4ece\u5927\u5230\u5c0f check \u8ddd\u79bb\uff1f</p> <p>\u5728\u5df2\u7ecf\u786e\u5b9a\u7684\u70b9\u96c6 \\(S_m\\) \u7684\u57fa\u7840\u4e0a\uff0c\u60f3\u8981\u65b0\u589e\u4e00\u4e2a\u70b9 \\(x_{m+1}\\)\uff0c\u90a3\u4e48\u65b0\u4ea7\u751f\u7684\u6700\u5927\u7684\u8ddd\u79bb\u4e00\u5b9a\u662f \\(|x_{m+1}-x_{0}|\\) \u6216 \\(|x_{m+1}-x_{N}|\\)</p> Reconstuct<pre><code>bool Reconstruct ( DistType X[ ], DistSet D, int N, int left, int right )\n{ /* X[1]...X[left-1] and X[right+1]...X[N] are solved */\n\u00a0\u00a0\u00a0 bool Found = false;\n\u00a0\u00a0\u00a0 if ( Is_Empty( D ) )\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return true; /* solved */\n\u00a0\u00a0\u00a0 D_max = Find_Max( D );\n\u00a0\u00a0\u00a0 \n\u00a0\u00a0\u00a0 /* option 1\uff1aX[right] = D_max */\n\u00a0\u00a0\u00a0 /* check if |D_max-X[i]|\u00ceD is true for all X[i]\u2019s that have been solved */\n\u00a0\u00a0\u00a0 OK = Check( D_max, N, left, right ); /* pruning */\n\u00a0\u00a0\u00a0 if ( OK ) { /* add X[right] and update D */\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 X[right] = D_max;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for ( i=1; i&lt;left; i++ )\u00a0 Delete( |X[right]-X[i]|, D);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for ( i=right+1; i&lt;=N; i++ )\u00a0 Delete( |X[right]-X[i]|, D);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Found = Reconstruct ( X, D, N, left, right-1 );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if ( !Found ) { /* if does not work, undo */\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for ( i=1; i&lt;left; i++ )\u00a0 Insert( |X[right]-X[i]|, D);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for ( i=right+1; i&lt;=N; i++ )\u00a0 Insert( |X[right]-X[i]|, D);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 /* finish checking option 1 */\n\u00a0\u00a0\u00a0 \n\u00a0\u00a0\u00a0 if ( !Found ) { /* if option 1 does not work */\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 /* option 2: X[left] = X[N]-D_max */\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 OK = Check( X[N]-D_max, N, left, right );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if ( OK ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 X[left] = X[N] \u2013 D_max;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for ( i=1; i&lt;left; i++ )\u00a0 Delete( |X[left]-X[i]|, D);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for ( i=right+1; i&lt;=N; i++ )\u00a0 Delete( |X[left]-X[i]|, D);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Found = Reconstruct (X, D, N, left+1, right );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if ( !Found ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for ( i=1; i&lt;left; i++ ) Insert( |X[left]-X[i]|, D);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for ( i=right+1; i&lt;=N; i++ ) Insert( |X[left]-X[i]|, D);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 /* finish checking option 2 */\n\u00a0\u00a0\u00a0 } /* finish checking all the options */\n\u00a0\u00a0\u00a0 return Found;\n}\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#32-a-template-for-backtracking","title":"3.2 A Template for Backtracking","text":"A Template for Backtracking<pre><code>bool Backtracking ( int i )\n{\u00a0\u00a0 Found = false;\n\u00a0\u00a0\u00a0 if ( i &gt; N )\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return true; /* solved with (x1, \u2026, xN) */\n\u00a0\u00a0\u00a0 for ( each xi in Si ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 /* check if satisfies the restriction R */\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 OK = Check((x1, ..., xi) , R ); /* pruning */\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if ( OK ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Count xi in;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Found = Backtracking( i+1 );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if ( !Found )\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Undo( i ); /* recover to (x1, \u2026, xi-1) */\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if ( Found ) break;\n\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 return Found;\n}\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#33-conclusion","title":"3.3 Conclusion","text":"<p>Catch</p> <p>\u5173\u952e\u5728\u4e8e\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u5e76 check \u8ddd\u79bb\uff0c\u8fd9\u80fd\u591f\u6700\u5927\u5316\u526a\u679d\u6548\u7387 </p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#4-tic-tac-toe","title":"4 Tic-tac-toe","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#41-minimax-strategy","title":"4.1 Minimax Strategy","text":"<ul> <li>Evalution function: \\(f(p)=W_{Computer}-W_{Human}\\), where \\(W\\) is the potential wins at position \\(P\\)</li> <li>The human is trying to minimize \\(f(p)\\), while the computer is trying to maximize it</li> </ul> <p>ply, re-ply</p> <ul> <li>ply \u6307\u7684\u662f\u73a9\u5bb6\u7684\u4e00\u6b65\u64cd\u4f5c</li> <li>re-ply \u6307\u7684\u662f\u5bf9\u624b\u7684\u56de\u5e94\u64cd\u4f5c</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#42-alpha-beta-pruning","title":"4.2 \\(\\alpha-\\beta\\) Pruning","text":"<p>In practice, it limits the searching to only \\(O(\\sqrt{ N })\\) nodes, where \\(N\\) is the size of full game tree.</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#421-discussion-best-case-complexity-for-alpha-beta-pruning","title":"4.2.1 Discussion: best-case complexity for \\(\\alpha-\\beta\\) pruning","text":"<p>\u8bd5\u56fe\u8bc1\u660e\uff1a</p> <p>\u82e5\u5206\u53c9\u6570 \\(b\\) \u7684 Minimax \u535a\u5f08\u6811\u7684\u6df1\u5ea6\u4e3a \\(d\\)\uff0c\u4e14\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u6df1\u5ea6 \\(d\\) \u5c42\uff0c\u5219 best case \u4e0b\u4f7f\u7528 \\(\\alpha -\\beta\\) pruning \u540e\u7684\u6700\u4f18\u590d\u6742\u5ea6\u4e3a\uff1a\\(\\(O\\left( b^\\frac{d}{2} \\right)\\)\\)</p> <p>\u8bb0 \\(c_i\\) \u8868\u793a\u6df1\u5ea6\u4e3a \\(i\\) \u65f6\u7684\u6700\u4f18\u590d\u6742\u5ea6\uff0c\u5219\u5bf9\u4e8e \\(d=i\\) \u7684\u6811\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a\u5b50\u6811\u8fdb\u884c\u4e86\u5b50\u95ee\u9898\u7684\u641c\u7d22 \\(c_{i-1}\\)\uff0c\u5176\u4ed6 \\(b-1\\) \u4e2a\u5b50\u6811\u81f3\u5c11\u6709\u4e00\u4e2a\u5b69\u5b50\u8fdb\u884c\u4e86\u5b50\u95ee\u9898\u7684\u641c\u7d22 \\((b-1)c_{i-2}\\)\uff0c\u56e0\u6b64\uff1a</p> \\[c_{i}=c_{i-1}+(b-1)c_{i-2}\\] <p>\u6c42\u89e3\u7279\u5f81\u65b9\u7a0b \\(x^2-x-(b-1)=0\\) \u5f97\u5230 \\(x=\\frac{1\\pm \\sqrt{ 4b-3 }}{2}\\)\uff0c\u90a3\u4e48</p> \\[c_{d}=C_{1}x_{1}^d+C_{2}x_{2}^d = O\\left( \\left( \\frac{1+\\sqrt{ 4b-3 }}{2} \\right)^d \\right)=O(b^{d/2})\\] <p>\u8bc1\u6bd5\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#5-questions","title":"5 Questions","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#51-q6","title":"5.1 Q6","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#511-exhaustive-search-in-finite-time","title":"5.1.1 Exhaustive search in finite time?","text":"<p>It is guaranteed that an exhaustive search can always find the solution in finite time. (T/F)</p> Answer <p>F \u5982\u679c\u641c\u7d22\u7a7a\u95f4\u662f\u65e0\u9650\u7684\uff0c\u5c31\u65e0\u6cd5\u901a\u8fc7\u904d\u5386\u7684\u65b9\u5f0f\u5f97\u51fa</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#52-ex6","title":"5.2 Ex6","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#53-hw6","title":"5.3 HW6","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2006%20Backtracking.html#531-detecting-werewolves-fold","title":"5.3.1 Detecting Werewolves %% fold %%","text":"Werewolf <p>Werewolf\uff08\u72fc\u4eba\u6740\uff09 is a game in which the players are partitioned into two parties: the werewolves and the human beings. Suppose that in a game,</p> <ul> <li>player #1 said: \"Player #2 is a werewolf.\";</li> <li>player #2 said: \"Player #3 is a human.\";</li> <li>player #3 said: \"Player #4 is a werewolf.\";</li> <li>player #4 said: \"Player #5 is a human.\"; and</li> <li>player #5 said: \"Player #4 is a human.\".</li> </ul> <p>Given that there were 2 werewolves among them, at least one but not all the werewolves were lying, and there were exactly 2 liers. Can you point out the werewolves?</p> <p>Now you are asked to solve a harder vertion of this problem: given that there were N players, with M werewolves among them, at least one but not all the werewolves were lying, and there were exactly L liers. You are supposed to point out the werewolves.</p> <p>Input Specification:</p> <p>Each input file contains one test case. For each case, the first line gives three positive integer N (5 \u2264 N \u2264 100), M and L (2 \u2264 M &lt; N, 1 \u2264 L &lt; N). Then N lines follow and the i-th line gives the statement of the i-th player (1 \u2264 i \u2264 N), which is represented by the index of the player with a positive sign for a human and a negative sign for a werewolf.</p> <p>Output Specification:</p> <p>If a solution exists, print in a line in descending order the indices of the M werewolves. The numbers must be separated by exactly one space with no extra spaces at the beginning or the end of the line. If there are more than one solution, you must output the largest solution sequence -- that is, for two sequences A = { a[1], ..., a[M] } and B = { b[1], ..., b[M] }, if there exists 0 \u2264 k &lt; M such that a[i] = b[i] (i \u2264 k) and a[k+1]&gt;b[k+1], then A is said to be larger than B. In case there is no solution, simply print <code>No Solution</code>.</p> <p>Sample Input 1:</p> <pre><code>5 2 2\n-2\n+3\n-4\n+5\n+4\n</code></pre> <p>Sample Output 1:</p> <pre><code>4 1\n</code></pre> <p>Sample Input 2:</p> <pre><code>6 2 3\n-2\n+3\n-4\n+5\n+4\n-3\n</code></pre> <p>Sample Output 2:</p> <pre><code>6 4\n</code></pre> <p>Sample Input 3:</p> <pre><code>6 2 5\n-2\n+3\n-4\n+5\n+4\n+6\n</code></pre> <p>Sample Output 3:</p> <pre><code>No Solution\n</code></pre> <p>Hint</p> <ul> <li>\u4f7f\u7528\u5408\u7406\u7684 struct \u6765\u65b9\u4fbf\u72b6\u6001\u4f20\u9012</li> <li>\u9700\u8981\u9ad8\u4eae\u90e8\u5206\u7684 pruning \u6761\u4ef6\uff0c\u624d\u80fd\u907f\u514d\u8d85\u65f6</li> </ul> <p>Note</p> <p>\u975e\u5e38\u6709\u610f\u601d\u7684\u95ee\u9898</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html","title":"07 Divide and Conquer","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#1-intro","title":"1 Intro","text":"<ul> <li>The maximum subsequence sum<ul> <li>\\(T(N)=2T(N/2)+O(N)\\)</li> <li>\\(T(N)=O(N\\log N)\\)</li> </ul> </li> <li>Tree traversals<ul> <li>\\(T(N)=2T(N/2)\\)</li> <li>\\(T(N)=O(N)\\)</li> </ul> </li> <li>Mergesort and quicksort<ul> <li>\\(T(N)=2T(N/2)+O(N)\\)</li> <li>\\(T(N)=O(N\\log N)\\)</li> </ul> </li> </ul> <p>\u51fa\u53d1\u70b9\uff1a\u9012\u63a8\u516c\u5f0f</p> \\[T(N)=aT(\\frac{N}{b})+f(N)\\]"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#11-example-closest-points-problem","title":"1.1 Example: Closest Points Problem","text":"<p>Question</p> <p>\u4e00\u4e2a\u5e73\u9762\u4e0a\u6709 \\(N\\) \u4e2a\u70b9\uff0c\u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684\u4e00\u5bf9\u70b9</p> <ul> <li>Divide<ul> <li>\u627e\u5230\u4e00\u6761\u76f4\u7ebf\uff0c\u5e73\u5206\u6240\u6709\u70b9 re</li> <li>\u53d8\u6210\u4e24\u4e2a\u5b50\u95ee\u9898</li> </ul> </li> <li>Conquer<ul> <li>\u82e5\u5b50\u95ee\u9898\u4e2d\u627e\u5230\u7684\u6700\u5c0f\u8ddd\u79bb\u4e3a \\(\\delta\\)\uff0c\u5728\u5206\u5272\u76f4\u7ebf\u5de6\u53f3\u4e24\u4fa7 \\(\\pm \\delta\\) \u8303\u56f4\u5185\u67e5\u627e\u662f\u5426\u6709\u66f4\u5c0f\u7684\u8ddd\u79bb</li> <li>problem: \u5982\u4f55\u51cf\u5c0f\u5408\u5e76\u7684\u590d\u6742\u5ea6\uff1f</li> </ul> </li> </ul> <p>Solution</p> <p>\u6309\u7167\u4e00\u4e2a\u65b9\u5411\u5750\u6807\u5927\u5c0f\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u987a\u5e8f\u904d\u5386\uff0c\u5982\u679c\u76f8\u90bb\u7684\u4e24\u4e2a\u8282\u70b9\u5728\u8fd9\u4e2a\u65b9\u5411\u4e0a\u8ddd\u79bb\u5c0f\u4e8e \\(\\delta\\)\uff0c\u624d\u8003\u8651\u5b83\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5e76\u66f4\u65b0\u70b9\u5bf9\u548c \\(\\delta\\) \u8fd9\u6837\u5c31\u662f \\(O(N)\\)</p> <p>\\(T(N)=2T(N/2)+O(N)=O(N\\log N)\\)</p> <p>\u4f18\u5316\u524d\u540e\u65f6\u95f4\u590d\u6742\u5ea6\u63a8\u5bfc\u548c\u5bf9\u6bd4</p> <p></p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#2-solving-recurrences","title":"2 Solving Recurrences","text":"<ul> <li>Three methods for solving recurrences<ul> <li>Substitution method \u4ee3\u6362\u6cd5</li> <li>Recursion-tree method \u9012\u5f52\u6811\u6cd5</li> <li>Master method \u4e3b\u65b9\u6cd5</li> </ul> </li> <li>Details to be ignored<ul> <li>if \\(N/b\\) is int or not</li> <li>always assume \\(T(n)=\\Theta(1)\\) for small \\(n\\)</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#21-substitution-method","title":"2.1 Substitution Method","text":"<p>\u8fdb\u884c\u731c\u6d4b\uff0c\u7136\u540e\u4f7f\u7528\u5f52\u7eb3\u6cd5\u8bc1\u660e\uff0c\u65b9\u4fbf\u7528\u4e8e\u9a8c\u8bc1</p> <p>Example</p> \\[T(N)=2T\\left( \\left\\lfloor  \\frac{N}{2}  \\right\\rfloor  \\right)+N\\] <p>\u5047\u8bbe\u5bf9\u4e8e\u6240\u6709 \\(m&lt;N\\) \u90fd\u6210\u7acb\uff0c\u90a3\u4e48\u5f53 \\(m=\\lfloor N/2 \\rfloor\\) \u65f6\u4e5f\u6210\u7acb\uff0c\u5373\u5b58\u5728\u5e38\u6570 \\(c\\geq 1\\) \u4f7f\u5f97\uff1a</p> \\[T(\\lfloor N/2 \\rfloor)\\leq c \\lfloor N/2 \\rfloor \\log \\lfloor N/2 \\rfloor\\] <p>\u90a3\u4e48\uff1a</p> \\[ \\begin{align} T(N)&amp;=2T(\\lfloor N/2 \\rfloor )+N \\\\ &amp;\\leq 2c\\lfloor N/2 \\rfloor +N \\\\ &amp;\\leq cN(\\log N-\\log 2)+N \\\\ &amp;\\leq cN\\log N \\end{align} \\] <p>\u7531\u6b64\u5b8c\u6210\u5f52\u7eb3\uff0c\u8bc1\u6bd5\u3002</p> <p>Attention</p> <p>\u53ef\u4ee5\u9009\u62e9\u8db3\u591f\u5927\u7684\u5e38\u6570 \\(c\\)\uff0c\u4f7f\u5f97\u5047\u8bbe\u5bf9\u4e8e \\(N=1\\) \u7b49\u8f83\u5c0f\u7684 case \u4e5f\u4e00\u5b9a\u6210\u7acb</p> <p>Exact form</p> <p> \u653e\u7f29\u7684\u65f6\u5019\u5fc5\u987b\u786e\u4fdd\u5e38\u6570\u4e0d\u4f1a\u53d8\u5927</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#22-recursion-tree-method","title":"2.2 Recursion-tree Method","text":"<p>Example</p> \\[T(N)=3T(N/4)+\\Theta(N^2)\\] <p></p> <p>\u4e0d\u4e00\u5b9a\u9002\u7528\u4e8e\u6240\u6709\u60c5\u51b5\uff01</p> <p> \u8fd9\u91cc\u5c55\u5f00\u4e4b\u540e\u662f\u659c\u6811\uff0c\u53ef\u4ee5\u8ba1\u7b97\u4f46\u6bd4\u8f83\u9ebb\u70e6</p> <p>\u6bd4\u8f83\u65b0\u9896\u7684\u4e00\u9053\u9898</p> <p></p> <ul> <li>\u6838\u5fc3\u601d\u8def\u662f\u4e00\u6837\u7684\uff0c\u627e\u51fa\u53f6\u5b50\u7684\u6570\u91cf\u548c\u5206\u53c9\u7684\u6570\u91cf\uff0c\u8ba1\u7b97\u548c\u6bd4\u8f83\u5f00\u9500</li> <li>\u8fd9\u91cc\u4e0d\u662f\u6bcf\u5c42\u5f00\u9500\u4e0d\u662f\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\uff0c\u800c\u662f\u672c\u5c42\u7684\u8282\u70b9\u6570\u91cf\uff0c\u6240\u4ee5\u7b54\u6848\u5e94\u8be5\u662f \\(O(M \\cdot 8^{\\log_{2}n/\\sqrt{ M }}+\\frac{8^{\\log_{2}n/\\sqrt{ M }}-1}{8-1})=O(M \\cdot 8^{\\log_{2}n/\\sqrt{ M }})=O(n^3/\\sqrt{ M })\\)</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#23-master-method","title":"2.3 Master method","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#231-form-1","title":"2.3.1 form 1","text":"<p>\u5bf9\u4e8e\u9012\u63a8\u5f0f \\(T(N)=aT(N/b)+f(N)\\)\uff0c\u6709\uff1a</p> <ol> <li>\u5982\u679c \\(f(N)=O(N^{\\log_{b}a-\\epsilon}\\))\uff0c\u5373 \\(f(N)\\) \u7684\u9636\u4f4e\u4e8e \\(\\log_{b}a\\)\uff0c\u90a3\u4e48 divide \u662f\u4e3b\u8981\u5f00\u9500\uff0c\\(T(N)=\\Theta(N^{\\log_{b}a})\\)</li> <li>\u5982\u679c \\(f(N)=\\Theta(N^{\\log_{b}a})\\)\uff0c\u5373\u4e8c\u8005\u5f00\u9500\u540c\u9636\uff0c\\(T(N)=\\Theta(N^{\\log_{b}a}\\log N)\\)</li> <li>\u5982\u679c \\(f(N)=\\Omega(N^{\\log_{b}a+\\epsilon})\\)\uff0c\u5373 \\(f(N)\\) \u7684\u9636\u9ad8\u4e8e \\(log_b a\\)\uff0c\u4e14 \\(af(N/b)&lt;cf(N)\\) (regularity condition)\uff0c\u90a3\u4e48 conquer \u662f\u4e3b\u8981\u5f00\u9500\uff0c\\(T(N)=\\Theta(F(N))\\)</li> </ol> <p>Attention</p> <p>\u65e0\u6cd5\u8986\u76d6\u6240\u6709\u6761\u4ef6\uff0c\u4f8b\u5982 \\(T(N)=2T(N/2)+N\\log N\\) \u4e0d\u6ee1\u8db3\u4efb\u4f55\u4e00\u79cd\u6761\u4ef6\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528 2.3.4 form 3 \u6765\u89e3\u51b3</p> Regularity Condition \u7684\u4f5c\u7528 <p></p> Polynomially smaller <p>Polynomially smaller \u662f\u6307\u4e00\u4e2a\u51fd\u6570\u4e0e\u53e6\u4e00\u4e2a\u51fd\u6570\u76f8\u6bd4\uff0c\u5728\u589e\u957f\u901f\u7387\u4e0a\u76f8\u5dee\u4e00\u4e2a\u591a\u9879\u5f0f\u7ea7\u522b\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u51fd\u6570 \\( f(n) \\) \u548c \\( g(n) \\)\uff0c\u6211\u4eec\u8bf4 \\( f(n) \\) polynomially smaller\uff08\u591a\u9879\u5f0f\u7ea7\u522b\u5c0f\uff09\u4e8e \\( g(n) \\)\uff0c\u610f\u5473\u7740\u5b58\u5728\u67d0\u4e2a\u591a\u9879\u5f0f\u51fd\u6570 \\( n^k \\)\uff0c\u4f7f\u5f97</p> \\[f(n) = O(\\frac{g(n)}{n^{k}})\\] <p>\u6362\u53e5\u8bdd\u8bf4\uff0c\\( f(n) \\) \u7684\u589e\u957f\u901f\u7387\u6bd4 \\( g(n) \\) \u6162\uff0c\u5e76\u4e14\u76f8\u5dee\u4e00\u4e2a\u591a\u9879\u5f0f\u56e0\u5b50 \\( n^k \\)\uff0c\u5176\u4e2d \\( k \\) \u662f\u4e00\u4e2a\u5e38\u6570\u3002</p> <p>\u4e3e\u4f8b</p> <ol> <li> <p>\\( f(n) = n \\) \u548c \\( g(n) = n^2 \\)\uff1a \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\\( f(n) \\) \u662f \\( g(n) \\) \u7684\u591a\u9879\u5f0f\u7ea7\u522b\u5c0f\uff0c\u56e0\u4e3a \\( n = O\\left(\\frac{n^2}{n}\\right) \\)\uff0c\u8fd9\u91cc \\( k = 1 \\)\uff0c\u6240\u4ee5 \\( n \\) \u662f \\( n^2 \\) \u7684\u591a\u9879\u5f0f\u7ea7\u522b\u5c0f\u3002</p> </li> <li> <p>\\( f(n) = n \\) \u548c \\( g(n) = n^3 \\)\uff1a \u8fd9\u91cc \\( f(n) \\) \u4e5f\u662f \\( g(n) \\) \u7684\u591a\u9879\u5f0f\u7ea7\u522b\u5c0f\uff0c\u56e0\u4e3a \\( n = O\\left(\\frac{n^3}{n^2}\\right) \\)\uff0c\u8fd9\u91cc \\( k = 2 \\)\uff0c\u6240\u4ee5 \\( n \\) \u662f \\( n^3 \\) \u7684\u591a\u9879\u5f0f\u7ea7\u522b\u5c0f\u3002</p> </li> </ol> <p>\u4e3a\u4ec0\u4e48\u591a\u9879\u5f0f\u7ea7\u522b\u5c0f\u5f88\u91cd\u8981\uff1f</p> <p>\u5728\u7b97\u6cd5\u5206\u6790\u4e2d\uff0c\u7279\u522b\u662f\u9012\u5f52\u5206\u6790\u6216\u5206\u6cbb\u7b97\u6cd5\u7684\u5206\u6790\u4e2d\uff0c\u591a\u9879\u5f0f\u7ea7\u522b\u5c0f\u7684\u6982\u5ff5\u7ecf\u5e38\u7528\u6765\u6bd4\u8f83\u9012\u5f52\u5173\u7cfb\u4e2d\u4e0d\u540c\u90e8\u5206\u7684\u589e\u957f\u901f\u7387\u3002\u6bd4\u5982\uff1a</p> <ul> <li>\u5728 Master Theorem \u4e2d\uff0c\u5f53\u4f60\u5206\u6790\u9012\u5f52\u5173\u7cfb\u65f6\uff0c\u4f1a\u6bd4\u8f83\u5b50\u95ee\u9898\u7684\u6570\u91cf\uff08\u5373\u9012\u5f52\u90e8\u5206\uff09\u4e0e\u989d\u5916\u7684\u5de5\u4f5c\u91cf\uff08\u5373\u5408\u5e76\u90e8\u5206\uff09\u3002\u5982\u679c\u5408\u5e76\u90e8\u5206\uff08\u6bd4\u5982 \\( f(n) \\)\uff09\u5728\u67d0\u4e00\u5c42\u6bd4\u9012\u5f52\u90e8\u5206\uff08\u6bd4\u5982 \\( aT(n/b) \\)\uff09\u8981\u5c0f\u5f97\u591a\uff0c\u90a3\u4e48\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u4e2a\u5408\u5e76\u90e8\u5206\u662f \u591a\u9879\u5f0f\u7ea7\u522b\u5c0f\uff0c\u9012\u5f52\u90e8\u5206\u5360\u4e3b\u5bfc\u5730\u4f4d\u3002</li> <li>\u53cd\u4e4b\uff0c\u5982\u679c \\( f(n) \\) \u589e\u957f\u5f97\u4e0e\u9012\u5f52\u90e8\u5206\u5dee\u4e0d\u591a\u6216\u8005\u66f4\u5feb\uff0c\u90a3\u4e48\u5408\u5e76\u90e8\u5206\u4f1a\u6210\u4e3a\u4e3b\u8981\u5f00\u9500\uff0c\u8fd9\u65f6\u5c31\u4f1a\u6709\u4e0d\u540c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u3002</li> </ul> <p>\u603b\u7ed3</p> <p>\"Polynomially smaller\" \u5c31\u662f\u6307\u5728\u589e\u957f\u901f\u5ea6\u4e0a\uff0c\u4e24\u4e2a\u51fd\u6570\u76f8\u5dee\u4e00\u4e2a\u591a\u9879\u5f0f\u7684\u7ea7\u522b\u3002\u8fd9\u4e2a\u6982\u5ff5\u5728\u5206\u6790\u7b97\u6cd5\u548c\u9012\u5f52\u5173\u7cfb\u65f6\u7ecf\u5e38\u51fa\u73b0\uff0c\u5e2e\u52a9\u6211\u4eec\u5224\u65ad\u54ea\u4e9b\u90e8\u5206\u5728\u6574\u4f53\u590d\u6742\u5ea6\u4e2d\u5360\u4e3b\u5bfc\u5730\u4f4d\uff0c\u54ea\u4e9b\u90e8\u5206\u53ef\u4ee5\u5ffd\u7565\u6389\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#232-prove-by-recursion-tree","title":"2.3.2 Prove by Recursion-tree","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#233-form-2","title":"2.3.3 form 2","text":"<ol> <li>\u5982\u679c\u5b58\u5728\u5e38\u6570 \\(k&lt;1\\)\uff0c\u4f7f\u5f97 \\(af(N/b)=kf(N)\\)\uff0c\u90a3\u4e48 \\(T(N)=\\Theta(f(N))\\)</li> <li>\u5982\u679c\u5b58\u5728\u5e38\u6570 \\(K&gt;1\\)\uff0c\u4f7f\u5f97 \\(af(N/b)=Kf(N)\\)\uff0c\u90a3\u4e48 \\(T(N)=\\Theta(N^{\\log_{b}a})\\)</li> <li>\u5982\u679c \\(af(N/b)=f(N)\\)\uff0c\u90a3\u4e48 \\(T(N)=\\Theta(f(N)\\log_{b}N)\\)</li> </ol> <p>Attention</p> <p>\u8fd9\u79cd\u5f62\u5f0f\u7684\u9002\u7528\u8303\u56f4\u6ca1\u6709\u524d\u4e00\u79cd\u90a3\u4e48\u5e7f\uff0c\u4f8b\u5982\uff1a </p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#234-form-3","title":"2.3.4 form 3","text":"<p>\u5f53 \\(a\\ge 1,b\\geq 1, p\\geq 0\\) \u65f6\uff0c\u5bf9\u4e8e\u9012\u63a8\u5f0f\uff1a</p> \\[T(N)=aT(N/b)+\\Theta(N^k \\log^p N)\\] <ol> <li>if \\(a&gt;b^k\\), \\(T(N)=O(N^{\\log_{b}a})\\)</li> <li>if \\(a=b^k\\), \\(T(N)=O(N^k \\log^{p+1}N)\\)</li> <li>if \\(a&lt;b^k\\), \\(T(N)=O(N^k \\log^p N)\\)</li> </ol> <p>Important</p> <p>\u8fd9\u79cd\u5f62\u5f0f\u7684\u4f7f\u7528\u573a\u666f\u6700\u5e7f\uff0c\u4f46\u4ecd\u7136\u53ef\u4ee5\u8fdb\u884c\u4ee5\u4e0b\u63a8\u5e7f\uff0c\u4f7f \\(p\\) \u4e3a\u4efb\u610f\u5b9e\u6570\uff0c\u5219\uff1a</p> <ol> <li>if \\(a&lt;b^k\\), then<ol> <li>if \\(p&lt;0\\), \\(T(N)=\\Theta(N^k)\\)</li> <li>if \\(p\\geq 0\\), \\(T(N)=\\Theta(N^k\\log^pN)\\)</li> </ol> </li> <li>if \\(a=b^k\\), then<ol> <li>if \\(p&lt;-1\\), \\(T(N)=\\Theta(N^k)\\)</li> <li>if \\(p=-1\\), \\(T(N)=\\Theta(N^k\\log \\log N)\\)</li> <li>if \\(p&gt;-1\\), \\(T(N)=\\Theta(N^k\\log^{p+1}N)\\)</li> </ol> </li> <li>if \\(a&gt;b^k\\), \\(T(N)=\\Theta(N^{\\log_{b}a})\\)</li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#3-discussion","title":"3 Discussion","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#31-three-way-mergesort","title":"3.1 Three-way-mergesort","text":"<p>Question</p> <p>Three-way-mergesort : Suppose instead of dividing in two halves at each step of the mergesort, we divide into three one thirds, sort each part, and finally combine all of them using a three-way-merge.</p> <p>What is the overall time complexity of this algorithm for sorting n elements? Prove it.</p> <p>How about \\(k\\)-way merge?</p> <p>\\(T(n)=kT(n/k)+O(n)\\), where \\(O(n)\\) is merge time.</p> <p>By Master theorem, \\(a=k\\), \\(b=k\\), \\(f(n)=O(n)\\), making \\(\\log_{b}a=1\\), the recurrence relation falls under Case 2 of Master theorem, thus \\(T(n)=\\Theta(n^1\\log n)=\\Theta(n\\log n)\\)</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#32-solve-this-recursion-beyond-master-theorem","title":"3.2 Solve this recursion beyond master theorem","text":"<p>Question</p> <p>\\(T(n)=2T(|\\sqrt{ n }|)+\\log n\\)</p> <p>Let \\(m=\\log n\\), thus \\(T(n)=2T(\\sqrt{ n })+\\log n \\Rightarrow T(e^m)=2T(e^{m/2})+m\\); Let \\(T_{1}(m)=T(e^m)\\), thus \\(T_{1}(m)=2T_{1}(m/2)+m\\); By Master theorem, \\(T_{1}(m)=T(e^m) = O(m\\log m)\\), thus \\(T(n)=O(\\log n \\cdot \\log \\log n)\\)</p> <p>conclusion</p> <p>\u9047\u5230 \\(\\sqrt{ N }\\) \u4e4b\u7c7b\u7684\uff0c\u5c31\u8fdb\u884c\u4ee3\u6362</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#4-questions","title":"4 Questions","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#41-q7","title":"4.1 Q7","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#411-more-about-cloest-pair-of-points","title":"4.1.1 More about cloest pair of points","text":"<p>If devide-and-conquer strategy is used to find the closest pair of points in a plane, unless the points are sorted not only by their \\(x\\) coordinates but also by their \\(y\\) coordinates, it would be impossible to solve it in a time of \\(O(N\\log N)\\), where \\(N\\) is the number of points.</p> Answer <p>T why? \u96be\u9053\u4e0d\u80fd\u5148\u8fdb\u884c\u4e00\u4e2a \\(O(N\\log N)\\) \u7684\u6392\u5e8f\u5417</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#42-hw7","title":"4.2 HW7","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#421-master-theorem-form3-\u5229\u7528","title":"4.2.1 Master theorem form3 \u5229\u7528","text":"<p>When solving a problem with input size \\(N\\) by divide and conquer, if at each stage the problem is divided into 8 sub-problems of equal size \\(N/3\\), and the conquer step takes \\(O(N^2logN)\\) to form the solution from the sub-solutions, then the overall time complexity is __.</p> Answer <p>\\(O(N^2\\log N)\\) \u56e0\u4e3a \\(T(N)=8T(N/3)+O(N^2\\log N)\\)\uff0c\u5176\u4e2d \\(a=8,b=3,k=2,p=1\\) \u7531\u4e8e \\(a&lt;b^k\\)\uff0c\u6240\u4ee5 \\(T(N)=O(N^k\\log^pN)=O(N^2\\log N)\\)</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#43-ex7","title":"4.3 Ex7","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2007%20Divide%20and%20Conquer.html#431-\u4ece\u4ee3\u7801\u4f7f\u7528-master-theorem","title":"4.3.1 \u4ece\u4ee3\u7801\u4f7f\u7528 Master Theorem","text":"<p>Consider the following function, where the time complexity for function <code>calc()</code> is \\(O(1)\\).</p> <pre><code>void fun(int l, int r) {\n    if(r-l+1&lt;=1234) return;\n    int m=(l+r)/2;\n    int m1=(l+m)/2, m2=(m+1+r)/2;\n    fun(l, m);\n    fun(m1+1, m2);\n    for(int k=1;k&lt;=r-l+1;k++)\n        for(int i=1;i&lt;=r-l+1;i++)\n            for(int j=l;j&lt;=r;j+=i)\n                calc(j, i);\n    fun(m+1, r);\n    fun(m1+1, m2);\n}\n</code></pre> <p>Assume the initial input is <code>l=1, r=N</code>, What is the running time of this function? Your answer should be as tight as possible.</p> Answer <p>\\(O(N^2\\log^2N)\\)</p> <ul> <li>Divide: \u8fdb\u884c 4 \u6b21\u9012\u5f52\u8c03\u7528\uff0c\u6bcf\u6b21\u7684\u5e8f\u5217\u957f\u5ea6\u4e3a \\(N/2\\)</li> <li>Conquer:<ul> <li><code>for (int k = 1; k &lt;= r - l + 1; k++)</code> \u8fd9\u91cc\u6709 \\(N\\) \u6b21</li> <li><code>for (int i = 1; i &lt;= r - l + 1; i++) for (int j = l; j &lt;= r - l + 1; j += i)</code> \u8fd9\u91cc\u5176\u5b9e\u662f \\(N(1+1/2+1/3+\\dots+1/N)=N\\log N\\)</li> <li>\u56e0\u6b64\uff0cconquer \u7684\u603b\u82b1\u9500\u662f \\(N^2\\log N\\)</li> </ul> </li> <li>\u4f9d\u636e 2.3.4 form 3 \\(a=b^k\\) \u60c5\u51b5\uff0c\u5f97\u5230 \\(O(N^2\\log^2N)\\)</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html","title":"08 Dynamic Programming","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#1-fibonacci-numbers","title":"1 Fibonacci Numbers","text":"<p>\\(F(N)=F(N-1)+F(N-2)\\)</p> <ul> <li>trouble-maker\uff1a\u5982\u679c\u4f7f\u7528\u9012\u5f52\uff0c\u90a3\u4e48\u4e00\u5171\u8981\u904d\u5386 \\(O(F(N))\\) \u4e2a\u8282\u70b9\uff0c\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f\u6307\u6570\u7ea7\u7684</li> <li>Solution\uff1a\u5faa\u73af\u4ee3\u66ff\u9012\u5f52</li> </ul> Fibnocci Number (iter ver)<pre><code>int FIbNum(int N)\n{\n    int i, Last, NextToLast, Answer;\n    if (N &lt;= 1) return 1;\n    Last = NextToLast = 1;  // F(0)=F(1)=1\n    for (i = 2; i &lt;= N; i++) {\n        Answer = Last + NextToLast;\n        NextToLast = Last;\n        Last = Answer;\n    }\n    return Answer;\n}\n</code></pre> <p>\u8fd9\u6837\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86 \\(T(N)=O(N)\\)</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#2-ordering-matrix-multiplications","title":"2 Ordering Matrix Multiplications","text":"<p>Question</p> <p>\u4e00\u7cfb\u5217\u77e9\u9635\u76f8\u4e58\u65f6\uff0c\u4e0d\u540c\u7684\u7ed3\u5408\u987a\u5e8f\u5f00\u9500\u4e0d\u540c\uff0c\u5982</p> <p></p> <p>\u8bd5\u56fe\u627e\u5230\u6700\u4f18\u7684\u7ed3\u5408\u65b9\u6cd5\uff1f</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#21-\u5b9a\u4e49\u95ee\u9898\u89c4\u6a21","title":"2.1 \u5b9a\u4e49\u95ee\u9898\u89c4\u6a21","text":"<p>Let \\(b_{n}=\\) the number of differrent ways to compute \\(M_{1},M_{2},\\dots M_{n}\\), we have \\(b_{2}=1, b_{3}=2, b_{4}=5 \\dots\\)</p> <p>\u6bcf\u4e2a \\(n\\) \u95ee\u9898\uff0c\u90fd\u53ef\u4ee5\u62c6\u5206\u6210\u4e24\u4e2a\u8f83\u5c0f\u7684\u90e8\u5206\uff0c\u4e14\u6709\u4e0d\u540c\u7684\u62c6\u5206\u65b9\u6cd5 \\(b_{n}=\\sum_{i=1}^{n-1}b_{i}b_{n-i}\\)</p> <p>\u8fd9\u91cc\u7684 \\(b_n\\) \u5c31\u662f Catalan number\uff0c\u6e10\u8fdb\u8868\u8fbe\u4e3a \\(b_{n}=O(\\frac{4^n}{n \\sqrt{ n }})\\)</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#22-solution","title":"2.2 Solution","text":"<p>\u8fd9\u91cc\u7684 \\(M\\) \u5e8f\u5217\u987a\u5e8f\u4e0d\u53ef\u8c03\u6362\uff0c\u8bbe \\(m_{i,j}\\) \u4e3a\u89e3\u51b3 \\(M_i\\times M_{i+1}\\times\\dots \\times M_{j}\\) \u7684\u6700\u5c0f\u4e58\u6cd5\u6b21\u6570\uff0c\\(M_i\\) \u7684\u5f62\u72b6\u4e3a \\(r_{i-1}\\times r_{i}\\)\uff0c\u90a3\u4e48\u9012\u63a8\u5f0f\u4e3a\uff1a</p> \\[ m_{i,j}= \\begin{cases} 0&amp;\\text{if }i=j \\\\ min_{i\\leq l&lt;j}\\{{m_{i,l}+m_{l+1, j}+r_{i-1}r_{l}r_{j}\\}}&amp;\\text{if }j&gt;i \\end{cases} \\] <p>\u4e5f\u5c31\u662f\uff0c\u8003\u8651\u5206\u5272\u6210\u7684\u5b50\u5e8f\u5217\u4e2d\u539f\u6709\u8ba1\u7b97\u5f00\u9500 \\(m_{i,j}+m_{l+1,j}\\) \u4ee5\u53ca\u5408\u5e76\u5f00\u9500 \\(r_{i-1}r_{l}r_{j}\\) \u4e4b\u548c\u6700\u5c0f\u7684\uff0c\u8fd9\u6837\uff0c\u5982\u679c\u5b50\u95ee\u9898\u7684\u89e3\u662f\u6700\u4f18\u7684\uff0c\u4e00\u5b9a\u80fd\u591f\u4fdd\u8bc1 \\(m_{i,j}\\) \u662f\u6700\u4f18\u7684\u3002</p> Ordering Matrix Multiplicatoin<pre><code>/* r contains number of columns for each of the N matrices */\n/* r[ 0 ] is the number of rows in matrix 1 */\n/* Minimum number of multiplications is left in M[ 1 ][ N ] */\nvoid OptMatirx(const long r[], int N, TwoDimArray M)\n{\n    int i, j, k, L;\n    long ThisM;\n    for (i = 1; i &lt;= N; i++) M[i][j] = 0;\n    for (k = 1; k &lt; N; k++)  // k = j - i\n        for (i = 1; i &lt;= N-k; i++) {\n            j = i = k;\n            M[i][j] = Infinity;\n            for (L = 1; L &lt; j; L++) {\n                    ThisM = M[i][L] + M[L+1][j] + r[i-1] * r[L] * r[j];\n                    if (ThisM &lt; M[i][j])\n                        M[i][j] = ThisM;\n            }\n        }\n}\n</code></pre> <p>\u663e\u7136\uff0c\\(T(N)=O(N^3)\\)</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#3-optimal-binary-search-tree","title":"3 Optimal Binary Search Tree","text":"<p>Question</p> <p>\u9759\u6001 BST\uff0c\u8003\u8651\u641c\u7d22\u603b\u5f00\u9500\u4e3a \\(T(N)=\\sum_{i=1}^Np_{i}(1+d_{i})\\)\uff0c\u5176\u4e2d\uff0c\\(p_i\\) \u662f \\(Key_{i}\\) \u7684\u641c\u7d22\u9891\u7387\uff0c\\(d_i\\) \u662f \\(Key_{i}\\) \u7684\u6df1\u5ea6\u3002</p> <p>\u5982\u4f55\u627e\u5230\u6700\u4f73\u7684\u6811\u7ed3\u6784\uff1f\u663e\u7136\uff0c\u4efb\u4f55\u5e73\u8861\u6811\u90fd\u4e0d\u4e00\u5b9a\u662f\u6700\u4f73\u7684</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#31-solution","title":"3.1 Solution","text":"<p>\u9996\u5148\u5047\u8bbe \\(Key\\) \u5df2\u7ecf\u6309\u7167\u5347\u5e8f\u6392\u5217\u597d\uff0c\u4ee4 \\(c_{i,j}\\) \u8868\u793a \\(Key_{i}, Key_{i+1}, \\dots Key_{j}\\) \u7ec4\u6210\u7684\u6700\u4f73\u6811\u7ed3\u6784\u7684\u5f00\u9500\uff0c\u7528 \\(w_{i,j}\\) \u8868\u793a \\(\\sum_{k=i}^jp_{k}\\)\uff0c\u5982\u679c\u5728 \\(c_{{i,j}}\\) \u4e2d\u9009\u62e9 \\(Key_{k}\\) \u4e3a\u6839\uff0c\u5219\uff1a</p> \\[ \\begin{align} c_{i,j}&amp;=p_{k}+cost(L)+cost(R)+weight(L)+weight(R) \\\\ &amp;=p_{k}+c_{i,k-1}+c_{k+1,j}+w_{i,k-1}+w_{k+1,j} \\\\ &amp;=w_{i,j}+c_{i,k-1}+c_{k+1,j} \\end{align} \\] <p>\u90a3\u4e48\u663e\u7136\u5c31\u80fd\u5f97\u5230\u9012\u63a8\u516c\u5f0f\uff1a</p> \\[ c_{i,j}= \\begin{cases} p_{i} &amp;\\text{if } i=j \\\\ min_{i\\leq l\\leq j}\\{w_{i,j}+c_{i,l-1}+c_{l+1,j}\\} &amp;\\text{if } i\\neq j \\end{cases} \\]"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#32-complexity","title":"3.2 Complexity","text":"<p>\u663e\u7136\u8981\u8fdb\u884c\u4e00\u4e2a\u4e09\u89d2\u9635\u904d\u5386\uff0c\u800c\u4e14\u6bcf\u4e2a entry \u90fd\u662f \\(O(N)\\) \u7684\uff0c\\(T(N)=O(N^3)\\)</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#33-an-on2-algorithm","title":"3.3 An \\(O(N^2)\\) algorithm","text":"<p>introduction to algorithm 10.33 p.419 ?</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#4-all-pairs-shortest-path","title":"4 All-Pairs Shortest Path","text":"<p>Question</p> <p>For all pairs of \\(v_i\\) and \\(v_{j}\\) (\\(i\\neq j\\)), find the shortest path between.</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#41-method-1-dijkstra","title":"4.1 Method 1: Dijkstra","text":"<p>Single-source for \\(|V|\\) times\uff0c\u6bcf\u4e00\u6b21\u5c31\u80fd\u627e\u5230\u4e00\u4e2a\u70b9\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8ddd\u79bb</p> <ul> <li>\u82e5\u4f7f\u7528\u7b80\u5355\u6570\u7ec4\uff0c\u4e00\u6b21\u8981 \\(O(|V|^2)\\)\uff0c\\(T=O(|V|^3)\\)\uff0c\u5bf9\u4e8e\u7a00\u758f\u56fe\u5f88\u5feb</li> <li>\u82e5\u4f7f\u7528\u5806\uff0c\u4e00\u6b21\u8981 \\(O((|V|+|E|)\\log|V|)\\)\uff0c\\(T=O(|V|(|V|+|E|)\\log|V|)\\)</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#42-method-2-floyd","title":"4.2 Method 2: Floyd","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#421-definition","title":"4.2.1 Definition","text":"<ul> <li>\u5b9a\u4e49 \\(D^k[i][j]=min\\{\\text{length of path }i\\to\\{l\\leq k\\}\\to j\\}\\)\uff0c\u610f\u601d\u662f\u4ece \\(v_{i}\\) \u7ecf\u8fc7\u4e2d\u95f4\u8282\u70b9\u96c6\u5408 \\(\\{v_{m}|\\,0\\leq m\\leq k\\}\\) \u5230\u8fbe \\(v_{j}\\) \u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6</li> <li>\u5b9a\u4e49 \\(D^{-1}[i][j]=cost[i][j]\\) \u4e3a\u521d\u59cb\u60c5\u51b5\uff1a\u5982\u679c \\((v_{i},v_{j}) \\in E\\)\uff0c\u90a3\u4e48\u521d\u59cb\u5316\u4e3a\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\uff1b\u53cd\u4e4b\uff0c\u521d\u59cb\u5316\u4e3a \\(+\\infty\\)</li> <li>\u4e8e\u662f\uff0c\\(v_i\\) \u5230 \\(v_j\\) \u7684\u6700\u77ed\u8def\u5f84\u957f\u4e00\u5b9a\u7b49\u4e8e \\(D^{N-1}[i][j]\\)</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#422-solution","title":"4.2.2 Solution","text":"<p>\u4ece \\(D^{-1}\\) \u5f00\u59cb\u9010\u6b65\u8ba1\u7b97\u5f97\u5230 \\(D^{N-1}\\)\uff0c\u5047\u8bbe \\(D^{k-1}\\) \u5df2\u7ecf\u5f97\u5230\uff0c\u90a3\u4e48\u5982\u679c\u901a\u8fc7 \\(v_k\\) \u7684\u8def\u5f84\u66f4\u77ed\uff0c\u5219\u66f4\u65b0\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff1a</p> \\[ D^k[i][j]=min\\{D^{k-1}[i][j],D^{k-1}[i][k]+D^{k-1}[k][j]\\} \\] Floyd Warshall All-Pairs Shortest Path<pre><code>/* A[ ] contains the adjacency matrix with A[ i ][ i ] = 0 */\n/* D[ ] contains the values of the shortest path */\n/* N is the number of vertices */\n/* A negative cycle exists iff D[ i ][ i ] &lt; 0 */\nvoid AllPairs(TwoDimArray A, TwoDimArray D, int N)\n{\n    int i, j, k;\n    for (i = 0; i &lt; N; i++)\n        for (j = 0; j &lt; N; j++)\n            D[i][j] = A[i][j];\n    for (k = 0; k &lt; N; k++)\n        for (i = 0; i &lt; N; j++)\n            for (j = 0; j &lt; N; j++\n                        if (D[i][k] + D[k][j] &lt; D[i][j])\n                            D[i][j] = D[i][k] + D[k][j];\n}\n</code></pre> <p>\\(T(N)=O(N^3)\\), where \\(N\\) is the number of vertices.</p> <p>\u9002\u7528\u8303\u56f4</p> <ul> <li>\u80fd\u591f\u5904\u7406\u8d1f\u7684\u6743\u91cd</li> <li>\u65e0\u6cd5\u5904\u7406\u8d1f\u6743\u91cd\u73af</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#5-product-assembly","title":"5 Product Assembly","text":"<p>Question</p> <ul> <li>\u4e24\u6761\u751f\u4ea7\u7ebf</li> <li>\u6bcf\u4e2a stage \u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u6280\u672f\uff0c\u56e0\u6b64\u6709\u4e0d\u540c\u7684\u65f6\u95f4\u5f00\u9500</li> <li>\u90e8\u4ef6\u53ef\u4ee5\u5728 stage \u4e4b\u95f4\u66f4\u6362\u751f\u4ea7\u7ebf</li> <li>\u6c42\u6700\u5c0f\u7684\u7ec4\u88c5\u65f6\u95f4\uff1f </li> </ul> <ul> <li>Characterize an optimal solution<ul> <li>\u9996\u5148\u5206\u6790\uff0c\u663e\u7136\u6700\u4f18\u89e3\u4e2d\u4e00\u5b9a\u542b\u6709\u5b50\u95ee\u9898\u6700\u4f18\u89e3</li> </ul> </li> <li>Recursively define the optimal values<ul> <li>\u5230 \\(stage\\) \u7684\u6700\u4f18\u89e3\u53d6\u51b3\u4e8e\u5230 \\(stage-1\\) \u7684\u6700\u4f18\u89e3</li> <li><code>f[line][stage] = min(</code><code>f[line][stage-1] + t_process[line][stage-1],</code><code>f[1-line][stage-1] + t_transit[1-line][stage-1]</code><code>);</code></li> </ul> </li> <li>Compute the values in some order<ul> <li>\u663e\u7136\uff0c\u56e0\u4e3a\u662f\u7ebf\u6027\u7684\uff0c\u53ea\u9700\u8981\u904d\u5386 stage \u7ef4\u5ea6\uff0c\u6bcf\u6b21\u90fd\u66f4\u65b0 line \u7ef4\u5ea6\u5c31\u597d</li> <li>\\(O(N)\\text{ time }+O(N)\\text{ space}\\)</li> </ul> </li> <li>Reconstruct the solving strategy<ul> <li>\u9700\u8981\u53e6\u4e00\u4e2a\u6570\u7ec4\u6765\u5b58\u653e\u4e00\u4e2a\u8def\u5f84</li> </ul> </li> </ul> Product Assembly<pre><code>f[0][0] = 0; L[0][0] = 0;\nf[1][0] = 0; L[1][0] = 0;\nfor (stage = 1; stage &lt;= n; stage++)\n    for (line = 0; line &lt;= 1; line++) {\n        f_stay = f[line][stage-1] + t_process[line][stage-1];\n        f_move = f[1-line][stage-1] + t_transit[1-line][stage-1];\n        if (f_stay &lt; f_move) {\n            f[line][stage] = f_stay;\n            L[line][stage] = line;  // L \u8bb0\u5f55\u7684\u662f\u6700\u4f18\u89e3\u4e2d\u4e0a\u4e00\u4e2a stage \u6240\u5728 line \u7684\u5e8f\u53f7\n        } else {\n            f[line][stage] = f_move;\n            L[line][stage] = 1 - line;\n        }\n    }\n\nline = f[0][n] &lt; f[1][n] ? 0 : 1;\nfor (stage = n; stage &gt; 0; stage--) {\n    plan[stage] = line;\n    line = L[line][stage];  // \u6309\u7167\u6807\u8bb0\u627e\u56de\u8d77\u70b9\u5373\u53ef\n}\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#6-conclusion","title":"6 Conclusion","text":"<p>\u5982\u4f55\u8bbe\u8ba1 DP \u7b97\u6cd5</p> <ol> <li>\u627e\u5230\u4e00\u79cd\u7b26\u5408\u9898\u610f\u7684\u90e8\u5206\u6700\u4f18\u89e3</li> <li>\u627e\u5230\u9012\u63a8\u5f0f\u3001\u521d\u59cb\u6761\u4ef6</li> <li>\u6309\u7167\u5408\u9002\u7684\u987a\u5e8f\u8ba1\u7b97\u6700\u4f18\u89e3\u76ee\u6807\u51fd\u6570</li> <li>\u91cd\u6784\u6700\u4f18\u89e3</li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#7-discussion-fold","title":"7 Discussion %% fold %%","text":"<p>Question</p> <p>A palindrome is a nonempty string over some alphabet that reads the same forward and backward. Examples: <code>civic</code>, <code>racecar</code>, and <code>aibohphobia</code> (fear of palindromes).</p> <p>Give an efficient algorithm to find the longest palindrome that is a subsequence of a given input string. For example, given the input <code>character</code>, your algorithm should return <code>carac</code>.</p> <p>Notice the subsequence does not have to be consecutive.</p> maxPalindromeSubString<pre><code>string maxPalindromeSubString(string str)\n{\n    int N = str.size();\n    int dp[N][N];\n\n    // init\n    for (int i = 0; i &lt; N; i++)\n        dp[i][i] = 1;\n\n    // dp\n    for (int length = 2; length &lt;= N; length++) {  // all the length\n        for (int startIdx = 0; startIdx &lt; N - length + 1; startIdx++) {  // start index\n            int endIdx = startIdx + length - 1;\n            if (str[startIdx] == str[endIdx]) {\n                if (length == 2)\n                    dp[startIdx][endIdx] = 2;\n                else\n                    dp[startIdx][endIdx] = dp[startIdx+1][endIdx-1];\n            }\n        }\n    }\n\n    // reconstruct\n    char* front = 0, back = str.size() - 1;\n    string buffer, result;\n    int max_length = dp[0][N-1];\n    while (front &lt;= back) {\n        if (str[front] == str[back]) {\n            buffer = buffer + str[front];\n            front++;\n            back--;\n        } else {\n            if (dp[front+1][back] &gt; dp[front][back-1])\n                front++;\n            else:\n                back--;\n        }\n    }\n    result = buffer;\n    int i;\n    if (max_length % 2)\n        i = buffer.size() - 2;\n    else:\n        i = buffer.size() - 1;\n    while (i &gt;= 0)\n        result = result + buffer[i];\n\n    return result;\n}\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#8-questions","title":"8 Questions","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#81-q8","title":"8.1 Q8","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#811-optimal-bsts-root","title":"8.1.1 Optimal BST's Root","text":"<p>The root of an optimal binary search tree always contains the key with the highest search probability. (T/F)</p> Answer <p>F \u5b8c\u5168\u4e0d\u4e00\u5b9a\uff0c\u4f8b\u5982 aaaaa \u4e5f\u53ef\u80fd\u662f\u9891\u7387\u6700\u9ad8\u7684\u8bcd\uff0c\u4f46\u662f\u4f1a\u5bfc\u81f4\u6811\u975e\u5e38\u4e0d\u5e73\u8861\uff0c\u4ece\u800c\u4e0d\u662f\u6700\u4f18\u89e3 \u4f46\u662f\u5728 Huffman Coding \u4e2d\u53ef\u4ee5\u8fd9\u6837\u8d2a\u5fc3\u6c42\u89e3</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#82-hw8","title":"8.2 HW8","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#821-dp-\u904d\u5386\u987a\u5e8f\u95ee\u9898","title":"8.2.1 dp \u904d\u5386\u987a\u5e8f\u95ee\u9898","text":"<p>Given a recurrence equation \\(f_{i,j,k}\u200b=f_{i,j+1,k}\u200b+\\min_{0\\leq l\\leq k} \\{f_{i\u22121,j,l\u200b}+w_{j,l}\\}\\). To solve this equation in an iterative way, we cannot fill up a table as follows:</p> <p>A. <code>for k in 0 to n: for i in 0 to n: for j in n to 0</code> B. <code>for i in 0 to n: for j in 0 to n: for k in 0 to n</code> C. <code>for i in 0 to n: for j in n to 0: for k in n to 0</code> D. <code>for i in 0 to n: for j in n to 0: for k in 0 to n</code></p> Answer <p>B \u5173\u952e\u5728\u4e8e \\(j\\) \u4f9d\u8d56\u4e8e \\(j+1\\)\uff0c\u6240\u4ee5\u4e00\u5b9a\u4e0d\u80fd\u51fa\u73b0 <code>for j in 0 to n</code></p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#822-programming-contest","title":"8.2.2 Programming Contest","text":"Question <p>Bob will participate in a programming contest. There are altogether <code>n</code> problems in the contest. Unlike in PAT (Programming Ability Test), in a programming contest one can not obtain partial scores. For problem <code>i</code>, Bob will need <code>time[i]</code> to solve it and obtains the corresponding <code>score[i]</code>, or he may choose not to solve it at all. Bob will be happy when he obtains a total score no less than <code>happy_score</code>. You are supposed to find the minimum time needed for Bob to be happy. The function <code>need_time</code> must return the minimum time, or <code>-1</code> if it is impossible for Bob to obtain a score no less than <code>happy_score</code>.</p> <p>Format of function</p> <pre><code>int need_time(const int time[], const int score[], int happy_score, int n);\n</code></pre> <p>Here <code>n</code> (1\u2264<code>n</code>\u2264 <code>MAXN</code>) is the number of problems; <code>happy_score</code> (1\u2264 <code>happy_score</code> \u2264 <code>MAXS</code>) is the minimum score for Bob to be happy; <code>time[]</code> is the array to store <code>time[i]</code> (1\u2264<code>time[i]</code>\u2264100) which is the time to solve problem <code>i</code>; <code>score[]</code> is the array to store <code>score[i]</code> (1\u2264<code>score[i]</code>\u2264100) which is the score Bob gets for solving problem <code>i</code>.</p> <p>Sample program of judge</p> <pre><code>#include &lt;stdio.h&gt;\n\n#define MAXN 10\n#define MAXS 1000\n\nint need_time(const int time[], const int score[], int happy_score, int n);\n\nint main() {\n  int n, i, happy_score;\n  int time[MAXN], score[MAXN];\n  scanf(\"%d %d\", &amp;n, &amp;happy_score);\n  for (i = 0; i &lt; n; ++i)\n      scanf(\"%d\", &amp;time[i]);\n  for (i = 0; i &lt; n; ++i)\n      scanf(\"%d\", &amp;score[i]);\n  printf(\"%d\\n\", need_time(time, score, happy_score, n));\n  return 0;\n}\n\n/* Your function will be put here */\n</code></pre> <p>Sample Input</p> <pre><code>6 121\n\n84 87 78 16 94 38\n87 93 50 22 63 28\n</code></pre> <p>Sample Output</p> <pre><code>125\n</code></pre> <pre><code>dp[i][j] = time and score\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#8221-view-1-fold","title":"8.2.2.1 View 1 %% fold %%","text":"<p>A naive solution</p> <ul> <li>\u8bbe <code>dp[i]</code> \u4e3a\u5f97\u5230 <code>i</code> \u5206\u7684\u6700\u5c0f\u8017\u65f6\uff0c\u662f \u4e00\u7ef4\u52a8\u6001\u89c4\u5212\u95ee\u9898</li> <li>\u5bf9\u4e8e <code>dp[i]</code> \u904d\u5386\u6240\u6709\u9898\u76ee\uff0c\u8ba1\u7b97\u4e0a\u4e00\u4e2a\u5206\u6570 <code>i-score[j]</code><ul> <li>\u5982\u679c <code>i-score[j] &lt; 0</code>\uff0c\u90a3\u4e48 <code>dp[i] = min(dp[i], time[j]</code></li> <li>\u5982\u679c <code>i-score[j] &gt;= 0</code>\uff0c\u800c\u4e14 <code>j</code> \u5728 <code>dp[i-scorep[j]]</code> \u4e2d\u6ca1\u6709\u6807\u8bb0\u5b8c\u6210\uff0c\u90a3\u4e48 <code>dp[i] = min(dp[i], dp[i-score[j]] + time[j])</code></li> </ul> </li> <li>\u6240\u4ee5\uff0c\u8fd8\u9700\u8981\u4e00\u5f20 <code>happy_score * n</code> \u7684\u5e03\u5c14\u8868\uff0c\u6765\u6807\u8bb0\u6bcf\u4e2a\u5206\u6570\u6700\u597d\u60c5\u51b5\u4e0b\u505a\u8fc7\u7684\u9898\u76ee</li> </ul> <p>\u4e0a\u9762\u7684 solution \u867d\u7136\u80fd\u591f AC\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u592a\u9ad8\u4e86\uff0c\u56e0\u4e3a\u8981\u8bb0\u5f55\u505a\u8fc7\u54ea\u4e9b\u9898\u76ee\uff0c\u4f46\u662f\uff0c\u5982\u679c\u6362\u505a\u6309\u7167\u9898\u76ee\u904d\u5386\uff0c\u5c31\u4e0d\u7528\u8fd9\u4e48\u9ebb\u70e6\u4e86</p> <p>A better solution</p> <ul> <li>\u5b9a\u4e49 <code>dp[i]</code> \u4e3a\u6070\u597d\u83b7\u5f97 <code>i</code> \u5206\u7684\u6700\u5c0f\u8017\u65f6</li> <li>\u5bf9\u4e8e\u6240\u6709\u9898\u76ee <code>problemIdx</code><ul> <li>\u4ece <code>MAXS</code> \u5230 <code>score[prbIdx]</code>\uff0c\u66f4\u65b0\u5f97\u5230\u6b64\u5206\u6570\u7684\u6700\u77ed\u7528\u65f6 <code>dp[thisScore] = min(dp[thisScore], dp[thisScore - score[prbIdx]] + time[prbIdx])</code></li> <li>\u5012\u7740\u904d\u5386\uff0c\u5c31\u4e0d\u9700\u8981\u8003\u8651\u8fd9\u9053\u9898\u76ee\u662f\u5426\u5728\u5b50\u95ee\u9898\u4e2d\u88ab\u9009\u4e2d\u505a\u8fc7\uff0c\u56e0\u4e3a <code>dp[thisScore - score[proIdx]]</code> \u8fd8\u6ca1\u6709\u6765\u5f97\u53ca\u88ab\u66f4\u65b0</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#8222-view-2","title":"8.2.2.2 View 2","text":"<ul> <li>\\(dp[i]\\) \u662f\u8fbe\u5230 \\(i\\) \u5206\u6570\u7684\u6700\u5c0f\u65f6\u95f4</li> <li>\u904d\u5386\u6240\u6709\u9898\u76ee\uff0c\u6bcf\u6b21\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u9898\u76ee\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u603b\u5206\uff0c\u5411\u524d\u641c\u7d22\u672a\u505a\u9898\u76ee\u7684\u603b\u5206<ul> <li>\u7531\u4e8e\u662f\u4ece\u5730\u5740\u4f4e\u7684\u4f4d\u7f6e\u5411\u9ad8\u7684\u4f4d\u7f6e\u5199\u5165\uff0c\u5fc5\u987b\u4f7f\u7528\u9006\u5e8f</li> </ul> </li> <li>\u6700\u540e\uff0c\u6ee1\u8db3\u9898\u610f\u7684\u662f\uff0c\u8fbe\u5230 <code>&gt;=happy_score</code> \u7684\u67d0\u4e2a\u5206\u6570\u7684\u6700\u77ed\u65f6\u95f4\uff0c\u627e\u5230\u8f93\u51fa\u5373\u53ef</li> </ul> <pre><code>int need_time(const int time[], const int score[], int happy_score, int n){\n    int dp[MAXS+1];\n    memset(dp,0x7f,sizeof(dp));\n    dp[0]=0;\n    for(int i=0;i&lt;n;j++){  // for all problems i\n        for(int s=MAXS;s&gt;=score[i];s--){\n            dp[s]=min(dp[s],dp[s-score[i]]+time[i]);\n        }\n    }\n    int res=0xffffff;\n    for(int i=happy_score;i&lt;=MAXS;i++){\n        res=min(res,dp[i]);\n    }\n\n    if(res==0xffffff)\n        return  -1;\n    else return res;\n}\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#83-midterm-review","title":"8.3 Midterm Review","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#831-dp-\u7684\u6307\u6570\u590d\u6742\u5ea6","title":"8.3.1 dp \u7684\u6307\u6570\u590d\u6742\u5ea6","text":"<p>If a problem can be solved by dynamic programming, it must be solved in polynomial time. (T/F)</p> Answer <p>F \u867d\u7136\u52a8\u6001\u89c4\u5212\u80fd\u591f\u5c06\u95ee\u9898\u9650\u5236\u5728\u4e00\u4e2a\u5f20\u91cf\u6240\u6709 entry \u7684\u904d\u5386\u4e2d\uff0c\u4f46\u662f\u8fd9\u4e2a\u5f20\u91cf\u7684\u89c4\u6a21\u53ef\u80fd\u662f\u6307\u6570\u7ea7\u7684\uff0c\u4e00\u4e2a\u6709\u610f\u601d\u7684\u4f8b\u5b50\u662f\u52a8\u6001\u89c4\u5212\u7248\u672c\u7684 TSP\uff0c\u4f7f\u7528 Held-Karp \u7b97\u6cd5\uff1a</p> <p>GPT \u7684\u89e3\u91ca</p> <p>\u65c5\u884c\u5546\u95ee\u9898\uff08TSP\uff09\u7684\u52a8\u6001\u89c4\u5212\u89e3\u6cd5\u901a\u5e38\u4f7f\u7528 Held-Karp \u7b97\u6cd5\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2 \\cdot 2^n)\\)\u3002\u4ee5\u4e0b\u662f\u5bf9\u8fd9\u4e00\u590d\u6742\u5ea6\u7684\u8be6\u7ec6\u89e3\u91ca\uff1a</p> <p>\u95ee\u9898\u63cf\u8ff0</p> <p>\u65c5\u884c\u5546\u95ee\u9898\u8981\u6c42\u627e\u5230\u4e00\u6761\u6700\u77ed\u8def\u5f84\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u57ce\u5e02\u90fd\u88ab\u8bbf\u95ee\u4e00\u6b21\uff0c\u5e76\u6700\u7ec8\u8fd4\u56de\u5230\u8d77\u59cb\u57ce\u5e02\u3002\u5047\u8bbe\u6709 \\(n\\) \u4e2a\u57ce\u5e02\u3002</p> <p>\u52a8\u6001\u89c4\u5212\u89e3\u6cd5</p> <ol> <li>\u72b6\u6001\u5b9a\u4e49\uff1a</li> <li>\u7528 \\(dp[S][j]\\) \u8868\u793a\u4ece\u8d77\u59cb\u57ce\u5e02\u51fa\u53d1\uff0c\u7ecf\u8fc7\u4e00\u7ec4\u57ce\u5e02 \\(S\\)\uff08\u5176\u4e2d \\(S\\) \u5305\u542b\u57ce\u5e02 \\(j\\))\uff0c\u6700\u7ec8\u5230\u8fbe\u57ce\u5e02 \\(j\\) \u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002</li> <li>\\(S\\) \u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u5305\u542b\u4e86\u5f53\u524d\u8bbf\u95ee\u7684\u57ce\u5e02\u3002</li> <li>\u72b6\u6001\u8f6c\u79fb\uff1a<ul> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u53ef\u80fd\u7684\u57ce\u5e02\u96c6\u5408 \\(S\\) \u548c\u6bcf\u4e2a\u57ce\u5e02 \\(j\\)\uff1a\\(\\(dp[S][j] = \\min_{i \\in S, i \\neq j}(dp[S - \\{j\\}][i] + d(i, j))\\)\\)\u8fd9\u91cc\uff0c\\(d(i, j)\\) \u662f\u57ce\u5e02 \\(i\\) \u5230\u57ce\u5e02 \\(j\\) \u7684\u8ddd\u79bb\u3002</li> </ul> </li> <li>\u72b6\u6001\u6570\uff1a</li> <li>\u96c6\u5408 \\(S\\) \u7684\u6570\u91cf\u662f \\(2^n\\)\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u57ce\u5e02\u53ef\u4ee5\u5728\u96c6\u5408\u4e2d\u6216\u4e0d\u5728\u96c6\u5408\u4e2d\uff08\u603b\u5171\u6709 \\(n\\) \u4e2a\u57ce\u5e02\uff09\u3002</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u96c6\u5408 \\(S\\)\uff0c\u9700\u8981\u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u76ee\u6807\u57ce\u5e02 \\(j\\)\uff0c\u5171\u6709 \\(n\\) \u4e2a\u57ce\u5e02\u3002</li> <li>\u590d\u6742\u5ea6\u8ba1\u7b97\uff1a</li> <li>\u7531\u4e8e\u6211\u4eec\u9700\u8981\u586b\u5145\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(2^n\\) \u7684\u8868\u683c\uff08\u6bcf\u4e2a\u96c6\u5408\u5bf9\u5e94\u4e00\u4e2a\u72b6\u6001\uff09\uff0c\u800c\u5bf9\u4e8e\u6bcf\u4e2a\u72b6\u6001\u9700\u8981\u904d\u5386 \\(n\\) \u4e2a\u57ce\u5e02\u6765\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\uff0c\u56e0\u6b64\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a\\(\\(O(n^2 \\cdot 2^n)\\)\\)</li> </ol> <p>\u7ed3\u8bba</p> <p>\u56e0\u6b64\uff0c\u65c5\u884c\u5546\u95ee\u9898\u7684\u52a8\u6001\u89c4\u5212\u7248\u672c\u7531\u4e8e\u9700\u8981\u5904\u7406\u6240\u6709\u53ef\u80fd\u7684\u57ce\u5e02\u7ec4\u5408\u548c\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u7684\u6240\u6709\u57ce\u5e02\uff0c\u5bfc\u81f4\u5176\u590d\u6742\u5ea6\u4e3a \\(O(n^2 \\cdot 2^n)\\)\u3002\u8fd9\u79cd\u590d\u6742\u5ea6\u5728\u57ce\u5e02\u6570\u91cf \\(n\\) \u8f83\u5927\u65f6\uff0c\u8ba1\u7b97\u91cf\u4f1a\u8fc5\u901f\u589e\u52a0\uff0c\u8868\u73b0\u51fa\u6307\u6570\u7ea7\u7684\u589e\u957f\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2008%20Dynamic%20Programming.html#84-dp-coding-problems","title":"8.4 DP Coding Problems","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html","title":"09 Greedy Algorithm","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#1-introduction","title":"1 Introduction","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#11-optimization-problems","title":"1.1 Optimization Problems","text":"<ul> <li>constraints \u7ea6\u675f</li> <li>optimization function \u76ee\u6807\u51fd\u6570</li> <li>feasible solution \u53ef\u884c\u89e3</li> <li>optimal solution \u6700\u4f18\u89e3</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#12-the-greedy-method","title":"1.2 The Greedy Method","text":"<ul> <li>\u5728\u6bcf\u4e2a\u9636\u6bb5\u90fd\u6309\u7167\u4e00\u5b9a\u7684\u8d2a\u5fc3\u65b9\u6cd5\u505a\u51fa\u5c40\u90e8\u6700\u4f18\u9009\u62e9\uff0c\u9009\u62e9\u4e0d\u53ef\u56de\u6eaf\u3001\u4e0d\u53ef\u4fee\u6539\uff0c\u6bcf\u4e2a\u9009\u62e9\u90fd\u5fc5\u987b\u81f3\u5c11\u6ee1\u8db3\u53ef\u884c\u3002</li> <li>\u53ea\u80fd\u5728 local optimal \u5c40\u90e8\u6700\u4f18 \u7b49\u4e8e global optimal \u5168\u5c40\u6700\u4f18 \u7684\u60c5\u51b5\u4e0b\u5f97\u5230\u6700\u4f18\u89e3</li> <li>heuristics \u8fd1\u4f3c\uff1a\u8d2a\u5fc3\u6cd5\u5c5e\u4e8e\u4e00\u79cd\u542f\u53d1\u5f0f\u7b97\u6cd5\uff0c\u4e0d\u4e00\u5b9a\u80fd\u5f97\u5230\u5168\u5c40\u6700\u4f18\u89e3\uff0c\u4f46\u662f\u901a\u5e38\u80fd\u591f\u4ea7\u751f\u8db3\u591f\u8fd1\u4f3c\u7684\u53ef\u884c\u89e3</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#2-activity-selection-problem-\u6d3b\u52a8\u9009\u62e9\u95ee\u9898","title":"2 Activity Selection Problem \u6d3b\u52a8\u9009\u62e9\u95ee\u9898","text":"<p>Question</p> <p>\u7ed9\u5b9a\u6d3b\u52a8\u7684\u96c6\u5408 \\(S=\\{a_{1},a_{2},a_{3},\\dots,a_{n}\\}\\)\uff0c\u6bcf\u4e2a\u6d3b\u52a8\u7684\u6301\u7eed\u65f6\u95f4\u4e3a \\([s_{i},f_{i})\\)\uff0c\u6c42\u4e00\u4e2a\u623f\u95f4\u6700\u5927\u80fd\u5b89\u6392\u7684\u6d3b\u52a8\u6570\u91cf</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#21-a-dp-solution","title":"2.1 A DP Solution","text":"<p>\u6bcf\u4e2a\u8d2a\u5fc3\u7b97\u6cd5\u603b\u662f\u5bf9\u5e94\u4e00\u4e2a\u590d\u6742\u5ea6\u66f4\u9ad8\u7684 dp</p> <ul> <li> <p>\\(S_{ij}\\) \u8868\u793a\u4ece\u6d3b\u52a8 \\(a_i\\) \u5230 \\(a_j\\) \u7684\u6d3b\u52a8\u96c6\u5408\uff08\u4e0d\u5305\u62ec\u4e24\u7aef\uff09</p> </li> <li> <p>\\(c_{ij}\\) \u8868\u793a \\(S_{ij}\\) \u4e2d\u6700\u5927\u5b89\u6392\u6d3b\u52a8\u6570\u91cf\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a \\(\\(c_{ij}=\\begin{cases}0 &amp;\\text{if }S_{ij}=\\emptyset\\\\max_{{a_{k}\\in S_{ij}}}\\{c_{ik}+c_{kj}+1\\}\\quad &amp;\\text{if }S_{{ij}}\\neq \\emptyset\\end{cases}\\)\\)</p> </li> <li> <p>\\(T(N)=O(N^3)\\)\uff0c\u8fd9\u662f\u56e0\u4e3a\u6709 \\(i,j,k\\) \u4e09\u4e2a\u53d8\u91cf\u7684\u904d\u5386</p> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#22-greedy-solution","title":"2.2 Greedy Solution","text":"<p>Select the interval which ends first but not causing overlapping. \u5173\u952e\u601d\u60f3\u5728\u4e8e\u5c3d\u65e9\u91ca\u653e\u8d44\u6e90 \\(T(N)=O(N \\log N)\\)</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#23-correctness","title":"2.3 Correctness","text":"<ul> <li>feasible: \u4fdd\u8bc1\u4e0d\u51fa\u73b0 overlapping\uff0c\u8fd9\u663e\u7136\u6210\u7acb</li> <li>optimal: \u4e0b\u9762\u4f1a\u7ed9\u51fa\u8bc1\u660e</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#231-proof-of-optimality","title":"2.3.1 Proof of optimality","text":"<p>\u5bf9\u4e8e\u4efb\u610f\u5b50\u95ee\u9898\uff0c\u5047\u8bbe \\(A_{k}\\) \u662f\u6700\u4f18\u89e3\u7684\u96c6\u5408\uff0c\\(a_{ef}\\) \u662f \\(A_k\\) \u91cc\u6700\u65e9\u5b8c\u6210\u7684\u6d3b\u52a8\uff0c\\(a_m\\) \u662f\u6240\u6709\u6d3b\u52a8\u4e2d\u6700\u65e9\u5b8c\u6210\u7684\u6d3b\u52a8\uff0c\u90a3\u4e48</p> <p>\u5982\u679c \\(a_m=a_{ef}\\)\uff0c\u90a3\u4e48\u5c06\u4f1a\u8003\u8651\u4e24\u4e2a\u76f8\u540c\u7684\u5b50\u95ee\u9898\uff0c\u5f62\u6210\u5f52\u7eb3\uff1b</p> <p>\u5426\u5219\uff0c\u7531\u4e8e \\(a_{m}\\leq a_{ef}\\)\uff0c\u7528 \\(a_m\\) \u4ee3\u66ff \\(a_{ef}\\)\uff0c\u5f97\u5230\u4e86\u548c\u6700\u4f18\u89e3\u4e00\u6837\u597d\u7684 \\(A_k'\\)\uff1b</p> <p>\u7ee7\u7eed\u64cd\u4f5c\uff0c\u603b\u80fd\u5f97\u5230\u548c\u6700\u4f18\u89e3\u4e00\u6837\u597d\u7684 \\(\\hat{A_{k}}\\)\uff0c\u5176\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u662f\u5b50\u95ee\u9898\u4e2d\u6700\u65e9\u7ed3\u675f\u7684\u6d3b\u52a8\uff0c\u8fd9\u8bc1\u660e\u8d2a\u5fc3\u7ed3\u679c\u548c\u6700\u4f18\u89e3\u7b49\u4ef7\u3002</p> <p>\u4ea4\u6362\u53c2\u6570\u6cd5\uff0c\u901a\u8fc7\u6784\u9020\u4e0d\u53ef\u80fd\u66f4\u5dee\u7684\u89e3\u6765\u8bc1\u660e\u8d2a\u5fc3\u9009\u62e9\u4e0d\u53ef\u80fd\u6bd4\u6700\u4f18\u89e3\u5dee</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#24-weighted-activity-selection-\u6709\u6743\u6d3b\u52a8\u9009\u62e9","title":"2.4 Weighted Activity Selection \u6709\u6743\u6d3b\u52a8\u9009\u62e9","text":"<ul> <li>\u7b80\u5355\u6765\u8bb2\uff0c\u53ea\u80fd\u7528\u56de dp</li> <li>\\(c_{1,j}\\) \u8868\u793a \\(a_1\\) \u5230 \\(a_j\\) \u91cc\u6700\u597d\u7684\u5b89\u6392\uff0c\u90a3\u4e48 \\(c_{1,j}=\\begin{cases}w_{1} &amp;\\text{if }j=1\\\\ \\max\\{c_{1,j-1},c_{1,k(j)}+w_{j}\\}&amp;\\text{if }j&gt;1\\end{cases}\\)</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#25-interval-scheduling-\u533a\u95f4\u8c03\u5ea6\u95ee\u9898","title":"2.5 Interval Scheduling \u533a\u95f4\u8c03\u5ea6\u95ee\u9898","text":"<p>\u8be6\u89c1 6.2.3 Room Scheduling</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#3-elements-of-the-greedy-strategy","title":"3 Elements of the Greedy Strategy","text":"<ol> <li>\u95ee\u9898\u9700\u8981\u6ee1\u8db3\uff1a\u505a\u51fa\u4e00\u4e2a\u9009\u62e9\uff0c\u5c31\u7559\u4e0b\u4e00\u4e2a\u5b50\u95ee\u9898</li> <li>\u8bc1\u660e\u95ee\u9898\u7684\u6700\u4f18\u89e3\u4e00\u5b9a\u80fd\u591f\u901a\u8fc7\u67d0\u79cd\u8d2a\u5fc3\u8fc7\u7a0b\u5f97\u5230</li> <li>\u8bc1\u660e\u6700\u4f18\u5b50\u7ed3\u6784\uff0c\u5373\uff1a\u5f53\u505a\u51fa greedy choice \u540e\uff0c\u4f59\u4e0b\u7684\u5b50\u95ee\u9898\u5177\u6709\u8fd9\u6837\u7684\u6027\u8d28\uff0c\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u4e0e\u5148\u524d\u7684 greedy choice \u5408\u5e76\u540e\u80fd\u591f\u5f97\u5230\u539f\u59cb\u95ee\u9898\u7684\u6700\u4f18\u89e3</li> </ol> <p>Tip</p> <p>Beneath every greedy algorithm, there is almost always a more cumbersome dynamic-programming solution.</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#4-huffman-codes-\u970d\u592b\u66fc\u7f16\u7801","title":"4 Huffman Codes \u970d\u592b\u66fc\u7f16\u7801","text":"<p>Huffman Coding \u8fc7\u4e8e\u7b80\u5355\uff0c\u53ef\u4ee5\u53c2\u8003\u79bb\u6563\u7684\u5185\u5bb9</p> Huffman Code<pre><code>void Huffman ( PriorityQueue  heap[ ],  int  C )\n{   consider the C characters as C single node binary trees,\n     and initialize them into a min heap;\n     for ( i = 1; i &lt; C; i++ ) { \n        create a new node;\n        /* be greedy here */\n        delete root from min heap and attach it to left_child of node;\n        delete root from min heap and attach it to right_child of node;\n        weight of node = sum of weights of its children;\n        /* weight of a tree = sum of the frequencies of its leaves */\n        insert node into min heap;\n   }\n}\n</code></pre> <ul> <li>\u7b97\u6cd5<ul> <li>\u6784\u5efa\u4f18\u5148\u961f\u5217\uff0c\u63d2\u5165\u6240\u6709\u8282\u70b9</li> <li>\u6bcf\u6b21\u53d6\u6743\u91cd\u6700\u5c0f\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u65b0\u6839\u7684\u5de6\u53f3\u5b69\u5b50\uff0c\u65b0\u6839\u7684\u6743\u91cd\u4e3a\u4e24\u4e2a\u5143\u7d20\u4e4b\u548c\uff0c\u5c06\u65b0\u6839\u63d2\u5165\u961f\u5217</li> <li>\u91cd\u590d\u76f4\u5230\u961f\u5217\u4e2d\u53ea\u6709\u4e00\u4e2a\u5143\u7d20</li> </ul> </li> <li>\\(T=O(C\\log C)\\)</li> <li>\u6240\u6709\u7684 character \u90fd\u5728\u53f6\u5b50\u8282\u70b9</li> <li>\u6bcf\u4e2a internal node \u90fd\u662f 2 degree \u7684\uff0cfull tree<ul> <li>\u533a\u522b\u4e8e complete tree \u5b8c\u5168\u4e8c\u53c9\u6811</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#41-correctness","title":"4.1 Correctness","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#411-the-greedy-choice-property","title":"4.1.1 The greedy-choice property","text":"<ul> <li>\u9891\u7387\u5c0f\u7684\u4e00\u5b9a\u6709\u66f4\u957f\u7684 prefix\uff0c\u9891\u7387\u6700\u5c0f\u7684\u4e24\u4e2a prefix \u957f\u5ea6\u76f8\u7b49\u4e14\u53ea\u6709\u6700\u540e\u4e00\u4e2a bit \u4e0d\u540c</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#412-the-optimal-substructure-property","title":"4.1.2 The optimal substructure property","text":"<ul> <li>\\(x, y\\) \u8282\u70b9\u5728\u540e\u9762\u7684\u89e3\u9898\u8fc7\u7a0b\u4e2d\uff0c\u4e0e\u4e00\u4e2a \\(z\\) \u8282\u70b9\u7b49\u4ef7\uff0c\u6240\u4ee5\u6784\u6210\u4e86\u6700\u4f18\u5b50\u7ed3\u6784</li> <li>\u53ef\u4ee5\u4f7f\u7528\u53cd\u8bc1\u6cd5\u6765\u8bc1\u660e\u8fd9\u4e00\u70b9</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#5-discussion","title":"5 Discussion","text":"<p>Question</p> <p>Suppose that all the characters are sorted by their frequencies. Can you compute the Huffman code in \\(O(n)\\) time?</p> <p>\u5efa\u7acb\u4e24\u4e2a\u961f\u5217 \\(Q_{1}, Q_{2}\\)\uff0c\u5176\u4e2d \\(Q_{1}\\) \u5c31\u662f\u6392\u597d\u5e8f\u7684 characters\uff0c\\(Q_{2}\\) \u521d\u59cb\u5316\u4e3a\u7a7a\u3002</p> <p>\u6bcf\u6b21\u8003\u8651 \\(Q_{1},Q_{2}\\) \u4e2d\u7684\u524d\u4e24\u4e2a\u5171\u56db\u4e2a\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u975e\u7a7a\u4e14\u6700\u5c0f\u7684\u4e24\u4e2a\u8fdb\u884c\u5408\u5e76\uff0cenqueue \u5230 \\(Q_{2}\\)\u3002</p> <p>\u76f4\u5230 \\(Q_{1}\\) \u4e3a\u7a7a\uff0c\\(Q_2\\) \u4e2d\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u8fd9\u4e2a\u5143\u7d20\u5c31\u662f\u7ed3\u679c\u3002</p> <p>\u8bc1\u660e\uff1a\u6bcf\u6b21\u5408\u5e76\u540e\u5f97\u5230\u7684 trie \u5143\u7d20\u7684\u603b\u6743\u91cd\u603b\u662f\u9012\u589e\u7684\uff0c\u56e0\u6b64 \\(Q_{2}\\) \u5fc5\u7136\u662f\u589e\u5e8f\u7684\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#6-questions","title":"6 Questions","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#61-hw9","title":"6.1 HW9","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#611-\u627e\u96f6\u95ee\u9898","title":"6.1.1 \u627e\u96f6\u95ee\u9898","text":"<p>Consider the problem of making change for n cents using the fewest number of coins. Assume that each coin's value is an integer. The coins of the lowest denomination\uff08\u9762\u989d\uff09 is the cent.</p> <p>(I) Suppose that the available coins are quarters (25 cents), dimes (10 cents), nickels (5 cents), and pennies (1 cent). The greedy algorithm always yields an optimal solution.</p> <p>(II) Suppose that the available coins are in the denominations that are powers of c, that is, the denominations are \\(c^0\\), \\(c^1\\), ..., \\(c^k\\) for some integers \\(c&gt;1\\) and \\(k\\geq1\\). The greedy algorithm always yields an optimal solution.</p> <p>(III) Given any set of k different coin denominations which includes a penny (1 cent) so that there is a solution for every value of n, greedy algorithm always yields an optimal solution.</p> <p>Which of the them are correct?</p> Answer <p>\u53ea\u6709 III \u9519</p> <ul> <li>\u5173\u952e\u95ee\u9898\u662f\uff0c\u5982\u679c\u5269\u4f59\u7684\u7a7a\u7f3a\u521a\u597d\u80fd\u7528\u4e24\u4e2a\u4e2d\u7b49\u9762\u503c\u586b\u4e0a\uff0c\u4f46\u5982\u679c\u653e\u4e86\u6700\u5927\u9762\u503c\uff0c\u53ef\u80fd\u8fd8\u9700\u8981\u653e\u5f88\u591a\u4e2a\u6700\u5c0f\u9762\u503c\uff0c\u8fdc\u8fdc\u8d85\u8fc7\u4e24\u4e2a\uff0c\u8fd9\u6837\u5c31\u4e0d\u662f\u6700\u4f18\u89e3\uff0c\u6240\u4ee5 III \u80af\u5b9a\u9519</li> <li>II \u662f \\(c\\) \u8fdb\u5236\u552f\u4e00\u8868\u793a\uff0c\u80af\u5b9a\u5bf9</li> <li>\u73b0\u5728\u8003\u8651\u89e3\u51b3\u8fd9\u4e2a\u5173\u952e\u95ee\u9898\uff0c\u5047\u8bbe\u9762\u503c\u9012\u589e\u5e8f\u5217\u4e3a \\(w_{i}\\)\uff0c\u6ee1\u8db3\u8d2a\u5fc3\u8981\u6c42\u7684\u9762\u503c\u6ee1\u8db3\u4ee5\u4e0b\u5176\u4e00<ul> <li>\\(w_{i+1}=k*w_{i}\\)\uff0c\u5373 \\(w_{i+1}\\) \u662f \\(w_i\\) \u7684\u6574\u6570\u500d</li> <li>\u82e5 \\(w_{i+1}\\) \u4e0d\u662f \\(w_i\\) \u6574\u6570\u500d\uff0c\u90a3\u4e48\u5b58\u5728\u4e00\u4e2a \\(k_{i}\\)\uff0c\u4f7f\u5f97 \\((k_{i}-1)w_{i}&lt;w_{i+1}\\)\uff0c\u4e14 \\(k_{i}w_{i}&gt;w_{i+1}\\)\uff1b\u82e5 \\(k_{i}w_{i}=w_{i+1}+k_{i-1}w_{i-1}+k_{i-1}w_{{i-2}}+\\dots+k_{0}w_{0}\\)\uff0c\u5fc5\u987b\u6ee1\u8db3 \\(k_{i}\\geq 1+k_{i-1}+k_{i-2}+\\dots+k_{0}\\)</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#612-fill-or-not-to-fill-fold","title":"6.1.2 Fill or Not to Fill %% fold %%","text":"Question <p>With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on the way from time to time. Different gas station may give different price. You are asked to carefully design the cheapest route to go.</p> <p>Input Specification:</p> <p>Each input file contains one test case. For each case, the first line contains 4 positive numbers: \\(C_{max}\\)\u200b (\u2264 100), the maximum capacity of the tank; \\(D\\) (\u226430000), the distance between Hangzhou and the destination city; \\(D_{avg}\\)\u200b (\u226420), the average distance per unit gas that the car can run; and \\(N\\) (\u2264 500), the total number of gas stations. Then \\(N\\) lines follow, each contains a pair of non-negative numbers: \\(P_{i}\\)\u200b, the unit gas price, and \\(D_i\\)\u200b (\u2264\\(D\\)), the distance between this station and Hangzhou, for \\(i=1,\\dots,N\\). All the numbers in a line are separated by a space.</p> <p>Output Specification:</p> <p>For each test case, print the cheapest price in a line, accurate up to 2 decimal places. It is assumed that the tank is empty at the beginning. If it is impossible to reach the destination, print <code>The maximum travel distance = X</code> where <code>X</code> is the maximum possible distance the car can run, accurate up to 2 decimal places.</p> <p>Sample Input 1:</p> <pre><code>50 1300 12 8\n6.00 1250\n7.00 600\n7.00 150\n7.10 0\n7.20 200\n7.50 400\n7.30 1000\n6.85 300\n</code></pre> <p>Sample Output 1:</p> <pre><code>749.17\n</code></pre> <p>Sample Input 2:</p> <pre><code>50 1300 12 2\n7.10 0\n7.00 600\n</code></pre> <p>Sample Output 2:</p> <pre><code>The maximum travel distance = 1200.00\n</code></pre> Pseudocode<pre><code>assign the destination to be station N with price 0.0\n\nif is not at the 1st station:\n    print maximum dist = 0.0\n    exit\n\nwhile i &lt; N:\n    // assume now at station i\n    if there is not station accessible in the next run:\n        maximum dist = current dist + max run\n        print maximum dist\n        exit\n    else:\n        int next\n        for station j in accessible stations:\n            if station j is the cheapest among accessible stations:\n                next = j\n            if station j is cheaper than station i:\n                break\n\n        if next is cheaper than i:\n            try to get just enough fuel to go to next\n            i = next\n        else:\n            fill the tank\n            i = next\n\nif i == N:\n    print total cost\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#62-ex9","title":"6.2 Ex9","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#621-vertex-cover-problem","title":"6.2.1 Vertex Cover Problem","text":"<p>To solve the vertex cover problem, there is a greedy algorithm that collects the vertex with the highest degree (i.e., the one covering the largest number of edges) and remove it from the graph at each stage. This greedy algorithm achieves an approximation ratio of 2. (T/F)</p> Answer <p>F \u9876\u70b9\u8986\u76d6\u95ee\u9898\u662f\u4ece \\(G\\) \u4e2d\u53d6\u5c3d\u91cf\u5c11\u7684\u9876\u70b9\u7ec4\u6210\u96c6\u5408 \\(C\\)\uff0c\u4f7f\u5f97\u6bcf\u4e00\u6761\u8fb9\u90fd\u548c \\(C\\) \u4e2d\u81f3\u5c11\u4e00\u4e2a\u9876\u70b9\u76f8\u8fde\uff1b\u8fd9\u662f\u4e00\u4e2a NP-C \u95ee\u9898\u3002 \u4e00\u79cd\u8fd1\u4f3c\u7b97\u6cd5\u5982\u4e0b\uff1a <pre><code>C = null\nE = G.E\nwhile E != null:\n    let (u, v) be an arbitraty edge of E\n    C = C union {u, v}\n    remove from E edge (u, v) and every edge incident on either u or v\nreturn C\n</code></pre> \u5982\u679c\u4f7f\u7528\u9898\u76ee\u7684\u7b97\u6cd5\uff08\u542f\u53d1\u5f0f\u7b97\u6cd5\uff09\uff0c\u5176\u89e3\u7684\u8fd1\u4f3c\u6bd4\u662f\u5927\u4e8e 2 \u7684\uff0c\u53ef\u4ee5\u4e3e\u51fa\u8fd9\u6837\u4e00\u4e2a\u4f8b\u5b50 <sup>1</sup>\uff1a  \u6b64\u65f6\uff0c\u6700\u4f18\u89e3\u662f\u5de6\u8fb9\u7684 5 \u4e2a\u9876\u70b9\uff0c\u4f46\u662f\u7b97\u6cd5\u4f1a\u627e\u5230\u53f3\u8fb9\u7684\u6240\u6709 11 \u4e2a\u9876\u70b9\uff0c\u4e8e\u662f\u8fd1\u4f3c\u6bd4 \\(\\geq 11/5\\)</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#622-binary-tree-and-prefix-code","title":"6.2.2 Binary Tree and Prefix Code","text":"<p>A binary tree that is not full cannot correspond to an optimal prefix code. (T/F)</p> Answer <p>T \u6ce8\u610f\u533a\u5206 full \u548c complete \u7684\u6982\u5ff5\uff0c\u6ee1\u6811\u6ca1\u6709\u4e00\u5ea6\u8282\u70b9</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#623-room-scheduling","title":"6.2.3 Room Scheduling","text":"<p>In Activity Selection Problem, we are given a set of activities \\(S=\\{a_1 \u200b,a_2\u200b, \\dots, a_{n}\\}\\) that wish to use a resource (e.g. a room). Each \\(a_{i}\u200b\\) takes place during a time interval \\([si\u200b,fi\u200b)\\).</p> <p>Let us consider the following problem: given the set of activities \\(S\\), we must schedule them all using the minimum number of rooms.</p> <p>Greedy1: Use the optimal algorithm for the Activity Selection Problem to find the max number of activities that can be scheduled in one room. Delete and repeat on the rest, until no activities left.</p> <p>Greedy2:</p> <ul> <li>Sort activities by start time. Open room \\(1\\) for\u00a0\\(a_1\\)\u200b.</li> <li>for\u00a0\\(i=2\\)\u00a0to\u00a0\\(n\\)     if\u00a0\\(a_i\\)\u200b\u00a0can fit in any open room, schedule it in that room;     otherwise open a new room for\u00a0\\(a_i\\)\u200b.</li> </ul> <p>Are they optimal methods?</p> Answer <p>Greedy1 is not, while Greedy2 is</p> <p>\u5bf9\u4e8e Greedy1\uff0c\u53ef\u4ee5\u4e3e\u51fa\u4e00\u4e2a\u53cd\u4f8b\uff0c\u5982 <code>(1,4),(2,5),(6,7),(4,8)</code> <sup>2</sup></p> <p>\u5bf9\u4e8eGreedy2\uff0c\u5148\u7ed9\u51fa\u4e00\u4e2a\u6700\u4f18\u89e3\uff1a\u5173\u952e\u5728\u4e8e\u6700\u5927\u5316\u5229\u7528\u5df2\u7ecf\u5b89\u6392\u4e86\u6d3b\u52a8\u7684\u6559\u5ba4\uff0c\u6240\u4ee5\u4e0d\u80fd\u968f\u610f\u5b89\u6392\u8fdb\u80fd\u7528\u7684\u6559\u5ba4\uff1b\u8981\u5bf9\u5df2\u7ecf\u5b89\u6392\u4e86\u6d3b\u52a8\u7684\u6559\u5ba4\u7684\u4e0b\u4e00\u4e2a\u91ca\u653e\u65f6\u95f4\u653e\u5230 minHeap \u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6d3b\u52a8\uff0c\u5148\u4e0e\u8fd9\u4e2a\u6700\u65e9\u7684\u91ca\u653e\u65f6\u95f4\u6bd4\u8f83\uff0c\u5982\u679c\u5927\u4e8e\u5219\u5b89\u6392\u5230\u90a3\u4e2a\u6559\u5ba4\u5e76\u91cd\u65b0\u63d2\u5165\u5806\uff1b\u5982\u679c\u5c0f\u4e8e\u5219\u5fc5\u987b\u5f00\u8f9f\u65b0\u7684\u6559\u5ba4\uff0c\u4f2a\u4ee3\u7801\u5982\u4e0b <sup>2</sup>\uff1a</p> <pre><code>sort activities by starting time in ascending order\nH = null  // minHeap of room release time \ncreate room for course[0], calculate release time, insert to H\n\nfor activity 1 to N:\n    if activity.start &gt; H.top:\n        room = H.pop\n        assign activity to room\n        recalculate release time insert room to H\n    else:\n        create a new room, assign activity, calculate release time, insert to H\n</code></pre> <p>\u53ef\u4ee5\u53d1\u73b0\uff0cGreedy2 \u548c\u4e0a\u8ff0\u6700\u4f18\u89e3\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u5982\u679c\u5230\u8fd9\u4e2a\u6d3b\u52a8\u5f00\u59cb\u7684\u65f6\u5019\u6709\u5f88\u591a\u623f\u95f4\u90fd\u7a7a\u4e86\uff0c\u4ece\u8fd9\u4e2a\u65f6\u95f4\u70b9\u4e4b\u540e\u8fd9\u4e9b\u623f\u95f4\u5982\u4f55\u5b89\u6392\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u53ef\u4ee5\u76f8\u4e92\u4ea4\u6362\uff0c\u968f\u673a\u5b89\u6392\u4e5f\u662f\u6700\u4f18\u89e3</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#63-q10","title":"6.3 Q10","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2009%20Greedy%20Algorithm.html#631-proof-of-greedy-algo","title":"6.3.1 Proof of greedy algo","text":"<p>To prove the correctness of a greedy algorithm, we must prove that an optimal solution to the original problem always makes the greedy choice, so that the greedy choice is always safe.</p> Answer <p>F\uff0c\u8bc1\u660e\u7684\u8981\u70b9\u6709\u5f88\u591a</p> <ol> <li> <p>\u4f18\u5316\u95ee\u9898\u80fd\u591f\u7ecf\u8fc7 choice \u53d8\u6210\u5b50\u95ee\u9898 Cast the optimization problem as one in which we make a choice and are left with one subproblem to solve.</p> </li> <li> <p>\u8bc1\u660e\u4e00\u5b9a\u5b58\u5728\u67d0\u79cd\u6700\u4f18\u89e3\uff0c\u80fd\u901a\u8fc7\u67d0\u79cd\u8d2a\u5fc3\u8fc7\u7a0b\u5f97\u5230 Prove that there is always an optimal solution to the original problem that makes the greedy choice, so that the greedy choice is always safe.</p> </li> <li> <p>\u8bc1\u660e\u6700\u4f18\u5b50\u7ed3\u6784 Demonstrate optimal substructure by showing that, having make the greedy choice, what remains is a subproblem with the property that if we combine an optimal solution to the subproblem with the greedy choice we have made, we arrive at an optimal solution to the original problem.</p> </li> </ol> <ol> <li> <p>\u6765\u81ea \u7b97\u6cd5\u5bfc\u8bba\uff08\u7b2c\u56db\u7248\uff09\u7b2c\u4e09\u5341\u4e94\u7ae0\uff1a\u8fd1\u4f3c\u7b97\u6cd5\u3000\u7b2c\u4e00\u8282\uff1a\u9876\u70b9\u8986\u76d6\u95ee\u9898 - \u77e5\u4e4e \u21a9</p> </li> <li> <p>\u53c2\u8003 \u7b97\u6cd5\u5bfc\u8bba16\u7ae0\u8d2a\u5fc3\u7b97\u6cd5\u4e60\u9898\u6d3b\u52a8\u6559\u5ba4\u5206\u914d\u95ee\u9898\uff08\u533a\u95f4\u56fe\u7740\u8272\u95ee\u9898\uff09\u5206\u6790\u8be6\u89e3\u4e0e\u4ee3\u7801\u5b9e\u73b0-CSDN\u535a\u5ba2 \u21a9\u21a9</p> </li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html","title":"10 NP-Completeness","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#1-intro","title":"1 Intro","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#11-recall-fds","title":"1.1 Recall: FDS","text":"<ul> <li>\u6b27\u62c9\u56de\u8def\u95ee\u9898</li> <li>\u54c8\u5bc6\u987f\u56de\u8def\u95ee\u9898</li> <li>\u5355\u6e90\u65e0\u6743\u6700\u77ed\u8def\u95ee\u9898</li> <li>\u5355\u6e90\u65e0\u6743\u6700\u957f\u8def\u95ee\u9898</li> </ul> <p>\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a\u6bd4\u8f83\u5bb9\u6613\u89e3\u51b3\uff0c\u4f46\u662f\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u56db\u4e2a\u6ca1\u6709\u5df2\u77e5\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#12-formalization","title":"1.2 Formalization","text":"<p>Target</p> <p>\u8ba9\u4e0d\u540c\u95ee\u9898\u7684\u590d\u6742\u5ea6\u6709\u4e00\u4e2a\u7edf\u4e00\u7684\u8861\u91cf\u6807\u51c6</p> <ul> <li>inputs: binary \u5c06\u6240\u6709\u7c7b\u578b\u7684\u8f93\u5165\u90fd\u7edf\u4e00\u6210\u6bd4\u7279\u4e32\uff0c\u6709\u5229\u4e8e\u7edf\u4e00\u65f6\u95f4\u590d\u6742\u5ea6\u8868\u8fbe\u548c\u6bd4\u8f83</li> <li>algo: Turing Machine</li> <li>outputs: True/False \u6240\u6709\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u8f6c\u6362\u6210\u4e00\u8fde\u4e32\u7684\u5224\u5b9a\u95ee\u9898</li> </ul> <p>Note</p> <p>\u6700\u7b80\u5355\u7684\u95ee\u9898\u53ef\u4ee5\u662f \\(O(N)\\) \u7684\uff0c\u56e0\u4e3a\u81f3\u5c11\u4e5f\u9700\u8981\u8bfb\u5165 input \u6700\u590d\u6742\u7684\u95ee\u9898\u662f\u4e0d\u53ef\u5224\u5b9a\u95ee\u9898 (undecidable problem)\uff0c\u65e0\u6cd5\u7528\u6e10\u8fdb\u7b26\u53f7\u63cf\u8ff0</p> <p>Undecidable Problem: Halting Problem</p> <pre><code>def g():\n    if halts(g):\n        loop_forever()          \n</code></pre> <ul> <li>\u5982\u679c <code>halts()</code> \u5224\u5b9a <code>g()</code> \u4f1a\u505c\u673a\uff0c\u90a3\u4e48 <code>g()</code> \u8fdb\u5165\u6b7b\u5faa\u73af</li> <li>\u5982\u679c <code>halts()</code> \u5224\u5b9a <code>g()</code> \u4e0d\u4f1a\u505c\u673a\uff0c\u90a3\u4e48 <code>g()</code> \u8fd4\u56de</li> <li>\u8fd9\u6837\u5c31\u6784\u9020\u4e86\u4e00\u7ec4\u77db\u76fe\uff0c\u6240\u4ee5\u505c\u673a\u95ee\u9898\u662f\u4e0d\u53ef\u5224\u5b9a\u7684</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#2-np-p-np-h-np-c","title":"2 NP, P, NP-H, NP-C","text":"\u7b80\u79f0 \u5168\u79f0 \u7ffb\u8bd1 \u542b\u4e49 P Polynomial-time \u591a\u9879\u5f0f\u65f6\u95f4 \u80fd\u591f\u5728\u591a\u9879\u5f0f\u65f6\u95f4 SOLVE \u7684\u95ee\u9898 NP Nondeterministic Polynomial-time \u975e\u786e\u5b9a\u6027\u591a\u9879\u5f0f\u65f6\u95f4 \u80fd\u591f\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185 VERIFY \u7684\u95ee\u9898 NP-C NP-Complete NP \u5b8c\u5168\u95ee\u9898 \u6700\u96be\u7684\u4e00\u7c7b NP \u95ee\u9898\u4efb\u4f55 NP \u95ee\u9898\u90fd\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5f52\u7ea6\u5230 NP-C\\(\\forall L \\in\\text{NP}, L\\leq_{p}L' \\in\\text{NP-C}\\) NP-H NP-Hard NP \u56f0\u96be\u95ee\u9898 \u5982\u679c\u4e00\u4e2a NP \u95ee\u9898 \\(A\\) \u80fd\u591f\u88ab\u5f52\u7ea6\u5230\u95ee\u9898 \\(B\\)\uff0c\u90a3\u4e48 \\(B\\) \u6bd4 \\(A\\) \u66f4\u96be\u4e14 \\(B\\) \u662f NP-H \u95ee\u9898 Undecidable \u4e0d\u53ef\u5224\u5b9a\u95ee\u9898 \u4e0d\u5b58\u5728\u6709\u9650\u65f6\u95f4\u7b97\u6cd5\u7684\u95ee\u9898\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e0a\u8ff0 complexity class"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#21-turing-machine","title":"2.1 Turing Machine","text":"<ul> <li>Infinite Memory</li> <li>\u968f\u673a\u8bfb\u5199\u7684 Scanner</li> <li> <p>\u63a7\u5236 Scanner \u79fb\u52a8\u548c\u8bfb\u5199\u884c\u4e3a\u7684 Rules</p> </li> <li> <p>Deterministic Turing Machine: \u6bcf\u4e00\u6b65\u7684\u64cd\u4f5c\u90fd\u7531\u5f53\u524d\u7684\u6307\u4ee4\u552f\u4e00\u786e\u5b9a</p> </li> <li>Deterministic Turing Machine: \u6bcf\u4e00\u6b65\u7684\u64cd\u4f5c\u53ef\u4ee5\u4ece finite set \u4e2d\u9009\u62e9\uff0c\u603b\u662f\u9009\u62e9\u80fd\u5f97\u5230\u89e3\u7684\u64cd\u4f5c\uff0clucky machine</li> </ul> <p>Attention</p> <p>Solvable \u4e0d\u4e00\u5b9a\u610f\u5473\u7740 decidable</p> #Algorithm/Problem/Post-Correspondence-Problem <p>\u4e00\u4e2a\u6709\u8da3\u7684 solvable yet undecidable \u95ee\u9898 Post correspondence problem - Wikipedia\uff0c\u901a\u8fc7\u5c06\u95ee\u9898\u89c4\u7ea6\u6210 Turing Machine \u6765\u8bc1\u660e\u4e0d\u53ef\u5224\u5b9a</p> <p>\u548c\u505c\u673a\u95ee\u9898\u4e00\u6837\uff0cPCP \u662f\u4e00\u4e2a undecidable \u95ee\u9898\u3002</p> <p>\u6709\u4e00\u4e9b dominos\uff0ctop \u548c bottom \u6709\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a domino \u53ef\u4ee5\u4f7f\u7528\u591a\u6b21\u3002</p> <p></p> <p>\u627e\u5230\u4e00\u79cd\u6392\u5217\u65b9\u5f0f\uff0c\u4f7f\u5f97 top string \u548c bottom string \u5b8c\u5168\u76f8\u540c\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#solvability","title":"Solvability","text":"<ul> <li>\u627e\u5230\u4e00\u4e2a top bottom \u7b2c\u4e00\u4e2a\u5b57\u6bcd\u4e00\u6837\u7684 domino</li> <li>\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5982\u679c\u67d0\u4e2a\u90e8\u5206\u89e3 top bottom \u4e0d\u7b49\u957f\uff0c\u627e\u7f3a\u5931\u7684\u5b57\u6bcd\uff1b\u5982\u679c\u90e8\u5206\u89e3\u5df2\u7ecf\u5bf9\u9f50\uff0c\u5c31\u5f97\u5230\u4e86\u7b54\u6848</li> </ul> <p>\u4f46\u662f\u53ef\u4ee5\u627e\u5230\u8fd9\u6837\u7684\u4f8b\u5b50\uff1a</p> <p> \u5176\u4e2d\uff0c\u5982\u679c\u4e00\u76f4\u5c1d\u8bd5\u914d\u5bf9\uff0c\u5c06\u4e00\u76f4\u653e 3 \u53f7 domino \u800c\u4e0d\u4f1a\u505c\u6b62</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#undecidability","title":"Undecidability","text":"<p>\u5982\u679c\u80fd\u5c06\u4e00\u4e2a undecidable problem \u89c4\u7ea6\u5230 PCP\uff0c\u90a3\u4e48 PCP \u80af\u5b9a\u4e5f\u662f undecidable \u7684 Undecidability of the Post Correspondence Problem \u4ecb\u7ecd\u4e86\u5982\u4f55\u5c06 Acceptance Problem of a Turing Machine (\u547d\u9898\u63a5\u53d7\u95ee\u9898\uff0cundecidable) \u89c4\u7ea6\u5230 PCP \u6765\u5b8c\u6210\u8bc1\u660e</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#22-np-nondeterministic-polynomial-time","title":"2.2 NP: Nondeterministic Polynomial-time","text":"<ul> <li>\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\u4efb\u4f55\u89e3\u662f\u5426\u6b63\u786e\u7684\u95ee\u9898</li> <li>e.g. #Algorithm/Problem/Hamiltonian-Cycle</li> </ul> <p>Attention</p> <p>\u4e0d\u662f\u6240\u6709 decicable problem \u90fd\u662f NP \u95ee\u9898 \u4f8b\u5982\u5224\u5b9a\u4e00\u4e2a\u56fe\u662f\u5426\u6709 Hamiltonian cycle\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\uff1b\u4f46\u662f\u8981 verify \u5c31\u5fc5\u987b\u627e\u51fa\u4e00\u4e2a Hamilton cycle\uff0c\u6ca1\u6709\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\u80fd\u505a\u5230</p> <p>\u4f46\u662f NP \u95ee\u9898\u5168\u90fd\u662f decidable \u7684</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#23-reduction","title":"2.3 Reduction","text":"<p>\\(A\\) \u7c7b\u95ee\u9898\u7684\u4e00\u4e2a\u5b9e\u4f8b\u662f \\(\\alpha\\)\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u7a0b\u5e8f\u80fd\u591f\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5b8c\u6210 \\(R(\\alpha)\\to \\beta \\in\\text{Problem }B\\)\uff0c\u4e5f\u5c31\u662f\u5c06\u5f85\u89e3\u51b3\u7684 \\(\\alpha\\) \u8f6c\u6362\u6210\u4e86 \\(B\\) \u7c7b\u95ee\u9898\u7684\u5b9e\u4f8b \\(\\beta\\)\uff0c\u4e14\u5bf9\u4e8e \\(\\beta\\) \u7684\u89e3\u7b49\u4ef7\u4e8e\u5bf9\u4e8e \\(\\alpha\\) \u7684\u89e3\uff0c\u90a3\u4e48\u5c31\u5b8c\u6210\u4e86\u4e00\u6b21\u4ece \\(A\\) \u5230 \\(B\\) \u7684\u89c4\u7ea6\uff0c\u8bb0\u4f5c \\(A\\leq_{p}B\\)\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#24-np-h-np-hard","title":"2.4 NP-H: NP-Hard","text":"<ul> <li>\u5982\u679c\u4e00\u4e2a\u95ee\u9898\u5177\u6709\u8fd9\u6837\u7684\u6027\u8d28\uff1a\u6240\u6709\u7684 NP \u95ee\u9898\u90fd\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5f52\u7ea6\u5230\u5b83\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c31\u662f\u4e00\u4e2a NP-H \u95ee\u9898</li> <li>NP-H \u95ee\u9898\u4e0d\u4e00\u5b9a\u662f\u4e00\u4e2a NP \u95ee\u9898\uff0c\u5b83\u53ef\u80fd\u662f\u65e0\u6cd5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5f97\u5230\u9a8c\u8bc1\u7684<ul> <li>\u4f8b\u5982 Halting Problem\u3001\u4f18\u5316\u7248\u672c\u7684 TSP \u95ee\u9898\uff08\u627e\u5230\u4e00\u6761\u6700\u77ed\u8def\u800c\u4e0d\u662f\u7ed9\u51fa\u4e00\u6761\u957f\u5ea6 \\(\\leq K\\) \u7684\u54c8\u5bc6\u987f\u73af\uff09</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#25-np-c-np-complete","title":"2.5 NP-C: NP-Complete","text":"<ul> <li>\\(\\text{NP-C}=\\text{NP}\\cap\\text{NP-H}\\)</li> <li>NPC \u95ee\u9898\u7ee7\u627f\u4e86 NP-H \u95ee\u9898\u7684\u6027\u8d28\uff1a\u6240\u6709\u7684 NP \u95ee\u9898\u90fd\u80fd\u591f\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5f52\u7ea6\u5230\u5b83   \\(\\forall L \\in\\text{NP}, L\\leq_{p}L' \\in\\text{NP-C}\\)</li> <li>NPC \u95ee\u9898\u662f NP \u4e2d\u6700\u96be\u7684\u95ee\u9898\uff0c\u5982\u679c\u67d0\u4e2a NPC \u95ee\u9898\u80fd\u591f\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u6c42\u89e3\uff08\\(\\text{P}=\\text{NP}\\)\uff09\uff0c\u5219\u6240\u6709 NP \u95ee\u9898\u90fd\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u6c42\u89e3</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#251-complexity-graph","title":"2.5.1 Complexity Graph","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#252-example-hamiltonian-cycle-leq_p-tsp","title":"2.5.2 Example: Hamiltonian Cycle \\(\\leq_{p}\\) TSP","text":"<ul> <li>TSP: \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6709\u6743\u5b8c\u5168\u56fe\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u54c8\u5bc6\u987f\u73af\uff0c\u4f7f\u5f97\u5176\u603b\u6743\u91cd \\(\\leq K\\)</li> <li>\u53ea\u9700\u8981\u5c06 Hamiltonian Cycle \u95ee\u9898\u4e2d\u5b58\u5728\u7684\u8fb9\u8d4b\u4e3a 1\uff0c\u4e0d\u5b58\u5728\u7684\u8fb9\u8d4b\u4e3a 2\uff0c\u7136\u540e\u95ee \\(K=|V|\\) \u7684 TSP \u5c31\u597d</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#253-np-c-problems","title":"2.5.3 NP-C Problems","text":"<ul> <li>\u7b2c\u4e00\u4e2a\u88ab\u8bc1\u660e\u662f NP-C \u7684\u95ee\u9898\u662f Circuit-SAT \u95ee\u9898\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\uff0c\u95ee\u662f\u5426\u5b58\u5728\u4e00\u79cd\u8d4b\u503c\u65b9\u5f0f\u80fd\u591f\u4f7f\u5f97\u8868\u8fbe\u5f0f\u4e3a\u771f</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#3-formal-language","title":"3 Formal Language","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#31-abstract-problem","title":"3.1 Abstract Problem","text":"<p>\u5f62\u5f0f\u8bed\u8a00\u4e2d\uff0c\u5c06\u95ee\u9898\u5206\u4e3a Abstract Problem \u548c Concrete Problem\uff0c\u5206\u522b\u662f\u62bd\u8c61\u95ee\u9898\u548c\u5177\u4f53\u95ee\u9898 - \u62bd\u8c61\u95ee\u9898 \\(Q\\) \u662f\u95ee\u9898\u5b9e\u4f8b\u96c6\u5408 \\(I\\) \u548c\u95ee\u9898\u89e3\u96c6\u5408 \\(S\\) \u7684\u4e8c\u5143\u5bf9\u5e94\u5173\u7cfb - \u5177\u4f53\u95ee\u9898\u662f\u5bf9\u62bd\u8c61\u95ee\u9898\u7684\u4e00\u79cd\u7f16\u7801\uff0c\u5c06 \\(I\\) \u6620\u5c04\u5230\u4e00\u4e2a bitstring \u4e0a\uff0c\\(Q\\) \u5c31\u53d8\u6210\u4e86\u5177\u4f53\u95ee\u9898</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#311-examples","title":"3.1.1 Examples","text":"<ul> <li>\\(\\text{SHORTEST-PATH}\\)<ul> <li>\\(I=\\{&lt;G,u,v&gt;:G=(V,E)\\text{ is an undirected graph; }u,v\\in V\\}\\)</li> <li>\\(S=\\{&lt;u, w_{1},w_{2},\\dots,w_{k},v&gt;:&lt;u,w_{1}&gt;,\\dots,&lt;w_{k},v&gt;\\,\\in E\\}\\)</li> <li>\\(\\forall i\\in I,\\text{SHORTEST-PATH(i)}=s\\in S\\)</li> </ul> </li> <li>\\(\\text{PATH}\\) \u5224\u5b9a\u7248\u672c<ul> <li>\\(I=\\{&lt;G,u,v,k&gt;:G=(V,E)\\text{ is an undirected graph; }u,v\\in V\\text{; }k\\in N\\}\\)</li> <li>\\(S=\\{0,1\\}\\)</li> <li>\\(\\forall i\\in I,\\text{PATH(i)}=1\\text{ or }0\\)</li> </ul> </li> <li>Encoding<ul> <li>Map \\(I\\) into a binary string \\(\\{0,1\\}^*\\)\uff0c\u5219 \\(Q\\) \u662f\u4e00\u4e2a\u5177\u4f53\u95ee\u9898</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#32-formal-language-theory-for-decision-problem","title":"3.2 Formal-language Theory -for decision problem","text":"<p>\u4f7f\u7528\u5f62\u5f0f\u8bed\u8a00\u6765\u7edf\u4e00\u63cf\u8ff0</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#321-\u7b26\u53f7\u8868\u793a","title":"3.2.1 \u7b26\u53f7\u8868\u793a","text":"<ul> <li>\u5b57\u6bcd\u8868 \\(\\Sigma\\) \u662f\u4e00\u4e2a\u6709\u9650\u7b26\u53f7\u96c6 e.g. \\(\\{0,1\\}\\)</li> <li>\u8bed\u8a00 \\(L\\) \u8868\u793a\u7531 \\(\\Sigma\\) \u4e2d\u7684\u5b57\u7b26\u6784\u6210\u7684\u5b57\u7b26\u4e32\u7684\u96c6\u5408</li> <li>\u7a7a\u5b57\u7b26\u4e32\u4e3a \\(\\epsilon\\)\uff0c\u7a7a\u8bed\u8a00\u4e3a \\(\\emptyset\\)</li> <li>\u5305\u542b\u6240\u6709\u4ece \\(\\Sigma\\) \u5f97\u5230\u7684\u5b57\u7b26\u4e32\u7684\u8bed\u8a00\u8bb0\u4e3a \\(\\Sigma^*\\)</li> <li>\\(L\\) \u7684\u8865\u8bb0\u4e3a \\(\\bar{L}=\\Sigma^*-L\\)</li> <li>\u4e24\u79cd\u8bed\u8a00\u7684\u62fc\u63a5 (concatation) \u8bb0\u4e3a \\(L=\\{x_{1}x_{2}:x_{1}x_{2}:x_{1}\\in L_{1}\\land x_{2}\\in L_{2}\\}\\)</li> <li>\\(L\\) \u7684\u514b\u83b1\u5c3c\u95ed\u5305 (Kleene closure) \u4e3a \\(L^*=\\{\\epsilon\\}\\cup L\\cup L^2\\cup L^3\\cup\\dots\\)</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#322-\u5224\u5b9a\u95ee\u9898","title":"3.2.2 \u5224\u5b9a\u95ee\u9898","text":"<ul> <li>\u63a5\u53d7\u548c\u62d2\u7edd\uff1a\u5982\u679c \\(A(x)=1\\) \u5219\u7b97\u6cd5 \\(A\\) \u63a5\u53d7 (accept) bitstring \\(x\\in\\{0,1\\}^*\\)\uff1b\u5982\u679c \\(A(x)=0\\)\uff0c\u7b97\u6cd5 \\(A\\) \u62d2\u7edd (reject) \u4e86 bitstring \\(x\\)</li> <li>\u5224\u5b9a\uff1a\u5982\u679c \\(L\\) \u7684\u6bcf\u4e00\u4e2a bitstring \\(x\\) \u90fd\u80fd\u591f\u88ab \\(A\\) \u63a5\u53d7\u6216\u62d2\u7edd\uff0c\u90a3\u4e48\u79f0 \\(L\\) \u80fd\u591f\u88ab\u7b97\u6cd5 \\(A\\) \u5224\u5b9a</li> </ul> <p>P \u7c7b\u95ee\u9898\u7684\u63cf\u8ff0</p> <p>\\(\\text{P}=\\{L\\subseteq\\{0,1\\}^*: \\text{there exists an algorithm }A\\text{ that decides }L\\text{ in polynomial time}\\}\\) \u6240\u6709\u5b58\u5728\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5f97\u5230\u5224\u5b9a\u7684\u7b97\u6cd5\u7684\u8bed\u8a00</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#323-\u9a8c\u8bc1\u7b97\u6cd5-verification-algorithm","title":"3.2.3 \u9a8c\u8bc1\u7b97\u6cd5 Verification Algorithm","text":"<p>\\(A(x,y)\\)\uff0c\u5176\u4e2d \\(x\\) \u662f\u8f93\u5165 bitstring\uff0c\\(y\\) \u662f\u8bc1\u4e66 (certificate)\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u53e6\u4e00\u4e2a bitstring</p> <ul> <li>\u5982\u679c\u5bf9\u4e8e \\(x\\)\uff0c\u5b58\u5728 \\(y\\) \u4f7f\u5f97 \\(A(x,y)=1\\) \u6210\u7acb\uff0c\u90a3\u4e48 \\(A\\) \u80fd\u591f\u9a8c\u8bc1 \\(x\\)</li> <li>\u5982\u679c\u5bf9\u4e8e\u6240\u6709 \\(L\\) \u4e2d\u7684 \\(x\\) \u90fd\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u90a3\u4e48 \\(A\\) \u80fd\u591f\u9a8c\u8bc1 \\(L\\)</li> </ul> <p>\\(L\\) \u4e3a NP \u95ee\u9898\u7684\u5145\u8981\u6761\u4ef6</p> <p>\u5b58\u5728\u4e00\u4e2a\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u53cc\u53c2\u6570\u9a8c\u8bc1\u7b97\u6cd5 \\(A\\) \u548c\u4e00\u4e2a\u5e38\u6570 \\(c\\)\uff0c\u4f7f\u5f97</p> <p>\\(L=\\{x\\in\\{0,1\\}^*:\\text{there exists a certificate }y\\text{ with }|y|=O(|x|^c)\\text{ such that }A(x,y)=1\\}\\)</p> <p>\u5176\u4e2d\u7684 \\(|y|=O(|x|^c)\\) \u53ea\u662f\u4e3a\u4e86\u8ba9\u89e3\u7684\u957f\u5ea6\u4e0d\u81f3\u4e8e\u76f4\u63a5\u5f71\u54cd\u65f6\u95f4\u590d\u6742\u5ea6</p> <p>\u8fd9\u6837\uff0c\u5c31\u80fd\u8bf4\u7b97\u6cd5 \\(A\\) \u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1 \\(L\\) \u7684\u89e3\u7684\u6b63\u786e\u6027</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#33-co-np","title":"3.3 co-NP","text":"<p>\u5982\u679c\u5df2\u77e5 \\(L\\in\\text{NP}\\)\uff0c\u90a3\u4e48 \\(\\bar{L}\\in\\text{NP}\\) \u662f\u5426\u6b63\u786e\uff1f</p> <p>co-NP definition: \u5982\u679c \\(\\bar{L}\\in\\text{NP}\\)\uff0c\u90a3\u4e48 \\(L\\in\\text{co-NP}\\)</p> <p></p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#34-reduction-function","title":"3.4 Reduction Function","text":"<ul> <li>\u5982\u679c\u5b58\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u53ef\u8ba1\u7b97\u7684\u51fd\u6570 \\(f:\\{0,1\\}^*\\to\\{0,1\\}^*\\) \u80fd\u591f\u5b9e\u73b0 \\(\\forall x\\in\\{0,1\\}^*, x\\in L_{1}\\Leftrightarrow f(x)\\in L_{2}\\)\uff0c\u90a3\u4e48 \\(L_{1}\\leq_{p}L_{2}\\)</li> <li>\u8fd9\u6837\u7684\u51fd\u6570 \\(f\\) \u79f0\u4e3a\u89c4\u7ea6\u51fd\u6570 (Reduction Function)</li> <li>\u80fd\u591f\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa \\(f\\) \u7684\u7b97\u6cd5 \\(F\\) \u79f0\u4e3a\u89c4\u7ea6\u7b97\u6cd5 (Reduction Algorithm)</li> </ul> <p>NP-C \u7684\u5f62\u5f0f\u8bed\u8a00\u63cf\u8ff0</p> <p>\\(L\\in\\text{NP}\\) \u4e14 \\(\\forall L'\\in\\text{NP},L'\\leq_{p}L\\)</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#35-example-\u8bc1\u660e-vertex-cover-problem-\u662f-np-c-\u95ee\u9898","title":"3.5 Example: \u8bc1\u660e Vertex Cover Problem \u662f NP-C \u95ee\u9898","text":"<p>\u5df2\u77e5 Clique Problem \u662f NP-C \u95ee\u9898\uff0c\u8bc1\u660e Vertex Cover Problem \u4e5f\u662f NP-C \u95ee\u9898\u3002 \u601d\u8def\u662f\u5c06 Clique \u5f52\u7ea6\u5230 Vertex Cover</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#351-\u62bd\u8c61\u95ee\u9898\u8868\u8ff0","title":"3.5.1 \u62bd\u8c61\u95ee\u9898\u8868\u8ff0","text":"<ul> <li>\\(\\text{CLIQUE}=\\{&lt;G,K&gt;:G\\text{ is a graph with a clique of size }K\\}\\) #Algorithm/Problem/Clique </li> <li>\\(\\text{VERTEX-COVER}=\\{&lt;G,K&gt;:G\\text{ has a vertex cover of size }K\\}\\) #Algorithm/Problem/Vertex-Cover </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#352-\u8bc1\u660e\u8fc7\u7a0b","title":"3.5.2 \u8bc1\u660e\u8fc7\u7a0b","text":"<ol> <li>\u8bc1\u660e \\(\\text{VERTEX-COVER}\\in\\text{NP}\\)<ul> <li>\u5bf9\u4e8e certificate \\(y\\)\uff0c\u68c0\u67e5\u4e00\u4e2a\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\u662f\u5426\u90fd\u88ab \\(y\\) \u4e2d\u7684\u9876\u70b9\u8986\u76d6</li> <li>\u904d\u5386\u6240\u6709\u8fb9\uff0c\u6bcf\u6b21\u68c0\u67e5\u4e24\u4e2a\u9876\u70b9\u4e2d\u662f\u5426\u6709\u4e00\u4e2a\u5728 \\(y\\) \u4e2d\uff0c\u6700\u5dee\u7684\u590d\u6742\u5ea6\u662f \\(O(|E||V|)=O(|V|^3)\\)</li> <li>\u6240\u4ee5 \\(\\text{VERTEX-COVER}\\) \u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\uff0c\u662f NP</li> </ul> </li> <li>\u8bc1\u660e \\(\\text{CLIQUE}\\leq_{p}\\text{VERTEX-COVER}\\)\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(K\\) \u7684\u56e2\u7684\u5145\u8981\u6761\u4ef6\u662f \\(\\bar{G}\\) \u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(|V|-K\\) \u7684\u9876\u70b9\u8986\u76d6<ul> <li>\u5145\u5206\uff1a\u53d6\u8865\u56fe\uff0c\u5219\u56e2\u5185\u7684\u9876\u70b9\u4e4b\u95f4\u6ca1\u6709\u8fb9\uff1b\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u603b\u6709\u4e00\u4e2a\u9876\u70b9\u662f\u56e2\u5916\u7684\u9876\u70b9\uff0c\u6240\u4ee5\u53d6\u5927\u5c0f\u4e3a \\(|V|-K\\) \u7684\u56e2\u5916\u6240\u6709\u9876\u70b9\uff0c\u4e00\u5b9a\u6784\u6210\u4e00\u4e2a\u9876\u70b9\u8986\u76d6</li> <li>\u5fc5\u8981\uff1a\u6ca1\u6709\u88ab\u9009\u62e9\u7684 \\(K\\) \u4e2a\u9876\u70b9\u4e4b\u95f4\u4e00\u5b9a\u6ca1\u6709\u8fb9\uff0c\u4e8e\u662f\u8865\u56fe\u4e2d\u80fd\u591f\u6784\u6210\u5927\u5c0f\u4e3a \\(K\\) \u7684\u56e2</li> </ul> </li> </ol> <p>Tip</p> <p>\u7531\u4e8e\u90fd\u662f\u5224\u5b9a\u95ee\u9898\uff0c\u53ea\u9700\u8981\u8bc1\u660e\u5b58\u5728\u6027\u5373\u53ef\uff0c\u5728\u5145\u5206\u6027\u8bc1\u660e\u4e2d\u4e0d\u9700\u8981\u53bb\u8ba8\u8bba \\(|V|-K\\) \u662f\u5426\u4e3a\u6700\u5c0f\u7684\u9876\u70b9\u8986\u76d6\uff0c\u5728\u5fc5\u8981\u6027\u8bc1\u660e\u4e2d\u4e0d\u9700\u8981\u53bb\u8ba8\u8bba \\(K\\) \u662f\u5426\u4e3a\u6700\u5927\u7684\u56e2</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#4-concousion-of-problems","title":"4 Concousion of Problems","text":"Problem Type Complexity Class Meaning Reduction Solvability Decidability Notes SAT Decision NP-C Satisfiability of Boolean formulas Reduced to/from other NP problems Solvable Decidable Basis of NP-completeness proofs Circuit-SAT Decision NP-C Satisfiability of Boolean circuits Reduced to/from SAT Solvable Decidable First NP-complete problem 3-CNF SAT Decision NP-C SAT for 3-CNF formulas Reduced to/from SAT Solvable Decidable Special case of SAT Clique Decision NP-C Existence of a k-clique in a graph Reduced to/from Vertex Cover Solvable Decidable Graph theory problem Subset Decision NP-C Subset sum equals a target Reduced to/from Knapsack Solvable Decidable Equivalent to special cases of Knapsack Vertex Cover Decision NP-C Covers all edges in a graph Reduced to/from Clique Solvable Decidable Dual problem to Clique Hamiltonian Cycle Decision NP-C Cycle visits all vertices exactly once Reduced to/from TSP Solvable Decidable Graph traversal problem TSP Decision NP-C Visits all cities with minimal cost Reduced to/from Hamiltonian Cycle Solvable Decidable Optimization problem Euler Cycle Decision P Cycle visits every edge exactly once Reduced to/from degree condition Solvable Decidable Can be solved in polynomial time Single-Source Longest Path Decision NP-H Longest path in a weighted DAG Reduced to/from other NP problems Solvable Decidable Hard for NP, no known poly-time solution Halting Problem Decision Undecidable Program halts on input or not Not reducible Unsolvable Undecidable Fundamental undecidable problem Knapsack Decision NP-C Subset with target weight/value Reduced to/from Subset Solvable Decidable Basis for many cryptographic systems Bin Packing Optimization NP-H Pack items into minimum bins Reduced to/from other NP problems Solvable Decidable Approximation algorithms available Domination Set Decision NP-C Minimum dominating set in a graph Reduced to/from Vertex Cover Solvable Decidable Graph theory problem Minimum Spanning Tree Optimization P Minimum weight spanning tree Reduced to/from Graph Connectivity Solvable Decidable Solvable in polynomial time Maximum Flow Optimization P Max flow in a flow network Reduced to/from Flow Conservation Solvable Decidable Solvable in polynomial time Bipartite Matching Optimization P Maximum matching in bipartite graph Reduced to/from Flow Problems Solvable Decidable Solvable using Ford-Fulkerson or similar K-Center Optimization NP-H Partition vertices into k clusters Reduced to/from Facility Location Solvable Decidable Common in clustering problems Graph Coloring Decision NP-C Assign colors to vertices Reduced to/from SAT Solvable Decidable Classic graph problem Set Cover Optimization NP-C Cover all elements with subsets Reduced to/from Vertex Cover Solvable Decidable Basis for many optimization problems Traveling Salesman Problem Optimization NP-C Shortest tour visiting all vertices Reduced to/from Hamiltonian Cycle Solvable Decidable Different variants include approximation Steiner Tree Optimization NP-H Minimum tree connecting specified nodes Reduced to/from MST Solvable Decidable Harder version of MST Partition Problem Decision NP-C Split set into equal sum subsets Reduced to/from Subset Sum Solvable Decidable Special case of Subset Sum Independent Set Decision NP-C Maximum independent vertex set Reduced to/from Vertex Cover Solvable Decidable Related to Clique and Vertex Cover Minimum Degree Spanning Tree Decision NP-C Load Balancing Problem Optimizatino NP-H"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#5-discussion","title":"5 Discussion","text":"<p>Question</p> <p>A knapsack with a capacity \\(M\\) is to be packed. Given \\(N\\) items. Each item \\(i\\) has a weight \\(w_i\\) and a profit \\(p_{i}\\)\u200b. An optimal packing is a feasible one with maximum profit.</p> <p>This problem is NP-hard.</p> <p>However, if no items have a size larger than \\(N^2\\), is it still NP-hard? Explain your answer.</p> <p>\u7ed9\u51fa\u4e00\u79cd dp \u7b97\u6cd5\uff0c\u904d\u5386\u6240\u6709\u7269\u54c1\uff0c\u904d\u5386\u6240\u6709 \\(w=1,2,3,\\dots,M\\)\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(NM)\\) \u6216 \\(O(N^2W_{max})\\)\u3002</p> <p>\u5982\u679c \\(\\forall w, w\\leq N^2\\)\uff0c\u90a3\u4e48 \\(W_{max}\\leq N^3\\)\uff0c\u6240\u4ee5\u53d8\u4e3a\u591a\u9879\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#6-questions","title":"6 Questions","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#61-midterm-review","title":"6.1 Midterm Review","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#611-np-completeness","title":"6.1.1 NP-Completeness","text":"<p>Given that problem A is NP-complete. If problem B is in NP and can be polynomially reduced to problem A, then problem B is NP-complete. (T/F)</p> Answer <p>F \u53ea\u80fd\u63a8\u5bfc\u51fa B is in NP\uff0cB \u4e0d\u4e00\u5b9a\u80fd\u7531\u5176\u4ed6\u6240\u6709 NP \u95ee\u9898\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5f52\u5316\u5f97\u5230</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#612-decidable-languages","title":"6.1.2 Decidable languages","text":"<p>All the languages can be decided by a non-deterministic machine. (T/F)</p> Answer <p>F\uff0c\u5b58\u5728\u4e0d\u53ef\u5224\u5b9a\u95ee\u9898</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#62-ex10","title":"6.2 Ex10","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#621-lanuage-reduction","title":"6.2.1 Lanuage Reduction","text":"<p>Which one of the following statements is FALSE?</p> <ul> <li>A. A language \\(L_1\\) is polynomial time transformable to \\(L_2\\) if there exists a polynomial time function \\(f\\) such that \\(w\\in L_1\\) if \\(f(w)\\in L_2\\)</li> <li>D. If language \\(L_{1}\u200b\\) has a polynomial reduction to language \\(L_2\\)\u200b, then the complement of \\(L_1\\)\u200b has a polynomial reduction to the complement of \\(L_2\\)\u200b.</li> </ul> Answer <p>A A \u4e0d\u662f if \u662f iff D \u5c06 \\(f\\) \u53d6\u53cd\uff0c\u5982\u679c \\(x\\not\\in L_{1}\\)\uff0c\u90a3\u4e48 \\(f(x)\\not\\in L_{2}\\)\uff1f</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#622-np-c-problems","title":"6.2.2 NP-C Problems?","text":"<p>Which one of the following statements is FALSE?</p> <ul> <li>A. SAT, Vertex Cover, Hamiltonian Cycle, Clique, Knapsack, Bin Packing, and Domination Set problems are all NP-completeness problems.</li> <li>B. If there is a polynomial time \\((1+\\frac{1}{2n})\\)-approximation algorithm for Vertex Cover with n being the total number of vertices in the graph, then P=NP.</li> <li>C. If there is a polynomial time 3/2-approximation algorithm for K-Center, then P=NP.</li> <li>D. Given a weighted directed acyclic graph (DAG) \\(G\\) and a source vertex \\(s\\) in \\(G\\), it is NP-hard to find the longest distances from s to all other vertices in \\(G\\)</li> </ul> Answer <p>\u8ba9\u6211\u4eec\u9010\u4e00\u5206\u6790\u6bcf\u4e2a\u9009\u9879\uff0c\u627e\u51fa\u5176\u4e2d\u7684 FALSE \u9648\u8ff0\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#\u9009\u9879-a","title":"\u9009\u9879 A","text":"<p>\u9648\u8ff0\uff1aSAT, Vertex Cover, Hamiltonian Cycle, Clique, Knapsack, Bin Packing, and Domination Set \u95ee\u9898\u90fd\u662f NP- \u5b8c\u5168\u95ee\u9898\u3002</p> <p>\u5206\u6790\uff1a</p> <ul> <li>SAT\uff08\u5e03\u5c14\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\uff09\u662f\u7b2c\u4e00\u4e2a\u88ab\u8bc1\u660e\u7684 NP- \u5b8c\u5168\u95ee\u9898\u3002</li> <li>Vertex Cover\uff08\u9876\u70b9\u8986\u76d6\u95ee\u9898\uff09\u3001Hamiltonian Cycle\uff08\u54c8\u5bc6\u987f\u56de\u8def\u95ee\u9898\uff09\u3001Clique\uff08\u56e2\u95ee\u9898\uff09\u3001Knapsack\uff08\u80cc\u5305\u95ee\u9898\uff09\u3001Bin Packing\uff08\u88c5\u7bb1\u95ee\u9898\uff09\u548c Domination Set\uff08\u652f\u914d\u96c6\u95ee\u9898\uff09\u90fd\u662f\u7ecf\u5178\u7684 NP- \u5b8c\u5168\u95ee\u9898\u3002</li> </ul> <p>\u7ed3\u8bba\uff1a\u8be5\u9648\u8ff0\u662f TRUE\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#\u9009\u9879-b","title":"\u9009\u9879 B","text":"<p>\u9648\u8ff0\uff1a\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u591a\u9879\u5f0f\u65f6\u95f4\u7684 \\((1+\\frac{1}{2n})\\)- \u8fd1\u4f3c\u7b97\u6cd5\uff08\u5176\u4e2d \\(n\\) \u662f\u56fe\u4e2d\u9876\u70b9\u7684\u603b\u6570\uff09\u6765\u89e3\u51b3 Vertex Cover \u95ee\u9898\uff0c\u5219 P=NP\u3002</p> <p>\u5206\u6790\uff1a</p> <ul> <li>Vertex Cover \u662f\u4e00\u4e2a NP- \u5b8c\u5168\u95ee\u9898\u3002</li> <li>\u5df2\u77e5 Vertex Cover \u7684\u8fd1\u4f3c\u7b97\u6cd5\u7684\u6700\u5c0f\u8fd1\u4f3c\u6bd4\u4e3a \\(2\\)\uff08\u5373 2- \u8fd1\u4f3c\u7b97\u6cd5\uff09\u3002</li> <li>\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u6bd4 \\(2\\) \u66f4\u4f18\u7684\u8fd1\u4f3c\u7b97\u6cd5\uff08\u4f8b\u5982 \\((1+\\frac{1}{2n})\\)- \u8fd1\u4f3c\u7b97\u6cd5\uff09\uff0c\u5219\u610f\u5473\u7740\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u7cbe\u786e\u89e3\u51b3 Vertex Cover \u95ee\u9898\uff0c\u4ece\u800c P=NP\u3002</li> </ul> <p>\u7ed3\u8bba\uff1a\u8be5\u9648\u8ff0\u662f TRUE\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#\u9009\u9879-c","title":"\u9009\u9879 C","text":"<p>\u9648\u8ff0\uff1a\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u591a\u9879\u5f0f\u65f6\u95f4\u7684 \\(3/2\\)- \u8fd1\u4f3c\u7b97\u6cd5\u6765\u89e3\u51b3 K-Center \u95ee\u9898\uff0c\u5219 P=NP\u3002</p> <p>\u5206\u6790\uff1a</p> <ul> <li>K-Center \u662f\u4e00\u4e2a NP- \u5b8c\u5168\u95ee\u9898\u3002</li> <li>\u5df2\u77e5 K-Center \u7684\u8fd1\u4f3c\u7b97\u6cd5\u7684\u6700\u5c0f\u8fd1\u4f3c\u6bd4\u4e3a \\(2\\)\uff08\u5373 2- \u8fd1\u4f3c\u7b97\u6cd5\uff09\u3002</li> <li>\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u6bd4 \\(2\\) \u66f4\u4f18\u7684\u8fd1\u4f3c\u7b97\u6cd5\uff08\u4f8b\u5982 \\(3/2\\)- \u8fd1\u4f3c\u7b97\u6cd5\uff09\uff0c\u5219\u610f\u5473\u7740\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u7cbe\u786e\u89e3\u51b3 K-Center \u95ee\u9898\uff0c\u4ece\u800c P=NP\u3002</li> </ul> <p>\u7ed3\u8bba\uff1a\u8be5\u9648\u8ff0\u662f TRUE\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#\u9009\u9879-d","title":"\u9009\u9879 D","text":"<p>\u9648\u8ff0\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u52a0\u6743\u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff09\\(G\\) \u548c\u4e00\u4e2a\u6e90\u9876\u70b9 \\(s\\)\uff0c\u627e\u5230\u4ece \\(s\\) \u5230\u6240\u6709\u5176\u4ed6\u9876\u70b9\u7684\u6700\u957f\u8ddd\u79bb\u662f NP- \u96be\u7684\u3002</p> <p>\u5206\u6790\uff1a</p> <ul> <li>\u5728 DAG \u4e2d\uff0c\u6700\u957f\u8def\u5f84\u95ee\u9898\uff08Longest Path Problem\uff09\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u3002</li> <li>\u5177\u4f53\u65b9\u6cd5\uff1a\u5bf9 DAG \u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u7136\u540e\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u8ba1\u7b97\u4ece \\(s\\) \u5230\u6bcf\u4e2a\u9876\u70b9\u7684\u6700\u957f\u8ddd\u79bb\u3002</li> <li>\u56e0\u6b64\uff0c\u8be5\u95ee\u9898\u4e0d\u662f NP- \u96be\u7684\u3002</li> </ul> <p>\u7ed3\u8bba\uff1a\u8be5\u9648\u8ff0\u662f FALSE\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#\u6700\u7ec8\u7b54\u6848","title":"\u6700\u7ec8\u7b54\u6848","text":"<p>\u9009\u9879 D \u662f FALSE\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#63-q11","title":"6.3 Q11","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#631-all-np-problems-are-decidable","title":"6.3.1 All NP problems are decidable.","text":"Answer <p>T \u6240\u6709\u7684 NP \u95ee\u9898\u90fd\u662f\u53ef\u5224\u5b9a\u7684\uff0c\u4e0d\u53ef\u5224\u5b9a\u95ee\u9898\u4e0d\u5b58\u5728 complexity class</p> <p>Undecidable \u4e0d\u5b58\u5728\u7b97\u6cd5\u80fd\u591f\u5728\u6709\u9650\u7684\u65f6\u95f4\u5185\u89e3\u51b3\u7684\u95ee\u9898\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#632-proof-of-np-c","title":"6.3.2 Proof of NP-C","text":"<p>To prove problem B is NP-complete, we can use a NP-complete problem A and use a polynomial-time reduction algorithm to transform an instance of problem B to an instance of problem A.</p> Answer <p>F \u8981\u8bc1\u660e\u7684\u4e0d\u6b62\u8fd9\u4e9b</p> <ol> <li>B \u662f\u4e00\u4e2a NP \u95ee\u9898</li> <li>\u5b58\u5728\u4e00\u4e2a reduction function \\(f\\)\uff0c\u80fd\u591f\u5c06 A \u4e2d\u7684\u4efb\u610f\u5b9e\u4f8b\u8f6c\u5316\u4e3a B \u4e2d\u7684\u5b9e\u4f8b\uff0c\u5b9e\u73b0 \\(A\\leq_{p}B\\)</li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2010%20NP-Completeness.html#7-reference","title":"7 Reference","text":"<ul> <li>\u9ad8\u7ea7\u7b97\u6cd5\u5165\u95e8\u5fc5\u770b\u201421\u4e2aNPC\u95ee\u9898\u53ca\u5176\u8bc1\u660e-CSDN\u535a\u5ba2</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html","title":"11 Approximation","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#1-intro","title":"1 Intro","text":"<p>Tip</p> <p>To deal with HARD problems</p> <p>Find near-optimal solution in polynomial time is Approximation</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#11-approximation-ratio","title":"1.1 Approximation Ratio","text":"<ul> <li>\\(C^*\\): \u6700\u4f18\u89e3</li> <li>\\(C\\): \u8fd1\u4f3c\u89e3</li> <li>\\(\\rho(n)\\): Approximation Ratio</li> </ul> \\[ \\max(\\frac{C}{C^*}, \\frac{C^*}{C})\\leq \\rho(n) \\] <p>\u5982\u679c\u67d0\u4e2a\u7b97\u6cd5\u6ee1\u8db3\u4e0a\u9762\u7684\u5f0f\u5b50\uff0c\u5219\u53ef\u4ee5\u79f0\u4e3a \\(\\rho(n)\\)-approximation algorithm</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#12-approximation-scheme","title":"1.2 Approximation Scheme","text":"<p>\u4e00\u7c7b\u8fd1\u4f3c\u7b97\u6cd5\uff0c\u5bf9\u4e8e\u8f93\u5165\u548c\u7ed9\u5b9a\u7684 \\(\\epsilon\\) \u503c\uff0c\u662f\u4e00\u4e2a \\((1+\\epsilon)\\) \u8fd1\u4f3c\u7b97\u6cd5</p> <ul> <li>PTAS \u591a\u9879\u5f0f\u65f6\u95f4\u8fd1\u4f3c\u65b9\u6848 \\(O(n^{f(1/\\epsilon)})\\)<ul> <li>\\(O(n^23^\\varepsilon)\\) \u4e5f\u662f PTAS</li> </ul> </li> <li>FPTAS \u6ee1\u591a\u9879\u5f0f\u65f6\u95f4\u8fd1\u4f3c\u65b9\u6848 \\(O(n^{O(1)}(\\frac{1}{\\epsilon })^{O(1)})\\)</li> </ul>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#13-\u7b97\u6cd5\u8bbe\u8ba1\u76ee\u6807","title":"1.3 \u7b97\u6cd5\u8bbe\u8ba1\u76ee\u6807","text":"<ul> <li>Optimality</li> <li>Efficiency</li> <li>All instances \u5168\u90e8\u5b9e\u4f8b\uff0c\u6307\u7684\u662f\u5e94\u7528\u7684\u5e7f\u6cdb\u6027</li> </ul>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#2-bin-packing-problem","title":"2 Bin Packing Problem","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#21-online-algos","title":"2.1 Online Algos","text":"<p>\u6309\u7167\u987a\u5e8f\u904d\u5386\u6240\u6709\u7269\u54c1\uff0c\u79f0\u4e3a online</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#211-next-fit-2-approx","title":"2.1.1 Next Fit 2-approx","text":"<ul> <li>\u6bcf\u6b21\u770b\u4e0b\u4e00\u4e2a\u80fd\u4e0d\u80fd\u653e\u8fdb\u5f53\u524d\u7684\u7bb1\u5b50\uff0c\u5982\u679c\u4e0d\u80fd\u5c31\u65b0\u5efa\u4e00\u4e2a\u7bb1\u5b50</li> <li> <p>\u4e00\u5b9a\u6709 \\(M\\leq 2M^*-1\\)</p> <ul> <li>\u8865\u5145\uff1a\u5982\u679c\u6700\u5927\u7269\u54c1\u7684\u5927\u5c0f\u4e3a \\(\\alpha\\)\uff0c\u90a3\u4e48\u8fd1\u4f3c\u6bd4\u5e94\u8be5\u4e3a \\(\\(\\rho=\\begin{cases}\\frac{1}{1-\\alpha}&amp;,0\\leq \\alpha\\leq \\frac{1}{2}\\\\2&amp;,1/2&lt;\\alpha&lt;1\\end{cases}\\)\\)</li> </ul> </li> <li> <p>\\(O(N)\\)</p> </li> </ul>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#212-first-fit-17-approx","title":"2.1.2 First Fit 1.7-approx","text":"<ul> <li>\u6bcf\u6b21\u627e\u5230\u7b2c\u4e00\u4e2a\u80fd\u653e\u8fdb\u53bb\u7684\u7bb1\u5b50\uff0c\u5e76\u653e\u5165\uff1b\u5982\u679c\u627e\u4e0d\u5230\uff0c\u5c31\u65b0\u5efa\u4e00\u4e2a\u7bb1\u5b50</li> <li>\\(M\\leq 1.7M^*\\)<ul> <li>\u80fd\u591f\u8bc1\u660e \\(M\\leq 1.7M^*\\)\uff0c\u800c\u4e14\u5b58\u5728\u4e00\u79cd\u8f93\u5165\u4f7f\u5f97 \\(M=1.7(M^*-1)\\)</li> </ul> </li> <li>\u53ef\u4ee5\u7528\u6570\u636e\u7ed3\u6784\u4f18\u5316\uff0c\u5f97\u5230 \\(O(N \\log N)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6bcf\u6b21\u627e\u7bb1\u5b50\u7684\u901f\u5ea6\u662f \\(O(\\log N)\\)</li> </ul> <p>Note</p> <p>\u5982\u679c\u5728\u539f\u59cb\u7684\u7269\u54c1\u96c6\u5408 \\(L\\) \u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u53ef\u80fd\u5bfc\u81f4\u89e3\u53d8\u5dee</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#213-best-fit-17-approx","title":"2.1.3 Best Fit 1.7-approx","text":"<ul> <li>\u6bcf\u6b21\u5c06\u7269\u54c1\u653e\u5165\u73b0\u5b58\u7684\u3001\u80fd\u591f\u5bb9\u7eb3\u5b83\u7684\uff0c\u4e14\u653e\u5165\u540e\u5269\u4f59\u7a7a\u95f4\u6700\u5c0f\u7684\u7bb1\u5b50\uff1b\u5982\u679c\u627e\u4e0d\u5230\uff0c\u6dfb\u52a0\u65b0\u7684\u7bb1\u5b50</li> <li>\\(O(N \\log N)\\)</li> <li>\u548c FItst Fit \u4e00\u6837\u662f 1.7-approx \u7684</li> </ul> <p>Note</p> <p>\u53ef\u4ee5\u6784\u9020\u4e00\u79cd\u7279\u4f8b\uff0c\u8ba9\u4e0a\u8ff0\u7684 Online Algos \u90fd\u4e00\u5b9a\u65e0\u6cd5\u4ea7\u751f \\(M\\leq \\frac{5}{3}M^*\\)</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#22-offline-algos","title":"2.2 Offline Algos","text":"<p>\u5148\u5c06\u7269\u54c1\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u627e\u5230 trouble maker\uff0c\u7136\u540e\u4f7f\u7528 FF \u6216 BF\uff0c\u7c7b\u4f3c\u8d2a\u5fc3\u7b97\u6cd5\u7684\u601d\u60f3</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#221-first-fit-decreasing","title":"2.2.1 First Fit Decreasing","text":"<ul> <li>\\(M\\leq\\frac{11M}{9}+\\frac{6}{9}\\)\uff0c\u5b58\u5728\u67d0\u79cd\u8f93\u5165\u4f7f\u4e4b\u53d6\u7b49</li> <li>\\(FFD(L)\\leq\\frac{3}{2}OPT(L)\\) \u7528\u5206\u6bb5\u51fd\u6570\u5c31\u80fd\u7b80\u5355\u8bc1\u660e<ul> <li>\u5176\u4e2d \u2154 \u662f\u6700\u5c0f\u7684\u56e0\u6570\uff0c\u9664\u975e \\(\\text{P}=\\text{NP}\\)</li> </ul> </li> </ul>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#3-knapsack-problems-\u80cc\u5305\u95ee\u9898","title":"3 Knapsack Problems \u80cc\u5305\u95ee\u9898","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#31-fractional-version","title":"3.1 Fractional Version","text":"<p>\u5c0f\u6570\u7248\u672c\u7684\uff0c\\(x_{i}\\in[0,1]\\)\uff0c\u7269\u54c1\u662f\u8fde\u7eed\u7684\u5982\u5927\u7c73\u548c\u6c34</p> <ul> <li>\u6309\u7167\u4ef7\u503c\u5bc6\u5ea6\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f</li> <li>\u8d2a\u5fc3\uff0c\u5148\u653e\u5bc6\u5ea6\u9ad8\u7684\uff0c\u5f97\u5230\u6700\u4f18\u89e3</li> </ul>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#32-0-1-version","title":"3.2 0-1 Version","text":"<p>\u53ea\u80fd\u653e\u6216\u8005\u4e0d\u653e\uff0c\u5373 \\(x_{i}\\in\\{0,1\\}\\)\uff0c</p> <ul> <li>NP-H \u95ee\u9898</li> <li>\u8d2a\u5fc3\u6cd5\u662f\u4e00\u4e2a 2-approx \u7b97\u6cd5<ul> <li>taking maximum profit/profit density</li> </ul> </li> </ul> <p>\u66f4\u660e\u786e\u7684\u8fb9\u754c\uff1f</p> <p>\\(P_{\\text{greedy}}\\geq P_{\\text{opt}}-p_{\\max}\\)</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#321-dp-algo","title":"3.2.1 DP Algo","text":"<ul> <li> <p>\u4ee4 \\(dp[i][p]\\) \u662f\u524d \\(i\\) \u4e2a\u7269\u54c1\uff0c\u603b\u4ef7\u503c\u4e3a \\(p\\) \u7684\u60c5\u51b5\u4e0b\u7684\u6700\u5c0f\u8d28\u91cf</p> </li> <li> \\[dp[i][p]=\\begin{cases}\\infty &amp;i=0\\\\dp[i-1][p]&amp;p_{i}&gt;p\\\\ \\min\\{dp[i-1][p],w_{i}+dp[i-1][p-p_{i}] \\}&amp;\\text{otherwise}\\end{cases}\\] <ul> <li>\u5206\u522b\u4ee3\u8868\u4e86\uff0c\u4e0d\u53ef\u80fd\u8fbe\u5230</li> <li>\u4e0d\u53d6\u7269\u54c1 \\(i\\)</li> <li>\u53d6\u7269\u54c1 \\(i\\)</li> <li>\\(O(N^2p_{max})\\)</li> <li>\u5982\u679c\u6709 \\(p_{max}&lt;N^C\\)\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8bf4\u662f\u591a\u9879\u5f0f\u65f6\u95f4</li> <li>\u5426\u5219 \\(p_{max}\\) \u53ef\u80fd\u662f\u6307\u6570\u7ea7\u7684\u5927\u5c0f</li> </ul> </li> </ul> <p>\u6539\u8fdb\u5bf9\u4e8e \\(p_{max}\\) \u6bd4\u8f83\u5927\u65f6\u7684\u6548\u7387</p> <p>\u53ea\u4fdd\u7559 profit \u7684\u9ad8\u4f4d\uff0c\u4f1a\u635f\u5931\u4e00\u5b9a\u7cbe\u5ea6\uff0c\u6709 \\((1+\\epsilon)P_{alg}\\leq P\\)</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#4-k-center-problems","title":"4 K-center Problems","text":"<p>Question</p> <p>\u7ed9 \\(n\\) \u4e2a\u5730\u5740\uff0c\u9700\u8981\u9009\u62e9 \\(K\\) \u4e2a\u4e2d\u5fc3\u70b9\uff0c\u6700\u5c0f\u5316\u5230\u6700\u8fd1\u4e2d\u5fc3\u70b9\u8ddd\u79bb\u7684\u6700\u5927\u503c</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#41-naive-greedy","title":"4.1 Naive Greedy","text":"<ul> <li>\u7b2c\u4e00\u4e2a\u653e\u5728\u6240\u6709\u5730\u5740\u7684\u91cd\u5fc3</li> <li>\u540e\u9762\u6bcf\u4e2a\u90fd\u653e\u5728\u80fd\u4f7f\u5f97 \\(r_{max}\\) \u51cf\u5c0f\u7684\u4f4d\u7f6e</li> </ul> <p>Warning</p> <p>\u5982\u679c\u6709\u4e24\u56e2\u79bb\u5f97\u5f88\u8fd1\u7684\u5730\u5740\uff0c\u800c\u4e14 \\(K=2\\) \u7b2c\u4e00\u4e2a\u4e2d\u5fc3\u70b9\u4f1a\u88ab\u653e\u5728\u4e2d\u95f4\u4f4d\u7f6e\uff0c\u5f97\u5230\u975e\u5e38\u5dee\u7684\u89e3</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#42-better-greedy","title":"4.2 Better Greedy","text":"<ul> <li>\u5c06\u4e2d\u5fc3\u70b9\u653e\u5728\u5730\u5740\u4e0a\uff0c\u5982\u679c\u6700\u4f18\u7684\u6700\u5927\u8ddd\u79bb\u4e3a \\(r^*\\)\uff0c\u80fd\u591f\u4fdd\u8bc1\u8fd9\u4e2a\u4e2d\u5fc3\u70b9\u5468\u56f4 \\(2r^*\\) \u7684\u8303\u56f4\u80fd\u591f\u8986\u76d6\u6700\u4f18\u89e3\u4e2d\u7684\u4e00\u4e2a\u5706</li> <li>\u5bf9\u4e8e\u7ed9\u5b9a\u7684 \\(r\\)\uff0c\u6211\u4eec\u53ef\u4ee5\u5224\u5b9a\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u8981\u6c42\u7684 \\(K\\) \u4e2a\u4e2d\u5fc3\u70b9</li> <li>\u6839\u636e \\(0&lt;r&lt;r_{\\max}\\)\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u5f0f\u627e\u5230\u6700\u4f18\u7684 \\(r\\)\uff0c\u5373\uff1a\u5982\u679c\u5bf9\u4e8e\u67d0\u4e2a \\(r\\) \u80fd\u591f\u627e\u5230 \\(K\\) \u4e2a\u4e2d\u5fc3\u70b9\uff0c\u8bf4\u660e \\(r\\) \u8fc7\u4e8e\u5bbd\u677e\uff0c\u53ef\u4ee5\u51cf\u5c0f\uff1b\u53cd\u4e4b\u4ea6\u7136</li> <li>\\(O(\\log r_{\\max})\\)</li> <li>\u5177\u4f53\u64cd\u4f5c\uff1a\u968f\u673a\u9009\u62e9\u7b2c\u4e00\u4e2a\u5730\u5740\uff0c\u5220\u9664\u5b83\u548c\u5b83\u5468\u56f4 \\(2r\\) \u8ddd\u79bb\u5185\u7684\u6240\u6709\u70b9\uff0c\u5e76\u91cd\u590d\u8fd9\u4e2a\u64cd\u4f5c</li> </ul> <p>\u8fdb\u4e00\u6b65\u4f18\u5316\uff1f</p> <ul> <li>\u9009\u62e9\u4e0b\u4e00\u4e2a\u4e2d\u5fc3\u70b9\u65f6\uff0c\u53ef\u4ee5\u5c3d\u91cf\u9009\u62e9\u8ddd\u79bb\u4e0a\u4e00\u4e2a\u8f83\u8fdc\u7684\u5730\u5740</li> <li>\u4f46\u4ecd\u7136\u662f 2-approx</li> </ul>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#43-polynomial-2-approx","title":"4.3 Polynomial 2-approx","text":"<ul> <li>\u53ef\u4ee5\u8bc1\u660e\uff0c\u4e0d\u5b58\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u7684 \\((2-\\epsilon)\\)-approx \u7b97\u6cd5</li> <li>\u5f52\u8c2c\u6cd5\uff1a<ul> <li>\u5982\u679c\u5b58\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u7684 \\((2-\\epsilon)\\)-approx \u7b97\u6cd5\uff0c\u90a3\u4e48\u4e5f\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u652f\u914d\u96c6 (Domination Set) \u95ee\u9898\uff0c\u8fd9\u662f\u4e00\u4e2a NPC \u95ee\u9898</li> <li>\u56e0\u6b64\uff0c\u9664\u975e \\(\\text{P}=\\text{NP}\\)\uff0c\u5426\u5219\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u7b97\u6cd5</li> </ul> </li> </ul>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#5-discussion","title":"5 Discussion","text":"<p>The FFD algorithm for bin packing achieves the following bounds: FFD(L)\u2264(11/9)OPT(L)+1, for all L.</p> <p>(1) Please show that FFD(L)\u2264(3/2)OPT(L), for all L, with the above inequality.</p> <p>(2) Prove that the factor 3/2 is the best possible unless P=NP (note that deciding if two bins are sufficient to accommodate a set of items is NP-complete).</p> <p>Partition Problem \u662f NP \u95ee\u9898\u3002\u5982\u679c\u7269\u54c1\u603b\u8d28\u91cf\u4e3a 2\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u4e00\u4e2a Partition \u95ee\u9898\uff0c\u4e8e\u662f Partition \u95ee\u9898\u80fd\u591f\u5f52\u7ea6\u5230\u88c5\u7bb1\u95ee\u9898</p> <p>\u5982\u679c \\(\\rho(n)\\leq\\frac{3}{2}\\)\uff0c</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#6-questions","title":"6 Questions","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#61-hw11","title":"6.1 HW11","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#611-better-approximation","title":"6.1.1 better approximation","text":"<p>Suppose ALG is an \\(\\alpha\\)-approximation algorithm for an optimization problem \\(\\Pi\\) whose approximation ratio is tight. Then for every \\(\\epsilon&gt;0\\) there is no \\((\\alpha-\\epsilon)\\)-approximation algorithm for \\(\\Pi\\) unless \\(P=NP\\). (T/F)</p> Answer <p>F. Tight \u8868\u793a\u7684\u662f\u8fd9\u79cd\u7b97\u6cd5\u7684 approximation \u5206\u6790\u5df2\u8fbe\u4e0b\u754c\uff0c\u4f46\u4e0d\u8868\u793a\u5176\u4ed6\u7b97\u6cd5\u4e0d\u4f1a\u6bd4\u8fd9\u4e2a\u8fd1\u4f3c\u597d\uff0c\u8fd9\u4e24\u8005\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#612-different-cost-assessment","title":"6.1.2 different cost assessment","text":"<p>As we know there is a 2-approximation algorithm for the Vertex Cover problem. Then we must be able to obtain a 2-approximation algorithm for the Clique problem, since the Clique problem can be polynomially reduced to the Vertex Cover problem.</p> Answer <p>F</p> <p>Vertex Cover Problem\uff0c\u9009\u62e9\u6700\u5c11\u7684\u9876\u70b9\u96c6\u5408 \\(S\\)\uff0c\u4f7f\u5f97\u6240\u6709\u8fb9\u90fd\u4e0e \\(S\\) \u4e2d\u7684\u9876\u70b9\u8fde\u63a5\uff0c\u5373\u8986\u76d6\u6240\u6709\u7684\u8fb9 NP-C Clique Problem(\u56e2\u95ee\u9898)\uff0c\u56e2 (clique) \u5c31\u662f\u5b8c\u5168\u5b50\u56fe\uff0c\u5728\u65e0\u5411\u56fe\u4e2d\u627e\u5230\u6700\u5927\u7684\u5b8c\u5168\u5b50\u56fe NP-C, NP-H</p> <p>Clique Problem \\(\\leq_{p}\\) Vertex Cover Problem \u5c06 Clique Problem \u4e2d\u7684\u56fe \\(G\\) \u8f6c\u6362\u4e3a\u8865\u56fe \\(G'\\)\uff0c\u7136\u540e\u5728 \\(G'\\) \u4e0a\u505a Vertex Cover\uff0c\u5bf9\u4e8e\u6240\u6709\u6ca1\u6709\u88ab\u9009\u4e2d\u7684\u9876\u70b9\uff0c\u4e00\u5b9a\u90fd\u5982\u4e0b\u56fe\u6240\u793a  \u6240\u4ee5\uff0c\\(|V|-|S|\\) \u662f\u4e00\u4e2a\u5b8c\u5168\u5b50\u56fe\uff0c\u4e5f\u5c31\u662f clique \u7684\u8fd1\u4f3c</p> <p>\u4f46\u662f\uff0c\u867d\u7136 Vertex Cover Problem \u4e2d\u6709 2- \u8fd1\u4f3c\u7b97\u6cd5\u80fd\u591f\u5f97\u5230 \\(\\rho_{2}=\\frac{C_{2}}{C_{2}^*}=\\frac{|S|}{|S^*|}=2\\)\uff0c\u4f46\u662f Clique Problem \u4e2d\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e0d\u4e00\u6837\uff1a</p> \\[ \\rho_{1}=\\frac{C_{1}^*}{C_{1}}=\\frac{|V|-|S^*|}{|V|-|S|}=1+\\frac{1}{\\frac{|V|}{|S^*|}-2} \\] <p>\u4e8e\u662f \\(rho_1\\) \u662f\u4e0d\u53ef\u786e\u5b9a\u7684 <sup>1</sup></p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#613-approximation-of-tsp","title":"6.1.3 approximation of TSP","text":"Question <pre><code>Compute a minimum spanning tree T connecting all the addresses.\nRegard the post office as the root of T.\nStart at the post office.\nVisit the addresses in order of a _____ of T.\nFinish at the post office.\n</code></pre> Answer <p><code>pre-order traversal/post-order traversal</code> <sup>2</sup> \u9996\u5148\uff0c\u53ef\u4ee5\u4fdd\u8bc1 MST \u7684\u603b\u6743\u91cd \\(M\\) \u4e00\u5b9a\u5c0f\u4e8e\u4efb\u4f55\u4e00\u4e2a Hamilton \u56de\u8def (\u5305\u62ec \\(C^*\\)) \u5176\u6b21\uff0c\u6309\u7167 pre-order \u6216\u8005 post-order \u8fdb\u884c\u904d\u5386\uff0c\u6700\u5dee\u60c5\u51b5\u5c31\u662f\u9700\u8981\u7ecf\u8fc7 MST \u7684\u6bcf\u4e00\u6761\u8fb9\u4e24\u6b21\uff0c\u5373 \\(C\\leq 2M\\) \u6240\u4ee5 \\(C\\leq 2C^*\\)</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#62-ex11","title":"6.2 Ex11","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#621-2-distinct-item-sizes","title":"6.2.1 2 distinct item sizes","text":"<p>Consider the bin packing problem which uses a minimum number of bins to accommodate a given list of items. Recall that Next Fit (NF) and First Fit (FF) are two simple approaches, whose (asymptotic) approximation ratios are 2 and 1.7, respectively. Now we focus on a special class I2 of instances in which only two distinct item sizes appear. Check which of the following statements is true by applying NF and FF on I2. \u95ee\u54ea\u4e2a\u7684 approx ratio \u6709\u63d0\u5347\uff1f</p> <p>Answer</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#622-which-is-false","title":"6.2.2 Which is false?","text":"<p>Assume P\u2260NP, please identify the false statement.</p> <ul> <li>B. In the minimum-degree spanning problem, we are given a graph G=(V, E) and wish to find a spanning tree T of G so as to minimize the maximum degree of nodes in T. Then it is NP-complete to decide whether or not a given graph has minimum-degree spanning tree of maximum degree two.</li> <li>C. In the minimum-degree spanning problem, we are given a graph G=(V, E) and wish to find a spanning tree T of G so as to minimize the maximum degree of nodes in T. Then there exists an algorithm with approximation ratio less than 3/2.</li> </ul> Answer <p>C B \u786e\u5b9e\u662f NP-C \u7684 C \u4e0d\u4f1a\u8bc1\u660e</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2011%20Approximation.html#63-knapsack-packing","title":"6.3 knapsack + packing","text":"<p>\u591a\u4e2a\u80cc\u5305\uff0c\u6700\u5927\u5316\u603b\u6743\u91cd</p> <p>\u4f7f\u7528\u4efb\u4f55\u5982 NF, FF, BF \u7b49\u7684\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u5f97\u5230\u7684\u8fd1\u4f3c\u6bd4\u6700\u5c0f\u90fd\u662f 2</p> Answer <p>T\uff0c\u53ef\u4ee5</p> <ol> <li> <p>\u53c2\u8003 Homework - Jianjun Zhou's Notebook \u21a9</p> </li> <li> <p>\u53c2\u8003 Travelling Salesman using Approximation Algorithm \u21a9</p> </li> </ol>","tags":["Algorithm/Analysis/Approximation","Algorithm/Problem/Bin-Packing","Algorithm/Problem/K-center","Algorithm/Problem/Knapsack"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html","title":"12 Local Search","text":"","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#intro","title":"Intro","text":"<ul> <li>Guess</li> <li>Neighborhood</li> <li>Global Minimum</li> </ul>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#framework","title":"Framework","text":"<ul> <li>Local<ul> <li>\u5b9a\u4e49\u90bb\u57df</li> <li>\u5c40\u90e8\u6700\u4f18\u89e3 local optimum</li> </ul> </li> <li>Search<ul> <li>\u521d\u59cb\u731c\u6d4b\u89e3\uff0csearch for a better one</li> </ul> </li> </ul>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#neighbor-relation","title":"Neighbor Relation","text":"<ul> <li>\u90bb\u5c45\u89e3 \\(S\\sim S'\\): \\(S'\\) is a neighboring solution of \\(S-S'\\) can be obtained by a samll modification of S.</li> <li>\u90bb\u57df \\(N(S)\\): neighborhood of \\(S-\\{S':S\\sim S'\\}\\)</li> </ul> <p>Note</p> <p>Greedy Algorithm \u4e0d\u662f Local Search \u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5</p>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#vertex-cover-problem","title":"Vertex Cover Problem","text":"<ul> <li>\u53ef\u884c\u89e3 \\(FS\\): all vertex covers</li> <li>cost = \\(|S|\\)</li> <li>\u68af\u5ea6\u4e0b\u964d\u6cd5\uff1a\u6bcf\u6b21\u770b\u770b\u5220\u9664\u4e00\u4e2a\u70b9\u662f\u5426\u53ef\u884c\uff0c\u64cd\u4f5c\u4e0d\u53ef\u64a4\u9500</li> </ul>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#metropolis-algorithm","title":"Metropolis Algorithm","text":"<ul> <li>\u5982\u679c\u65b0\u7684 cost \u66f4\u597d\uff0c\u5219\u66f4\u65b0</li> <li>\u5982\u679c\u65b0\u7684 cost \u66f4\u574f\uff0c\u5219\u6309\u7167 \\(e^{-\\Delta \\text{cost}/(kT)}\\) \u7684\u6982\u7387\u66f4\u65b0</li> <li>\u5982\u4f55\u6267\u884c\u548c\u8fd4\u56de<ul> <li>\u56fa\u5b9a\u8fed\u4ee3 10000 \u6b21</li> <li>\u52a8\u6001\u8c03\u6574 \\(T\\) \u7684\u5927\u5c0f \u6a21\u62df\u9000\u706b</li> </ul> </li> </ul> <p>\u8865\u5145\uff1a\u4e8c\u5206\u56fe\u4e0a\u7684\u9876\u70b9\u8986\u76d6\u548c\u5339\u914d\u95ee\u9898</p> <ul> <li>\u5339\u914d\u95ee\u9898\uff1a\u627e\u5230\u6700\u5927\u7684\u8fb9\u7684\u5b50\u96c6\uff0c\u5176\u4e2d\u4efb\u610f\u4e24\u8fb9\u6ca1\u6709\u5171\u540c\u9876\u70b9</li> <li>\u67ef\u5c3c\u5e0c\u5b9a\u7406\uff1a\u4e8c\u5206\u56fe\u4e2d\u7684\u6700\u5927\u5339\u914d\u8fb9\u6570\u7b49\u4e8e\u6700\u5c0f\u9876\u70b9\u8986\u76d6\u9876\u70b9\u6570</li> </ul>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#hopfield-neural-networks","title":"Hopfield Neural Networks","text":"","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#intro_1","title":"Intro","text":"<ul> <li>\u76ee\u6807\u662f\u627e\u5230\u4e00\u79cd\u8db3\u591f\u597d\u7684\u5e03\u5c40 (configuration)<ul> <li>\u5982\u679c\u4e00\u6761\u8fb9\u80fd\u4f7f \\(w_{e}s_{u}s_{v}&lt;0\\)\uff0c\u5219\u4e3a good\uff0c\u53cd\u4e4b bad</li> <li>\u5982\u679c\u4e00\u4e2a\u9876\u70b9\u80fd\u6ee1\u8db3 \\(\\sum_{v:e=(u,v)\\in E}w_{e}s_{u}s_{v}\\leq 0\\)\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u5173\u8054\u8fb9\u7684\u6743\u91cd\u548c \\(&lt;=0\\)\uff0c\u5219\u79f0\u4e3a\u6ee1\u610f\u70b9(satisfied)</li> <li>\u5982\u679c\u4e00\u5f20\u56fe\u6240\u6709\u70b9\u90fd\u662f\u6ee1\u610f\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a configuration \u662f stable \u7684</li> </ul> </li> </ul>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#state-flipping-algorithm","title":"State-flipping Algorithm","text":"<pre><code>ConfigType State_flipping()\n{\n    Start from an arbitrary config S;\n    while (!IsStable(S)) {\n        u = GetUnsatisfied(S);\n        state[u] = -state[u];\n    }\n    return S;\n}\n</code></pre> <p>\u7b97\u6cd5\u64cd\u4f5c</p> <ul> <li>\u5982\u679c unstable\uff0c\u627e\u5230 unsatisfied vertex \u5e76\u7ffb\u8f6c\u5176\u72b6\u6001\uff0c\u5c06\u5176\u53d8\u4e3a satisfied</li> </ul> <ul> <li>The state-flipping algorithm terminates at a stable config after at most \\(W=\\sum_{e}|w_{e}|\\) \u4e00\u5b9a\u4f1a\u5728\u6240\u6709\u8fb9\u6743\u91cd\u548c\u7684\u7edd\u5bf9\u503c\u6b21\u5faa\u73af\u524d\u505c\u6b62</li> <li>\u901a\u4fd7\u7406\u89e3\uff1a\u4e00\u5b9a\u4f1a\u505c\u6b62\uff0c\u56e0\u4e3a\u6bcf\u6b21\u7684\u64cd\u4f5c\u4e00\u5b9a\u5e26\u6765\u4f18\u5316\u3002</li> </ul>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#maximum-cut","title":"Maximum Cut","text":"<p>\u6700\u5927\u5316\u4e24\u4e2a\u9876\u70b9\u96c6 \\(A,B\\) \u4e4b\u95f4\u6240\u6709\u8fb9\u7684\u6743\u91cd\u548c</p>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#2-approx","title":"2-approx","text":"<ul> <li>\u5c40\u90e8\u6700\u4f18\u89e3\u80fd\u591f\u8fbe\u5230 \\(w(A,B)\\geq \\frac{1}{2}w(A^*,B^*)\\)</li> <li>\u8bc1\u660e\u7684\u5173\u952e\u5728\u4e8e\u5b50\u96c6\u5185\u7684\u8ddd\u79bb\u548c \\(2\\sum_{\\{u,n\\}\\subseteq A}w_{uv}&lt;w(A,B)\\)</li> <li>\u6240\u4ee5 2-approx</li> </ul>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#\u76f8\u5173\u7814\u7a76","title":"\u76f8\u5173\u7814\u7a76","text":"<ul> <li>\u5b58\u5728\u4e00\u79cd 1.1382-approx \u7b97\u6cd5</li> <li>\u5982\u679c \\(\\text{P}=\\text{NP}\\)\uff0c\u90a3\u4e48\u5b58\u5728\u4e00\u79cd \\(\\frac{17}{16}\\)-approx \u7b97\u6cd5</li> </ul>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#\u7ec8\u6b62\u7b56\u7565","title":"\u7ec8\u6b62\u7b56\u7565","text":"<ul> <li>\u5927\u63d0\u5347\u7ffb\u8f6c (big-improvement-flip): \u5982\u679c\u627e\u4e0d\u5230\u4e00\u4e2a\u80fd\u8fbe\u5230 \\(\\frac{2\\varepsilon}{|V|}w(A,B)\\) \u63d0\u5347\u7684\u7ffb\u8f6c\uff0c\u5c31\u7ec8\u6b62</li> <li>\u7ec8\u6b62\u7684\u65f6\u5019\uff0c\u6ee1\u8db3 \\((2+\\varepsilon) w(A,B)\\geq w(A^*,B^*)\\)</li> <li>\u6700\u591a\u5728 \\(O(\\frac{n}{\\varepsilon}\\log W)\\) \u540e\u7ec8\u6b62</li> </ul>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#\u66f4\u597d\u7684-local-\u5b9a\u4e49","title":"\u66f4\u597d\u7684 local \u5b9a\u4e49\uff1f","text":"<ul> <li>\u89e3\u7684\u90bb\u57df\u8db3\u591f\u5927\uff0c\u907f\u514d\u9677\u5165\u5c40\u90e8\u6700\u4f18</li> <li>\u4e5f\u4e0d\u80fd\u592a\u5927\uff0c\u5426\u5219\u6548\u7387\u66f4\u4f4e</li> <li>k-flip: \u542f\u53d1\u5f0f\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\Theta(n^k)\\)<ol> <li>\u7b2c\u4e00\u6b65\uff0c\u5bf9\u6574\u4e2a\u9876\u70b9\u96c6\u4f7f\u7528 state-flip</li> <li>\u540e\u9762\u6bcf\u4e00\u6b65\uff0c\u53ea\u5bf9\u5c1a\u672a flip \u8fc7\u7684\u9876\u70b9\u8fdb\u884c\u7ffb\u8f6c</li> <li>\u7b2c \\(n\\) \u6b65\uff0c\u5f97\u5230 \\((A_{n},B_{n})=(A,B)\\)</li> </ol> </li> </ul>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#discussion-maximum-bipartite-matching","title":"Discussion: Maximum Bipartite Matching","text":"<p>Question</p> <p>A bipartite graph \\(G\\) is one whose vertex set can be partitioned into two sets \\(A\\) and \\(B\\), such that each edge in the graph goes between a vertex in \\(A\\) and a vertex in \\(B\\). Matching \\(M\\) in \\(G\\) is a set of edges that have no end points in common. Maximum Bipartite Matching Problem finds a matching with the greatest number of edges (over all matchings).</p> <p>Consider the following Gradient Ascent Algorithm:</p> <p>As long as there is an edge whose endpoints are unmatched, add it to the current matching. When there is no longer such an edge, terminate with a locally optimal.</p> <p>(a) Give an example of a bipartite graph \\(G\\) for which this gradient ascent algorithm does not return the maximum matching.</p> <p>(b) Let \\(M\\) and \\(M'\\) be matchings in a bipartite graph \\(G\\). Suppose that \\(|M'|&gt;2|M|\\). Show that there is an edge \\(e'\\) in \\(M'\\) such that (\\(M \\cup e'\\)) is a matching in \\(G\\).</p> <p>\u00a9 Use (b) to conclude that any locally optimal matching returned by the gradient ascent algorithm in a bipartite graph \\(G\\) is at least half as large as a maximum matching in \\(G\\).</p> <p>(a) Graph \\(A-B-C-D\\), which can be partitioned into \\(\\{A,C\\}\\) and \\(\\{B,D\\}\\). The optimal result is \\(\\{(A,B),(C,D)\\}\\), while if edge \\((B,C)\\) is added first, the algorithm does not return the maximum matching.</p> <p>(b) \\(2|M|\\) vertices \\(S_M\\) are matched in \\(M\\), since \\(|M'|&gt;2|M|\\), there exist an edge \\(e'\\) that are not incident with any vertex in \\(S_M\\). Then \\(M \\cup e'\\) is a matching in \\(G\\).</p> <p>\u00a9 Suppose \\(M^*\\) is the maximum matching, \\(M\\) is the current solution generated by Gradient Ascent Algorithm. If \\(|M|&lt;\\frac{1}{2}|M^*|\\), by (b), there exists an \\(e'\\) that can be added to \\(M\\). Thus, the algorithm must return a \\(M\\) such that \\(|M|\\geq |M'|\\).</p>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#questions","title":"Questions","text":"","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#hw12","title":"HW12","text":"","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#flpfacility-location-problem-center-problem","title":"FLP(Facility Location Problem) - center problem","text":"<p>We are given a set of sites \\(S = \\{s_1, s_2, \\cdots, s_n\\}\\) in the plane, and we want to choose a set of \\(k\\) centers \\(C = \\{c_1, c_2, \\cdots, c_k\\}\\) so that the maximum distance from a site to the nearest center is minimized. Here \\(c_i\\) can be an arbitrary point in the plane.</p> <p>A local search algorithm arbitrarily chooses \\(k\\) points in the plane to be the centers, then</p> <ol> <li>divide \\(S\\) into \\(k\\) sets, where \\(S_i\\) is the set of all sites for which \\(c_i\\) is the nearest center; and</li> <li>for each \\(S_i\\), compute the central position as a new center for all the sites in \\(S_i\\).</li> </ol> <p>If steps (1) and (2) cause the covering radius to strictly decrease, we perform another iteration, otherwise the algorithm stops.</p> <p>When the above local search algorithm terminates, the covering radius of its solution is at most 2 times the optimal covering radius. (T/F)</p> Answer <p>F\uff0c\u5b58\u5728\u4f8b\u5916\uff0c\u53c2\u8003 Homework - Jianjun Zhou's Notebook \u53ef\u4ee5\u6784\u9020\u65e0\u9650\u5dee\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6709\u56db\u4e2a\u70b9\u6392\u6210\u957f\u65b9\u5f62\uff0c\u957f\u8fb9\u63a5\u8fd1\u65e0\u9650\u957f\uff0c\u77ed\u8fb9\u6bd4\u8f83\u957f\uff0c\u82e5 \\(k=2\\)\uff0c\u521d\u59cb\u9009\u62e9\u4e86\u957f\u8fb9\u7684\u7aef\u70b9\uff0c\u90a3\u4e48\u8fd1\u4f3c\u6bd4\u53ef\u4ee5\u662f\u65e0\u9650\u5927</p>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#partition-problem","title":"Partition Problem","text":"<p>There are \\(n\\) jobs, and each job \\(j\\) has a processing time \\(t_j\\)\u200b. We will use a local search algorithm to partition the jobs into two groups \\(A\\) and \\(B\\), where set \\(A\\) is assigned to machine \\(M_1\\)\u200b and set \\(B\\) to \\(M_2\\)\u200b. The time needed to process all of the jobs on the two machines is \\(T_1\u200b=\\sum_{j\\in A} \u200bt_j\\)\u200b, \\(T_2\u200b=\\sum_{j \\in B} \u200bt_j\\)\u200b. The problem is to minimize \\(|T_1\u200b\u2212T_2\u200b|\\).</p> <p>Local search: Start by assigning jobs \\(1,\\cdots,n/2\\) to \\(M_1\\)\u200b, and the rest to \\(M_2\\)\u200b. The local moves are to move a single job from one machine to the other, and we only move a job if the move decreases the absolute difference in the processing times. Which of the following statement is true?</p> <p>A. The problem is NP-hard and the local search algorithm will not terminate. B. When there are many candidate jobs that can be moved to reduce the absolute difference, if we always move the job \\(j\\) with maximum \\(t_j\\)\u200b, then the local search terminates in at most \\(n\\) moves. C. The local search algorithm always returns an optimal solution. D. The local search algorithm always returns a local solution with \\(2/1\u200bT_1\u200b\\le T_2\u200b\\le 2T_1\\)\u200b.</p> Answer <p>B A. \u9519\u8bef\uff0c\u7531\u4e8e\u8fdb\u884c\u64cd\u4f5c\u4e00\u5b9a\u4f1a\u5bfc\u81f4 cost \u964d\u4f4e\uff0c\u4e00\u5b9a\u4f1a\u505c\u6b62 B. \u6b63\u786e\uff0c\u4e4b\u524d\u79fb\u52a8\u7684\u4e4b\u540e\u90fd\u4e0d\u53ef\u80fd\u518d\u6b21\u79fb\u52a8 C. \u660e\u663e\u9519\u8bef D. \u5982\u679c\u53ea\u6709\u4e24\u4e2a job\uff0c\u5c31\u53ef\u4ee5\u4e0d\u5bf9</p>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#sat-and-n-queen-in-approximation","title":"SAT and N-Queen in approximation","text":"<p>Local search algorithm can be used to solve lots of classic problems, such as SAT and \\(N\\)-Queen problems. Define the configuration of SAT to be \\(X =\\) vector of assignments of \\(N\\) boolean variables, and that of \\(N\\)-Queen to be \\(Y =\\) positions of the \\(N\\) queens in each column. The sizes of the search spaces of SAT and \\(N\\)-Queen are O(\\(2^N\\)) and O(\\(N^N\\)), respectively.</p> Answer <p>T\uff0c\u867d\u7136 \\(N\\)-Queen \u5b9e\u9645\u4e0a\u4e0d\u7528\u641c\u7d22\u8fd9\u4e48\u5927\u7684\u7a7a\u95f4\uff0c\u4f46\u662f\u8868\u8ff0\u6210 \\(O(N^N)\\) \u662f\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u7684</p>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#ex12","title":"Ex12","text":"","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#\u5224\u65ad\u9898","title":"\u5224\u65ad\u9898","text":"<ol> <li>For an optimization problem, given a neighborhood, if its local optimum is also a global optimum, one can reach an optimal solution with just one step of local improvements.</li> </ol> Answer <p>F\uff0c\u8fd9\u91cc\u7684 local improvement \u6307\u7684\u662f\u4e00\u4e2a\u72b6\u6001\u6539\u53d8\uff0c\u4f46\u662f neighborhood \u7684\u6b65\u957f\u53ef\u80fd\u5927\u4e8e 1</p> <ol> <li>Consider a state-flipping algorithm for the Maximum-Cut problem. We say that partitions (A,B) and (A\u2032,B\u2032) are neighbors under the k-flip rule if (A\u2032,B\u2032) can be obtained from (A,B) by moving at most k nodes from one side of the partition to the other. If (A,B) is a local optimum under the p-flip rule, it is also a local optimum under the k-flip rule for every k&lt;p.</li> </ol> Answer <p>T\uff0c\u8fd9\u91cc\u867d\u7136\u53ef\u80fd\u6700\u7ec8\u5f97\u5230\u7684\u89e3\u4e0d\u4e00\u6837\uff0c\u4f46\u662f\u5bf9\u4e8e\u7b2c \\(k\\) \u6b21 flip \u6765\u8bf4\u662f\u4e00\u6837\u7684\uff0c\u56e0\u4e3a\u7b2c \\(k\\) \u6b21 flip \u53ea\u5173\u6ce8\u4e00\u4e2a\u72b6\u6001</p> <ol> <li>Without any assumptions on the distances, if P \\(\\neq\\) NP, there is no \u03c1-approximation for TSP (Travelling Salesman Problem) for any \u03c1\u22651.</li> </ol> Answer <p>T\uff0c\u8fd9\u91cc\u7684 assumptions \u6307\u7684\u662f\u56fe\u8bba\u8ddd\u79bb\u53ef\u80fd\u4e0d\u6ee1\u8db3\u73b0\u5b9e\u7684\u51e0\u4f55\u5173\u7cfb\uff0c\u4f8b\u5982\u4e0d\u6ee1\u8db3\u4e09\u89d2\u4e0d\u7b49\u5f0f\u3002 \u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684 assumptions\uff0cTSP \u7684\u8fd1\u4f3c\u7b97\u6cd5\u53ef\u4ee5\u4efb\u610f\u5dee\uff0c\u4f8b\u5982\u6784\u5efa\u975e\u5e38\u957f\u7684\u4e00\u6761\u8fb9 \u4f46\u5982\u679c\u6ee1\u8db3\u4e86\u4e09\u89d2\u4e0d\u7b49\u5f0f\uff0c\u90a3\u4e48\u5b58\u5728\u5f88\u591a\u79cd \\(\\rho\\)-approx \u7b97\u6cd5\uff0c\u4f8b\u5982 Christofides \u7b97\u6cd5\u5c31\u662f 1.5-approx \u7684.</p>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#minimum-degree-spanning-tree","title":"Minimum Degree Spanning Tree","text":"Answer <p>D A \u663e\u7136\u9519\u8bef\uff0c\u65e0\u73af\u56fe\u7684 degree \u603b\u548c\u662f \\(2|V|-2\\) B \u4e5f\u6709\u95ee\u9898\uff0c\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\u540e\uff0c\u5220\u9664\u7684\u8fb9 \\(-(\\geq d(w))\\)\uff0c\u4f46\u662f\u589e\u52a0\u4e86\u4e00\u6761 \\(d(u)+1\\) \u7684\u8fb9\uff08\u5047\u8bbe \\(d(u)&gt;d(v)\\)\uff09\uff0c\u5e76\u4e14\u8fd8\u6709\u4e24\u6761\u8fb9\u53ef\u80fd \\(+2\\)\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u9012\u51cf C \u6709\u95ee\u9898\uff0c\u5bf9\u4e8e\u64cd\u4f5c\u4e2d\u7684 \\(u,v,w\\) \u662f\u6ee1\u8db3\u7684\uff0c\u5b9e\u73b0\u4e86 \\(-1\\)\uff0c\u4f46\u662f\u53ef\u80fd\u5bfc\u81f4\u5176\u4ed6\u5f88\u591a\u70b9\u5bf9\u7684\u503c\u53d8\u5927  D \u6b63\u786e\uff0c\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\uff0c\u8003\u8651 \\(w\\) \u51cf\u5c11 \\(-(\\geq 2 \\cdot 3^{d(w)-1})\\)\uff0c\u8003\u8651 \\(u,v\\) \u589e\u52a0 \\((2\\cdot 3^{d(u)}+2\\cdot 3^{d(v)})\\)\u3002\u5047\u8bbe \\(d(u)\\geq d(v)\\)\uff0c\u5b58\u5728 \\(d(w)-1\\geq d(u)+1\\)\uff0c\u6240\u4ee5\u6574\u4f53\u9012\u51cf\uff0c\u6ee1\u8db3\u9898\u610f</p>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#load-balancing-problem","title":"Load Balancing Problem","text":"Answer <ol> <li>\u663e\u7136\u6b63\u786e</li> <li>\u663e\u7136\u6b63\u786e\uff0c\u56e0\u4e3a\u5982\u679c\u662f\u4e24\u53f0\u673a\u5668\uff0c\u5c31\u53d8\u6210\u4e86 partition \u95ee\u9898</li> <li>\u4e0d\u6b63\u786e\uff0c\u5bf9\u4e8e makespan \u95ee\u9898\uff0c\u5982\u679c\u6709 \\(m\\) \u53f0\u673a\u5668\uff0c\u7b80\u5355\u8d2a\u5fc3\u53ef\u4ee5\u8fbe\u5230 \\(2-\\frac{1}{m}\\) \u7684\u8fd1\u4f3c\u6bd4</li> <li>\u663e\u7136\u6b63\u786e</li> </ol>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#facility-location-problem","title":"Facility Location Problem","text":"Answer","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2012%20Local%20Search.html#q13","title":"Q13","text":"<p>Since finding a locally optimal solution is presumably easier than finding an optimal solution, we can claim that for any local search algorithm, one step of searching in neighborhoods can always be done in polynomial time.</p> Answer <p>F\uff0c\u663e\u7136\u6709\u4e9b local search \u5728 neighbor \u7a7a\u95f4\u91cc\u7684\u641c\u7d22\u4e5f\u53ef\u4ee5\u662f\u6307\u6570\u7ea7\u7684\uff08\u4f8b\u5982 TSP \u7684\u4e00\u4e9b\u5c40\u90e8 permute \u641c\u7d22\uff09</p> <p>\u5173\u952e\u5728\u4e8e\u4e0d\u80fd\u548c divide and conquer \u4e2d\u7684\u5047\u8bbe\u5b50\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u5e38\u6570\u641e\u6df7\u4e86</p>","tags":["Algorithm/Local-Search","Algorithm/Problem/Hopfield-Neural-Network","Algorithm/Problem/Max-Cut","Algorithm/Problem/Vertex-Cover"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html","title":"13 Randomized Algorithms","text":"","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#1-intro","title":"1 Intro","text":"","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#11-review","title":"1.1 Review","text":"<ul> <li>NP-C: \u5f88\u96be\u7684\u95ee\u9898</li> <li>approximation: \u66b4\u529b\u7b97\u6cd5\u7684 baseline</li> <li>local search: \u5c40\u90e8\u6700\u4f18\u7684\u4f18\u5316</li> </ul>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#12-random","title":"1.2 Random","text":"<ul> <li>\u4e0d\u540c\u7684\u968f\u673a\u7b97\u6cd5<ul> <li>\u5177\u6709\u8f83\u9ad8\u7684\u6982\u7387\u5f97\u5230\u6700\u4f18\u89e3</li> <li>\u603b\u662f\u80fd\u5f97\u5230\u6700\u4f18\u89e3\uff0c\u4f46\u662f\u671f\u671b\u590d\u6742\u5ea6\u66f4\u4f4e\uff0c\u7c7b\u4f3c amortized</li> </ul> </li> <li>Symmetry-breaking among processes in a distributed system.<ul> <li>\u76f8\u6bd4\u4e4b\u4e0b\uff0clocal search \u5728\u5bf9\u79f0\u7ed3\u6784\u4e0b\u53ef\u80fd\u9677\u5165\u5faa\u73af</li> </ul> </li> </ul> \u7279\u70b9 Monte Carlo Las Vegas \u7ed3\u679c\u51c6\u786e\u6027 \u8fd1\u4f3c\u89e3 \u786e\u5b9a\u89e3 \u6267\u884c\u65f6\u95f4 \u786e\u5b9a \u4e0d\u786e\u5b9a <p>\u5916\u5c42\u4f7f\u7528 Monte Carlo\uff0c\u5185\u5c42\u4f7f\u7528 Las Vegas\uff0c\u53ef\u4ee5\u786e\u4fdd\u5728\u6709\u9650\u65f6\u95f4\u91cc\u603b\u662f\u5f97\u5230\u6b63\u786e\u89e3</p>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#2-hiring-problem","title":"2 Hiring Problem","text":"<p>Question</p> <p>\u8fde\u7eed\u9762\u8bd5 \\(N\\) \u4e2a\u4eba\uff0c\u6bcf\u6b21\u9762\u8bd5\u5f00\u9500 \\(C_i\\)\uff0c\u6bcf\u6b21\u7ed9\u5f53\u524d\u6700\u4f18\u7684\u4eba\u4e00\u7b14\u7b7e\u540d\u8d39 \\(C_h\\)\uff0c\u5982\u679c\u96c7\u4f63\u4e86 \\(M\\) \u4eba\uff0c\u90a3\u4e48\u603b\u5f00\u9500\u662f \\(NC_{i}+MC_{h}\\)</p>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#21-strategy-1","title":"2.1 Strategy 1","text":"<p>\u6bcf\u6b21\u90fd\u7b7e\u6bd4\u5148\u524d\u9762\u8bd5\u8005\u90fd\u597d\u7684</p> <p>worst case</p> <p>\u6309\u7167\u6c34\u5e73\u9012\u589e\u7684\u987a\u5e8f\u6765\u9762\u8bd5\uff0c\u5168\u90fd\u7b7e\u4e86</p>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#22-strategy-2","title":"2.2 Strategy 2","text":"<p>\u5148\u968f\u673a\u6253\u4e71\u987a\u5e8f\uff0c\u518d\u8fdb\u884c strategy 1</p> <ul> <li>\u968f\u673a\u6392\u5217 (permute)</li> <li>\\(E(P\\{i \\text{ is hired}\\})=\\frac{1}{i}\\)<ul> <li>\u5bf9\u4e8e\u4e00\u4e2a\u6570\u7ec4\uff0c\u7b2c \\(i\\) \u4e2a\u6570\u5b57\u521a\u597d\u662f\u524d \\(i\\) \u4e2a\u4e2d\u6700\u5927\u7684\u6982\u7387</li> </ul> </li> <li>\u4e8e\u662f\u5c31\u6709\u4e86\u5bf9\u6570\u5173\u7cfb \\(O(C_{h}\\ln N+NC_{i})\\)</li> </ul>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#221-permute-algo","title":"2.2.1 Permute Algo","text":"<p>\u5982\u4f55 permute \u4e00\u4e2a\u6570\u7ec4</p> <ul> <li>\u7ed9\u6bcf\u4e00\u4e2a\u5143\u7d20\u8d4b\u4e88\u4e00\u4e2a\u968f\u673a\u6570</li> <li>\u6309\u7167\u8fd9\u4e2a\u968f\u673a\u6570\u8fdb\u884c\u6392\u5e8f</li> <li>\u4ea7\u751f\u7684\u662f\u5747\u5300\u968f\u673a\u6392\u5217 (uniform random permutation)</li> </ul>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#23-strategy-3","title":"2.3 Strategy 3","text":"<p>\u5bf9\u4e8e\u524d\u9762 \\(k\\) \u4e2a\u4eba\uff0c\u627e\u5230\u4ed6\u4eec\u5f53\u4e2d\u80fd\u529b\u7684\u6700\u9ad8\u503c\uff0c\u4f46\u662f\u5e76\u4e0d\u4f1a\u96c7\u4f63\u4ed6\u4eec\uff1b\u7136\u540e\u5bf9\u4e8e\u540e\u9762\u7684\u9762\u8bd5\u8005\uff0c\u5982\u679c\u80fd\u529b\u9ad8\u4e8e\u8fd9\u4e2a\u9608\u503c\uff0c\u5c31\u96c7\u4f63\u5e76\u505c\u6b62\u9762\u8bd5</p> <ul> <li>\\(i\\,(i&gt;k)\\) \u521a\u597d\u662f\u80fd\u529b\u6700\u4f18\u8005\u4e14\u88ab\u96c7\u4f63\u7684\u6982\u7387<ul> <li>\\(i\\) \u80fd\u529b\u6700\u4f18 \\(1/N\\)</li> <li>\u96c7\u4f63 \\(i\\)\uff0c\u610f\u5473\u7740\u524d\u9762\u7684\u4eba\u90fd\u6ca1\u88ab\u96c7\u4f63\uff0c\u4e5f\u5c31\u662f\u8bf4\u524d \\(i-1\\) \u4e2a\u4eba\u4e2d\u6700\u4f18\u7684\u5728\u524d \\(k\\) \u4e2a\uff0c\\(k/(i-1)\\)</li> <li>\u6240\u4ee5\u6982\u7387\u4e3a \\(\\frac{k}{N(i-1)}\\)</li> </ul> </li> <li>\u96c7\u4f63\u5230\u80fd\u529b\u6700\u4f73\u7684\u5019\u9009\u8005\u7684\u6982\u7387\uff0c\u5c31\u662f \\(p=\\sum_{k+1}^N \\frac{k}{N(i-1)}\\)<ul> <li>\u6839\u636e\u79ef\u5206\u7ed3\u679c\u5f97\u5230\u4e0d\u7b49\u5f0f \\(\\frac{k}{N}\\ln(\\frac{N}{k})\\leq p\\leq \\frac{k}{N}\\ln(\\frac{N-1}{k-1})\\)</li> <li>\u6c42\u5bfc\u5f97\u5230\u6700\u4f73\u7684 \\(k=\\frac{N}{e}\\)\uff0c\u800c\u4e14\u96c7\u4f63\u5230\u80fd\u529b\u6700\u4f73\u5019\u9009\u4eba\u7684\u6982\u7387\u81f3\u5c11\u4e3a \\(\\frac{1}{e}\\)</li> </ul> </li> </ul> <p>Warning</p> <p>\u65e0\u6cd5\u4fdd\u8bc1\u627e\u5230\u6700\u4f18\u89e3</p> <p>Note</p> <p>\u8fd9\u79cd online \u7b97\u6cd5\u4e2d\uff0c\u5982\u679c\u96c7\u4f63\u4e86\u80fd\u529b\u8d85\u8fc7\u524d \\(k\\) \u4e2a\u4eba\u800c\u7ee7\u7eed\u5bfb\u627e\uff0c\u9884\u671f\u96c7\u4f63\u4eba\u6570\u4e3a \\(\\frac{N-k}{k+1}\\)</p>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#3-randomized-quicksort","title":"3 Randomized Quicksort","text":"<p>Quicksort</p> <ul> <li>worst: \\(\\Theta(N^2)\\)</li> <li>average: \\(\\Theta(N\\log N)\\)</li> </ul> <p>\u4e3a\u4e86\u51cf\u5c11\u6700\u574f\u60c5\u51b5\u51fa\u73b0\u7684\u6982\u7387\uff0c\u9700\u8981\u5bf9 pivot \u7684\u9009\u62e9\u5f15\u5165\u968f\u673a\u6027</p>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#31-central-splitter","title":"3.1 Central Splitter","text":"<ul> <li>\u5bfb\u627e central splitter<ul> <li>\u4fdd\u8bc1\u6539\u8fdb\u540e\u7684 quicksort \u59cb\u7ec8\u80fd\u591f\u9009\u51fa\u4e00\u4e2a central splitter</li> <li>\u9884\u671f\u5bfb\u627e central splitter \u7684\u8fed\u4ee3\u6b21\u6570\u4e3a 2</li> </ul> </li> <li>\u590d\u6742\u5ea6\u8ba1\u7b97<ul> <li>\u8bc1\u660e\u7701\u7565<ul> <li> \u7528 divide and conquer \u6765\u8bc1\u660e\u53ef\u4ee5\u5417\uff1f </li> </ul> </li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u7a33\u5b9a\u7684 \\(O(N\\log N)\\)</li> </ul> </li> </ul>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#4-discussion","title":"4 Discussion","text":"","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#41-randomized-quicksort","title":"4.1 Randomized Quicksort","text":"<p>Question</p> <p>Let's consider the Randomized Quicksort where each pivot is randomly chosen from the subsequence. The following is the pseudo-code:</p> <pre><code>RandQSort( A, L, R ) {\n    if (L &lt; R) {\n        i = random(L, R);\n        swap(A[i], A[R]);\n        p = Partition(A, L, R);\n        RandQSort( A, L, p-1 );\n        RandQSort( A, p+1, R );\n    }\n}\n</code></pre> <p>Show that the expected running time is \\(O(n \\log n)\\) for sorting \\(A[1\\dots n]\\).</p> <p>Hint: <code>Partition</code> is called \\(n\\) times. Each call takes a constant time plus the number of comparisons with the pivot. Hence the total run time is \\(O(n+X)\\) where \\(X\\) is the total number of comparisons with the pivots. You need to prove that \\(E[X]=O(n\\log n)\\).</p> <p>Assume the sorted array is \\(R[1\\dots n]\\), and there exist \\(r_i\\) and \\(r_j\\) where \\(i&lt;j\\) and \\(r_i&lt;r_j\\).</p> <p>If there has been a comparison between \\(r_i\\) and \\(r_j\\), then \\(r_i\\) or \\(r_j\\) should be the first chosen pivot out of \\(R[i\\dots j]\\), (or \\(r_i\\) and \\(r_j\\) would be partitioned and would never be compared), whose probability is \\(\\frac{2}{j-i+1}\\), which is also the expectation number of comparison happened between any two numbers.</p> <p>Then, for all the number pairs \\((r_i,r_j)\\), add the expectation up:</p> \\[ \\begin{align} E(\\text{\\#comparisons})&amp;=\\sum_{i=1}^{n-1}\\sum_{j=i+1}^{n}\\frac{2}{j-i+1} \\\\ &amp;=O(\\int_{1}^n\\int_{i}^n \\frac{1}{j-i+1}\\, \\mathrm{d}j\\, \\mathrm{d}i)\\\\ &amp;=O(\\int_{1}^n \\ln(n-i+1)\\,\\mathrm{d}i) \\\\ &amp;=O(n\\ln n) \\end{align} \\] <p>Thus, the overall expected time complexity is \\(O(n \\ln n)\\).</p>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#42-max-3-sat-problem","title":"4.2 MAX 3-SAT Problem","text":"<p>Question</p> <p>Given a \\(3\\)-SAT formula with \\(k\\) clauses, in which each clause has three variables, the MAX 3-SAT problem is to find a truth assignment that satisfies as many clauses as possible. A simple randomized algorithm is to flip a coin, and to set each variable true with probability \\(1/2\\), independently for each variable.</p> <p>Prove that the expected number of clauses satisfied is \\(7k/8\\). Hence if we repeatedly generate random truth assignments until one of them satisfies \\(\\ge 7k/8\\) clauses, then this algorithm is a \\(8/7\\)-approximation algorithm.</p> <p>A clause has 3 varibles, for example \\((\\neg x_{1} \\vee x_{2} \\vee \\neg x_{3})\\). For all truth assignments, the probability that one clause is true is:</p> \\[ p=1-(\\frac{1}{2})^3=\\frac{7}{8} \\] <p>Thus, if there are \\(k\\) clauses, for one assignment, \\(E(\\text{\\# true clauses})=7k/8\\).</p> <p>The optimal solution can satisfiy \\(n^*(\\leq k)\\) clauses. If one truth assignment satisfies \\(n\\geq 7k/8\\). Then:</p> \\[ \\rho=\\frac{n^*}{n}\\leq \\frac{8}{7} \\] <p>Then this is a \\(8/7\\)-approximation algorithm.</p>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#421-more-about","title":"4.2.1 More about","text":"<ul> <li>\u8003\u8651 MAX 3-SAT Problem \u6700\u4f18\u89e3\u7684\u6027\u8d28<ul> <li>\u5982\u679c\u7ea6\u675f\u975e\u5e38\u591a\uff0c\u4f8b\u5982 \\(x_{1},x_{2},x_{3}\\) \u80fd\u6784\u6210\u7684\u516b\u4e2a clause \u90fd\u51fa\u73b0\uff0c\u90a3\u4e48\u53ea\u80fd\u6709 \\(7/8\\) \u6ee1\u8db3</li> <li>\u4f46\u662f\u5982\u679c\u7ea6\u675f\u6ca1\u90a3\u4e48\u591a\uff0c\u80af\u5b9a\u5927\u4e8e \\(7/8\\)</li> <li>\u4e8e\u662f\uff0c\u5bf9\u4e8e\u4efb\u610f\u7684 MAX 3-SAT \u95ee\u9898\uff0c\u90fd\u4e00\u5b9a\u80fd\u627e\u5230 \\(\\geq 7/8\\) \u7684\u89e3</li> </ul> </li> </ul>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#5-questions","title":"5 Questions","text":"","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#51-ex13","title":"5.1 Ex13","text":"","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#511-las-vegas-and-monte-carlo","title":"5.1.1 Las Vegas and Monte Carlo","text":"<p>A Las Vegas algorithm is a randomized algorithm that always gives the correct result, however the runtime of a Las Vegas algorithm differs depending on the input. A Monte Carlo algorithm is a randomized algorithm whose output may be incorrect with a certain (typically small) probability. The running time for the algorithm is fixed however. Then if a Monte Carlo algorithm runs in \\(O(n^2)\\) time, with the probability 50% of producing a correct solution, then there must be a Las Vegas algorithm that can get a solution in \\(O(n^2)\\) time in expectation.</p> Answer <p>T\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a monte carlo \u7b97\u6cd5\u6765\u6784\u9020\u4e00\u4e2a las vegas \u7b97\u6cd5\uff0cmonte carlo \u671f\u671b\u8fd0\u884c\u4e24\u6b21\uff0c\u5982\u679c las vegas \u53cd\u590d\u8c03\u7528 monte carlo \u76f4\u5230\u5f97\u5230\u89e3\uff0c\u90a3\u4e48\u5b83\u4e5f\u662f \\(O(n^2)\\) \u7684</p>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#512-balls-and-boxes","title":"5.1.2 Balls and boxes","text":"Answer <p>D</p> <p>\u4ece\u7bb1\u5b50\u7684\u89d2\u5ea6\uff0c\u8003\u8651\u4e00\u4e2a\u7bb1\u5b50\u88ab\u51e0\u4e2a\u7403\u9009\u4e2d\uff0c\u6bd4\u8f83\u65b9\u4fbf\u601d\u8003\uff0c\u6bcf\u4e2a\u7bb1\u5b50\u88ab \\(X \\sim B(m,\\frac{1}{m})\\) \u4e2a\u7403\u9009\u4e2d</p> <p>C \u663e\u7136\uff0c\u6709\u591a\u5c11\u4e2a\u7a7a\u7bb1\u5b50\uff0c\u5c31\u6709\u591a\u5c11\u4e2a rejected balls\uff0c\u6240\u4ee5 C \u6b63\u786e D \\(1-(\\frac{m-1}{m})^m-C_{m}^1 \\frac{1}{m}(\\frac{m-1}{m})^{m-1}=1-\\frac{2}{e}\\)</p>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#513-k-th-smallest-number","title":"5.1.3 k-th Smallest Number","text":"Answer <p>Master theorm</p> <p>\\(T(n)\\leq T(3n/4)+O(n)\\) \\(a=1,b=4/3,k=1\\)\uff0c\u6ee1\u8db3\u4e86 \\(a&lt;b^k\\) \u6240\u4ee5 \\(O(n)\\)</p>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#52-q14","title":"5.2 Q14","text":"","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#521-best-in-online-hiring","title":"5.2.1 Best in online hiring","text":"<p>Consider the online hiring problem, in which we have total k candidates. First of all, we interview n candidates but reject them all. Then we hire the first candidate who is better than all of the previous candidates you have interviewed. It is true that the probability of the mth candidate is the best is \\(\\frac{n}{k(m-1)}\\)\u200b, where m&gt;n.</p> Answer <p>T\uff0c\u8fd9\u91cc\u7684 best \u6307\u7684\u662f\u96c7\u4f63\u5230\u6700\u597d\u7684\u5019\u9009\u8005</p> <ul> <li>\u6700\u597d\u7684\u5019\u9009\u8005\u5728 \\(m\\)\uff0c\u6982\u7387\u4e3a \\(1/m\\)</li> <li>\u5728\u4e0a\u8ff0\u60c5\u51b5\u4e0b\uff0c\u96c7\u4f63\u5230 \\(m\\) \u7684\u6761\u4ef6\u6982\u7387\u4e3a \\(n/(m-1)\\)\uff0c\u610f\u5473\u7740\u524d\u9762 \\(m-1\\) \u4e2a\u4eba\u4e2d\u6700\u597d\u7684\u4eba\u88ab\u9009\u5230\u4e86\u524d \\(n\\) \u4e2a\u4eba\u91cc</li> </ul>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2013%20Randomized%20Algorithms.html#522-max-3-sat","title":"5.2.2 MAX 3-SAT","text":"Answer <p>B C \u8fd9\u662f\u6b63\u786e\u7684\uff0c\u5373\u4f7f\u7ea6\u675f\u6700\u5927\uff0c\u4e5f\u80fd\u8fbe\u5230 \\(7/8\\) B \u9519\u8bef\uff0c\u56e0\u4e3a\u671f\u671b\u5c31\u662f \\(7k/8\\)\uff0c\u6982\u7387\u4e0d\u53ef\u80fd\u90a3\u4e48\u5c0f\uff0c\u5177\u4f53\u8ba1\u7b97\u53ef\u80fd\u9700\u8981\u4e8c\u9879\u5206\u5e03\uff08\u6216\u6b63\u6001\u5206\u5e03\u8fd1\u4f3c\uff09</p>","tags":["Algorithm/Problem/Max-3-SAT","Algorithm/Random"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html","title":"14 Parallel Algorithms","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#1-introduction","title":"1 Introduction","text":"<ul> <li>Machine parallelism<ul> <li>multiple processors</li> <li>pipelning</li> <li>Very-Long Inst Word (VLIW)</li> </ul> </li> <li>Parallel algorithms</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#11-models","title":"1.1 Models","text":"<ul> <li>Parallel Random Access Machine (PRAM) \u5e76\u884c\u968f\u673a\u8bbf\u95ee\u673a</li> <li>Work-Depth (WD) \u5de5\u4f5c\u6df1\u5ea6</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#12-basic-concepts","title":"1.2 Basic concepts","text":"<ul> <li>Unit time, \u8bfb\u5199\u8ba1\u7b97\u7684\u64cd\u4f5c\u90fd\u7b80\u5316\u4e3a\u5355\u4f4d\u65f6\u95f4</li> <li>Shared memory, \u6240\u6709\u5904\u7406\u5668\u90fd\u4f7f\u7528\u540c\u4e00\u5757\u5185\u5b58</li> </ul> vector_add<pre><code>for Pi, 1&lt;=i&lt;=n pardo\n    A(i):=B(i)\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#2-conflicts","title":"2 Conflicts","text":"step2\\1 R W R no conflict W no conflict"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#21-exclusive-read-exclusive-write-erew","title":"2.1 Exclusive-Read Exclusive-Write (EREW)","text":"<ul> <li>\u5b8c\u5168\u4e0d\u5141\u8bb8\u540c\u65f6\u8bfb\u5199</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#22-concurrent-read-exclusive-write-crew","title":"2.2 Concurrent-Read Exclusive-Write (CREW)","text":"<ul> <li>\u540c\u65f6\u8bfb\uff0c\u5206\u5f00\u5199</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#23-concurrent-read-concurrent-write-crcw","title":"2.3 Concurrent-Read Concurrent-Write (CRCW)","text":"<ul> <li>\u540c\u65f6\u8bfb\uff0c\u540c\u65f6\u5199</li> <li>\u540c\u65f6\u5199\u51b2\u7a81\u89e3\u51b3<ul> <li>Arbitrary rule</li> <li>Priority rule: \u6bcf\u4e2a\u5904\u7406\u5668\u5206\u914d\u4e00\u4e2a\u6743\u91cd\uff0c\u5199\u5165\u4f18\u5148\u7ea7\u9ad8\u7684</li> <li>Common rule: \u5982\u679c\u6240\u6709\u5199\u5165\u7684\u503c\u90fd\u4e00\u6837\uff0c\u624d\u5141\u8bb8\u540c\u65f6\u5199</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#24-paralell-find_max","title":"2.4 Paralell <code>find_max</code>","text":"find_max<pre><code>for i, j in [1, n], pardo\n    if x[i] &lt; x[j]:\n        m[i] = 1\nfor i in [i, n], pardo\n    if m[i] == 0:\n        max = x\nreturn max\n</code></pre> <p>\u5229\u7528\u4e86 common rule</p> <ul> <li>\\(\\text{Depth}=O(1)\\)</li> <li>\\(\\text{Work}=O(N^2)\\)</li> <li>\\(T=\\text{Depth}=O(1)\\)</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#3-parallel-summation","title":"3 Parallel Summation","text":"<ul> <li>\\(\\text{Depth}=O(\\log N)\\)</li> <li>\\(\\text{Work}=O(N)\\)</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#31-pram-model","title":"3.1 PRAM Model","text":"PRAM Model<pre><code>for i in [1, N] pardo\n    B[0, i] = A[i]\nfor h=1 to log(N) do\n    if i &lt;= n / 2^h\n        B[h, i] = B[h-1, 2*i-1] + B[h-1, 2*i]\n    else stay idle\n\nfor i = 1: output B[log(N), 1]; for i &gt; 1: stay idle\n</code></pre> <p>Bug</p> <ul> <li>\u65e0\u6cd5\u63ed\u793a\u7b97\u6cd5\u548c\u5b9e\u9645\u4f7f\u7528\u7684\u5904\u7406\u5668\u4e2a\u6570\u4e4b\u95f4\u7684\u5173\u7cfb</li> <li>\u8be5\u6a21\u578b\u9700\u8981\u6307\u5b9a\u54ea\u4e2a\u5904\u7406\u5668\u5904\u7406\u54ea\u90e8\u5206\u7684\u6307\u4ee4\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u77e5\u9053\u4e00\u4e9b\u53ef\u80fd\u4e0d\u592a\u5fc5\u8981\u7684\u7ec6\u8282\uff0c\u4f8b\u5982\u4e0a\u9762\u7684 <code>stay idle</code></li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#32-work-depth-wd-presentation","title":"3.2 Work-Depth (WD) Presentation","text":"WD Model<pre><code>for i in [1, n] pardo\n    B[0, i] = A[i]\nfor h=1 to log(N)\n    for i in [1, n/2^h] pardo\n        B[h, i] = B[h-1, 2*i-1] + B[h-1, 2*i]\nfor i = 1 pardo\n    output B(log N, 1)\n</code></pre> <p>Tip</p> <p>\u8fd9\u91cc\u4e0e PRAM \u4e0d\u540c\uff0c\u4e0d\u518d\u663e\u5f0f\u5730\u6307\u51fa\u6bcf\u4e2a\u5904\u7406\u5668\u5e94\u8be5\u5e72\u4ec0\u4e48</p> <p></p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#4-performance-measurement","title":"4 Performance Measurement","text":"<ul> <li>Work load \\(W(n)\\)</li> <li>Running time \\(T(n)\\)</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#41-pram","title":"4.1 PRAM","text":"<ul> <li>\u5c06\u5904\u7406\u5668\u4e2a\u6570\u4e0e\u5b9e\u9645\u590d\u6742\u5ea6\u5173\u8054\uff0c\u5176\u4e2d\u7684 \\(T(n)\\) \u8868\u793a\u7684\u662f\u7406\u60f3\u72b6\u6001\u4e0b\uff08\u65e0\u9650\u5904\u7406\u5668\u4e2a\u6570\uff09\u7684 worst case time<ul> <li>PRAM: \\(P(n)=W(n)/T(n)\\) processors and \\(T(n)\\) time</li> <li>PRAM: \\(W(n)/p\\) time using any number of \\(p\\leq W(n)/T(n)\\) processors</li> <li>PRAM: \\(W(n)/p+T(n)\\) time using any number of \\(p\\) processors</li> </ul> </li> <li>All asymptotically equivalent</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#42-wd","title":"4.2 WD","text":"<p>Brent's Theorem</p> \\[ \\frac{W}{p}\\leq T(n) \\leq \\frac{W}{p}+D \\]"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#421-discussion","title":"4.2.1 Discussion","text":"<p>Question</p> <p>Please prove that a parallel algorithm with workload \\(W\\) and depth \\(D\\) can be implemented in \\(W/p+D\\) time using \\(p\\) processors for any \\(p&gt;0\\).</p> <p>Assume that the workload on \\(\\text{depth}=i\\) is \\(w_{i}\\). </p> <p>In the worst case that each layer must be totally completed before executing any workload of the upper layer, we have \\(t_{i}=\\lceil w_{i}/p \\rceil\\), then:</p> \\[ T=\\sum_{i=1}^D t_{i}\\leq \\sum_{i=1}^D (\\frac{w_{i}}{p}+1)=\\frac{W}{p}+D \\]"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#5-prefix-sums","title":"5 Prefix Sums","text":"<p>Question</p> <p>\u6c42\u4e00\u4e2a\u5e8f\u5217\u6240\u6709\u7684 \\(n\\) \u4e2a\u524d\u5e8f\u548c</p> <p>\u53ef\u4ee5\u501f\u52a9\u6c42\u548c\u95ee\u9898\uff1a\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u6c42\u548c\u7684\u6811\u72b6\u7ed3\u6784\u548c\u6bcf\u4e2a node \u7684\u503c <code>B[h, i]</code>\uff0c\u90a3\u4e48\u53ef\u4ee5\u8fdb\u4e00\u6b65\u6c42\u51fa <code>C[h, i]</code> \uff0c\u8868\u793a\u5230\u5176\u53f3\u53f6\u5b50\u7684\u524d\u7f00\u548c</p> <p></p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#51-implementation","title":"5.1 Implementation","text":"<ul> <li>\u9996\u5148\uff0c\u5de6\u8def\u5f84\u4e0a <code>C[h, 1] = B[h, 1]</code></li> <li>\u5176\u6b21\uff0c\u6bcf\u4e00\u5c42\u7684\u5076\u6570\u8282\u70b9\u90fd\u7b49\u4e8e\u7236\u8282\u70b9 <code>if (1 % 2 == 0) C[h, i] := C(h + 1, i / 2)</code></li> <li>\u6700\u540e\uff0c\u8ba1\u7b97\u9664\u4e86\u5de6\u8def\u5f84\u5916\u7684\u6240\u6709\u5947\u6570\u8282\u70b9\uff0c\u76f8\u5f53\u4e8e\u5176\u5de6\u4e0a\u65b9\u8282\u70b9\u7684\u503c\u52a0\u4e0a\u81ea\u5df1\u7684 B \u503c<ul> <li><code>if (i % 2 == 0 &amp;&amp; i != 1) C[h, i] := C[h+1, (i - 1) / 2] + B(h, i)</code></li> </ul> </li> </ul> <p>Note</p> <p>top-down\uff0c\u6bcf\u4e00\u5c42\u90fd\u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#52-wd-analysis","title":"5.2 WD Analysis","text":"<ul> <li>\\(T(N)=O(N \\log N)\\)<ul> <li>Prefix Sum \u548c Summation \u662f\u4e00\u6837\u96be\u7684</li> </ul> </li> <li>\\(W(N)=O(N)\\)</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#6-merging","title":"6 Merging","text":"<p>\u5c06\u4e24\u4e2a\u975e\u9012\u51cf\u7684\u6570\u7ec4 \\(A,B\\) \u5408\u5e76\u5230\u4e00\u4e2a\u6570\u7ec4 \\(C\\)</p> <p>\u8fdb\u884c\u4e0b\u5217\u7b80\u5316</p> <ul> <li>\\(A,B\\) \u5143\u7d20\u4e0d\u91cd\u590d</li> <li>\\(A,B\\) \u957f\u5ea6\u76f8\u7b49</li> <li>\\(\\log n,\\frac{n}{\\log n}\\) \u5747\u4e3a\u6574\u6570</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#61-partition","title":"6.1 Partition","text":"<ul> <li>\u5c06\u8f83\u5927\u7684\u4efb\u52a1\u5212\u5206\u6210\u5f88\u591a\u72ec\u7acb\u7684\u5c0f\u4efb\u52a1</li> <li>\u5e76\u884c\u6267\u884c\u8fd9\u4e9b\u5c0f\u4efb\u52a1</li> <li>\u6bcf\u4e2a\u5c0f\u4efb\u52a1\u7528 serial algo \u6765\u89e3\u51b3</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#62-ranking","title":"6.2 Ranking","text":"\\[ \\text{RANK}(j, A)=\\begin{cases} i &amp;\\text{if }A(i)&lt;B(j)&lt;A(i+1), \\text{for} 1\\leq i&lt;n \\\\ 0 &amp;\\text{if }B(j)&lt;A(1) \\\\ n &amp;\\text{if }B(j)&gt;A(n)  \\end{cases} \\] <ul> <li>\\(\\text{RANK}(j,A)\\) \u8868\u793a\u5143\u7d20 \\(j\\) \u5728\u975e\u9012\u51cf\u7684 \\(A\\) \u4e2d\u7684\u63d2\u5165\u4f4d\u7f6e\u7d22\u5f15</li> <li>\u6700\u7ec8\u5728 \\(C\\) \u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u5c31\u662f\u4e24\u4e2a RANK \u4e4b\u548c</li> </ul> <pre><code>for P_i, 1 &lt;= i &lt;= n pardo\n    C[i + RANK(i, B)] := A[i]\nfor P_i, 1 &lt;= i &lt;= n pardo\n    C[i + RANK(i, A)] := B[i]\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#63-ranking-methods","title":"6.3 Ranking Methods","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#631-\u5e76\u884c\u4e8c\u5206\u67e5\u627e","title":"6.3.1 \u5e76\u884c\u4e8c\u5206\u67e5\u627e","text":"<ul> <li>\\(T(n)=O(\\log n)\\)</li> <li>\\(W(n)=O(n\\log n)\\)</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#632-\u4e32\u884c\u53cc\u6307\u9488","title":"6.3.2 \u4e32\u884c\u53cc\u6307\u9488","text":"<ul> <li>\\(T(n)=O(m+n)\\)</li> <li>\\(W(n)=O(m+n)\\)</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#633-parallel-ranking","title":"6.3.3 Parallel Ranking","text":"<p>\u5047\u8bbe \\(m=n\\)\uff0c\u800c\u4e14 \\(A(n+1), B(n+1)\\) \u90fd\u6bd4 \\(A(n),B(n)\\) \u5927</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#6331-stage-1-partitioning","title":"6.3.3.1 Stage 1: Partitioning","text":"<ul> <li>\u5047\u8bbe\u6709 \\(p=n/\\log n\\) \u4e2a\u5904\u7406\u5668</li> <li>\u9996\u5148\u8fdb\u884c\u9009\u62e9\uff0c\u4ee5 \\(\\log n\\) \u4e3a\u6b65\u957f\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u9009\u62e9\u90e8\u5206\u5143\u7d20</li> <li>\u7136\u540e\u5bf9\u9009\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f \u4e0b\u56fe\u4e2d\u7684\u7bad\u5934\u6807\u8bb0\u4e86\u63d2\u5165\u4f4d\u7f6e</li> <li>\u8f6c\u5316\u6210\u5b50\u95ee\u9898 \u4e0b\u56fe\u4e2d\u90e8\u5206\u6807\u8bb0\u4e3a\u7eff\u8272</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#6332-stage-2-actural-ranking","title":"6.3.3.2 Stage 2: Actural Ranking","text":"<p>\u6700\u591a\u5f97\u5230 \\(2p\\) \u4e2a \\(O(\\log n)\\) \u5927\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u5206\u522b\u8fdb\u884c\u4e32\u884c\u6392\u5e8f</p> <ul> <li>\\(W(n)=\\frac{2n}{\\log n} O(\\log n)=O(n)\\)</li> <li>\\(T(n)=O(\\log n)\\)</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#7-ultimate-parallel-find_max","title":"7 Ultimate Parallel <code>find_max</code>","text":"no. type \\(T\\) \\(W\\) a serial \\(N\\) \\(N\\) b binary \\(\\log N\\) \\(N\\) c pair-wise brute-force \\(1\\) \\(N^2\\) d.1 \\(\\log \\log N\\) \\(N\\log \\log N\\) d.2 \\(\\log \\log N\\) \\(N\\)"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#71-a-doubly-logarithmic-paradigm","title":"7.1 A Doubly-logarithmic Paradigm","text":"<p>\u5047\u8bbe \\(h=\\log \\log n\\) \u662f\u6574\u6570\uff0c\\(n=2^{2^h}\\)\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#711-sqrt-n-partition-d1","title":"7.1.1 \\(\\sqrt{ n }\\) partition d.1","text":"<p>\u6bcf\u4e00\u5c42\u90fd\u7528 \\(\\sqrt{ n }\\) \u8fdb\u884c\u5206\u6cbb\uff0c\u90a3\u4e48\u5728\u6bcf\u4e00\u5c42\u7684 conquer \u5f00\u9500\u4e3a\uff1a</p> <ul> <li>\\(T=C_{1}\\)</li> <li>\\(W=C_{2}n\\)</li> </ul> <p>\u90a3\u4e48\u6709</p> \\[ \\begin{align} T(n)&amp;\\leq T(\\sqrt{ n })+C_{1} \\\\ W(n)&amp;\\leq \\sqrt{ n }W(\\sqrt{ n })+C_{2}n \\end{align} \\] <p>\u6240\u4ee5 \\(T(n)=O(\\log \\log n),\\,W(n)=O(n\\log \\log n)\\)\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#712-h-partition-d2","title":"7.1.2 \\(h\\)-partition d.2","text":"<p>\u7b2c\u4e00\u5c42\u5148\u7528 \\(h\\)-partition\uff0c\u540e\u9762\u8fd8\u662f \\(\\sqrt{ n }\\)-partition\uff1b\u90a3\u4e48\u7b2c\u4e00\u5c42\u5206\u8fc7\u4e4b\u540e\uff0c\u6709 \\(n/h\\) \u4e2a\u5927\u5c0f\u4e3a \\(h\\) \u7684\u5b50\u95ee\u9898\uff0c\u6bcf\u4e2a\u5b50\u95ee\u9898\u6709 \\(T=O(\\log \\log (n/h)),\\,W=O((n/h)\\log \\log (n/h))\\)\uff1b\u6700\u540e\u518d\u8fdb\u884c\u4e00\u4e2a \\(T=O(h),\\,W=O(h \\cdot(n/h))\\) \u7684 conquer\uff1a</p> \\[ \\begin{align} T(n)&amp;=O(h+\\log \\log(n/h))&amp;&amp;=O(\\log \\log n) \\\\ W(n)&amp;=O(h\\cdot(n/h)+(n/h)\\log \\log(n/h))&amp;&amp;=O(n) \\end{align} \\]"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#713-random-sampling-d3","title":"7.1.3 Random Sampling d.3","text":"<p>\\(T=O(1),\\,W=O(n)\\), with very high probability, on an Arbitrary CRCW PRAM</p> <p></p> <ol> <li>\u968f\u673a\u9009\u62e9 \\(n^{7/8}\\) \u4e2a\u5143\u7d20\uff0c\u5206\u6210 \\(n^{3/4}\\) \u4e2a\u5927\u5c0f\u4e3a \\(n^{1/8}\\) \u7684\u5757<ul> <li>\\(T=O(1)\\)\uff0c\u53ef\u4ee5\u5e76\u884c\u9009\u62e9</li> <li>\\(W=O(n^{7/8})\\)</li> </ul> </li> <li>\u5bf9\u8fd9 \\(n^{3/4}\\) \u4e2a\u5757\u8fdb\u884c\u5e76\u884c maximum finding<ul> <li>\\(T=O(1)\\)</li> <li>\\(W_{i}=O(n^{1/4}), W=n^{3/4}O(n^{1/4})=O(n)\\)</li> </ul> </li> <li> <p>\u7136\u540e\uff0c\u8ba9 \\(n\\) \u4e2a\u5904\u7406\u5668\u62ff\u7740\u627e\u5230\u7684\u6700\u5927\u503c\u4e0e\u539f\u6765\u7684 \\(n\\) \u4e2a\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u539f\u6765\u7684\u5143\u7d20\u6bd4\u8fd9\u4e2a\u5927\u7684\u8bdd\u5c31\u968f\u673a\u5199\u5165\u5230\u4e00\u4e2a\u957f\u5ea6\u4ecd\u7136\u4e3a \\(n^{7/8}\\) \u7684\u6570\u7ec4\u4e2d\uff0c\u518d\u8fdb\u884c\u4e00\u6b21\uff0c\u76f4\u5230\u627e\u5230\u6700\u5927\u503c</p> </li> <li> <p>\u5f97\u5230\u6b63\u786e\u7ed3\u679c\u7684\u6982\u7387\u76f8\u5f53\u5927\uff0c\u5931\u8d25\u7684\u6982\u7387\u4e3a \\(O(\\frac{1}{n^c})\\)</p> </li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#8-questions","title":"8 Questions","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#81-hw14","title":"8.1 HW14","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#811-merge-sort-complexity","title":"8.1.1 Merge-sort complexity","text":"<p>Sorting-by-merging is a classic serial algorithm. It can be translated directly into a reasonably efficient parallel algorithm. A recursive description follows.</p> <p>MERGE\u2212SORT( A(1), A(2), ..., A(n); B(1), B(2), ..., B(n) )</p> <p>Assume that \\(n=2^l\\) for some integer \\(l\\ge 0\\)</p> <p>if n = 1 then return B(1) := A(1)</p> <p>else call, in parallel, MERGE\u2212SORT( A(1), ..., A(n/2); C(1), ..., C(n/2) ) and</p> <ul> <li>MERGE\u2212SORT(A(n/2+1), ..., A(n); C(n/2+1), ..., C(n) )</li> <li>Merge (C(1),...C(n/2)) and (C(n/2 + 1),...,C(n)) into (B(1), B(2), ..., B(n)) with time O(n)</li> </ul> <p>Then the MERGE\u2212SORT runs in __ .</p> Answer <p>Merge \u4e00\u6b21\u7684\u65f6\u95f4\u5f00\u9500\u662f \\(O(\\log n)\\)\uff0c\u6240\u4ee5\u603b\u4f53\u7684\u65f6\u95f4\u5f00\u9500\u5e94\u8be5\u662f \\(O(\\log^2 n)\\) \u9898\u76ee\u4e2d\u8bf4 \\(O(n)\\) merge\uff0c\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u65e9\u5c31 \\(O(n)\\) \u4e86\uff0c\u4f30\u8ba1\u662f\u9898\u76ee\u7684\u95ee\u9898</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#82-q14","title":"8.2 Q14","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#821-w-d","title":"8.2.1 W-D","text":"<p>In Work-Depth presentation, each time unit consists of a sequence of instructions to be performed concurrently; the sequence of instructions may include any number. (T/F)</p> Answer <p>T, \u5b9a\u4e49\u5c31\u662f\u8fd9\u6837\u8bf4\u7684\uff0c\u53ea\u8981\u7ed9\u5b9a\u4e00\u4e2a unit \u5c31\u884c\u4e86\uff0c\u5185\u90e8\u7684\u64cd\u4f5c\u6570\u91cf\u4efb\u610f</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2014%20Parallel%20Algorithms.html#822","title":"8.2.2","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html","title":"15 External Sorting","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#1-introduction","title":"1 Introduction","text":"<p>Quicksort on a disk is slow because of random access. Use Merge-sort to optimize.</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#11-terms","title":"1.1 Terms","text":"<ul> <li>simplification<ul> <li>\u5c06\u6570\u636e\u5b58\u5728 tape \u4e0a\uff0c\u53ea\u80fd\u987a\u5e8f\u8bbf\u95ee</li> <li>\u81f3\u5c11\u6709 3 \u4e2a tape drives</li> </ul> </li> <li>run: \u5f52\u5e76\u5b50\u5e8f\u5217</li> <li>pass: \u521d\u59cb\u521b\u5efa\u5f52\u5e76\u6bb5\u6216\u8005\u5f52\u5e76\u6bb5\u5927\u5c0f\u589e\u52a0\u4e00\u500d\u79f0\u4e3a\u4e00\u4e2a pass</li> <li>\\(\\text{\\#passes}=1+\\lceil \\log_{2} (N/M) \\rceil\\)<ul> <li>\u6709\u5e8f\u5f52\u5e76\u6bb5\u957f\u5ea6\u6307\u6570\u589e\u957f\uff0c\u6240\u4ee5\u6709 \\(\\lceil \\log_{2}(N/M) \\rceil\\)</li> <li>\u53e6\u5916\u8fd8\u6709\u7b2c\u4e00\u6b21\u6392\u5e8f</li> </ul> </li> </ul> <ul> <li>efficiency concerns<ul> <li>#passes</li> <li>parallelism</li> <li>block</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#2-k-way-merge","title":"2 \\(k\\)-way Merge","text":"<p>\\(k\\)-way\uff0c\u8868\u793a\u4e00\u6b21\u5408\u5e76\u6709 \\(k\\) \u4e2a\u6307\u9488</p> <ul> <li>\u7528 minheap \u5904\u7406\u6bcf\u4e2a way \u7684\u5f53\u524d\u6700\u5c0f\u5143\u7d20\uff0c\u6bcf\u6b21\u5199\u5165\u6700\u5c0f\u7684\u5143\u7d20</li> <li>\u81f3\u5c11\u9700\u8981 \\(2k\\) tape\uff0c\u540c\u4e00\u65f6\u523b\u6709 \\(k\\) \u6761\u8bfb\u3001\\(k\\) \u6761\u5199</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#21-less-tapes-polyphase-merge","title":"2.1 Less tapes: Polyphase merge","text":"<ul> <li>2-way 3 tapes<ul> <li>\u5982\u679c\u6bcf\u6b21\u4e8c\u7b49\u5206\u64cd\u4f5c\uff0c\\(\\text{\\#passes}=1+2\\log_{2}\\lceil N/M \\rceil\\)\uff0c\u56e0\u4e3a\u53ef\u80fd\u51fa\u73b0\u9700\u8981\u4e00\u76f4</li> <li>\u5982\u679c\u4e0d\u5747\u5300\u5206\u5272\uff0c\u6700\u4f18\u65b9\u6cd5\u662f\u8fd1\u4f3c\u6210 fibonacci\uff0c\\(\\text{\\#passes}=1+\\log_{1.618}\\lceil N/M \\rceil\\)</li> </ul> </li> <li>\\(k\\)-way \\(k+1\\) tapes<ul> <li>\\(k\\) \u9636 fibonacci \u5e8f\u5217\uff1a\\(F_{N}=\\sum_{i=N-k}^{N-1}F_{i}\\)\uff0c\u800c\u4e14 \\(F_{k-1}=1, F_{i}=0\\text{ for } i &lt;k-1\\)</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#22-buffers","title":"2.2 Buffers","text":"<ul> <li>internal memory \u5206\u6210 input buffer \u548c output buffer\uff0c\u6700\u5c0f\u5212\u5206\u5355\u4f4d\u662f block</li> <li>\u6bcf\u5f53\u4e00\u4e2a output buffer \u5199\u6ee1\uff0c\u5219\u8f93\u51fa\u5230 disk</li> <li>\u53cc\u7f13\u51b2<ul> <li>\u7ed9 output buffer \u5206\u914d\u4e00\u4e2a\u5907\u4efd\uff0coutput \u4e0d\u4f1a\u6253\u65ad\u6392\u5e8f</li> <li>\u7ed9 input buffer \u4e5f\u5206\u914d\u4e00\u4e2a\u5907\u4efd\uff0cinput \u4e0d\u4f1a\u6253\u65ad\u6392\u5e8f</li> <li>\u6240\u4ee5\u4e00\u5171 \\(k\\)-way \u9700\u8981 \\(2k+2\\) \u4e2a buffer</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#23-longer-run-replacement-selection","title":"2.3 Longer run: Replacement selection","text":"<p>\u8f93\u51fa\u65f6\uff0c\u5728 heap \u4e2d\u7ee7\u7eed\u653e\u5165\u4e0b\u4e00\u4e2a\u6570\uff0c\u76f4\u5230\u8fd9\u4e2a\u6570\u6bd4\u4e0a\u4e00\u4e2a\u8f93\u51fa\u7684\u5c0f\uff0c\u6807\u8bb0\u4e00\u4e2a cut</p> <p>\u671f\u671b run \u957f\u5ea6\u4e3a \\(2M\\)</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#231-minimize-merge-time","title":"2.3.1 Minimize merge time","text":"<p>\u6c38\u8fdc\u53ea\u5408\u5e76\u6700\u5c0f\u7684\uff0c\u6240\u4ee5\u5f62\u6210 Huffman Tree \u7684\u7ed3\u6784</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#3-discussion","title":"3 Discussion","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#31-tournament-trees","title":"3.1 Tournament Trees","text":"<p>Question</p> <p>Tournament tree is a complete binary tree with n external nodes and n\u22121 internal nodes. The external nodes represent the players and internal nodes represent the winner/loser of the match between the two players.</p> <p>There are mainly two type of tournament tree:</p> <ul> <li>Winner tree: each node represents the winner. The final winner is represented by the root.</li> <li>Loser tree: The loser of the match is stored in internal nodes of the tree. But the overall winner of the tournament is stored at tree[0].</li> </ul> <p>Tournament tree may be used in k-way merges.</p> <p>What are the differences between winner and loser trees? Which one would you prefer for k-way merge? Why?</p> <p>The winner tree stores the winner in internal nodes, while loser tree stores the loser in internal nodes. The loser tree is better for k-way merge. When the element on a tape is updated, all the necessary elements to compare is stored in its way to path, thus eliminating unnecessary comparisons.</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#32-the-expected-run-length","title":"3.2 The expected run length","text":"<p>Question</p> <p>Suppose that the internal memory can handle \\(M = 7\\) records at a time. Given the input sequence { 19, 12, 25, 31, 56, 21, 40, 16, 29, 14, 35, 23 }. What are the runs generated by the replacement selection?</p> <p>What is the best case? How about the worst case?</p> <p>Why is the expected length of a run generated by replacement selection \\(2M\\) (where \\(M\\) is the internal memory size)?</p> <p><code>{12, 16, 19, 21, 25, 29, 31, 35, 40, 56}</code>, <code>{14, 23}</code></p> <ul> <li>Worst case: the input sequence is sorted in reversed order, all runs have the length of \\(M\\).</li> <li>Best case: the input sequence is already sorted, only 1 run is generated, and the sorting is done.</li> </ul> <p>For a memory with the size off \\(M\\) records, the expected times that any record in the memory can be replaced in this method is \\(1/0.5=2\\). Thus, the expected length of a run is \\(2M\\).</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#4-questions","title":"4 Questions","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#41-hw15","title":"4.1 HW15","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#411-one-tape-drive","title":"4.1.1 One tape drive","text":"<p>If only one tape drive is available to perform the external sorting, then the tape access time for any algorithm will be \\(\u03a9(N^2)\\).</p> Answer <p>T, \u5bfb\u9053\u65f6\u95f4\u4ece \\(\\Omega (1)\\) \u4e3a \\(\\Omega (N)\\)</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#42-parallel-cycles","title":"4.2 Parallel cycles","text":"<p>Suppose we have the internal memory that can handle 12 numbers at a time, and the following two runs on the tapes:</p> <p>Run 1: 1, 3, 5, 7, 8, 9, 10, 12</p> <p>Run 2: 2, 4, 6, 15, 20, 25, 30, 32</p> <p>Use 2-way merge with 4 input buffers and 2 output buffers for parallel operations. Which of the following three operations are NOT done in parallel?</p> <p>A. 1 and 2 are written onto the third tape; 3 and 4 are merged into an output buffer; 6 and 15 are read into an input buffer B. 3 and 4 are written onto the third tape; 5 and 6 are merged into an output buffer; 8 and 9 are read into an input buffer C. 5 and 6 are written onto the third tape; 7 and 8 are merged into an output buffer; 20 and 25 are read into an input buffer D. 7 and 8 are written onto the third tape; 9 and 15 are merged into an output buffer; 10 and 12 are read into an input buffer</p> Answer <p>D \u56e0\u4e3a\u8fd9\u4e2a\u65f6\u5019\uff0c\u7b2c\u4e00\u4e2a way \u539f\u6709\u7684 <code>(_, 7), (8, 9)</code> \u4e2d <code>(7, 8)</code> \u88ab merge \u4e86\uff0c\u4f46\u662f\u4ecd\u7136\u8981\u7b49\u5f85 <code>(10, 12)</code> \u5728\u4e0b\u4e00\u4e2a\u5468\u671f\u4e2d\u52a0\u8f7d\uff0c\u518d\u4e0b\u4e00\u4e2a\u5468\u671f\u624d\u80fd\u7ee7\u7eed merge <code>(9, 10)</code></p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#43-ex15","title":"4.3 Ex15","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%2015%20External%20Sorting.html#431-to-sort-n-numbers-by","title":"4.3.1 To sort \\(N\\) numbers by...","text":"Answer <p>A \u5f15\u5165\u8d25\u8005\u6811\u540e\uff0c\u6bd4\u8f83\u548c\u5f52\u5e76\u7684\u6b21\u6570\u4e0e \\(k\\) \u65e0\u5173\uff01</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html","title":"Final DP","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#1-\u603b\u7ed3","title":"1 \u603b\u7ed3","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#11-\u80cc\u5305\u95ee\u9898","title":"1.1 \u80cc\u5305\u95ee\u9898","text":"<ul> <li>\u80cc\u5305\uff1a\u4e00\u4e2a\u603b\u548c</li> <li>\u7269\u54c1\uff1a\u80cc\u5305\u91cc\u88c5\u7684\u5143\u7d20</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#111-\u4e0d\u540c\u7684\u904d\u5386\u65b9\u5f0f","title":"1.1.1 \u4e0d\u540c\u7684\u904d\u5386\u65b9\u5f0f","text":"\u4e0d\u8003\u8651\u987a\u5e8f \u8003\u8651\u987a\u5e8f \u4f7f\u7528\u591a\u6b21 \u9006\u5e8f\u66f4\u65b0\u5916\u5c42\u7269\u54c1 \u6b63\u5e8f\u66f4\u65b0\u5916\u5c42\u5bb9\u91cf \u6b63\u5e8f\u66f4\u65b0 \u4f7f\u7528\u4e00\u6b21 \u9006\u5e8f\u66f4\u65b0\u5916\u5c42\u7269\u54c1 \u9006\u5e8f\u66f4\u65b0\u5916\u5c42\u5bb9\u91cf \u9006\u5e8f\u66f4\u65b0 \u5916\u5c42\u7269\u54c1 \u5916\u5c42\u5bb9\u91cf \u7269\u54c1\u91cd\u590d\u4f7f\u7528\uff0c\u4e0d\u8003\u8651\u7269\u54c1\u653e\u5165\u987a\u5e8f <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u00a0<code>n</code>\u00a0\uff0c\u8fd4\u56de\u00a0\u548c\u4e3a\u00a0<code>n</code>\u00a0\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u6700\u5c11\u6570\u91cf\u00a0\u3002</p> <p>\u5b8c\u5168\u5e73\u65b9\u6570\u00a0\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5176\u503c\u7b49\u4e8e\u53e6\u4e00\u4e2a\u6574\u6570\u7684\u5e73\u65b9\uff1b\u6362\u53e5\u8bdd\u8bf4\uff0c\u5176\u503c\u7b49\u4e8e\u4e00\u4e2a\u6574\u6570\u81ea\u4e58\u7684\u79ef\u3002\u4f8b\u5982\uff0c<code>1</code>\u3001<code>4</code>\u3001<code>9</code>\u00a0\u548c\u00a0<code>16</code>\u00a0\u90fd\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u800c\u00a0<code>3</code>\u00a0\u548c\u00a0<code>11</code>\u00a0\u4e0d\u662f\u3002</p> <p>\u793a\u4f8b\u00a01\uff1a</p> <p>\u8f93\u5165\uff1an = <code>12</code> \u8f93\u51fa\uff1a3  \u89e3\u91ca\uff1a<code>12 = 4 + 4 + 4</code></p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1an = <code>13</code> \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a<code>13 = 4 + 9</code></p> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= n &lt;= 104</code></li> </ul> <ul> <li>\u5916\u5c42\u7269\u54c1<ul> <li>\u5185\u5c42\u5bb9\u91cf<ul> <li>\u987a\u5e8f\u66f4\u65b0\uff0c\u5141\u8bb8\u591a\u6b21\u4f7f\u7528</li> </ul> </li> </ul> </li> </ul> \u7269\u54c1\u91cd\u590d\u4f7f\u7528\uff0c\u5e76\u8003\u8651\u7269\u54c1\u653e\u5165\u987a\u5e8f <p>\u7ed9\u4f60\u4e00\u4e2a\u7531\u00a0\u4e0d\u540c\u00a0\u6574\u6570\u7ec4\u6210\u7684\u6570\u7ec4\u00a0<code>nums</code>\u00a0\uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u6574\u6570\u00a0<code>target</code>\u00a0\u3002\u8bf7\u4f60\u4ece\u00a0<code>nums</code>\u00a0\u4e2d\u627e\u51fa\u5e76\u8fd4\u56de\u603b\u548c\u4e3a\u00a0<code>target</code>\u00a0\u7684\u5143\u7d20\u7ec4\u5408\u7684\u4e2a\u6570\u3002</p> <p>\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u7b26\u5408 32 \u4f4d\u6574\u6570\u8303\u56f4\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1anums = [1,2,3], target = 4 \u8f93\u51fa\uff1a7 \u89e3\u91ca\uff1a \u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u4e3a\uff1a (1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (1, 3) (2, 1, 1) (2, 2) (3, 1) \u8bf7\u6ce8\u610f\uff0c\u987a\u5e8f\u4e0d\u540c\u7684\u5e8f\u5217\u88ab\u89c6\u4f5c\u4e0d\u540c\u7684\u7ec4\u5408\u3002</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1anums = [9], target = 3 \u8f93\u51fa\uff1a0</p> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 200</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> <li><code>nums</code>\u00a0\u4e2d\u7684\u6240\u6709\u5143\u7d20\u00a0\u4e92\u4e0d\u76f8\u540c</li> <li><code>1 &lt;= target &lt;= 1000</code></li> </ul> <ul> <li>\u5916\u5c42\u5bb9\u91cf<ul> <li>\u5185\u5c42\u7269\u54c1<ul> <li>\u987a\u5e8f\u66f4\u65b0\uff0c\u5141\u8bb8\u591a\u6b21\u4f7f\u7528</li> </ul> </li> </ul> </li> </ul> \u7269\u54c1\u5355\u6b21\u4f7f\u7528\uff0c\u4e0d\u8003\u8651\u7269\u54c1\u653e\u5165\u987a\u5e8f <p>ADS 08 Dynamic Programming#8.2.2 Programming Contest \u8fd9\u91cc\u7684 <code>happy_score</code></p> <ul> <li>\u5916\u5c42\u7269\u54c1<ul> <li>\u5185\u5c42\u5bb9\u91cf<ul> <li>\u9006\u5e8f\u66f4\u65b0\uff0c\u4fdd\u8bc1\u53ea\u4f7f\u7528\u4e00\u6b21</li> </ul> </li> </ul> </li> </ul> \u7269\u54c1\u5355\u6b21\u4f7f\u7528\uff0c\u5e76\u8003\u8651\u7269\u54c1\u653e\u5165\u987a\u5e8f <p>\u9898\u76ee\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u76ee\u6807\u6574\u6570 <code>target</code>\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u7269\u54c1\u7684\u91cd\u91cf\uff0c<code>target</code> \u4ee3\u8868\u80cc\u5305\u7684\u603b\u5bb9\u91cf\u3002\u6bcf\u4e2a\u7269\u54c1\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u4e14\u7269\u54c1\u653e\u5165\u80cc\u5305\u7684\u987a\u5e8f\u4f1a\u5f71\u54cd\u80cc\u5305\u7684\u603b\u4ef7\u503c\u3002\u6211\u4eec\u9700\u8981\u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\uff0c\u4f7f\u5f97\u653e\u5165\u80cc\u5305\u7684\u7269\u54c1\u603b\u91cd\u91cf\u6070\u597d\u7b49\u4e8e <code>target</code>\uff0c\u5e76\u4e14\u8ba1\u7b97\u8fd9\u4e9b\u7ec4\u5408\u7684\u603b\u4ef7\u503c\u4e4b\u548c\u3002</p> <p>\u793a\u4f8b\uff1a \u8f93\u5165\uff1a <code>nums = [1, 2, 3]</code>, <code>target = 5</code> \u8f93\u51fa\uff1a <code>9</code> \u89e3\u91ca\uff1a \u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u4e3a\uff1a</p> <ul> <li>(1, 2, 2) \u603b\u4ef7\u503c\u4e3a 1 + 2 + 2 = 5</li> <li>(1, 3, 1) \u603b\u4ef7\u503c\u4e3a 1 + 3 + 1 = 5</li> <li>(2, 3) \u603b\u4ef7\u503c\u4e3a 2 + 3 = 5</li> </ul> <p>\u8bf7\u6ce8\u610f\uff0c\u987a\u5e8f\u4e0d\u540c\u7684\u5e8f\u5217\u88ab\u89c6\u4f5c\u4e0d\u540c\u7684\u7ec4\u5408\uff0c\u4f8b\u5982 (1, 2, 2) \u548c (2, 1, 2) \u662f\u4e0d\u540c\u7684\u7ec4\u5408\u3002</p> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> <li><code>1 &lt;= target &lt;= 1000</code> <p>\u4e5f\u5c31\u662f\uff0c\u4e00\u4e2a\u80cc\u5305\u5982\u679c\u80fd\u7528\u4e0d\u540c\u987a\u5e8f\u653e\u4e0b\u7edf\u4e00\u4e9b\u7269\u54c1\uff0c\u90a3\u4e48\u5b83\u7684\u603b\u4ef7\u503c</p> </li> </ul> <ul> <li>\u5916\u5c42\u5bb9\u91cf<ul> <li>\u5185\u5c42\u7269\u54c1<ul> <li>\u9006\u5e8f\u66f4\u65b0\uff0c\u4fdd\u8bc1\u4f7f\u7528\u4e00\u6b21</li> </ul> </li> </ul> </li> </ul> <p>\u603b\u7ed3</p> <ul> <li>\u6709\u987a\u5e8f\u5148\u5bb9\u91cf</li> <li>\u591a\u6b21\u6b63\u5355\u6b21\u5012</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#12-\u72b6\u6001\u673a","title":"1.2 \u72b6\u6001\u673a","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#121-\u4e00\u822c\u80a1\u7968\u95ee\u9898","title":"1.2.1 \u4e00\u822c\u80a1\u7968\u95ee\u9898","text":"<p>\u5047\u8bbe\u6709\u4e00\u53ea\u80a1\u7968\u7684\u4ef7\u683c\u662f <code>prices[]</code>\uff0c\u53ef\u4ee5\u4e70\u5165\u5356\u51fa\u65e0\u6570\u6b21\uff0c\u4f46\u53ea\u80fd\u540c\u65f6\u6301\u6709\u4e00\u652f\u80a1\u7968\uff0c\u6c42\u6700\u5927\u7684\u5229\u6da6</p> <p>\u5728\u7b2c \\(i\\) \u5929\uff0c\u8003\u8651\u8fd9\u6837\u7684\u72b6\u6001\u673a</p> <pre><code>stateDiagram\n    [*] --&gt; Not_Holding\n    Holding --&gt; Not_Holding: sell, Holding[i-1] + prices[i]\n    Holding --&gt; Holding: do nothing, Holding[i-1]\n    Not_Holding --&gt; Holding: buy, Not_Holding[i-1]-prices[i]\n    Not_Holding --&gt; Not_Holding: do nothing, Not_Holding[i-1]</code></pre> <ul> <li>\u6240\u4ee5\u53ef\u4ee5\u5efa\u7acb <code>hold, nhold</code> \u4e24\u4e2a\u6570\u7ec4\uff0c\u5206\u522b\u8868\u793a\u5728\u7b2c \\(i\\) \u5929\u6301\u6709\u548c\u4e0d\u6301\u6709\u7684\u6700\u5927\u5229\u6da6\uff08\\(i\\) \u4ece 1 \u5f00\u59cb\uff09</li> <li>\u521d\u59cb\u5316\uff1a<ul> <li><code>hold[0]=-inf</code> \u8868\u793a\u8fd8\u6ca1\u5f00\u59cb\u65f6 hold \u4e0d\u5408\u6cd5</li> <li><code>nhold[0]=0</code> \u8868\u793a\u8fd8\u6ca1\u5f00\u59cb\u65f6\u5229\u6da6\u4e3a 0</li> </ul> </li> <li>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b<ul> <li><code>hold[i] = max(hold[i-1], nhold[i-1] - prices[i])</code></li> <li><code>nhold[i] = max(nhold[i-1], hold[i-1] + prices[i])</code></li> </ul> </li> </ul> \u4e00\u822c\u4e70\u80a1\u7968<pre><code>int maxProfit(int* prices, int n) {\n    int hold[n + 1], nhold[n + 1];\n    hold[0] = -1e9;\n    nhold[0] = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        int price = prices[i - 1];\n        hold[i] = max(hold[i - 1], nhold[i - 1] - price);\n        nhold[i] = max(nhold[i - 1], hold[i - 1] + price);\n    }\n    return nhold[n];\n}\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#122-\u53d8\u5f0f-1-\u51b7\u51bb\u671f","title":"1.2.2 \u53d8\u5f0f 1: \u51b7\u51bb\u671f","text":"<p>309. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u51b7\u51bb\u671f - \u529b\u6263\uff08LeetCode\uff09</p> <pre><code>stateDiagram\n    [*] --&gt; Not_Holding\n    Holding --&gt; Frozen: sell\n    Holding --&gt; Holding: do nothing\n    Frozen --&gt; Not_Holding: do nothing\n    Not_Holding --&gt; Not_Holding: do nothing\n    Not_Holding --&gt; Holding: buy</code></pre> \u51b7\u51bb\u671f<pre><code>int maxProfit(int* prices, int pricesSize) {\n    int n = pricesSize;\n    int hold[n + 1], nhold[n + 1], freeze[n + 1];\n    hold[0] = freeze[0] = -1e9;\n    nhold[0] = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        int price = prices[i - 1];\n        hold[i] = max(hold[i - 1], nhold[i - 1] - price);\n        nhold[i] = max(nhold[i - 1], freeze[i - 1]);\n        freeze[i] = hold[i - 1] + price;\n    }\n    for (int i = 0; i &lt;= n; i++) {\n        printf(\"%d %d %d\\n\", hold[i], nhold[i], freeze[i]);\n    }\n    return max(freeze[n], nhold[n]);\n}\n</code></pre> <p>Attention</p> <p>\u8fd9\u91cc\u4e0d\u5b58\u5728 frozen -&gt; holding\uff0c\u56e0\u4e3a <code>frozen[i]</code> \u8868\u793a\u7684\u662f\u7b2c <code>i+1</code> \u5929\u4e0d\u80fd\u8d2d\u4e70\uff0c\u6240\u4ee5 frozen \u540e\u4e00\u5929\u53ea\u80fd\u5230 not holding</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#13-\u53d8\u5f0f-2-\u624b\u7eed\u8d39","title":"1.3 \u53d8\u5f0f 2: \u624b\u7eed\u8d39","text":"<p>714. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39 - \u529b\u6263\uff08LeetCode\uff09</p> <ul> <li>\u5356\u51fa\u7684\u65f6\u5019\u9700\u8981\u7f34\u7eb3\u56fa\u5b9a\u7684\u624b\u7eed\u8d39</li> <li>\u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355\uff0c\u5728 <code>nhold</code> \u66f4\u65b0\u7684\u903b\u8f91\u91cc\u628a\u624b\u7eed\u8d39\u51cf\u6389\u5c31\u884c\u4e86</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#14-\u53d8\u5f0f-3-\u6700\u591a\u5b8c\u6210-k-\u7b14\u4ea4\u6613","title":"1.4 \u53d8\u5f0f 3: \u6700\u591a\u5b8c\u6210 \\(k\\) \u7b14\u4ea4\u6613","text":"<p>123. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III - \u529b\u6263\uff08LeetCode\uff09</p> \u6700\u591a\u4e70 k \u6b21<pre><code>int maxProfit(int k, int* prices, int pricesSize) {\n    int sell[k + 1], buy[k + 1];\n    int n = pricesSize;\n    for (int i = 1; i &lt;= k; i++) {\n        buy[i] = -prices[0];\n        sell[i] = 0;\n    }\n    for (int i = 1; i &lt; n; i++) {\n        int price = prices[i];\n        buy[1] = max(buy[1], -price);\n        sell[1] = max(sell[1], buy[1] + price);\n        for (int j = 2; j &lt;= k; j++) {\n            buy[j] = max(buy[j], sell[j - 1] - price);\n            sell[j] = max(sell[j], buy[j] + price);\n        }\n    }\n    return sell[k];\n}\n</code></pre> <ul> <li><code>buy[i]</code> \u8868\u793a\u8fdb\u884c\u7b2c \\(i\\) \u6b21\u8d2d\u4e70\u540e\u7684\u6700\u5927\u6536\u76ca</li> <li><code>sell[i]</code> \u8868\u793a\u8fdb\u884c\u7b2c \\(i\\) \u6b21\u51fa\u552e\u540e\u83b7\u5f97\u7684\u6700\u5927\u6536\u76ca</li> <li>\u7531\u4e8e\u540c\u4e00\u5929\u91cc\u5356\u4e86\u53c8\u4e70\u76f8\u5f53\u4e8e\u6ca1\u6709\u64cd\u4f5c\uff0c\u6240\u4ee5\u5f53\u6210\u76f4\u63a5\u4e70 \\(k\\) \u6b21\u7b97\u5c31\u884c\u4e86</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#2-ex8","title":"2 Ex8","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#21-decode","title":"2.1 Decode","text":"Question <p>Suppose that a string of English letters is encoded into a string of numbers. To be more specific, <code>A</code>-<code>Z</code> are encoded into <code>0</code>-<code>25</code>. Since it is not a prefix code, the decoded result may not be unique. For example, <code>1213407</code> can be decoded as <code>BCBDEAH</code>, <code>MBDEAH</code>, <code>BCNEAH</code>, <code>BVDEAH</code> or <code>MNEAH</code>. Note that <code>07</code> is not <code>7</code>, hence cannot be decoded as <code>H</code>.</p> <p>Your job is to tell in how many different ways we can decode a numeric string.</p> <p>Format of function:</p> <pre><code>int Decode( char NumStr[] );\n</code></pre> <p>where <code>NumStr</code> is a string consisting of only the numbers <code>0</code>-<code>9</code>.</p> <p>The function <code>Decode</code> is supposed to return the number of different ways we can decode <code>NumStr</code>.</p> <p>Since the answer might be super large, you only need to output the answer modulo 1000000007.</p> <p>Sample program of judge:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n#define MAXN 100\n#define BASE 1000000007\n\nint Decode( char NumStr[] );\n\nint main()\n{\n    char NumStr[MAXN];\n\n    scanf(\"%s\", NumStr);\n    printf(\"%d\", Decode(NumStr));\n\n    return 0;\n}\n\n/* Your function will be put here */\n</code></pre> <p>Sample Input:</p> <pre><code>1213407\n</code></pre> <p>Sample Output:</p> <pre><code>5\n</code></pre> <ul> <li>\u5b9a\u4e49 <code>dp[i]</code> \u662f\u524d <code>i</code> \u4e2a\u5b57\u7b26\u7684\u7ed3\u679c\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\u5c31\u597d\u4e86</li> </ul> <p>Bug</p> <p>\u8fd9\u9898\u8981\u6c42\u7a7a\u5b57\u7b26\u4e32\u8981\u8f93\u51fa <code>0</code>\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8bb2\u6e05\u695a\u8fd9\u4e2a\u8981\u6c42\u3002</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#22-manager-of-tasks","title":"2.2 Manager of Tasks","text":"Question <p>There are \\(N\\) tasks arranged in a sequence on a machine waiting to be executed, and their order cannot be changed. You need to divide these \\(N\\) tasks into several groups, each containing several consecutive tasks. Starting from time 0, the tasks are processed in groups, and the time required to execute the \\(i\\)-th task is \\(T_i\u200b\\). Additionally, the machine requires a startup time \\(S\\) before each group of tasks begins, so the time required for a group of tasks is the startup time \\(S\\) plus the sum of the time required for each task in this group.</p> <p>After a task is executed, it will wait briefly in the machine until all tasks in that group are completely executed. That is to say, the tasks in the same group will be completed at the same time. The cost of each task is its completion time multiplied by a cost coefficient \\(C_i\u200b\\).</p> <p>Please plan a grouping scheme for the machine to minimize the total cost.</p> <p>For all testing data, \\(1\\leq N\\leq 1000,0\\leq S\\leq 50,1\\leq T_{i},C_{i}\\leq_{1}00\\)</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#function-interface","title":"Function Interface:","text":"<pre><code>long long min_cost(int N, int S, int T[], int C[]);\n</code></pre> <p>where <code>T, C</code> are arrays of integers with <code>N</code> elements, and <code>S</code> is the startup time S mentioned above.</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#judge-program","title":"Judge Program:","text":"<pre><code>#include &lt;stdio.h&gt;\n#define MAXN 1000\nlong long min_cost(int N, int S, int T[], int C[]);\nint main() {\n    int N, S;\n    int T[MAXN], C[MAXN];\n    scanf(\"%d%d\", &amp;N, &amp;S);\n    for (int i = 0;i &lt; N; ++ i) {\n        scanf(\"%d%d\", &amp;T[i], &amp;C[i]);\n    }\n    printf(\"%lld\\n\", min_cost(N, S, T, C));\n    return 0;\n}\n/* Your function will be put here */\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#sample-input","title":"Sample Input:","text":"<pre><code>5\n1\n1 3\n3 2\n4 3\n2 3\n1 4\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#sample-output","title":"Sample Output\uff1a","text":"<pre><code>153\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#sample-explanation","title":"Sample Explanation","text":"<p>We have grouped the tasks into 3 groups, which are <code>{1, 2}, {3}, {4, 5}</code>. The completion time corresponding to each task, in the order of the task numbers, is <code>{5, 5, 10, 14, 14}</code>. Similarly, the cost corresponding to each task, again in the order of the task numbers, is <code>{15, 10, 30, 42, 56}</code>. The total cost of these tasks is 153.</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#221-on3-method","title":"2.2.1 \\(O(N^3)\\) method","text":"<p>\u5206\u6790</p> <ul> <li>\u8fd9\u9898\u6bd4\u8f83\u9ebb\u70e6\uff0c\u7531\u4e8e \\(S\\) \u7684\u5b58\u5728\uff0c\u524d\u9762\u7684\u5206\u7ec4\u4f1a\u5f71\u54cd\u540e\u9762\u7684\u5b8c\u6210\u65f6\u95f4\uff0c\u6240\u4ee5\u524d \\(i\\) \u4e2a\u4efb\u52a1\u7684\u6700\u4f18\u5b89\u6392\u5e76\u4e0d\u662f\u603b\u4f53\u7684\u6700\u4f18\u5b50\u7ed3\u6784</li> <li>\u8fd9\u4e2a\u65f6\u5019\uff0c\u53ef\u4ee5\u5f3a\u884c\u589e\u52a0\u6761\u4ef6\uff0c\u6784\u9020\u6700\u4f18\u5b50\u7ed3\u6784\uff0c\u901a\u8fc7\u4f7f\u7528 <code>mins[i][j]</code> \u8868\u793a\u5c06\u524d \\(i\\) \u4e2a jobs \u5206\u6210 \\(j\\) \u4e2a groups\uff0c<code>mins[j][k-1]</code> \u6709\u673a\u4f1a\u6210\u4e3a <code>mins[i][k]</code> \u7684\u6700\u4f18\u5b50\u7ed3\u6784</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#222-on2-method","title":"2.2.2 \\(O(N^2)\\) method","text":"<p>\u8fdb\u4e00\u6b65\u4f18\u5316</p> <ul> <li>\u4e3a\u4ec0\u4e48\u524d\u9762\u7528\u4e86 \\(O(N^3)\\) \u7684\u65f6\u95f4\u5462\uff1f\u56e0\u4e3a\u6bcf\u6b21\u51b3\u7b56\u90fd\u6709\u540e\u6548\u6027</li> <li>\u4e3a\u4e86\u8ba9\u95ee\u9898\u6ca1\u6709\u540e\u6548\u6027\uff0c\u53ef\u4ee5\u5c06\u6bcf\u6b21\u5206\u7ec4\u540e\u591a\u52a0\u7684 \\(S\\) \u65f6\u95f4\u504f\u79fb\u5e26\u6765\u7684 penalty \u4e5f\u8003\u8651\u8fdb\u53bb<ul> <li><code>penalty = S * left_coefficient</code></li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#2221-code-fold","title":"2.2.2.1 Code %% fold %%","text":"Manager of Tasks O(N^2)<pre><code>long long dp[MAXN+5];\nlong long preT[MAXN+5];\nlong long preC[MAXN+5];\n\nlong long min(long long a, long long b){\n    return a&lt;b?a:b;\n}\n\n#define INF 1e9\n\nlong long min_cost(int N, int S, int T[], int C[]){\n    if(N==0) return 0;\n    memset(dp, 0x3f, sizeof(dp));\n    preT[0]=preC[0]=dp[0]=0;\n    for(int i=1;i&lt;=N;i++){\n        preT[i]=preT[i-1]+T[i-1];\n        preC[i]=preC[i-1]+C[i-1];\n    }\n    for(int i=1;i&lt;=N;i++){\n        for(int j=0;j&lt;=i;j++){\n            long long remainC=preC[N]-preC[i];\n            long long sumC=preC[i]-preC[j];\n            long long new_cost=dp[j]+S*remainC+(S+preT[i])*sumC;  // \u8ba1\u7b97 cost \u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u7528\u8003\u8651\u524d\u9762 group \u7684 S \u65f6\u95f4\uff0c\u53ea\u7528\u8003\u8651\u81ea\u5df1\u7684 S \u65f6\u95f4\u7684\u5f71\u54cd\u5c31\u884c\u4e86\n            dp[i]=min(dp[i],new_cost);\n        }\n    }\n    return dp[N];\n}\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#3-leetcode","title":"3 LeetCode","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#31-\u6700\u5927\u6b63\u65b9\u5f62","title":"3.1 \u6700\u5927\u6b63\u65b9\u5f62","text":"<p>\u5728\u4e00\u4e2a\u7531\u00a0<code>'0'</code>\u00a0\u548c\u00a0<code>'1'</code>\u00a0\u7ec4\u6210\u7684\u4e8c\u7ef4\u77e9\u9635\u5185\uff0c\u627e\u5230\u53ea\u5305\u542b\u00a0<code>'1'</code>\u00a0\u7684\u6700\u5927\u6b63\u65b9\u5f62\uff0c\u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002</p> <p>Tip</p> <p>\u5173\u952e\u5728\u4e8e\uff0c\u5982\u679c <code>matrix[i][j]=1</code>\uff0c\u90a3\u4e48 \\(dp[i][j]=\\min\\{dp[i-1][j],dp[i-1][j-1],dp[i][j-1]\\}+1\\)\uff0c\u5426\u5219 \\(dp[i][j]=0\\)\uff0c\u53ef\u4ee5\u81ea\u5df1\u9a8c\u8bc1\u4e00\u4e0b\u662f\u5bf9\u7684</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#311-code-fold","title":"3.1.1 code %% fold %%","text":"<pre><code>class Solution\n{\npublic:\n    int maximalSquare(vector&lt;vector&lt;char&gt;&gt; &amp;matrix)\n    {\n        const int rows = matrix.size();\n        const int cols = matrix[0].size();\n        vector&lt;vector&lt;int&gt;&gt; mat(rows, vector&lt;int&gt;(cols));\n        mat[0][0] = (int)(matrix[0][0] - '0');\n        int max = mat[0][0];\n        for (int i = 1; i &lt; rows; i++)\n        {\n            mat[i][0] = (int)(matrix[i][0] - '0');\n            if (mat[i][0])\n                max = 1;\n        }\n        for (int i = 1; i &lt; cols; i++)\n        {\n            mat[0][i] = (int)(matrix[0][i] - '0');\n            if (mat[0][1])\n                max = 1;\n        }\n        for (int i = 1; i &lt; rows; i++)\n        {\n            for (int j = 1; j &lt; cols; j++)\n            {\n                if (matrix[i][j] == '0')\n                {\n                    mat[i][j] = 0;\n                    continue;\n                }\n                int l = mat[i][j - 1];\n                int u = mat[i - 1][j];\n                int ul = mat[i - 1][j - 1];\n                l = min(u, l);\n                ul = min(l, ul);\n                mat[i][j] = ul + 1;\n                if (mat[i][j] &gt; max)\n                    max = mat[i][j];\n            }\n        }\n        return max * max;\n    }\n};\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#32-\u5220\u9664\u5e76\u83b7\u5f97\u70b9\u6570","title":"3.2 \u5220\u9664\u5e76\u83b7\u5f97\u70b9\u6570","text":"<p>Question</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u00a0<code>nums</code>\u00a0\uff0c\u4f60\u53ef\u4ee5\u5bf9\u5b83\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\u3002</p> <p>\u6bcf\u6b21\u64cd\u4f5c\u4e2d\uff0c\u9009\u62e9\u4efb\u610f\u4e00\u4e2a\u00a0<code>nums[i]</code>\u00a0\uff0c\u5220\u9664\u5b83\u5e76\u83b7\u5f97\u00a0<code>nums[i]</code>\u00a0\u7684\u70b9\u6570\u3002\u4e4b\u540e\uff0c\u4f60\u5fc5\u987b\u5220\u9664\u00a0\u6240\u6709\u00a0\u7b49\u4e8e\u00a0<code>nums[i] - 1</code>\u00a0\u548c\u00a0<code>nums[i] + 1</code>\u00a0\u7684\u5143\u7d20\u3002</p> <p>\u5f00\u59cb\u4f60\u62e5\u6709\u00a0<code>0</code>\u00a0\u4e2a\u70b9\u6570\u3002\u8fd4\u56de\u4f60\u80fd\u901a\u8fc7\u8fd9\u4e9b\u64cd\u4f5c\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570\u3002</p> <ol> <li>\u9996\u5148\u505a\u4e00\u4e2a count bucket \u6765\u8fdb\u884c\u8ba1\u6570</li> <li>\\(dp[i]=\\max\\{dp[i-1],dp[i-2]+i \\cdot count[i]\\}\\) \u8868\u793a\u8003\u8651\u4e86 \\([0,i]\\) \u91cc\u6240\u6709\u6570\u5b57\u7684\u5b50\u95ee\u9898<ul> <li>\u5982\u679c\u7528\u4e86 \\(i-1\\)\uff0c\u5c31\u4e0d\u80fd\u7528 \\(i\\)</li> <li>\u5982\u679c\u6ca1\u7528 \\(i-1\\)\uff0c\u53ef\u4ee5\u7528 \\(i\\)</li> </ul> </li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#33-\u4e0d\u540c\u8def\u5f84-ii","title":"3.3 \u4e0d\u540c\u8def\u5f84 II","text":"<p>Question</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u00a0<code>m x n</code>\u00a0\u7684\u6574\u6570\u6570\u7ec4\u00a0<code>grid</code>\u3002\u4e00\u4e2a\u673a\u5668\u4eba\u521d\u59cb\u4f4d\u4e8e\u00a0\u5de6\u4e0a\u89d2\uff08\u5373\u00a0<code>grid[0][0]</code>\uff09\u3002\u673a\u5668\u4eba\u5c1d\u8bd5\u79fb\u52a8\u5230\u00a0\u53f3\u4e0b\u89d2\uff08\u5373\u00a0<code>grid[m - 1][n - 1]</code>\uff09\u3002\u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002</p> <p>\u7f51\u683c\u4e2d\u7684\u969c\u788d\u7269\u548c\u7a7a\u4f4d\u7f6e\u5206\u522b\u7528\u00a0<code>1</code>\u00a0\u548c\u00a0<code>0</code>\u00a0\u6765\u8868\u793a\u3002\u673a\u5668\u4eba\u7684\u79fb\u52a8\u8def\u5f84\u4e2d\u4e0d\u80fd\u5305\u542b\u00a0\u4efb\u4f55\u00a0\u6709\u969c\u788d\u7269\u7684\u65b9\u683c\u3002</p> <p>\u8fd4\u56de\u673a\u5668\u4eba\u80fd\u591f\u5230\u8fbe\u53f3\u4e0b\u89d2\u7684\u4e0d\u540c\u8def\u5f84\u6570\u91cf\u3002</p> <p>\u6d4b\u8bd5\u7528\u4f8b\u4fdd\u8bc1\u7b54\u6848\u5c0f\u4e8e\u7b49\u4e8e\u00a0<code>2 * 109</code>\u3002</p> <ol> <li>\u5982\u679c\u8d77\u70b9\u662f\u969c\u788d\uff0c\u76f4\u63a5\u8fd4\u56de <code>false</code></li> <li>\u521d\u59cb\u5316 \\(dp\\) \u7684\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\uff0c\u5982\u679c\u662f\u969c\u788d\uff0c\u6b64\u683c\u5b50\u7684\u65b9\u6cd5\u6570\u4e3a 0\uff0c\u5426\u5219\u662f\u4e0a\u4e00\u4e2a\u683c\u5b50\u7684\u65b9\u6cd5\u6570\uff080 \u6216 1\uff09</li> <li> \\[dp[i][j]=\\begin{cases}0&amp;\\text{ if }grid[i][j]=1\\\\dp[i-1][j]+dp[i][j-1]&amp;\\text{ if }grid[i][j]=0\\end{cases}\\] </li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#34-\u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c","title":"3.4 \u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c","text":"<p>Question</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\u00a0<code>triangle</code>\u00a0\uff0c\u627e\u51fa\u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u3002</p> <p>\u6bcf\u4e00\u6b65\u53ea\u80fd\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u4e2d\u76f8\u90bb\u7684\u7ed3\u70b9\u4e0a\u3002\u76f8\u90bb\u7684\u7ed3\u70b9\u00a0\u5728\u8fd9\u91cc\u6307\u7684\u662f\u00a0\u4e0b\u6807\u00a0\u4e0e\u00a0\u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807\u00a0\u76f8\u540c\u6216\u8005\u7b49\u4e8e\u00a0\u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807 + 1\u00a0\u7684\u4e24\u4e2a\u7ed3\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6b63\u4f4d\u4e8e\u5f53\u524d\u884c\u7684\u4e0b\u6807\u00a0<code>i</code>\u00a0\uff0c\u90a3\u4e48\u4e0b\u4e00\u6b65\u53ef\u4ee5\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u7684\u4e0b\u6807\u00a0<code>i</code>\u00a0\u6216\u00a0<code>i + 1</code>\u00a0\u3002</p> <p></p> <p>\u975e\u5e38\u7ecf\u5178\u7684\u4e00\u9898</p> <ol> <li>\u4f7f\u7528 bottom-up \u624d\u80fd\u6784\u5efa\u5b50\u95ee\u9898</li> <li>\\(dp[i][j]\\) \u8868\u793a\u5f80\u4e0a\u5230\u8fbe \\(i\\) \u5c42\u7b2c \\(j\\) \u4e2a\u5143\u7d20\u7684\u6700\u77ed\u8def\u5f84\u6743\u91cd</li> <li> \\[dp[i][j]=\\min\\{dp[i+1][j],dp[i+1][j+1]\\}+triangle[i][j]\\] </li> <li>\u8fd4\u56de \\(dp[0][0]\\)</li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#341-\u7a7a\u95f4\u4f18\u5316","title":"3.4.1 \u7a7a\u95f4\u4f18\u5316","text":"<ol> <li>\u53ef\u4ee5\u4e0d\u4f7f\u7528\u4e8c\u7ef4 \\(dp\\) \u6570\u7ec4\uff0c\u8ba9\u6bcf\u6b21\u66f4\u65b0\u76f4\u63a5\u8986\u5199\u5230\u4e00\u7ef4\u6570\u7ec4\u7684 \\(dp[j]\\)\uff0c\u6700\u540e\u8fd4\u56de \\(dp[0]\\)\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e0d\u4f1a\u5b58\u5728\u987a\u5e8f\u95ee\u9898</li> <li>\u53ef\u4ee5\u4e0d\u4f7f\u7528 \\(dp\\) \u6570\u7ec4\uff0c\u76f4\u63a5\u4f7f\u7528\u4f20\u5165\u7684 <code>triangle</code> \u7684\u6700\u540e\u4e00\u884c</li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#35-\u6700\u957f\u56de\u6587\u5b50\u4e32","title":"3.5 \u6700\u957f\u56de\u6587\u5b50\u4e32","text":"<p>Question</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0<code>s</code>\uff0c\u627e\u5230\u00a0<code>s</code>\u00a0\u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002</p> <p>\u5b50\u5b57\u7b26\u4e32\u662f\u8fde\u7eed\u7684\u975e\u7a7a\u5b57\u7b26\u5e8f\u5217</p> <ol> <li>\\(dp[i][j]=\\text{true}\\) \u5982\u679c <code>s[i...j]</code> \u662f\u56de\u6587\u4e32</li> <li>\u521d\u59cb\u5316\u957f\u5ea6\u4e3a 1 \u548c 2 \u7684\u60c5\u51b5\uff0c\u5199\u5165 \\(dp\\)</li> <li> \\[dp[i][j]=\\begin{cases}\\text{true}&amp;\\text{if }dp[i-1][j+1]\\land s[i]=s[j]    \\\\\\text{false}&amp;\\text{others}\\end{cases}\\] </li> <li>\u8fc7\u7a0b\u4e2d\u8bb0\u5f55 true \u7684\u6700\u5927\u957f\u5ea6\u548c\u8d77\u70b9\uff0c\u6700\u540e\u627e\u5230\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de</li> </ol> <p>Hint</p> <p>\u5173\u952e\u5728\u4e8e\u60f3\u5230\u56de\u6587\u5b50\u4e32\u662f\u8fde\u7eed\u7684\uff0c\u800c\u4e14\u53ef\u4ee5\u6784\u5efa <code>bool</code> \u7c7b\u578b\u7684 \\(dp\\) \u6570\u7ec4</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#36-\u5355\u8bcd\u62c6\u5206","title":"3.6 \u5355\u8bcd\u62c6\u5206","text":"<p>Question</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0<code>s</code>\u00a0\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\u00a0<code>wordDict</code>\u00a0\u4f5c\u4e3a\u5b57\u5178\u3002\u5982\u679c\u53ef\u4ee5\u5229\u7528\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u5355\u8bcd\u62fc\u63a5\u51fa\u00a0<code>s</code>\u00a0\u5219\u8fd4\u56de\u00a0<code>true</code>\u3002</p> <p>\u6ce8\u610f\uff1a\u4e0d\u8981\u6c42\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u5168\u90e8\u90fd\u4f7f\u7528\uff0c\u5e76\u4e14\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u3002</p> <ol> <li>\\(dp[i]=\\text{true}\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u5b57\u7b26\u6784\u6210\u7684\u5b57\u7b26\u4e32\u6ee1\u8db3\u9898\u610f</li> <li>\\(dp[0]=\\text{true}\\)</li> <li>\\(dp[i]=\\bigvee_{k=0}^{i-1}(dp[k]\\land s[k+1\\dots i]\\text{ is in dict})\\)</li> </ol> <p>Tip</p> <p>\u53ef\u4ee5\u5c06 <code>wordDict</code> \u6784\u9020\u6210 set \u6765\u52a0\u901f\u67e5\u627e\u8fc7\u7a0b</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#37-\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217","title":"3.7 \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217","text":"<p>Question</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0<code>s</code>\u00a0\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u5e8f\u5217\uff0c\u5e76\u8fd4\u56de\u8be5\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u5b50\u5e8f\u5217\u5b9a\u4e49\u4e3a\uff1a\u4e0d\u6539\u53d8\u5269\u4f59\u5b57\u7b26\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u5220\u9664\u67d0\u4e9b\u5b57\u7b26\u6216\u8005\u4e0d\u5220\u9664\u4efb\u4f55\u5b57\u7b26\u5f62\u6210\u7684\u4e00\u4e2a\u5e8f\u5217\u3002</p> <p>\u6ce8\u610f\u5b50\u5e8f\u5217\u548c\u5b50\u4e32\u4e0d\u540c\uff0c\u53ef\u4ee5\u662f\u4e0d\u8fde\u7eed\u7684</p> <ol> <li>\\(dp[i][j]\\) \u8868\u793a <code>s[i...j]</code> \u4e2d\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u7684\u957f\u5ea6</li> <li>\u521d\u59cb\u5316 <code>len=1, 2</code> \u7684\u60c5\u51b5\uff0c\u548c 3.5 \u6700\u957f\u56de\u6587\u5b50\u4e32 \u4e00\u6837</li> <li> \\[dp[i][j]=\\begin{cases}dp[i-1][j-1]+2&amp;\\text{if }s[i]=s[j]\\\\  \\max\\{dp[i-1][j],dp[i][j-1]\\}&amp;\\text{else}\\end{cases}\\] <ul> <li>\u5982\u679c <code>s[i]!=s[j]</code>\uff0c\u6700\u5916\u9762\u7684\u56de\u6587\u5b57\u7b26\u4ecd\u7136\u53ef\u80fd\u662f <code>s[i], s[j]</code> \u5176\u4e2d\u4e00\u4e2a\uff0c\u4f46\u4e0d\u53ef\u80fd\u662f\u4e24\u4e2a</li> </ul> </li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#38-\u7f16\u8f91\u8ddd\u79bb","title":"3.8 \u7f16\u8f91\u8ddd\u79bb","text":"<p>Question</p> <p>\u7ed9\u4f60\u4e24\u4e2a\u5355\u8bcd\u00a0<code>word1</code>\u00a0\u548c\u00a0<code>word2</code>\uff0c\u00a0\u8bf7\u8fd4\u56de\u5c06\u00a0<code>word1</code>\u00a0\u8f6c\u6362\u6210\u00a0<code>word2</code>\u00a0\u6240\u4f7f\u7528\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u00a0\u00a0\u3002</p> <p>\u4f60\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a</p> <ul> <li>\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26</li> <li>\u5220\u9664\u4e00\u4e2a\u5b57\u7b26</li> <li>\u66ff\u6362\u4e00\u4e2a\u5b57\u7b26</li> </ul> <ol> <li>\u4f7f\u7528 <code>int dp[len1+1][len2+1]</code>\uff0c\\(dp[i][j]\\) \u8868\u793a <code>word1[0...i-1]</code> \u8f6c\u6362\u5230 <code>word2[0...j-1]</code> \u7684\u7f16\u8f91\u8ddd\u79bb\uff0c\u5176\u4e2d \\(i,j=0\\) \u8868\u793a\u7a7a\u5b57\u7b26\u4e32</li> <li> \\[dp[i][j]=\\begin{cases}dp[i-1][j-1]&amp;\\text{if }word_{1}[i-1]=word_{2}[j-1]\\\\  \\min\\{dp[i-1][j-1], dp[i-1][j], dp[i][j-1]\\}+1&amp;\\text{else}\\end{cases}\\] <ul> <li>\u5982\u679c\u6700\u540e\u4e24\u4e2a\u5df2\u7ecf\u76f8\u540c\uff0c\u5f88\u7b80\u5355</li> <li>\u5982\u679c\u6700\u540e\u4e24\u4e2a\u4e0d\u76f8\u540c\uff0c\u53ef\u4ee5\u662f<ul> <li>\u6700\u540e\u4e00\u4e2a\u66ff\u6362\uff0c<code>word1[0...i-1]</code> \u53d8\u6210 <code>word2[0...j-1]</code></li> <li>\u6700\u540e\u4e00\u4e2a\u5220\u9664\uff0c<code>words[0...i-1]</code> \u53d8\u6210 <code>word2[0...j]</code></li> <li><code>words[0...i]</code> \u53d8\u6210 <code>words[0...j-1]</code>\uff0c\u6dfb\u52a0\u6700\u540e\u4e00\u4e2a\u5b57\u7b26</li> </ul> </li> </ul> </li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#39-\u4e0d\u540c\u7684\u5b50\u5e8f\u5217","title":"3.9 \u4e0d\u540c\u7684\u5b50\u5e8f\u5217","text":"<p>Question</p> <p>\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32\u00a0<code>s</code>\u00a0\u548c\u00a0<code>t</code>\u00a0\uff0c\u7edf\u8ba1\u5e76\u8fd4\u56de\u5728\u00a0<code>s</code>\u00a0\u7684\u00a0\u5b50\u5e8f\u5217\u00a0\u4e2d\u00a0<code>t</code>\u00a0\u51fa\u73b0\u7684\u4e2a\u6570\uff0c\u7ed3\u679c\u9700\u8981\u5bf9\u00a0109\u00a0+ 7 \u53d6\u6a21\u3002</p> <ol> <li>\u4ecd\u7136\u4f7f\u7528\u4e0e\u4e0a\u9762\u9898\u76ee\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u8bbe \\(dp[i][j]\\) \u8868\u793a\u5b50\u95ee\u9898 <code>s[0...i-1]</code> \u548c <code>t[0...j-1]</code></li> <li> \\[dp[i][j]=\\begin{cases}dp[i-1][j-1]+dp[i-1][j]&amp;\\text{if }s[i-1]=t[j-1]\\\\ dp[i-1][j]&amp;\\text{else}\\end{cases}\\] <ul> <li>\u5982\u679c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u5339\u914d\u4e0a\u4e86\uff0c\u90a3\u4e48 <code>s[0...i-2]</code> \u4e2d\u6240\u6709\u80fd\u591f\u5339\u914d <code>t[0...j-2]</code> \u7684\u5b50\u5e8f\u5217\u5fc5\u7136\u548c <code>s[i-1]</code> \u6784\u6210\u4e0e <code>t[0...j-1]</code> \u5339\u914d\u7684\u5b50\u5e8f\u5217\uff0c\u6240\u4ee5\u589e\u52a0\u4e86 \\(dp[i-1][j-1]\\) \u4e2a\u5339\u914d</li> </ul> </li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#310-\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217","title":"3.10 \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217","text":"<p>Question</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u00a0<code>nums</code>\u00a0\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u5b50\u5e8f\u5217\u00a0\u662f\u7531\u6570\u7ec4\u6d3e\u751f\u800c\u6765\u7684\u5e8f\u5217\uff0c\u5220\u9664\uff08\u6216\u4e0d\u5220\u9664\uff09\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u800c\u4e0d\u6539\u53d8\u5176\u4f59\u5143\u7d20\u7684\u987a\u5e8f\u3002\u4f8b\u5982\uff0c<code>[3,6,2,7]</code>\u00a0\u662f\u6570\u7ec4\u00a0<code>[0,3,1,6,2,2,7]</code>\u00a0\u7684\u5b50\u5e8f\u5217\u3002</p> <ol> <li>\\(dp[i]\\) \u8868\u793a\u4ee5 <code>nums[i]</code> \u4e3a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u6700\u957f\u7684\u9012\u589e\u5b50\u5e8f\u5217\u957f\u5ea6\uff0c\u5168\u90e8\u521d\u59cb\u5316\u4e3a 1</li> <li>\\(dp[i]=\\max\\{1,\\{dp[k]+1\\,|\\,\\forall\\, 0\\leq k&lt;i, nums[k]&lt;nums[i]\\}\\}\\)<ul> <li>\u5982\u679c\u5f53\u524d\u7684\u6570\u5b57\u80fd\u591f\u653e\u5230\u524d\u9762\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u540e\u9762\uff0c\u5c31\u653e</li> </ul> </li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#311-\u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217","title":"3.11 \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217","text":"<p>Question</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u00a0<code>arr</code>\u00a0\u548c\u4e00\u4e2a\u6574\u6570\u00a0<code>difference</code>\uff0c\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u00a0<code>arr</code>\u00a0\u4e2d\u6700\u957f\u7b49\u5dee\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u8be5\u5b50\u5e8f\u5217\u4e2d\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u7684\u5dee\u7b49\u4e8e\u00a0<code>difference</code>\u00a0\u3002</p> <p>\u5b50\u5e8f\u5217\u00a0\u662f\u6307\u5728\u4e0d\u6539\u53d8\u5176\u4f59\u5143\u7d20\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u5220\u9664\u4e00\u4e9b\u5143\u7d20\u6216\u4e0d\u5220\u9664\u4efb\u4f55\u5143\u7d20\u800c\u4ece\u00a0<code>arr</code>\u00a0\u6d3e\u751f\u51fa\u6765\u7684\u5e8f\u5217\u3002</p> <ol> <li>\\(dp[i]\\) \u8868\u793a\u4ee5\u6570\u5b57 \\(i\\) \u4e3a\u7ed3\u5c3e\u7684\u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217\u7684\u957f\u5ea6<ul> <li>\u904d\u5386 <code>arr</code>\uff0c\u8f6c\u79fb\u65b9\u7a0b\u4e3a \\(dp[arr[i]]=dp[arr[i]-difference]+1\\)</li> <li>\u8fd9\u91cc\u9ed8\u8ba4 \\(dp[]\\) \u521d\u59cb\u90fd\u662f 0\uff0c\u4e5f\u7b26\u5408 <code>map</code> \u7684\u5b9e\u73b0</li> </ul> </li> <li>\u4f7f\u7528 <code>unordered_map</code> \u51cf\u5c11\u7a7a\u95f4\u5360\u7528</li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#312-\u4fc4\u7f57\u65af\u5957\u5a03\u4fe1\u5c01\u95ee\u9898","title":"3.12 \u4fc4\u7f57\u65af\u5957\u5a03\u4fe1\u5c01\u95ee\u9898","text":"<p>Question</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4\u00a0<code>envelopes</code>\u00a0\uff0c\u5176\u4e2d\u00a0<code>envelopes[i] = [wi, hi]</code>\u00a0\uff0c\u8868\u793a\u7b2c\u00a0<code>i</code>\u00a0\u4e2a\u4fe1\u5c01\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u3002</p> <p>\u5f53\u53e6\u4e00\u4e2a\u4fe1\u5c01\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u90fd\u6bd4\u8fd9\u4e2a\u4fe1\u5c01\u5927\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u4fe1\u5c01\u5c31\u53ef\u4ee5\u653e\u8fdb\u53e6\u4e00\u4e2a\u4fe1\u5c01\u91cc\uff0c\u5982\u540c\u4fc4\u7f57\u65af\u5957\u5a03\u4e00\u6837\u3002</p> <p>\u8bf7\u8ba1\u7b97\u00a0\u6700\u591a\u80fd\u6709\u591a\u5c11\u4e2a\u00a0\u4fe1\u5c01\u80fd\u7ec4\u6210\u4e00\u7ec4\u201c\u4fc4\u7f57\u65af\u5957\u5a03\u201d\u4fe1\u5c01\uff08\u5373\u53ef\u4ee5\u628a\u4e00\u4e2a\u4fe1\u5c01\u653e\u5230\u53e6\u4e00\u4e2a\u4fe1\u5c01\u91cc\u9762\uff09\u3002</p> <p>\u6ce8\u610f\uff1a\u4e0d\u5141\u8bb8\u65cb\u8f6c\u4fe1\u5c01\u3002</p> <ol> <li>\u8fdb\u884c\u6392\u5e8f\uff0c\u51fd\u6570\u4e3a <code>[&amp;](const vector&lt;int&gt;&amp; a, const vector&lt;int&gt;&amp; b){ return a[0] &lt; b[0] || (a[0] == b[0] &amp;&amp; a[1] &gt; b[1]) }</code><ul> <li><code>w</code> \u76f8\u540c\u65f6\uff0c\u6309\u7167 <code>h</code> \u9006\u5e8f\u6392\u5e8f\uff0c\u8fd9\u6837\u5c31\u80fd\u591f\u907f\u514d\u4e00\u4e2a <code>w</code> \u503c\u4e2d\u6709\u591a\u4e2a\u4fe1\u5c01\u662f\u9012\u589e\u7684\uff0c\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a <code>w</code> \u53ea\u9009\u4e00\u4e2a\u4fe1\u5c01</li> </ul> </li> <li>\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u6765\u52a0\u901f\u5faa\u73af\uff0c\u4e0d\u7136\u4f1a\u8d85\u65f6</li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#313-\u627e\u51fa\u6bcf\u4e2a\u4f4d\u7f6e\u4e3a\u6b62\u7684\u6700\u957f\u6709\u6548\u969c\u788d\u8d5b\u8def\u7ebf","title":"3.13 \u627e\u51fa\u6bcf\u4e2a\u4f4d\u7f6e\u4e3a\u6b62\u7684\u6700\u957f\u6709\u6548\u969c\u788d\u8d5b\u8def\u7ebf","text":"<p>Question</p> <p>\u4f60\u6253\u7b97\u6784\u5efa\u4e00\u4e9b\u969c\u788d\u8d5b\u8dd1\u8def\u7ebf\u3002\u7ed9\u4f60\u4e00\u4e2a\u00a0\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u00a0\u7684\u6574\u6570\u6570\u7ec4\u00a0<code>obstacles</code>\u00a0\uff0c\u6570\u7ec4\u957f\u5ea6\u4e3a\u00a0<code>n</code>\u00a0\uff0c\u5176\u4e2d\u00a0<code>obstacles[i]</code>\u00a0\u8868\u793a\u7b2c\u00a0<code>i</code>\u00a0\u4e2a\u969c\u788d\u7684\u9ad8\u5ea6\u3002</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u4ecb\u4e8e\u00a0<code>0</code>\u00a0\u548c\u00a0<code>n - 1</code>\u00a0\u4e4b\u95f4\uff08\u5305\u542b\u00a0<code>0</code>\u00a0\u548c\u00a0<code>n - 1</code>\uff09\u7684\u4e0b\u6807\u00a0\u00a0<code>i</code>\u00a0\uff0c\u5728\u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\u7684\u524d\u63d0\u4e0b\uff0c\u8bf7\u4f60\u627e\u51fa\u00a0<code>obstacles</code>\u00a0\u80fd\u6784\u6210\u7684\u6700\u957f\u969c\u788d\u8def\u7ebf\u7684\u957f\u5ea6\uff1a</p> <ul> <li>\u4f60\u53ef\u4ee5\u9009\u62e9\u4e0b\u6807\u4ecb\u4e8e\u00a0<code>0</code>\u00a0\u5230\u00a0<code>i</code>\u00a0\u4e4b\u95f4\uff08\u5305\u542b\u00a0<code>0</code>\u00a0\u548c\u00a0<code>i</code>\uff09\u7684\u4efb\u610f\u4e2a\u969c\u788d\u3002</li> <li>\u5728\u8fd9\u6761\u8def\u7ebf\u4e2d\uff0c\u5fc5\u987b\u5305\u542b\u7b2c\u00a0<code>i</code>\u00a0\u4e2a\u969c\u788d\u3002</li> <li>\u4f60\u5fc5\u987b\u6309\u969c\u788d\u5728\u00a0<code>obstacles</code>\u00a0\u4e2d\u7684\u00a0\u51fa\u73b0\u987a\u5e8f\u00a0\u5e03\u7f6e\u8fd9\u4e9b\u969c\u788d\u3002</li> <li>\u9664\u7b2c\u4e00\u4e2a\u969c\u788d\u5916\uff0c\u8def\u7ebf\u4e2d\u6bcf\u4e2a\u969c\u788d\u7684\u9ad8\u5ea6\u90fd\u5fc5\u987b\u548c\u524d\u4e00\u4e2a\u969c\u788d\u00a0\u76f8\u540c\u00a0\u6216\u8005\u00a0\u66f4\u9ad8\u00a0\u3002</li> </ul> <p>\u8fd4\u56de\u957f\u5ea6\u4e3a\u00a0<code>n</code>\u00a0\u7684\u7b54\u6848\u6570\u7ec4\u00a0<code>ans</code>\u00a0\uff0c\u5176\u4e2d\u00a0<code>ans[i]</code>\u00a0\u662f\u4e0a\u9762\u6240\u8ff0\u7684\u4e0b\u6807\u00a0<code>i</code>\u00a0\u5bf9\u5e94\u7684\u6700\u957f\u969c\u788d\u8d5b\u8dd1\u8def\u7ebf\u7684\u957f\u5ea6\u3002</p> <ol> <li>\u76ee\u6807\u662f\u627e\u5230\u4e0d\u4e25\u683c\u5355\u8c03\u9012\u589e\u5b50\u5e8f\u5217</li> <li>\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4\uff0c\\(d[i]\\) \u8868\u793a\u957f\u5ea6\u4e3a \\(i\\) \u7684\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u6700\u5c0f\u7ed3\u5c3e\u5143\u7d20</li> <li>\u5f53\u904d\u5386\u5230\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019<ol> <li>\u5982\u679c\u8fd9\u4e2a\u5143\u7d20\u6bd4 \\(d\\) \u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u90fd\u5927\uff0c\u90a3\u4e48\u663e\u7136\u53ef\u4ee5\u653e\u5230 \\(d\\) \u540e\u9762\uff0c\u627e\u5230\u4e86\u66f4\u957f\u7684\u5b50\u5e8f\u5217</li> <li>\u5982\u679c\u8fd9\u4e2a\u5143\u7d20\u6ca1\u6709\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5927\uff0c\u5c31\u627e\u5230\u5176\u5728 \\(d\\) \u4e2d\u7684 <code>upper_bound</code>\uff0c\u56e0\u4e3a\u5141\u8bb8\u76f8\u7b49\uff0c\u5c06 <code>upper_bound</code> \u4f4d\u7f6e\u7684\u5143\u7d20\u66f4\u65b0\u6210\u8fd9\u4e2a\u5143\u7d20\uff08\u8fd9\u4e2a\u5143\u7d20\u663e\u7136\u6bd4 <code>upper_bound</code> \u4f4d\u7f6e\u7684\u5143\u7d20\u66f4\u5c0f\uff09</li> <li>\u6bcf\u6b21\u8003\u8651\u5b8c\u4e00\u4e2a \\(d[i]\\)\uff0c\u90fd\u8981\u8f93\u51fa\u5b83\u5728 \\(d\\) \u4e2d\u66ff\u6362\u7684\u4f4d\u7f6e +1\uff0c\u4e5f\u5c31\u662f\u5b83\u5bf9\u5e94\u7684\u5b50\u5e8f\u5217\u957f\u5ea6</li> </ol> </li> </ol> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; longestObstacleCourseAtEachPosition(vector&lt;int&gt;&amp; obstacles) {\n        vector&lt;int&gt; d, ans;\n        for (int ob: obstacles) {\n            // \u8fd9\u91cc\u9700\u8981\u6539\u6210 &gt;=\n            if (d.empty() || ob &gt;= d.back()) {\n                d.push_back(ob);\n                ans.push_back(d.size());\n            }\n            else {\n                // \u5c06 300 \u9898\u89e3\u4e2d\u7684\u4e8c\u5206\u67e5\u627e\u6539\u4e3a API \u8c03\u7528\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u76f4\u89c2\n                // \u5982\u679c\u662f\u6700\u957f\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\uff0c\u8fd9\u91cc\u662f lower_bound\n                // \u5982\u679c\u662f\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\uff0c\u8fd9\u91cc\u662f upper_bound\n                int loc = upper_bound(d.begin(), d.end(), ob) - d.begin();\n                ans.push_back(loc + 1);\n                d[loc] = ob;\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#314-\u4e70\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a-iii","title":"3.14 \u4e70\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III","text":"<p>Question</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c\u00a0<code>i</code>\u00a0\u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u7684\u80a1\u7968\u5728\u7b2c\u00a0<code>i</code>\u00a0\u5929\u7684\u4ef7\u683c\u3002</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210\u00a0\u4e24\u7b14\u00a0\u4ea4\u6613\u3002</p> <p>\u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002</p> <p>\u72b6\u6001\u673a</p> <ol> <li>\u4e00\u5171\u6709\u56db\u79cd\u72b6\u6001\uff0c\u7b2c\u4e00\u6b21\u4e70\u5165\u3001\u7b2c\u4e00\u6b21\u5356\u51fa\u3001\u7b2c\u4e8c\u6b21\u4e70\u5165\u3001\u7b2c\u4e8c\u6b21\u5356\u51fa</li> <li>\u8bb0\u5f55 <code>dp[0...3]</code> \u5206\u522b\u8868\u793a\u7b2c <code>i</code> \u5929\u8fdb\u884c\u4e0a\u8ff0\u64cd\u4f5c\u5206\u522b\u5f97\u5230\u7684\u6700\u5927\u6536\u76ca<ul> <li>\u521d\u59cb<ul> <li><code>dp[0] = -prices[0], dp[1] = dp[0] + prices[0] = 0</code> \u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u540c\u4e00\u5929\u4e70\u5165\u5356\u51fa\u76f8\u5f53\u4e8e\u6ca1\u53d8</li> <li><code>dp[2] = dp[1] - prices[0], dp[3] = dp[2] + prices[0]</code></li> </ul> </li> <li>\u6bcf\u5929\u8fdb\u884c\u66f4\u65b0\uff0c\u6bcf\u4e2a\u72b6\u6001\u7684\u6536\u76ca\u90fd\u91cd\u65b0\u53d6 max</li> </ul> </li> <li>\u597d\u50cf\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\u5e76\u6ca1\u6709\u4ec0\u4e48\u5f88\u5927\u7684\u5f71\u54cd</li> </ol> <pre><code>class Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        int n = prices.size();\n        int buy1 = -prices[0], sell1 = 0;\n        int buy2 = -prices[0], sell2 = 0;\n        for (int i = 1; i &lt; n; ++i) {\n            buy1 = max(buy1, -prices[i]);\n            sell1 = max(sell1, buy1 + prices[i]);\n            buy2 = max(buy2, sell1 - prices[i]);\n            sell2 = max(sell2, buy2 + prices[i]);\n        }\n        return sell2;\n    }\n};\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#3141-\u8865\u5145k-\u6b21\u4ea4\u6613\u7684\u60c5\u5f62","title":"3.14.1 \u8865\u5145\uff1a\\(k\\) \u6b21\u4ea4\u6613\u7684\u60c5\u5f62","text":"<pre><code>class Solution {\npublic:\n    int maxProfit(int k, vector&lt;int&gt;&amp; prices) {\n        int n = prices.size();\n        int INTMIN = -1e9;\n        vector&lt;vector&lt;int&gt;&gt; dp(k, vector&lt;int&gt;(2, {INTMIN, 0}));\n        for (auto p : prices) {\n            dp[0][0] = max(dp[0][0], -p);\n            dp[0][1] = max(dp[0][1], dp[0][0] + p);\n            for (int i = 1; i &lt; k; i++) {\n                dp[k][0] = max(dp[k][0], dp[k - 1][1] - p);\n                dp[k][1] = max(dp[k][1], dp[k][0] + p);\n            }\n        }\n        return dp[k][1];\n    }\n};\n</code></pre> <p>\u8fd8\u662f\u4e00\u6837\u7684</p>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#315-\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c","title":"3.15 \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c","text":"<p>Question</p> <p>\u4e8c\u53c9\u6811\u4e2d\u7684\u00a0\u8def\u5f84\u00a0\u88ab\u5b9a\u4e49\u4e3a\u4e00\u6761\u8282\u70b9\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u5bf9\u76f8\u90bb\u8282\u70b9\u4e4b\u95f4\u90fd\u5b58\u5728\u4e00\u6761\u8fb9\u3002\u540c\u4e00\u4e2a\u8282\u70b9\u5728\u4e00\u6761\u8def\u5f84\u5e8f\u5217\u4e2d\u00a0\u81f3\u591a\u51fa\u73b0\u4e00\u6b21\u00a0\u3002\u8be5\u8def\u5f84\u00a0\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u00a0\u8282\u70b9\uff0c\u4e14\u4e0d\u4e00\u5b9a\u7ecf\u8fc7\u6839\u8282\u70b9\u3002</p> <p>\u8def\u5f84\u548c\u00a0\u662f\u8def\u5f84\u4e2d\u5404\u8282\u70b9\u503c\u7684\u603b\u548c\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\u00a0<code>root</code>\u00a0\uff0c\u8fd4\u56de\u5176\u00a0\u6700\u5927\u8def\u5f84\u548c\u00a0\u3002</p> <ul> <li>\u65e0\u6cd5\u4f7f\u7528\u539f\u51fd\u6570\u5f62\u6210\u9012\u5f52</li> <li>\u8def\u5f84\u80af\u5b9a\u4f1a\u7ecf\u8fc7\u81f3\u5c11\u4e00\u4e2a\u8282\u70b9\uff0c\u7f16\u5199 <code>maxSPathSum</code> \u5f97\u5230\u5411\u4e0a\u5230\u8fbe\u67d0\u4e2a\u8282\u70b9\u7684\u6700\u5927\u8def\u5f84\u503c\uff0c\u5de6\u53f3\u7ed3\u5408\u624d\u80fd\u591f\u5f97\u5230\u4e00\u4e2a\u6700\u5927\u8def\u5f84\uff0c\u4f46\u662f\u8fd9\u6837\u7b26\u5408\u9012\u5f52\u8981\u6c42</li> </ul> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),\n * right(right) {}\n * };\n */\nclass Solution {\n    int maxSPathSum(TreeNode* root, int&amp; res) {\n        if (root == nullptr)\n            return 0;\n        int l = maxSPathSum(root-&gt;left, res);\n        int r = maxSPathSum(root-&gt;right, res);\n        int m = 0;\n        l = max(l, 0);\n        r = max(r, 0);\n        m = max(l, r);\n        int sum = root-&gt;val + l + r;\n        res = max(sum, res);\n        return root-&gt;val + m;\n    }\n\npublic:\n    int maxPathSum(TreeNode* root) {\n        int res = root-&gt;val;\n        maxSPathSum(root, res);\n        return res;\n    }\n};\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet%20Dynamic%20Programming.html#316-\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811","title":"3.16 \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811","text":"<ul> <li>\u8fdb\u884c\u8fd9\u6837\u7684 dp<ul> <li>\\(dp[i][j]=dp[i+1][j]+dp[i][j-1]+\\sum_{k=i+1}^{j-1} (dp[i][k-1]\\cdot dp[k+1][j])\\)</li> </ul> </li> <li>\u7136\u540e\u9700\u8981\u8003\u8651\u5185\u5b58\u7ba1\u7406\u7684\u95ee\u9898\uff0c\u5982\u679c\u4f7f\u7528 dp\uff0c\u603b\u4e0d\u80fd\u4e00\u76f4\u590d\u5236\u5de6\u53f3\u5b50\u6811\u5427<ul> <li>\u53ef\u4ee5\u8003\u8651\u7528\u6307\u9488\u628a\u8fd9\u4e9b\u5b50\u95ee\u9898\u4e2d\u521b\u5efa\u7684\u5b50\u6811\u8fde\u63a5\u8d77\u6765</li> <li>\u6bcf\u4e00\u6b21 \\(dp[i][j]\\) \u4e2d\u4ee5 \\(k\\) \u4e3a\u6839\u8282\u70b9\u7684\u4e8c\u53c9\u6811\u6709\u591a\u5c11\u4e2a\uff0c\u5c31\u521b\u5efa\u591a\u5c11\u4e2a\u503c\u4e3a \\(k\\) \u7684\u6839</li> <li>\u8fd9\u6837\u5185\u5b58\u4f7f\u7528\u6548\u7387\u5c31\u4f1a\u5f88\u9ad8</li> </ul> </li> </ul> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\ntypedef struct TreeNode Node;\n\nNode* csn(int n) {\n    Node* res = (Node*)malloc(sizeof(Node));\n    res-&gt;left = res-&gt;right = NULL;\n    res-&gt;val = n;\n    return res;\n}\n\nstruct TreeNode** generateTrees(int n, int* returnSize) {\n    if (n == 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    Node** dp[9][9]; // dp[i][j] \u662f [i...j] \u7684\u6240\u6709\u5b50\u6811\u7ec4\u6210\u7684\u5217![__assets/ADS Cheat Sheet Dynamic Programming.md/IMG-ADS Cheat Sheet Dynamic Programming-20241226193647983.png](__assets/ADS Cheat Sheet Dynamic Programming.md/IMG-ADS Cheat Sheet Dynamic Programming-20241226193647983.png)Node*));\n        len[i][i] = 1;\n        dp[i][i][0] = csn(i);\n    }\n    for (int l = 2; l &lt;= n; l++) {\n        for (int i = 1; i + l - 1 &lt;= n; i++) {\n            int j = i + l - 1;\n            int thisLen = len[i + 1][j] + len[i][j - 1];\n            for (int k = i + 1; k &lt;= j - 1; k++) {\n                thisLen += (len[i][k - 1] * len[k + 1][j]);\n            }\n            dp[i][j] = (Node**)malloc(thisLen * sizeof(Node*));\n            len[i][j] = thisLen;\n            Node** thisList = dp[i][j];\n            int idx = 0;\n            for (int x = 0; x &lt; len[i + 1][j]; x++) {\n                Node* root = csn(i);\n                root-&gt;right = dp[i + 1][j][x];\n                thisList[idx++] = root;\n            }\n            for (int x = 0; x &lt; len[i][j - 1]; x++) {\n                Node* root = csn(j);\n                root-&gt;left = dp[i][j - 1][x];\n                thisList[idx++] = root;\n            }\n            for (int k = i + 1; k &lt;= j - 1; k++) {\n                int n1 = len[i][k - 1];\n                int n2 = len[k + 1][j];\n                for (int x = 0; x &lt; n1; x++) {\n                    for (int y = 0; y &lt; n2; y++) {\n                        Node* root = csn(k);\n                        root = csn(k);\n                        root-&gt;left = dp[i][k - 1][x];\n                        root-&gt;right = dp[k + 1][j][y];\n                        thisList[idx++] = root;\n                    }\n                }\n            }\n        }\n    }\n    *returnSize = len[1][n];\n    return dp[1][n];\n}\n</code></pre>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html","title":"Final Cheat Sheet","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#1-data-structures","title":"1 Data Structures","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#11-balanced-bst","title":"1.1 Balanced BST","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#111-avl-trees","title":"1.1.1 AVL Trees","text":"<ul> <li>\\(n_{h}=F_{h+3}-1\\)\uff0c\u5047\u5982\u7a7a\u6811\u9ad8\u5ea6\u662f -1\uff0c\u6216\u8005\u8bf4\u8fb9\u624d\u80fd\u63d0\u4f9b\u9ad8\u5ea6\uff1f</li> <li>\\(BF\\) balance factor \u53ef\u4ee5\u662f 1, -1, 0</li> <li>LL, RR \u90fd\u662f\u5355\u6b21\u65cb\u8f6c\uff0cLR, RL \u90fd\u8981\u8f6c\u4e24\u6b21</li> <li>Trouble maker \u662f\u4ea7\u751f\u4e0d\u5e73\u8861\u65f6\u63d2\u5165\u7684\u8282\u70b9\uff0cTrouble finder \u662f\u63d2\u5165\u64cd\u4f5c\u540e \\(BF\\) \u53d1\u751f\u4e0d\u5e73\u8861\u7684\u8282\u70b9</li> <li>\u8bb0\u5f55 height \u800c\u4e0d\u662f bf \u80fd\u591f\u51cf\u5c11\u66f4\u65b0\u6b21\u6570</li> <li>\u5220\u9664\u64cd\u4f5c<ul> <li>\u627e\u5230\u8981\u5220\u7684\u8282\u70b9<ul> <li>\u5982\u679c\u662f\u53f6\u5b50\uff0c\u5220\u9664</li> <li>\u5982\u679c\u662f 2 \u5ea6\uff0c\u8bd5\u56fe\u5220\u9664\u524d\u9a71\u6216\u540e\u7ee7</li> <li>\u5982\u679c\u662f 1 \u5ea6\uff0c\u5220\u9664\u5e76\u63d0\u5347\u5b50\u8282\u70b9</li> </ul> </li> <li>bottom-up \u56de\u53bb\u8fdb\u884c\u9ad8\u5ea6\u66f4\u65b0\u548c\u65cb\u8f6c\u5e73\u8861\u8c03\u6574</li> </ul> </li> </ul> Insert Find Delete \\(O(\\log N)\\) \\(O(\\log N)\\) \\(O(\\log N)\\) \u5148\u63d2\u5165 BST\uff0c\u5728\u9012\u5f52\u4e2d\u5b8c\u6210\u5c40\u90e8\u68c0\u67e5\u548c\u8c03\u6574 \u9012\u5f52\u5220\u9664\u5e76\u68c0\u67e5\u8c03\u6574"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#112-splay-trees","title":"1.1.2 Splay Trees","text":"<ul> <li>zig, zig-zig \u90fd\u7b97 single rotation\uff0czig-zag \u624d\u7b97 double<ul> <li>\u5728 AVL \u4e2d\uff0czig-zig \u4e5f\u7b97\u4e24\u6b21</li> </ul> </li> <li>\u4f18\u70b9\u662f\u5b58\u50a8\u7a7a\u95f4\u5c0f</li> <li>\u5220\u9664\u7684\u65f6\u5019\uff0csplay \u5230\u6839\uff0c\u5220\u6839\uff0c\u5de6\u5b50\u6811 splay max\uff0c\u7136\u540e\u8ba9\u53f3\u5b50\u6811\u6210\u4e3a\u5de6\u5b50\u6811\u7684\u53f3\u5b69\u5b50</li> <li>roughly halves the depth of most nodes on the path</li> <li>\u52bf\u80fd\u51fd\u6570 \\(\\Phi(T)=\\sum_{i \\in T}\\log S(i)\\)\uff0c\u5176\u4e2d \\(S(i)\\) \u8868\u793a\u8282\u70b9 \\(i\\) \u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9\u6570\u91cf\uff0c\u7ea6\u7b49\u4e8e height<ul> <li>\u53ef\u4ee5\u8bc1\u660e\u5355\u6b21 rotate \u7684\u5747\u644a\u5f00\u9500\u662f\u5e38\u6570\u7684\uff0c</li> <li>The amortized time to splay a tree with root \\(T\\) at node \\(X\\) is at most \\(3(R(T)-R(X))+1=O(\\log N)\\)</li> </ul> </li> </ul> Insert Find Delete \u52bf\u80fd\u51fd\u6570 \\(O(\\log N)\\)* \\(O(\\log N)\\)* \\(O(\\log N)\\)* \\(\\Phi(T)=\\sum_{i \\in T}\\log S(i)\\) \u5148\u63d2\u5165 BST\uff0c\u518d splay \u5230\u6839\u8282\u70b9 \u627e\u5230\u5e76 Splay \u627e\u5230\uff0csplay\uff0c\u5220\u9664\uff0c\u5de6\u5b50\u6811 splay max\uff0c\u53f3\u5b50\u6811\u63a5\u4e0a"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#113-red-black-trees","title":"1.1.3 Red-Black Trees","text":"<ul> <li>\u5b9a\u4e49<ul> <li>\u6839\u662f\u9ed1\u8272</li> <li><code>NIL</code> \u662f\u5171\u4eab\u53f6\u5b50\uff0c\u662f\u9ed1\u8272\uff0c\u9664\u4e86 nil \u90fd\u662f internal node</li> <li>\u6ca1\u6709\u8fde\u7eed\u7684\u7ea2\u8272\u8282\u70b9</li> <li>\u6bcf\u4e2a\u8282\u70b9\u7684\u9ed1\u9ad8\u76f8\u540c<ul> <li>black height \u4e0d\u7b97\u81ea\u5df1\uff0c\u7b97 <code>NIL</code> \u7c7b\u6bd4 2-3-4 tree</li> </ul> </li> <li> \u7ea2\u8272\u4e00\u5ea6\u8282\u70b9\u51fa\u73b0\u5c31\u975e\u6cd5 </li> </ul> </li> <li>\u5e73\u8861\u6027\u8bc1\u660e<ul> <li>\\(bh(x)\\geq h(x)/2\\) \u56e0\u4e3a\u6ca1\u6709\u7ea2\u8272\u8fde\u7eed</li> <li>\\(sizeof(x)\\geq 2^{bh(x)}-1\\) \u9012\u63a8</li> <li>\\(h\\leq 2\\ln(N+1)\\) \u5e73\u8861\u6027 \u8bb0\u4f4f\u8fd9\u4e2a\u5f0f\u5b50</li> </ul> </li> <li>\u63d2\u5165\u7684\u60c5\u51b5<ul> <li>bottom-up<ul> <li>\u53d4\u53d4\u7ea2\u8272\u5219\u67d3\u8272</li> <li>\u53d4\u53d4\u9ed1\u8272\u4fdd\u8bc1\u7ea2\u8272\u540c\u4fa7\uff0c\u5e76\u6362\u8272\u65cb\u8f6c</li> </ul> </li> <li>top-down<ul> <li>\u5411\u4e0b\u904d\u5386\u7684\u65f6\u5019\uff0c\u5c06\u6709\u4e24\u4e2a\u7ea2\u8272\u5b69\u5b50\u7684\u9ed1\u8272\u8282\u70b9\u67d3\u7ea2\uff0c\u5176\u5b69\u5b50\u67d3\u9ed1</li> <li>\u8fd9\u6837\u5c31\u4fdd\u8bc1\u7236\u4eb2\u4e3a\u7ea2\u8272\u65f6\uff0c\u53d4\u53d4\u4e0d\u53ef\u80fd\u662f\u7ea2\u8272\uff0c\u76f4\u63a5\u8fdb\u5165\u6700\u540e\u60c5\u51b5</li> </ul> </li> </ul> </li> <li>\u5220\u9664\u7684\u5904\u7406<ul> <li>\u5220\u9664\u9ed1\u8272\u53f6\u5b50\u7684\u65f6\u5019\u624d\u9700\u8981\u8fdb\u884c\u4e0b\u9762\u7684\u64cd\u4f5c ADS 02 Red-Black Trees and B+ Trees#1.4.1.2 Step 2. \u8c03\u6574 Black Height</li> <li>\u5f53\u6210 2-3-4 \u6811\u6765\u64cd\u4f5c</li> </ul> </li> </ul> Number of rotations AVL RBT Insertion \\(\\le 2\\) \\(\\le 2\\) Deletion \\(O(\\log N)\\) \\(\\le 3\\) Insert Find Delete FindMax(FindMin) \\(O(\\log N)\\) \\(O(\\log N)\\) \\(O(\\log N)\\) \\(O(\\log N)\\)"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#114-b-trees","title":"1.1.4 B+ Trees","text":"<ul> <li>\u5b9a\u4e49<ol> <li>\u6839\u662f\u53f6\u5b50\u6216\u6709 \\([2, M]\\) \u4e2a\u5b69\u5b50</li> <li>\u6240\u6709\u975e\u53f6\u5b50\u8282\u70b9\uff08\u9664\u4e86\u6839\uff09\u90fd\u6709 \\([\\lceil M/2\\rceil, M]\\) \u4e2a\u5b69\u5b50\uff0c\u5f3a\u8c03\u8fd9\u4e2a M/2</li> <li>\u6240\u6709\u53f6\u5b50\u7684\u6df1\u5ea6\u76f8\u540c</li> </ol> </li> <li>\u590d\u6742\u5ea6\u5206\u6790<ul> <li>\\(T_{find}=Depth(M,N)\\times O(\\log M)=O(\\lceil \\log_{\\lceil M/2 \\rceil}N \\rceil)\\times O(\\log M)=O(\\log N)\\)</li> <li>\\(T_{insert}(M,N)=O((M/\\log M)\\log N)\\) \u8fd9\u91cc\u8003\u8651\u7684\u662f\u987a\u5e8f\u904d\u5386\u7d22\u5f15\uff0c\u4f46\u5176\u5b9e\u53ef\u4ee5\u4e8c\u5206\u67e5\u627e</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#12-priority-queues","title":"1.2 Priority Queues","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#121-leftist-heaps","title":"1.2.1 Leftist Heaps","text":"<ul> <li>NPL, \\(Npl(left)\\geq Npl(right)\\)</li> <li>property<ul> <li>\u53f3\u8def\u7ecf\u8282\u70b9\u6570 \\(\\leq \\lfloor \\log(N+1) \\rfloor\\)<ul> <li>\\(\\leftrightarrow\\) \u82e5\u53f3\u8def\u7ecf\u4e0a\u6709 \\(r\\) \u4e2a\u8282\u70b9\uff0c\u5219 \\(N\\geq 2^r-1\\)</li> </ul> </li> <li>\\(Npl(root)=r\\)\uff0c\u90a3\u4e48 \\(N\\geq 2^{r+1}-1\\)</li> </ul> </li> <li>Operations<ul> <li>merge<ul> <li>\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u5806\u5df2\u7ecf\u6ca1\u6709\u5de6\u5b69\u5b50\u4e86\uff0c\u90a3\u4e48\u6839\u636e \\(Npl\\)\uff0c\u5b83\u4e00\u5b9a\u6ca1\u6709\u53f3\u5b69\u5b50\uff0c\u8fd9\u65f6\u5019\u4e3a\u4e86\u7ef4\u62a4 \\(Npl\\) \u53ea\u9700\u8981\u5c06\u53e6\u4e00\u4e2a\u5806\u5f53\u4f5c\u5176\u5de6\u5b69\u5b50</li> </ul> </li> </ul> </li> </ul> Operation FindMin DeleteMin Insert DecreaseKey Merge Binary \\(\\Theta(1)\\) \\(\\Theta(\\log n)\\) BuildHeap in \\(O(n)\\) \\(O(\\log n)\\) \\(\\Theta(n)\\) Leftist Heap \\(\\Theta(1)\\) \\(\\Theta(\\log n)\\) \\(\\Theta(\\log n)\\) \\(O(\\log n)\\) \\(\\Theta(\\log n)\\)"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#122-skew-heaps","title":"1.2.2 Skew Heaps","text":"<ul> <li>Always swap the left and right children except that the largest of all the nodes on the right paths does not have its children swapped. \u59cb\u7ec8\u4ea4\u6362\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u9664\u4e86\u5728\u53f3\u8def\u5f84\u4e0a\u6700\u5927\u7684\u8282\u70b9\u4e0d\u4ea4\u6362\u5176\u5b50\u8282\u70b9\u3002<ul> <li>\u5fc5\u987b\u5b8c\u6574\u904d\u5386\u53f3\u8def\u5f84\uff0c\u5373\u4f7f\u4e00\u4e2a\u5806\u5df2\u7ecf\u7a7a\u4e86\u4e5f\u9700\u8981\u904d\u5386\u53e6\u4e00\u4e2a\u5806\u4f59\u4e0b\u7684\u53f3\u8def\u7ecf\uff0c\u4ee5\u6b64\u4fdd\u8bc1\u8fdb\u884c\u4ea4\u6362</li> <li>\u6700\u540e\u4e00\u4e2a\u5408\u5e76\u7684\u8282\u70b9\uff0c\u5176\u4e00\u5b9a\u6ca1\u6709\u53f3\u5b69\u5b50\uff0c\u4e14\u4e0d\u8fdb\u884c\u5b50\u6811\u4ea4\u6362</li> </ul> </li> <li>Amortized Analysis ADS 04 Leftist Heaps and Skew Heaps#3.2 Amortized Analysis for Skew Heaps<ul> <li>\\(definition\\): \u67d0\u4e00\u8282\u70b9\u7684\u540e\u4ee3\uff08\u5305\u62ec\u81ea\u5df1\uff09\u4e2d\uff0c\u5176\u53f3\u5b50\u6811\u5185\u7684\u5927\u4e8e\u7b49\u4e8e\u4e00\u534a\uff0c\u5219\u5176\u4e3a heavy node\uff0c\u53cd\u4e4b\u4e3a light\u3002\u4e5f\u5c31\u662f \\(R\\geq \\frac{L+R+1}{2}\\)</li> <li>merge \u4e4b\u540e\uff0cheavy \u4e00\u5b9a\u53d8\u6210 light\uff0clight \u53ef\u80fd\u53d8\u6210 heavy</li> </ul> </li> <li>\u987a\u5e8f\u63d2\u5165 \\(2^k-1\\) \u4e2a\u81ea\u7136\u6570\uff0c\u5f62\u6210\u6ee1\u6811</li> <li>right path can be arbitrarily long</li> </ul> Operation FindMin DeleteMin Insert DecreaseKey Merge Binary \\(\\Theta(1)\\) \\(\\Theta(\\log n)\\) BuildHeap in \\(O(n)\\) \\(O(\\log n)\\) \\(\\Theta(n)\\) Skew Heap \\(\\Theta(1)\\) \\(\\Theta(\\log n)\\) \\(\\Theta(\\log n)\\) * \\(O(\\log n)\\)* \\(\\Theta(\\log n)\\)*"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#123-binomial-queue","title":"1.2.3 Binomial Queue","text":"<ul> <li>\\(\\Phi=\\text{number of trees}\\)</li> <li>\\(\\hat{c}=2\\) for each insertion</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#124-fib-heap","title":"1.2.4 Fib Heap","text":"<ul> <li>\u53ea\u6709 deletemin \u9700\u8981\u8fdb\u884c\u6839\u94fe\u8868\u5408\u5e76\uff0c\u6240\u4ee5\u662f \\(O(\\log N)\\) \u7684\uff0c\u5176\u4ed6\u90fd\u662f\u5e38\u6570</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#13-amortized-analysis","title":"1.3 Amortized Analysis","text":"<p>\u53ea\u8981\u644a\u8fd8\u5f00\u9500\u5927\u4e8e\u603b\u5f00\u9500\uff0c\u90fd\u7b97\u662f\u5408\u7406\u7684\u644a\u8fd8\u5206\u6790</p> <ul> <li>\u52bf\u80fd\u51fd\u6570\u7684\u9009\u62e9<ul> <li>\u5f00\u59cb\u7684\u65f6\u5019\u6700\u5c0f assume its minimum</li> <li>\u975e\u8d1f\u7684</li> <li>\u644a\u8fd8\uff0c\u4e5f\u5c31\u662f\u7b80\u5355\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u52bf\u80fd\u589e\u5927\uff0c\u590d\u6742\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u52bf\u80fd\u51cf\u5c0f\uff0c\u4ece\u800c\u4e8c\u8005\u7684\u590d\u6742\u5ea6\u4e00\u81f4</li> <li>\u521d\u59cb\u503c\u53ef\u4ee5\u4e0d\u662f 0</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#2-algorithm","title":"2 Algorithm","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#21-inverted-file-index","title":"2.1 Inverted File Index","text":"<ul> <li>terms<ul> <li>term dict, posting list</li> <li>word stemming</li> <li>stop words</li> <li>distributed indexing<ul> <li>term-partitioned index</li> <li>document-partitioned index</li> </ul> </li> <li>dynamic indexing<ul> <li>auxiliary index = cache</li> </ul> </li> <li>compression<ul> <li>term dict -&gt; a single str</li> <li>posting list -&gt; \u5dee\u5206\u5b58\u50a8\u8bcd\u9996 char \u7684 index</li> </ul> </li> <li>measures<ul> <li>relevance measurement</li> <li>precision</li> <li>recall</li> </ul> </li> </ul> </li> <li>\u4ea4\u96c6\u67e5\u627e\u4ece frequency \u6700\u5c0f\u7684\u8bcd\u5f00\u59cb</li> <li>hash \u67e5\u627e\u66f4\u5feb\uff0c\u4f46\u662f\u65e0\u6cd5\u8303\u56f4\u67e5\u627e</li> <li>term-partition \u4e5f\u4e0d\u662f\u6ca1\u6709\u7528\u7684</li> <li>thresholding<ul> <li>document-thresholding<ul> <li>\u4e0d\u65b9\u4fbf\u5e03\u5c14\u64cd\u4f5c</li> <li>\u53ef\u80fd\u7531\u4e8e\u622a\u65ad\u9519\u8fc7\u91cd\u8981\u6587\u4ef6</li> </ul> </li> <li>query \u53ea\u8003\u8651\u90e8\u5206 query</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#22-backtracking","title":"2.2 Backtracking","text":"<p>backtracking \u672c\u8eab\u5c31\u6709 eliminate \u7684\u542b\u4e49</p> <ul> <li>8-Queens<ul> <li>\\(N!\\) solutions</li> </ul> </li> <li>alpha-beta \u526a\u679d<ul> <li>\u5982\u679c\u6709 N \u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u51cf\u5c11\u5230 \\(O(\\sqrt{ N })\\)</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#23-divide-and-conquer","title":"2.3 Divide and Conquer","text":"<ul> <li>method<ul> <li>\u66ff\u4ee3\u6cd5</li> <li>\u9012\u5f52\u6811</li> <li>\u4e3b\u65b9\u6cd5</li> </ul> </li> </ul> <p>\u5f53 \\(a\\ge 1,b\\geq 1, p\\geq 0\\) \u65f6\uff0c\u5bf9\u4e8e\u9012\u63a8\u5f0f\uff1a</p> \\[T(N)=aT(N/b)+\\Theta(N^k \\log^p N)\\] <ol> <li>if \\(a&gt;b^k\\), \\(T(N)=O(N^{\\log_{b}a})\\)</li> <li>if \\(a=b^k\\), \\(T(N)=O(N^k \\log^{p+1}N)\\)</li> <li>if \\(a&lt;b^k\\), \\(T(N)=O(N^k \\log^p N)\\)</li> </ol>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#24-dynamic-programming","title":"2.4 Dynamic Programming","text":"<ul> <li>floyd warshall \u7b97\u6cd5\u53ef\u4ee5\u6709\u8d1f\u6743\uff0c\u4f46\u662f\u4e0d\u80fd\u6709\u8d1f\u6570\u5708</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#25-greedy-algorithm","title":"2.5 Greedy Algorithm","text":"<ul> <li>Elements<ul> <li>\u505a\u51fa\u9009\u62e9\uff0c\u5269\u4e0b\u4e00\u4e2a\u5b50\u95ee\u9898\u9700\u8981\u89e3\u51b3</li> <li>greedy choice property: \u603b\u6709\u4e00\u4e2a\u6700\u4f18\u89e3\u662f\u8d2a\u5fc3\u9009\u62e9\u5f97\u5230\u7684\uff0c\u53c2\u6570\u4ea4\u6362\u6cd5</li> <li>optimal substructure property: \u505a\u51fa\u8d2a\u5fc3\u9009\u62e9\u540e\uff0c\u603b\u80fd\u5f97\u5230\u6700\u4f18\u5b50\u7ed3\u6784\uff0c\u5373\u5c06\u8d2a\u5fc3\u9009\u62e9\u548c\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u7ec4\u5408\u8d77\u6765\u603b\u662f\u5168\u5c40\u6700\u4f18\u89e3</li> </ul> </li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#3-algorithm-analysis","title":"3 Algorithm Analysis","text":""},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#31-complexity-class","title":"3.1 Complexity Class","text":"<ul> <li>\u6700\u96be\u7684\u95ee\u9898\u662f\u4e0d\u53ef\u5224\u5b9a\u95ee\u9898</li> <li>\u5bf9\u4e8e NTM \u6765\u8bf4\uff0c\u4e0d\u53ef\u5224\u5b9a\u95ee\u9898\u8fd8\u662f\u4e0d\u53ef\u5224\u5b9a</li> <li>co-NP: \u5176\u8865\u95ee\u9898\u662f NP \u95ee\u9898\u7684\u95ee\u9898\uff0c\u56db\u79cd\u60c5\u51b5\u4e2d\uff0c\u53cd\u6b63 P \u5c5e\u4e8e co-NP \u548c NP \u7684\u4ea4\u96c6</li> </ul> \u95ee\u9898 \u590d\u6742\u5ea6\u7c7b \u5224\u5b9a\u542b\u4e49 note Set Cover NP-C \u5224\u5b9a\u662f\u5426\u5b58\u5728\u5927\u5c0f\u4e3a \\(k\\) \u7684 set cover Circuit-SAT NP-C \u5bf9\u4e8e\u4e00\u4e2a\u5e03\u5c14\u8868\u8fbe\u5f0f\uff0c\u5224\u5b9a\u662f\u5426\u5b58\u5728\u4e00\u7ec4\u8d4b\u503c\u4f7f\u5176\u4e3a 1 \u6700\u65e9\u88ab\u8bc1\u660e\u662f NP-C \u7684\u95ee\u9898 SAT NP-C Hamiltonian Cycle NP-C \u5224\u5b9a\u4e00\u5f20\u56fe\u662f\u5426\u5b58\u5728\u54c8\u5bc6\u987f\u56de\u8def \u5224\u5b9a\u4e00\u4e2a\u56fe\u662f\u5426\u6ca1\u6709\u54c8\u5bc6\u987f\u56de\u8def\u7684\u95ee\u9898\u4e0d\u662f NP \u7684 Clique NP-C \u5224\u5b9a\u4e00\u5f20\u56fe\u662f\u5426\u5b58\u5728\u5927\u5c0f\u81f3\u5c11\u4e3a k \u7684\u56e2 Knapsack NP-C Bin Packing NP-C Domination Set NP-C DNF-SAT P \u7ed9\u5b9a DNF\uff0c\u5224\u5b9a\u662f\u5426\u80fd\u591f\u6ee1\u8db3 \u751a\u81f3\u662f\u7ebf\u6027\u7684\u590d\u6742\u5ea6 Longest Distance in Acyclic DAG P TSP NP-C \u5224\u5b9a\u4e00\u5f20\u56fe\u662f\u5426\u5b58\u5728 cost \u4e0d\u8d85\u8fc7 k \u7684\u8def\u7ebf \u8981\u8bc1\u660e TSP \u662f NP-C\uff0c\u9700\u8981\u8bc1\u660e\u5b83\u662f NP\uff0c\u5e76\u4e14\u53ef\u4ee5\u7531\u54c8\u5bc6\u987f\u56de\u8def\u5f52\u7ea6\u5f97\u5230 Vertex Cover Problem NP-C \u5224\u5b9a\u4e00\u5f20\u56fe\u662f\u5426\u5b58\u5728\u5927\u5c0f\u81f3\u591a\u4e3a k \u7684\u9876\u70b9\u8986\u76d6 \u9996\u5148\u662f NP \u7684\uff0c\u5176\u6b21\u53ef\u4ee5\u7531\u4e00\u652f NP-C \u7684 Clique \u95ee\u9898\u5f52\u7ea6\u5f97\u5230\u8fd9\u662f\u7528\u8865\u56fe\u6765\u8bc1\u660e\u7684\uff0c\u89c4\u7ea6\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a \\(O(N^2)\\) 3-CNF SAT NP-C Subset Problem NP-C Partition Problem NP-C Domination Set NP-C"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#32-approximation","title":"3.2 Approximation","text":"<ul> <li>FPTAS \u5c31\u662f n \u7684\u6307\u6570\u548c epsilon \u65e0\u5173\u4e86</li> <li>binpacking<ul> <li>NF(2): 1, epsilon, 1, epsilon, 1 epsilon</li> <li>FF(1.7): \u5982\u679c\u5220\u6389\u4e00\u4e2a\uff0c\u53ef\u80fd\u7ed3\u679c\u4f1a\u66f4\u5dee</li> </ul> </li> </ul> \u95ee\u9898 \u4f18\u5316\u542b\u4e49 \u7b97\u6cd5 \u8fd1\u4f3c\u6bd4 \u505c\u6b62\u590d\u6742\u5ea6 note Bin Packing general online online lwb 1.67 \u8bfe\u4ef6\u7ed9\u7684\uff0c\u5b58\u5728\u4e00\u79cd\u8f93\u5165\uff0c\u80fd\u8ba9\u6240\u6709 online \u90fd\u65e0\u6cd5\u4f4e\u4e8e 1.67 FF 2 \\(O(\\|L\\|)\\) NF 1.7 BF 1.7 Refined Harmonic 1.63597 (asmy) Modified Harmonic 2 1.61217 (asmy) online asym lwb 1.5407 general offline lwb 1.5 AnyFit 11/9(1.22) ~ 1.25 asym FFD 11/9 OPT + 6/9 (tight) asym NFD \u4ec5\u4ec5\u7565\u5fae\u5c0f\u4e8e 1.7 2 item sizes FF 2 NF/BF 1.5 (not tight) Knapsack EnumerateGreedy\u8d2a\u5fc3\u679a\u4e3e \\(1+\\varepsilon\\)\\(K=\\varepsilon \\frac{p_{\\max}}{n}\\) FPTAS K-center general \\(\\infty\\) metric distance\u6700\u5c0f\u5316\u6700\u5927\u8ddd\u79bb greedy \u7b2c\u4e00\u4e2a\u70b9\u9009\u62e9\u6700\u4e2d\u5fc3\u7684\u4f4d\u7f6e \\(\\infty\\) greedy 2-r ? greedy 2-r far away 2 LWB 2 \u9664\u975e P=NP\uff0c\u56e0\u4e3a\u5c0f\u4e8e 2 \u7684\u8fd1\u4f3c\u6bd4\u53ef\u4ee5\u5f52\u7ea6\u5230 dominating set \u95ee\u9898\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\uff1b\u5982\u679c r(C*)=1\uff0c\u5219 dominating set \u6709 size K \u7684\u89e3 Max-Cut state-slipping 2 \u53ef\u80fd\u65e0\u6cd5\u591a\u9879\u5f0f\u65f6\u95f4 \u5982\u679c\u4f7f\u7528 \\(\\frac{2\\varepsilon}{\\|V\\|}w(A,B)\\) \u68af\u5ea6\u66f4\u65b0\uff0c\u5c31\u662f \\(2+\\varepsilon\\) \\(O(\\frac{n}{\\varepsilon}\\log W)\\)yes! \u5b9e\u73b0\u4e86\u591a\u9879\u5f0f\u65f6\u95f4 W \u662f\u6240\u6709\u6743\u91cd\u4e4b\u548c\u8fd9\u4e2a\u7ffb\u8f6c\u6b21\u6570\u662f\u56e0\u4e3a\u521d\u59cb\u6700\u5c0f\u4e3a 1\uff0c\u6bcf\u7ffb\u8f6c \\(n/\\varepsilon\\) \u540e\u6743\u91cd\u4e00\u5b9a\u7ffb\u500d\uff0c\u6700\u5927\u5230 \\(W\\) best 1.1382 P=NP \\(17/16\\approx1.0625\\) \u53ea\u6709 1 2 \u4e24\u79cd\u8fb9\u957f \\(8/7\\) \u6700\u957f\u56de\u8def \u786e\u5b9a\u7b97\u6cd5 \\(4/3\\) \u968f\u673a\u7b97\u6cd5 \\((33+\\varepsilon)/25\\) Set Cover unweighted greedy\uff0c\u6bcf\u6b21\u6311\u9009\u5177\u6709\u6700\u591a\u672a\u8986\u76d6\u5143\u7d20\u7684\u96c6\u5408 \\(\\ln n-\\ln \\ln n+\\Theta(1)\\) weighted \\(O(\\log n)\\) Vertex Cover \u627e\u5230\u6700\u5c0f\u7684\u9876\u70b9\u8986\u76d6\uff0c\u53ef\u4ee5\u89c4\u7ea6\u5230\u6700\u5927\u72ec\u7acb\u96c6 \u6bcf\u6b21\u627e\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u5220\u9664\u4e24\u4e2a\u9876\u70b9 \\(2-\\Theta(1/\\sqrt{ \\log\\|V\\| })\\) \u6bcf\u6b21\u627e\u6700\u5927\u5ea6\u6570\u7684\u9876\u70b9\u5220\u9664 \\(\\Omega(\\log n)\\) \\(2/(1+\\delta)\\) in \\(\\delta\\)-dense graph Independent Set general \u4e0d\u5b58\u5728\u5e38\u6570\u8fd1\u4f3c\u6bd4 planar graph \u4efb\u610f\u63a5\u8fd1 1 \u4f46\u4e0d\u7b49\u4e8e bounded degree \\((\\Delta+2)/3\\) \\(\\Delta\\) \u662f\u6700\u5927\u5ea6\u6570"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Cheat%20Sheet.html#33-local-search","title":"3.3 Local Search","text":"<ul> <li>metropolis</li> <li>simulated annealing</li> <li>hopfield neural networks<ul> <li>definition<ul> <li>good edge: \u5982\u679c\u8fb9\u6743\u91cd\u548c\u4e24\u4e2a\u9876\u70b9\u8d4b\u503c\u4e58\u79ef\u662f\u8d1f\u6570</li> <li>satisfied vertex: \u5982\u679c\u8fd9\u4e2a\u9876\u70b9\u7684 good edge \u7684\u603b\u6743\u91cd\u5927\u4e8e bad edge \u7684\u603b\u6743\u91cd</li> <li>stable config: \u5982\u679c\u6240\u6709\u7684\u9876\u70b9\u90fd\u662f satisfied \u7684</li> <li>\u4e0d\u4e00\u5b9a\u5b58\u5728 stable config</li> <li>\u627e\u5230\u4e00\u4e2a\u7a33\u5b9a config\uff0c\u6216\u8005\u662f\u80fd\u91cf\u8db3\u591f\u5c0f\u7684 config</li> </ul> </li> <li>state-flipping<ul> <li>\u968f\u4fbf\u627e\u4e00\u4e2a\u4e0d\u6ee1\u610f\u7684\u70b9\uff0c\u7136\u540e\u7ffb\u8f6c\u5176\u8d4b\u503c</li> <li>\u6700\u591a \\(W=\\sum_{e}|w_{e}|\\) \u6b21\u8fed\u4ee3</li> <li>\u52bf\u80fd\u51fd\u6570 \\(\\Phi(S)=\\sum_{e\\text{ is good}} |w_{e}|\\)<ul> <li>\u6bcf\u6b21\u7ffb\u8f6c\u81f3\u5c11\u589e\u52a0 1</li> <li>\\(0\\leq \\Phi\\leq W\\)</li> </ul> </li> <li>\u4efb\u4f55\u5c40\u90e8\u6700\u4f18\u89e3\u90fd\u662f\u7a33\u5b9a\u7684 config</li> </ul> </li> </ul> </li> <li>max-cut</li> </ul>"},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html","title":"Final Questions","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#15-16-\u6625\u590f","title":"15-16 \u6625\u590f","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#speed-check","title":"Speed Check","text":"<ul> <li>With the same operations,</li> <li>Bin Queue deletemin \u662f O(log N) \u7684</li> <li>neighborhood \u91cc\u7684\u641c\u7d22\u4e5f\u53ef\u80fd\u9700\u8981\u6307\u6570\u65f6\u95f4\uff01</li> <li>Max-cut approximation<ul> <li>A \u66f4\u65b0\u68af\u5ea6\uff0c\u5bf9\u7684</li> <li>B \u662f \\(2|V|\\log W\\)\uff0c\u9519\u4e86</li> </ul> </li> <li>least number of degree 2 node in B+ tree<ul> <li>\u5982\u679c\u5168\u90fd\u662f\u4e09\u5ea6\u7684\uff0c\u5bb9\u91cf\u662f 18 \u5230 27 \u4e2a\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u6ee1\u8db3\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u4e8c\u5ea6\u8282\u70b9</li> </ul> </li> <li>most number of deg 2 node in B+ tree<ul> <li>\u53ef\u4ee5\u6784\u9020\u5c3d\u91cf\u591a\u7684\u53f6\u5b50\uff0c\u7136\u540e bottom up \u5c3d\u91cf\u90fd\u7528 deg 2 \u8282\u70b9\u5efa\u6811</li> </ul> </li> <li>about skew heap<ul> <li>Skew heap \u7684\u6700\u5dee\u5408\u5e76\u590d\u6742\u5ea6\u662f O(N) \u7684</li> </ul> </li> </ul>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#stop-and-think","title":"Stop and Think","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#\u666e\u901a\u5806\u7684\u5747\u644a\u5f00\u9500","title":"\u666e\u901a\u5806\u7684\u5747\u644a\u5f00\u9500","text":"<p>Tip</p> <p>T</p> <ul> <li>delete \u7684\u603b\u6b21\u6570\u4e00\u5b9a\u5c0f\u4e8e insert \u7684\u603b\u6b21\u6570</li> <li>\u65e0\u8bba\u5982\u4f55\u5747\u644a\uff0c\u53ea\u8981\u4fdd\u8bc1 insert \u7684\u5f00\u9500\u662f\u5927\u4e8e\u7b49\u4e8e log n \u5c31\u884c\uff0c\u8fd9\u6837\u5c31\u662f\u5408\u7406\u7684\uff0cdelete \u7684\u5747\u644a\u5f00\u9500\u751a\u81f3\u53ef\u4ee5\u662f 0<ul> <li>\u5373\u5747\u644a\u540e\u7684\u603b\u548c\u5f00\u9500\u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8e\u771f\u5b9e\u5f00\u9500</li> </ul> </li> <li>\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u8bf4 insert \u662f 1 \u800c deletemin \u662f 0 \u5c31\u662f\u4e0d\u5408\u7406\u7684</li> </ul>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#3-sat-random","title":"3-SAT Random","text":"<p>Tip</p> <p>B \u6839\u636e\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406\uff0c\u5e94\u8be5\u662f\u5927\u7ea6 0.5 C \u4e00\u5b9a\u5b58\u5728\uff0c\u5982\u679c clause \u4e4b\u95f4\u5171\u4eab\u7684\u53d8\u91cf\u4e0d\u591a\uff0c\u90a3\u4e48\u8fd9\u79cd assignment \u663e\u7136\u5b58\u5728\uff1b\u5c31\u7b97\u5168\u90fd\u5171\u4eab\u4e00\u6837\u7684\u53d8\u91cf\uff0c\u6700\u5dee\u4e5f\u6709 \u215e</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#which-is-true","title":"Which is true?","text":"<p>Tip</p> <p>C \u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u53ef\u4ee5\u6267\u884c\u5f88\u591a\u6b21 D \u4e0d\u5bf9\uff0c\u53ef\u4ee5\u6bd4\u6700\u5c0f\u7684\u4e00\u4e2a\u8fd8\u8981\u5c0f\uff0c\u6bd4\u5982\u7ffb\u676f\u5b50\u95ee\u9898\uff0c\u7531\u4e8e\u8c46\u5b50\u5df2\u7ecf\u786e\u5b9a\u5728\u4e00\u4e2a\u676f\u5b50\u91cc\uff0c\u603b\u6709\u4e00\u79cd\u7b97\u6cd5\u53ea\u9700\u8981\u6267\u884c\u4e00\u6b21\u5c31\u80fd\u68c0\u67e5\u5230</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#16-17-\u6625\u590f","title":"16-17 \u6625\u590f","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#speed-check_1","title":"Speed Check","text":"<ul> <li><ul> <li>\u8003\u8651\u957f\u65b9\u5f62\uff0c\u8fd1\u4f3c\u6bd4\u548c\u521d\u59cb\u731c\u6d4b\u89e3\u6709\u5f88\u5927\u5173\u7cfb\uff01\uff01</li> </ul> </li> <li></li> <li><ul> <li>B \u6ca1\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd1\u4f3c\u6bd4\u7684 2 \u5c31\u662f\u8fd9\u6837\u8bc1\u660e\u51fa\u6765\u7684</li> <li>C \u5e94\u8be5\u6ee1\u8db3\u4e2d\u5fc3\u6781\u9650\uff0c\u63a5\u8fd1 \u00bd</li> </ul> </li> </ul>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#stop-and-think_1","title":"Stop and Think","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#skew-heap-\u7684\u7cbe\u786e\u590d\u6742\u5ea6\u8ba1\u7b97","title":"skew heap \u7684\u7cbe\u786e\u590d\u6742\u5ea6\u8ba1\u7b97","text":"<p>Tip</p> <ul> <li>\\(\\Delta \\Phi=k_{3}-k_{2}-k_{1}\\)</li> <li>\\(c=2+k_{1}+k_{2}+\\lfloor \\log n_{1} \\rfloor+\\lfloor \\log n_{2} \\rfloor\\)</li> <li>\\(\\hat{c}=c+\\Delta \\Phi=2+k_{3}+\\lfloor \\log n_{1} \\rfloor+\\lfloor \\log n_{2} \\rfloor\\leq 2+\\lfloor \\log n \\rfloor+\\lfloor \\log n \\rfloor+\\lfloor \\log n \\rfloor\\)\uff1f\u53cd\u6b63\u5927\u81f4\u8fd9\u6837\u5c31\u80fd\u63a8\u51fa\u6765 3</li> </ul>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#17-18-\u6625\u590f","title":"17-18 \u6625\u590f","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#speed-check_2","title":"Speed Check","text":"<ul> <li><ul> <li>\u9700\u8981\u5f3a\u8c03 high probablity</li> </ul> </li> <li><ul> <li>log N\uff0c\u6bcf\u6b21\u671f\u671b\u5220\u6389\u4e00\u534a</li> </ul> </li> </ul>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#stop-and-think_2","title":"Stop and Think","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#set-cover-problem","title":"Set Cover Problem","text":"<p>Tip</p> <p>\\(O(\\log n)\\)-factor approx</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#which-are-true","title":"Which are true?","text":"<p>Tip</p> <p>\u8fd9\u91cc\u5176\u5b9e\u6ca1\u6709\u4e00\u4e2a\u5bf9\u7684\uff0c\u56e0\u4e3a max-cut \u6709 1.1382 \u8fd1\u4f3c\u6bd4</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#18-19-\u6625\u590f","title":"18-19 \u6625\u590f","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#speed-check_3","title":"Speed Check","text":"<ul> <li><ul> <li>\u8bb0\u4f4f \\(log_k N+1\\)</li> </ul> </li> <li></li> <li></li> <li><ul> <li>\u77e9\u9635\u5206\u5757\u7684\u590d\u6742\u5ea6\u662f\u4e00\u6837\u7684\uff0c\u9664\u975e\u4f7f\u7528 winograd</li> </ul> </li> <li><ul> <li>\u8fd9\u662f\u5bf9\u7684\uff0c\u8fd9\u91cc\u8bf4\u7684\u662f\u6574\u4e2a\u7b97\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u5c40\u90e8\u6700\u4f18\uff0c\u90a3\u4e48 p \u80af\u5b9a\u662f\u66f4\u52a0\u4f18\u5316\u7684</li> </ul> </li> <li><ul> <li>A \u6b63\u786e\u662f\u56e0\u4e3a\u67d3\u8272\u4e00\u6b21\u5c31\u591a\u4e00\u4e2a\u9ed1\u8272\u8282\u70b9</li> </ul> </li> <li><ul> <li>\u9006\u5426\u547d\u9898\u95ee\u9898</li> </ul> </li> <li><ul> <li>\u6700\u540e\u4e00\u4e2a\u4e0d\u8f6c</li> </ul> </li> </ul>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#19-20-\u6625\u590f","title":"19-20 \u6625\u590f","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#speed-check_4","title":"Speed Check","text":"<ul> <li><ul> <li>\u7eaf\u7eaf\u773c\u9ad8\u624b\u4f4e\uff0c\u5e94\u8be5\u662f\u7ebf\u6027\u800c\u4e0d\u662f\u5e73\u65b9\u7684</li> </ul> </li> <li><ul> <li>\u8fd9\u91cc\u5148\u5165\u4e3a\u4e3b\u4e86\uff0c\u76ee\u6807\u4e0d\u662f\u51cf\u5c11 pass\uff08\u90a3\u4e2a\u662f polyphase merge\uff09\uff0c\u800c\u662f\u5b9e\u73b0\u5e76\u884c</li> </ul> </li> <li></li> <li><ul> <li>\u8fd9\u91cc 36 \u5176\u5b9e\u5e94\u8be5\u521a\u597d\u76f8\u7b49\uff1f\u4f46\u662f\u5c31\u662f\u66f4\u5feb\uff1f\u53ef\u80fd\u662f\u5e38\u6570\u4e5f\u4f1a\u66f4\u5c0f\uff1f</li> </ul> </li> </ul>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#stop-and-think_3","title":"Stop and Think","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#vertex-cover-greedy","title":"Vertex Cover Greedy","text":"<p>Tip</p> <p>\u89c1 ADS 09 Greedy Algorithm#6.2.1 Vertex Cover Problem</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#build-rbt","title":"Build RBT","text":"<p>Tip</p> <p>\u5e94\u8be5\u662f O(N) \u7684\uff0c\u4e00\u65b9\u9762\u666e\u901a\u5efa\u5806\u4e5f\u662f O(N) \u7684\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u8003\u8651\u7b2c\u4e00\u6b21\u6709 nlog2/2 \u7b2c\u4e8c\u6b21 nlog4/4 \u7b2c\u4e09\u6b21 nlog8/8\uff0c\u5c31\u662f n \u4e58\u4e0a\u4e00\u4e2a \u00bd+2/4+\u215c+4/16... \u800c\u8fd9\u4e2a\u6570\u5217\u5f88\u660e\u663e\u662f\u6536\u655b\u7684\uff0c\u6240\u4ee5\u662f\u5e38\u6570</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#minimum-degree-spanning-tree","title":"Minimum Degree Spanning Tree","text":"<p>Tip</p> <p>C A \u9664\u975e\u662f\u8fd1\u4f3c\uff0c\u4e0d\u7136\u4e00\u5b9a\u662f 1.5 \u7684 lower bound\uff0c\u5426\u5219 P=NP D \u662f\u5b58\u5728\u7684 C \u4e00\u770b\u5c31\u89c9\u5f97\u4e0d\u592a\u5bf9\uff0c\u4f46\u662f\u8d44\u6599\u4e5f\u67e5\u4e0d\u5230\uff09</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#max-sat","title":"MAX-SAT","text":"<p>Tip</p> <p>B \u662f\u660e\u663e\u9519\u8bef\uff0c\u5e94\u8be5\u662f 8/7-approx</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#20-21-\u6625\u590f","title":"20-21 \u6625\u590f","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#stop-and-think_4","title":"Stop and Think","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#minimum-degree-spanning-tree-potential-func","title":"Minimum Degree Spanning Tree Potential Func","text":"<p>Answer</p> <p>D A \u663e\u7136\u9519\u8bef\uff0c\u65e0\u73af\u56fe\u7684 degree \u603b\u548c\u662f \\(2|V|-2\\) B \u4e5f\u6709\u95ee\u9898\uff0c\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\u540e\uff0c\u5220\u9664\u7684\u8fb9 \\(-(\\geq d(w))\\)\uff0c\u4f46\u662f\u589e\u52a0\u4e86\u4e00\u6761 \\(d(u)+1\\) \u7684\u8fb9\uff08\u5047\u8bbe \\(d(u)&gt;d(v)\\)\uff09\uff0c\u5e76\u4e14\u8fd8\u6709\u4e24\u6761\u8fb9\u53ef\u80fd \\(+2\\)\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u9012\u51cf C \u6709\u95ee\u9898\uff0c\u5bf9\u4e8e\u64cd\u4f5c\u4e2d\u7684 \\(u,v,w\\) \u662f\u6ee1\u8db3\u7684\uff0c\u5b9e\u73b0\u4e86 \\(-1\\)\uff0c\u4f46\u662f\u53ef\u80fd\u5bfc\u81f4\u5176\u4ed6\u5f88\u591a\u70b9\u5bf9\u7684\u503c\u53d8\u5927  D \u6b63\u786e\uff0c\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\uff0c\u8003\u8651 \\(w\\) \u51cf\u5c11 \\(-(\\geq 2 \\cdot 3^{d(w)-1})\\)\uff0c\u8003\u8651 \\(u,v\\) \u589e\u52a0 \\((2\\cdot 3^{d(u)}+2\\cdot 3^{d(v)})\\)\u3002\u5047\u8bbe \\(d(u)\\geq d(v)\\)\uff0c\u5b58\u5728 \\(d(w)-1\\geq d(u)+1\\)\uff0c\u6240\u4ee5\u6574\u4f53\u9012\u51cf\uff0c\u6ee1\u8db3\u9898\u610f</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#2-item-sizes-bin-packing","title":"2 item sizes bin packing","text":"<p>Tip</p> <p>\u53ea\u6709 FF \u6709\u63d0\u5347\uff0cNF \u6ca1\u6709\u63d0\u5347 \u671f\u4e2d NF \u6ca1\u6709\u63d0\u5347\u662f\u5f88\u597d\u8bc1\u660e\u7684\uff0c\u4f46\u662f FF \u6709\u63d0\u5347\u9700\u8981\u53ca</p>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#21-22-\u6625\u590f","title":"21-22 \u6625\u590f","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#speed-check_5","title":"Speed Check","text":"<ul> <li><ul> <li>\u4e3e\u4f8b\u5b50\uff0c\u4f8b\u5982\u4e00\u4e2a\u4e24\u8282\u70b9\u7684\u548c\u4e00\u4e2a\u4e00\u8282\u70b9\u7684\uff0c\u539f\u672c max npl \u662f 0\uff0c\u4f46\u662f\u5408\u5e76\u540e\u53ef\u4ee5\u53d8\u6210 1 \u627e\u6700\u7b80\u5355\u7684\u4f8b\u5b50\u5c31\u884c</li> </ul> </li> <li></li> <li><ul> <li>\u6240\u6709\u8fb9\u7684\u6743\u91cd\u7edd\u5bf9\u503c\u548c</li> </ul> </li> <li><ul> <li>\u4e0d\u5b58\u5728\uff0cQuick sort \u6700\u597d\u4e5f\u662f nlogn \u7684</li> </ul> </li> <li></li> </ul>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#stop-and-think_5","title":"Stop and Think","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#sqrt-n-paradigm-merge-sort","title":"\\(\\sqrt{ n }\\)-paradigm merge sort","text":"<p>Tip</p> <ol> <li>\u8fd9\u91cc\u7684 m \u662f\u6240\u6709\u5217\u8868\u4e2d\u7684\u603b\u5143\u7d20\u4e2a\u6570\uff0c\u5343\u4e07\u8981\u4ed4\u7ec6\u8bfb\u9898\uff01\uff01</li> <li>\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u6709 \\(T(n)=\\sqrt{ n }T(\\sqrt{ n })+n\\log \\sqrt{ n }\\)</li> <li>\u4f7f\u7528\u4ee3\u5165\u68c0\u9a8c\uff0c\u5c31\u80fd\u5f97\u5230 B</li> </ol>","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Advanced%20Data%20Structure%20%26%20Algorithm%20Analysis/ADS%20Final%20Questions.html#22-23-\u6625\u590f","title":"22-23 \u6625\u590f","text":"","tags":["Algorithm/Analysis/Approximation","Algorithm/Analysis/Complexity"]},{"location":"ZJU-Algorithms%20in%20Game%20Design/index.html","title":"Algorithms in Game Design","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>AGD 01 Game Arch Pygame</li> <li>AGD 02 Font Sprite Random</li> <li>AGD 03 Mazes</li> <li>AGD 04 Navigation</li> <li>AGD 05 Collision Detection</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html","title":"01 Game Arch Pygame","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#1-conclusion","title":"1 Conclusion","text":"<p>\u4ee3\u7801\u4e0d\u7528\u5b66\uff0c\u76f4\u63a5\u67e5\u5c31\u597d</p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#2-pygame","title":"2 Pygame","text":"<ul> <li>Python for writing video games<ul> <li>Modules</li> <li>Install <code>pip/conda install pygame</code></li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#21-example","title":"2.1 Example","text":"intro1.py<pre><code>import pygame\n\npygame.init()\n\nsize = width, height = 1024, 768\nspeed = [3, 2]\nblack = (0, 0, 0)\n\nscreen = pygame.display.set_mode(size)\nlogo = pygame.image.load('new.jpg')\nlogo_width, logo_height = logo.get_size()\nlogo_x = logo_y = 0\n\nrunning = True\n\nwhile running:  \n    for event in pygame.event.get():  \n        if event.type == pygame.QUIT:  \n            running = False  \n\n    logo_x += speed[0]\n    logo_y += speed[1]\n\n    if logo_x &lt; 0 or logo_x + logo_width &gt; width:\n        speed[0] = -speed[0]\n    if logo_y &lt; 0 or logo_y + logo_height &gt; height:\n        speed[1] = -speed[1]\n\n    screen.fill(black)\n    screen.blit(logo, (logo_x, logo_y))\n    pygame.display.flip()\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2a\u7a97\u53e3\uff0c\u7a97\u53e3\u5185 <code>new.jpg</code> \u5728\u79fb\u52a8\uff0c\u63a5\u89e6\u5230\u8fb9\u53cd\u5f39</p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#3-game-loop","title":"3 Game Loop","text":"<ul> <li>the common structure<ul> <li>initialization</li> <li>a loop (while running)<ul> <li>check inputs, from user, network</li> <li>upgrade game state, based on inputs</li> <li>draw next frame, based on the state</li> </ul> </li> </ul> </li> <li>philosophy: games need to be responsive</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#31-frame","title":"3.1 Frame","text":"<ul> <li>one picture is rendered each time, which is a frame</li> <li>FPS is usually an important design metric/goal</li> </ul> normal structure of a game<pre><code>initialize_game()\nwhile not done:\n    *user_inputs, done = get_inputs()\n    game_state = update_game_state(user_inputs)\n    render_game(game_state)\n</code></pre>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#32-event-queue","title":"3.2 Event Queue","text":"<ul> <li>Pygame uses event queue to manage user inputs<ul> <li>FIFO: first-in-first-out</li> <li>Event: an object representing sth. happening in the system</li> </ul> </li> <li>Each game loop, you must handle all the events in the queue</li> <li>Pygame's event module has very extensive features for handling the even queue</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#321-event-objects","title":"3.2.1 Event Objects","text":"<ul> <li><code>event_object.type</code><ul> <li><code>KEYDOWN</code>: <code>key</code>, <code>mod</code>(are shift, ctrl keys also pressed), <code>unicode</code>, <code>scancode</code></li> <li><code>MOUSEBUTTONDOWN</code>: <code>pos</code>(x, y of the cursor), <code>button</code>(which is clicked)</li> <li><code>VIDEORESIZE</code>: <code>size</code></li> </ul> </li> </ul> Example event processing<pre><code>def get_inputs()\n    done = ledt = right = False\n    for event in pygamme.event.get():\n        if event.type == pygame.QUIT\n            done = True\n        elif event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_ESCAPE\n                done = True\n            elif event.key == pygame.K_RIGHT:\n                right = True\n            elif event.key == pygame.K_LEFT:\n                left = True\n    return (left, right, done)\n</code></pre>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#4-game-architecture","title":"4 Game Architecture","text":"<ul> <li>Architecture is all about the structure of our code.<ul> <li>components</li> <li>how they interact with each other</li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#41-mvc-model-view-controller","title":"4.1 MVC: Model-View-Controller","text":"<ul> <li>MVC is a common architectural style for GUI, web applications and games</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#411-model","title":"4.1.1 Model","text":"<ul> <li>Manages the data and operations on the data</li> <li>Provides a well-defined interface to the data<ul> <li>changes to the data structure don't require changes to the rest of the code</li> </ul> </li> <li>In web and many GUI apps, model is a database</li> <li>Example: Chess Game<ul> <li>Data: where are all pieces, which have been captured</li> <li>Operations: init, moving pieces, werid moves, scoring of captured pieces</li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#412-view","title":"4.1.2 View","text":"<ul> <li>Provides a way to visualize the data<ul> <li>frame, music, runble, etc.</li> </ul> </li> <li>Example: Chess Game<ul> <li>2D/3D/VR, phone/laptor/console views</li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#413-controller","title":"4.1.3 Controller","text":"<ul> <li>Maps input actions to model or view actions<ul> <li>input actions: user input</li> <li>model actions: avatar moved left, opponent forfeits, spaceship explodes...</li> <li>view actions: window resized, menu button pressed, instant replay requested</li> </ul> </li> <li>Game customizations often result in different mappings for the controller<ul> <li>WASD/arrow keys</li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#414-advice-on-mvc","title":"4.1.4 Advice on MVC","text":"<ul> <li>When programming, start with the model, how to store data and how are they controlled</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#42-object-orinted-modelview","title":"4.2 Object-Orinted Model/View","text":"<ul> <li>Another common style is having objects<ul> <li>Pac-Man, Ghosts, fruit, the maze ...</li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#421-object","title":"4.2.1 Object","text":"<ul> <li>Each object knows its own state and update rules, so is part of the model</li> <li>A model component may still keep trach of all objects and tell them when to update</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#422-draw","title":"4.2.2 Draw","text":"<ul> <li>Each object knows how to draw itself, so is part of view<ul> <li><code>object.draw()</code> is called by the view module</li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#423-conclusion","title":"4.2.3 Conclusion","text":"<ul> <li>You still have a model, which calls <code>object.update()</code></li> <li>You still have a view, which calls <code>object.draw()</code>, in correct order</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#5-graphic-primitives","title":"5 Graphic Primitives","text":"<ul> <li>Provides visual feedback</li> <li>Provides guidance</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#51-engine","title":"5.1 Engine","text":"<ul> <li>An engine provides some level of graphic algorithms to be embedded in your code</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#511-digital-image","title":"5.1.1 Digital Image","text":"<ul> <li>array of pixels of colors</li> <li>RGB/RGBA, <code>A</code> is for Alpha Channel</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#52-the-surface","title":"5.2 The Surface","text":"<ul> <li>In Pygame, a surface is a place to draw</li> <li>Special surface, the display surface, is visible to the user in game window<ul> <li><code>{python}display_surface = pygame.display.set_mode((1024, 768))</code></li> </ul> </li> <li>Other surfaces can be created too</li> <li>Commonly, have a background surface<ul> <li><code>{python}background = pygame.Surface(display_surface.get_size())</code></li> <li>\u6bcf\u4e00\u5e27\u5148\u590d\u5236\u4e00\u904d <code>background</code> \u518d\u5f00\u59cb\u7ed8\u56fe</li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#521-surface-operations","title":"5.2.1 Surface Operations","text":"<ul> <li>set the color of single pixel<code>{python}background.set_at((x, y), color)</code></li> <li>get the color of single pixel <code>{python}color = background.get_at(x, y)</code></li> </ul> draw_notepaper.py (naive version)<pre><code>def draw(surface, size_x, size_y):\n    blue = (0, 0, 200)\n    red = (200, 0, 0)\n    white = (255, 255, 255)\n\n    # draw white background\n    for x in range(size_x):\n        for y in range(size_y):\n            surface.set_at((x, y), white)\n\n    # draw horizontal lines\n    for y in range(60, size_y, 20):\n        for x in range(size_x):\n            surface.set_at((x, y), red)\n\n    # draw a red vertical line in the left\n    x = 25\n    for y in range(0, size_y):\n        surface.set_at((x, y), red)\n</code></pre>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#53-pygamedraw","title":"5.3 <code>pygame.draw</code>","text":"<p>TMBABW There must be a better way</p> draw_notepaper.py (better version)<pre><code>def draw(surface, size_x, size_y):\n    blue = (0, 0, 200)\n    red = (200, 0, 0)\n    white = (255, 255, 255)\n\n    # draw white background\n    surface.fill(white)\n\n    # draw horizontal lines\n    for y in range(60, size_y, 20):\n        left_side = (0, y)\n        right_side = (size_x, y)\n        pygame.draw.line(surface, blue, left_size, right_side)\n\n    # draw a red vertical line in the left\n    pygame.draw.line(surface, red, (25, 0), (25, size_y))\n</code></pre> <ul> <li><code>{python}pygame.draw.arc(surface, color, rect, start_angle, stop_angle, width=1)</code><ul> <li><code>rect</code> \u662f\u4e00\u4e2a bounding box</li> <li><code>start_angle</code> \u548c <code>stop_angle</code> \u662f\u5f27\u5ea6\u5236\u7684</li> </ul> </li> <li><code>{python}pygame.draw.lines(surface, color, closed, points, width=1)</code><ul> <li>\u7ed8\u5236\u4e00\u4e9b\u76f4\u7ebf\uff0c\u7ecf\u8fc7 <code>points</code> \u5217\u8868\u91cc\u7684\u6240\u6709 <code>(x, y)</code> \u5143\u7ec4</li> <li><code>closed: bool</code>\uff0c\u662f\u5426\u751f\u6210\u95ed\u5408\u56fe\u5f62</li> </ul> </li> <li><code>{python}pygame.draw.polygon(surface, color, points, width=1)</code><ul> <li>\u8fde\u63a5\u6240\u6709 <code>(x, y)</code> \u70b9\uff0c\u5e76\u586b\u5145\u5c01\u95ed\u7a7a\u95f4</li> </ul> </li> <li><code>{python}pygame.draw.circle(surface, color, center, radius)</code></li> </ul> draw_python.py -- Draw the Python logo<pre><code>surface.fill(white)\npoints = [(27, 50), (76, 50), (76, 45), (45, 45), (45, 26)]\npygame.draw.lines(surface, blue, False, points)\npygame.draw.arc(surface, blue, (45, 15, 61, 22), 0*radians, 180*radians)\npygame.draw.line(surface, blue, (106, 26), (106, 62))\npygame.draw.arc(surface, blue, (76, 47, 30, 30), 270*radians, 0*radians)\npygame.draw.line(surface, blue, (91, 76), (57 ,76))\npygame.draw.arc(surface, blue, (41, 76, 32, 32), 90*radians, 180*radians)\npygame.draw.line(surface, blue, (41, 92), (41, 110))\npygame.draw.line(surface, blue, (41,110), (27, 110))\npygame.draw.arc(surface, blue, (12,50,30, 60), 90*radians, 270*radians)\n......\n</code></pre>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#54-pygamerect","title":"5.4 <code>pygame.rect</code>","text":"<ul> <li><code>{python}pygame.Rect(x, y, width, height)</code></li> <li><code>{python}pygame.Rect((x, y), (width, height))</code></li> <li>Rect Methods</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#55-using-rects-with-draw","title":"5.5 Using Rects with Draw","text":"<ul> <li><code>{python}pygame.draw.rect(surface, color, rect, width=0)</code></li> <li><code>{python}pygame.draw.ellipse(surface, color, rect, width=0)</code></li> </ul> Use rects for boxes, circles in draw_checherboard.py<pre><code>rect = pygame.Rect(strip_size, strip_size, box_size, box_size)  # make rect for checkerboard box\ncolor = black\nfor row in range(8):\n    for col in range(8):\n        pygame.draw.rect(surface, color, rect)  # draw the box\n        if row in rows_with_pieces and color == black:\n            circle_rect = rect.inflate(deflate, deflate)\n            pygame.draw.ellipse(surface, white, circle_rect)   # draw ellipse in smaller box\n        rect.move_ip(box_size + strip_size, 0)  # move rect to the next place in row\n        if color == black:\n            color = red\n        else:\n            color = black\n    rect.move_ip(-8*(box_size + strip_size), box_size + strip_size)  # move rect to next row\n    if color == black:\n        color = red\n    else: \n        color = black\n</code></pre>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#6-images-and-blit","title":"6 Images and Blit","text":"<ul> <li>\u4f7f\u7528 <code>.png, .jpg, .gif</code> \u7b49\u56fe\u50cf\u4ee3\u66ff\u7ed8\u5236\u8bed\u53e5</li> <li>Pygame supports PG, PNG, GIF + BMP, PCX, TGA, TIF, LBM, PBM, PPM and XPM formats</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#61-image-loadsave","title":"6.1 Image Load/Save","text":"<ul> <li><code>{python}surface = pygame.image.load(filename)</code></li> <li><code>{python}pygame.image.save(surface, filename)</code></li> <li><code>{python}pygame.surface.convert()</code><ul> <li>\u80fd\u591f\u4fee\u6539 <code>surface</code> \u7684\u683c\u5f0f\u6765 match <code>display surface</code></li> <li>\u6700\u597d\u5bf9\u6bcf\u4e2a\u52a0\u8f7d\u7684 image \u90fd\u4f7f\u7528\uff0c\u4e0d\u7136\u6bcf\u6b21\u90fd\u8981 <code>convert</code></li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#62-blit","title":"6.2 BLIT","text":"<ul> <li>\u6bcf\u4e2a\u56fe\u50cf\u90fd\u662f\u5355\u72ec\u7684 <code>surface</code>\uff0c\u4f46\u662f\u9700\u8981\u5728\u6bcf\u4e2a loop \u7ed3\u5c3e\u7ed8\u5236\u5355\u4e2a <code>display_surface</code></li> <li><code>blit</code> \u80fd\u591f\u590d\u5236\u7c98\u8d34\u56fe\u50cf</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#621-pygame-blit","title":"6.2.1 Pygame blit","text":"<ul> <li><code>surface</code> \u5bf9\u8c61\u5177\u6709\u8fd9\u6837\u7684\u65b9\u6cd5\uff1a<code>{python}surface.blit(source, dest, area=None, special_flags=0)</code><ul> <li><code>source</code> \u53e6\u4e00\u4e2a <code>surface</code></li> <li><code>dest</code> \u662f\u4e00\u4e2a <code>(x, y)</code> \u5750\u6807</li> <li><code>area</code> \u53ef\u4ee5\u662f\u4e00\u4e2a <code>rect</code>\uff0c\u6765\u9650\u5236\u7c98\u8d34\u7684\u8303\u56f4</li> </ul> </li> </ul> render mario<pre><code>display_surface = pygame.display.set_mode(1200, 622)\nbackground = pygame.image.load('mario_background.png').convert()\nmario = pygame.image.load('mario_sprited.png').convert()\n...\nwhile not done:\n    *user_inputs, done = get_inputs()\n    ...\n    jump_r = pygame.Rect(254, 13, 42, 49)\n    display_surface.blit(background, (0, 0))\n    display_surface.blit(mario, (390, 510), jump_r)\n    pygame.display.flip()\n</code></pre>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#622-blit-optimizaiton","title":"6.2.2 Blit Optimizaiton","text":"<p>\u4f7f\u7528 <code>spacial_flags</code> \u53c2\u6570\u52a0\u901f\u5904\u7406\u8fc7\u7a0b\uff0c<code>ADD, SUB, MULT, MIN, MAX</code></p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#63-colorkey","title":"6.3 ColorKey","text":"<p>\u7528\u4e8e\u5c06\u7d20\u6750\u79cd\u7684\u67d0\u79cd\u989c\u8272\u5f53\u6210\u900f\u660e\uff0c\u4e0d\u8986\u5199 <code>display_surface</code> \u4e2d\u7684\u90e8\u5206\u50cf\u7d20</p> render mario<pre><code>display_surface = pygame.display.set_mode(1200, 622)\nbackground = pygame.image.load('mario_background.png').convert()\nmario = pygame.image.load('mario_sprited.png').convert()\nwhite = mairo.get_at((0, 0))\nmario.set_colorkey(white)\n...\nwhile not done:\n    *user_inputs, done = get_inputs()\n    ...\n    jump_r = pygame.Rect(254, 13, 42, 49)\n    display_surface.blit(background, (0, 0))\n    display_surface.blit(mario, (390, 510), jump_r)\n    pygame.display.flip()\n</code></pre>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#64-surface-transforms","title":"6.4 Surface Transforms","text":"<ul> <li>You can <code>rotate</code> / <code>scale</code> / <code>chop</code> / <code>greyscale</code> / ...</li> <li><code>{python}pygame.transform.rotate(source_surface, angle) -&gt; Surface</code></li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2001%20Game%20Arch%20Pygame.html#7-conclusion","title":"7 Conclusion","text":"<ul> <li>Games are a part of human nature</li> <li>Game architectures are important</li> <li>Pygame engine is a library with lots of useful routines<ul> <li>lines, colors, circles, images, ...</li> <li>events</li> <li>surfaces</li> </ul> </li> </ul> <p>Hint</p> <p>\u5176\u5b9e python \u7a0b\u5e8f\u53ef\u8bfb\u6027\u90fd\u5f88\u5f3a\uff0c\u5b8c\u5168\u4e0d\u7528\u8bb0\u8fd9\u4e9b\u51fd\u6570\u5b9a\u4e49\u4e5f\u80fd\u770b\u61c2</p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2002%20Font%20Sprite%20Random.html","title":"02 Font Sprite Random","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2002%20Font%20Sprite%20Random.html#font","title":"Font","text":"<p>\u76f4\u63a5\u53c2\u8003 ppt \u5373\u53ef</p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2002%20Font%20Sprite%20Random.html#sprite","title":"Sprite","text":"<p>\u76f4\u63a5\u53c2\u8003 ppt \u5373\u53ef</p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2002%20Font%20Sprite%20Random.html#randomness","title":"Randomness","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2002%20Font%20Sprite%20Random.html#linear-congruential-generator-lcg","title":"Linear Congruential Generator (LCG)","text":"\\[X_{n+1}=(aX_{n}+c) \\text{ mod } m\\] <ul> <li>LCG \u4e00\u5b9a\u662f\u5faa\u73af\u7684\uff0c\u5faa\u73af\u7684\u5468\u671f\u4e00\u822c\u90fd \\(&lt;m\\)</li> <li>What makes a good Pseudo-Random Number Generator?<ul> <li>\u66f4\u957f\u7684\u91cd\u590d\u5468\u671f</li> <li>\u5176\u4ed6\u968f\u673a\u6765\u6e90\uff1a\u4f8b\u5982\u6309\u952e\u6309\u538b\u7684\u65f6\u95f4\u7b49</li> </ul> </li> <li><code>{python}import random</code> <code>{python}import secrets</code></li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2002%20Font%20Sprite%20Random.html#random-distributions","title":"Random Distributions","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2002%20Font%20Sprite%20Random.html#roll-the-dices","title":"Roll the dices","text":"<p>\u8bb0\u4f4f\u7c7b\u4f3c 3d4 \u8fd9\u6837\u7684\u8868\u8fbe</p> <p></p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2002%20Font%20Sprite%20Random.html#asymmetric-distributions","title":"Asymmetric Distributions","text":"<ul> <li>Drop the lowest roll/dice</li> <li>Reroll the lowest</li> <li>Critical Hit<ul> <li>\u5728\u4e00\u4e9b\u6982\u7387\u4e0b\uff0c\u591a roll \u4e00\u4e2a </li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html","title":"03 Mazes","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#intro","title":"Intro","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#classification","title":"Classification","text":"<ul> <li>Perfect maze: \u4efb\u610f\u4e24\u4e2a cell \u4e4b\u95f4\uff0c\u4ec5\u6709\u552f\u4e00\u7684\u8def\u5f84<ul> <li>\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f88\u591a\u5206\u652f\uff0c\u4f46\u662f\u6ca1\u6709\u73af\u8def</li> </ul> </li> <li>Unicursal maze: \u6ca1\u6709\u5206\u652f\uff0c\u53ea\u6709\u4e00\u6761\u8def\u4ece\u5165\u53e3\u5230\u51fa\u53e3<ul> <li>\u975e\u5e38\u5bb9\u6613\u89e3</li> </ul> </li> <li>Braided maze: \u6709\u73af\uff0c\u6ca1\u6709\u6b7b\u8def</li> <li>Weave maze: \u80fd\u4ece\u8def\u5f84\u7684\u4e0a\u65b9\u3001\u4e0b\u65b9\u7a7f\u8fc7</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#algo","title":"Algo","text":"<ul> <li>carving a path between cells</li> <li>wall adders</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#maze-creation-algos","title":"Maze Creation Algos","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#binary-tree","title":"Binary Tree","text":"<ul> <li>\u6bcf\u4e2a cell \u90fd\u53ef\u4ee5\u8fde\u63a5\u5230\u5176\u53f3\u6216\u4e0a\u90bb\u5c45</li> <li>parallel</li> <li>\u53f3\u4fa7\u3001\u4e0a\u4fa7\u90fd\u662f\u7a7a\u7684</li> <li>bias</li> <li>perfect</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#sidewinder","title":"Sidewinder","text":"<ul> <li>\u7b2c\u4e00\u884c\u8fde\u901a\uff0c\u6bcf\u4e00\u884c\u968f\u673a\u5206\u5757\uff0c\u5757\u5185\u968f\u673a\u9009\u4e00\u4e2a cell \u4e0e\u4e0a\u4e00\u884c\u8fde\u901a</li> <li>parallel</li> <li>\u7b2c\u4e00\u884c\u662f\u7a7a\u7684</li> <li>bias</li> <li>perfect</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#aldous-broder","title":"Aldous-Broder","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#algo_1","title":"algo","text":"<ol> <li>\u968f\u673a\u9009\u4e00\u4e2a cell \u5f00\u59cb</li> <li>\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u90bb\u5c45</li> <li>\u5982\u679c\u90a3\u4e2a\u90bb\u5c45\u6ca1\u6709 visited\uff0c\u8fde\u63a5\u5230\u90a3\u4e2a\u90bb\u5c45</li> <li>\u79fb\u52a8\u5230\u90a3\u4e2a\u90bb\u5c45</li> <li>\u5982\u679c\u5730\u56fe\u4e2d\u4ecd\u7136\u6709 unvisited \u7684 cell\uff0c\u8fd4\u56de step 2</li> <li>\u7ed3\u675f</li> </ol>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#feature","title":"feature","text":"<ul> <li>no bias</li> <li>inefficient\uff0c\u53ef\u80fd\u6709\u5f88\u591a walk \u90fd\u6ca1\u6709 visit \u65b0\u7684 cell</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#wilsons-random-walk","title":"Wilson's Random Walk","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#algo_2","title":"algo","text":"<ol> <li>\u968f\u673a\u9009\u4e00\u4e2a cell\uff0c\u6807\u8bb0 visited</li> <li>\u968f\u673a\u9009\u53e6\u4e00\u4e2a cell \u4f5c\u4e3a\u8d77\u70b9</li> <li>\u8fdb\u884c loop-erased random walk\uff0c\u6bcf\u4e00\u4e2a step \u968f\u673a\u9009\u62e9\u90bb\u5c45\uff0c\u76f4\u5230\u9009\u5230\u7684\u90bb\u5c45\u662f visited<ol> <li>\u6807\u8bb0 walk \u4e0a\u6240\u6709 cell visited</li> <li>\u6309\u7167\u5386\u53f2 step \u8fde\u901a\u6574\u4e2a walk</li> </ol> </li> <li>\u91cd\u590d 2-4 \u76f4\u5230\u6240\u6709 cell \u90fd\u662f visited</li> </ol>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#feature_1","title":"feature","text":"<ul> <li>no bias<ul> <li>\u4ea7\u751f\u7684\u8ff7\u5bab\u65e0\u6cd5\u548c A-B \u7b97\u6cd5\u533a\u5206</li> </ul> </li> <li>inefficient<ul> <li>\u4e00\u5f00\u59cb\u5f88\u5bb9\u6613\u4ea7\u751f\u5faa\u73af</li> <li>\u6700\u540e\u5f88\u5feb\u5c31\u80fd\u627e\u5230 visited cell</li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#recursive-backtracker","title":"Recursive Backtracker","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#algo_3","title":"algo","text":"<ol> <li>\u968f\u673a\u9009\u62e9\u4e00\u4e2a cell \u4f5c\u4e3a\u8d77\u70b9</li> <li>random walk\uff0c\u7528 stack \u8bb0\u5f55\u9012\u5f52\u8def\u5f84</li> <li>\u76f4\u5230\u6ca1\u6709 unvisited \u90bb\u5c45\uff0c\u56de\u6eaf\uff0c\u76f4\u5230\u6709 unvisited \u90bb\u5c45</li> </ol>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#feature_2","title":"feature","text":"<ul> <li>long, twisted paths with few dead ends</li> <li>bias</li> <li>memory inefficient</li> <li>explicit stack \u66f4\u597d</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#maze-solution-algos","title":"Maze Solution Algos","text":"<ul> <li>Wall Follower: \u6bcf\u4e2a\u8def\u53e3\u90fd\u53f3\u8f6c/\u5de6\u8f6c</li> <li>Dead End Filler: \u4ec5\u5728 perfect maze \u4e2d\u6709\u6548</li> <li>Recusive Backtracker: \u4e0d\u4e00\u5b9a\u80fd\u627e\u5230\u6700\u77ed\u8def\u5f84</li> <li>Tremaux Algorithm:<ul> <li>\u8def\u5f84: \u8282\u70b9\u4e4b\u95f4\u7684\u8fb9</li> <li>\u4ece\u8d77\u70b9\u8fdb\u884c\u968f\u673a\u63a2\u7d22\uff0c\u8d70\u8fc7\u4e00\u6b21\u7684\u8def\u5f84\u6807\u8bb0 1<ul> <li>\u5982\u679c\u9047\u5230\u5c94\u8def<ul> <li>\u5982\u679c\u5c94\u8def\u6709\u6807\u8bb0\uff0c\u4e0d\u8981\u8d70</li> <li>\u5982\u679c\u6ca1\u6709\u6807\u8bb0\uff0c\u53ef\u4ee5\u8d70</li> <li>\u5982\u679c\u6240\u6709\u5c94\u8def\u90fd\u6709\u6807\u8bb0\uff0c\u539f\u8def\u8fd4\u56de\uff0c\u5c06\u8fd4\u56de\u65f6\u7ecf\u8fc7\u7684\u8def\u5f84\u6807\u8bb0\u4e3a 2</li> </ul> </li> </ul> </li> <li>\u5230\u8fbe\u7ec8\u70b9\u3001\u6216\u6240\u6709\u8def\u5f84\u90fd\u63a2\u7d22\u5b8c\u6bd5\u5e76\u56de\u5230\u8d77\u70b9</li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#dijkstras-algorithm","title":"Dijkstra's Algorithm","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#least-cost-path","title":"Least-cost path","text":"<p>(omitted)</p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2003%20Mazes.html#longest-path","title":"Longest path","text":"<ul> <li>\u4efb\u610f\u9009\u62e9\u8d77\u70b9 A\uff0c\u8fd0\u884c Dijkstra\uff0c\u627e\u5230\u8ddd\u79bb A \u6700\u8fdc\u7684 cell B</li> <li>\u5728 B \u8fd0\u884c Dijkstra\uff0c\u627e\u5230\u8ddd\u79bb B \u6700\u8fdc\u7684 cell C</li> <li>\u6700\u957f\u8def\u5f84\u5c31\u662f B-&gt;C</li> <li> <p>\u5b9a\u4e49\u4e86\u56fe\u7684\u201c\u76f4\u5f84\u201d</p> </li> <li> <p>\u6700\u957f\u8def\u5f84\u8d8a\u957f\uff0c\u8ff7\u5bab\u5c31\u8d8a\u53ef\u80fd\u66f4\u590d\u6742</p> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html","title":"04 Navigation","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#graph-intro","title":"Graph Intro","text":"<ul> <li>maze</li> <li> <p>tiles</p> </li> <li> <p>Line Drawing</p> <ul> <li>Bresenham's Algorithm</li> <li>Linear Interpolation</li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#obstacles","title":"Obstacles","text":"<ul> <li>Pure graph: \u6ca1\u6709\u8de8\u8d8a\u969c\u788d\u7684\u8fb9</li> <li>Tiles: keep a list to track</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#single-source-single-destination","title":"Single source, single destination","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#greedy-best-first-search","title":"Greedy Best First Search","text":"<p>\u6bd4 single source, all destinations \u4f1a\u66f4\u5feb</p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#heuristic","title":"Heuristic","text":"<p>to guide our search</p> L1 heuristic<pre><code>def heuristic(ax, ay, bx, by):\n    # may only make sense in grid graphs\n    return abs(ax - bx) + abs(ay - by)\n</code></pre> <p></p> <p>Warning</p> <p>\u6bd4 BFS/Dijkstra \u66f4\u5feb\uff0c\u4f46\u662f\u7ed3\u679c\u53ef\u80fd\u66f4\u5dee</p> pic <p></p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#a","title":"A*","text":"<ul> <li><code>{python}priority = cost + heuristic(goal.x, goal.y, neighbor.x, neighbor.y)</code><ul> <li>\u5c06\u5f53\u524d cell \u7684 cost \u548c\u5f53\u524d cell \u5230\u76ee\u6807\u7684 heuristic cost \u7ed3\u5408\u8d77\u6765</li> </ul> </li> <li>comments<ul> <li>\u5982\u679c GBFS \u6709\u89e3\uff0c\u90a3\u4e48 A* \u4f1a\u63a2\u7d22\u5b8c\u5168\u76f8\u540c\u7684\u533a\u57df</li> <li>GBFS \u53ef\u80fd\u4f1a\u627e\u5230\u66f4\u957f\u7684\u8def\u5f84\uff0c\u4f46\u662f A* \u4e0d\u4f1a</li> <li>Dijkstra's \u5c31\u662f A* \u548c\u5e38\u6570 heuristic</li> <li>heuristic \u80fd\u591f\u5e2e\u52a9 A* \u66f4\u5feb\u627e\u5230\u6700\u4f18\u8def\u5f84</li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#gamesnavigationa-star","title":"Games/Navigation/A-Star","text":"<p>combining Dijkstra's and GBFS</p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#single-source-all-destinations","title":"Single source, all destinations","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#bfs","title":"BFS","text":"<ul> <li>Queue (FIFO)</li> <li>\u4fdd\u5b58\u53cd\u5411\u6307\u9488\u6765\u6784\u5efa\u8def\u5f84</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#algorithmbfs","title":"Algorithm/BFS","text":"<p>unweighted edges</p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#early-exit","title":"early exit","text":"<p>\u627e\u5230\u4e86\u76ee\u6807\u5c31\u63d0\u524d\u7ec8\u6b62</p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#dijkstras","title":"Dijkstra's","text":"<ul> <li>priority queue</li> </ul> some pics"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#bellman-ford","title":"Bellman-Ford","text":"<p>cost can be negative</p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#all-sources-all-destinations","title":"All sources, all destinations","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#floyd-warshall-algorithm","title":"Floyd-Warshall Algorithm","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#johnsons-algirithm","title":"Johnson's Algirithm","text":"<p>a mixture of Dijkstra's and Bellman-Ford</p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#navigation-meshes","title":"Navigation Meshes","text":"<ul> <li>Convex Polygons \u51f8\u591a\u8fb9\u5f62<ul> <li>\u5728\u5185\u90e8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u76f4\u7ebf\u8def\u5f84\uff0c\u8d70\u5b8c\u4e4b\u540e\u4ecd\u7136\u5728\u5176\u5185\u90e8</li> </ul> </li> <li>Navmesh<ul> <li>\u5c06\u53ef\u4ee5\u4f7f\u7528\u7684\u533a\u57df\u5212\u5206\u4e3a\u51f8\u591a\u8fb9\u5f62</li> <li>\u6bcf\u4e2a\u591a\u8fb9\u5f62\u4e00\u5b9a\u662f 2d \u7684\uff0c\u4f46\u662f\u6574\u4e2a\u5730\u56fe\u4e0d\u4e00\u5b9a</li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#algo","title":"algo","text":"<ol> <li>\u5982\u679c goal \u548c agent \u5728\u540c\u4e00\u4e2a polygon \u5185\u90e8\uff0c\u76f4\u7ebf\u62b5\u8fbe</li> <li>\u5426\u5219\u5c06 polygon \u6620\u5c04\u6210 graph\uff0c\u4f7f\u7528 A*\uff0c\u6700\u540e\u518d\u7528 rule #1</li> </ol>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2004%20Navigation.html#funnel-algorithm","title":"Funnel Algorithm","text":"<p>navmesh \u8fc7\u4e8e\u7b80\u5316\u4e86\u771f\u5b9e\u60c5\u51b5\uff0c\u5982\u679c\u6709\u5f88\u5927\u7684 polygon\uff0c\u53ef\u80fd\u9700\u8981\u82b1\u5f88\u591a\u65f6\u95f4\u5230\u8fd9\u4e2a polygon \u7684\u4e2d\u5fc3 </p> <ul> <li>\u9996\u5148\u6839\u636e A* \u7b97\u6cd5\u5f97\u5230\u5c06\u8981\u7ecf\u8fc7\u7684 polygons\uff0c\u63a5\u4e0b\u6765\u5173\u6ce8 polygons \u7684\u90bb\u63a5\u8fb9</li> <li>\u8003\u8651\u8ddf\u8e2a\u90bb\u63a5\u8fb9\u7684\u5de6\u4fa7\u548c\u53f3\u4fa7<ul> <li>\u5f53\u4e0b\u4e00\u6b65\u53ef\u4ee5\u4ece\u4e0a\u4e00\u4e2a\u62d0\u70b9\u76f4\u7ebf\u8fde\u63a5\u65f6\uff0c\u76f4\u7ebf\u8fde\u63a5</li> <li>\u5982\u679c\u4e0d\u80fd\uff0c\u627e\u6700\u8fd1\u7684\u65b0\u62d0\u70b9\uff0c\u518d\u76f4\u7ebf\u8fde\u63a5</li> </ul> </li> <li>\u6700\u540e\u4e00\u6b65\u5c31\u662f\u5230\u7ec8\u70b9\uff0c\u7136\u540e\u9009\u62e9 cost \u8f83\u5c0f\u7684\u4e00\u6761</li> </ul> <p></p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2005%20Collision%20Detection.html","title":"05 Collision Detection","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2005%20Collision%20Detection.html#intro","title":"Intro","text":"<ul> <li>= physics simulation</li> <li>Naive method<ul> <li>\u76f4\u63a5\u5224\u65ad\u4e24\u4e2a\u50cf\u7d20\u7ed3\u5408\u662f\u5426\u6709\u4ea4\u96c6</li> <li>low efficiency</li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2005%20Collision%20Detection.html#rect-collision-algorithm","title":"Rect Collision Algorithm","text":"<p>Warning</p> <p>\u5982\u679c\u4e00\u4e2a rect \u5b8c\u5168\u5728\u53e6\u4e00\u4e2a rect \u5185\u90e8\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u6ca1\u6709 collide \u7684\u5224\u65ad \u6240\u4ee5\u8981\u53cc\u5411\u5224\u65ad</p> <ul> <li><code>{python}rect1.colliderect(rect2)</code> \u4e5f\u53ef\u4ee5</li> </ul> <p>This is a bad approach</p> <ol> <li>Tyranny of numbers: \u9700\u8981\u6bd4\u8f83\u592a\u591a\u6b21</li> <li>Move-through: \u4e00\u5e27\u5185\u4f4d\u79fb\u592a\u5927\u5c31\u4f1a\u7a7f\u8fc7</li> </ol>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2005%20Collision%20Detection.html#step-1-reduce-checks","title":"Step 1. Reduce checks","text":"<ul> <li>\u6ca1\u6709\u79fb\u52a8\u7684 obj\uff0c\u4e0d\u9700\u8981\u548c\u5176\u4ed6\u6ca1\u6709\u79fb\u52a8\u7684 obj \u8fdb\u884c\u68c0\u6d4b</li> <li>\u53ef\u4ee5\u7a7f\u6a21\u7684 obj (e.g. fire, grass) \u4e0d\u9700\u8981\u53c2\u4e0e\u68c0\u6d4b</li> <li>\u5c06 obj \u6309\u7167 group \u7ec4\u7ec7\uff0c\u4f8b\u5982\u5b83\u4eec\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u65f6</li> <li>\u8ddd\u79bb\u8f83\u8fdc\u7684 obj \u4e4b\u95f4\u4e0d\u9700\u8981\u8fdb\u884c\u68c0\u6d4b\uff0c\u8ddd\u79bb\u7684\u9608\u503c\u6839\u636e\u6e38\u620f\u9700\u8981\u6765\u786e\u5b9a</li> <li>\u5c4f\u5e55\u4e4b\u5916\u7684 obj \u4e0d\u4e00\u5b9a\u9700\u8981\u8fdb\u884c\u68c0\u6d4b\uff0cFPS</li> <li>\u6309\u7167 area \u8fdb\u884c\u5212\u5206\uff0c\u4e00\u4e9b obj \u53ea\u4f1a\u5728\u4e00\u4e9b area \u5185\u90e8</li> <li>partitioning<ul> <li>\u4f7f\u7528 quadtree \u6765\u7ec4\u7ec7 obj</li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2005%20Collision%20Detection.html#partitioning","title":"Partitioning","text":""},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2005%20Collision%20Detection.html#quadtree","title":"Quadtree","text":"<ul> <li>might be managed based on classes of objs<ul> <li>e.g. a quad tree of all alien fighter ships</li> </ul> </li> <li>\u65b9\u4fbf\u5bfb\u627e\u6700\u8fd1\u90bb<ul> <li>\\(O(\\log N)\\) search</li> </ul> </li> </ul> <p>Tip</p> <ol> <li>in 3-d? Octree!</li> <li>BSP(Binary Space Partitioning) Tree</li> <li>K-d tree \u662f\u53e6\u4e00\u79cd\u65b9\u6cd5\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7684 BSPtree</li> </ol>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2005%20Collision%20Detection.html#automated-partitioning","title":"Automated Partitioning","text":"<ul> <li>Goldsmith-Salmon Inncremental Construction Method</li> <li>Bottom-up n-ary Clustering</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2005%20Collision%20Detection.html#step-2-quick-tests","title":"Step 2. Quick tests","text":"<p>\u5927\u90e8\u5206\u6ca1\u6709\u88ab reduce \u7684 check \u5176\u5b9e\u90fd\u4e0d\u4f1a\u78b0\u649e rough test, \u4f7f\u7528\u66f4\u52a0\u7b80\u5355\u7684\u5f62\u72b6\u6765\u8fdb\u884c\u4fdd\u5b88\u4f30\u8ba1 </p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2005%20Collision%20Detection.html#circlesphere-test","title":"Circle/Sphere test","text":"<p>(omitted)</p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2005%20Collision%20Detection.html#bounding-box-test","title":"Bounding Box test","text":"<ul> <li>AABB</li> <li>OBB</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2005%20Collision%20Detection.html#a-better-collide-rect","title":"a better collide rect","text":"<p>\u5148\u5224\u65ad\u662f\u5426\u5b58\u5728\u67d0\u4e2a axis \u4e0a\u7684 overlap\uff0c\u5982\u679c\u6709\u518d\u8fdb\u884c\u8fdb\u4e00\u6b65\u5224\u65ad</p> <p></p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2005%20Collision%20Detection.html#capsule-test","title":"Capsule test","text":"<ul> <li>\u4e3b\u8981\u662f\u4eba\u7269\u7684\u8fd1\u4f3c</li> <li>\u4e0a\u4e0b\u7528 circle test\uff0c\u4e2d\u95f4\u7528 bounding box</li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2005%20Collision%20Detection.html#step-3-precise-tests","title":"Step 3. Precise tests","text":"<p>\u7ecf\u8fc7\u524d\u4e24\u4e2a\u6b65\u9aa4\u7b5b\u9009\u540e\u7684 obj \u9700\u8981\u8fdb\u884c\u7cbe\u7ec6\u7684\u6d4b\u8bd5</p>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2005%20Collision%20Detection.html#swept-sphere-algorithm","title":"Swept Sphere Algorithm","text":"<ul> <li>\u4e0a\u9762\u7684\u65b9\u7a0b\u4ee3\u8868\uff0c\u6c42\u89e3\u65f6\u95f4 \\(t\\)\uff0c\u4f7f\u5f97\u4e2d\u5fc3\u8ddd\u79bb\u4e3a\u534a\u5f84\u4e4b\u548c</li> <li>\u6240\u4ee5\u6839\u636e\u5224\u522b\u5f0f\u5c31\u80fd\u5224\u65ad\u662f\u5426\u53d1\u751f\u4e86\u78b0\u649e<ul> <li>\u5982\u679c \\(\\Delta&gt;0\\)\uff0c\u9700\u8981\u6c42\u89e3 \\(t\\)<ul> <li>\u5982\u679c \\(t \\in(0,1)\\)\uff0c\u4f1a\u53d1\u751f\u78b0\u649e</li> <li>\u5426\u5219\uff0c\u4e0d\u4f1a\u53d1\u751f\u78b0\u649e</li> </ul> </li> <li>\u5426\u5219\uff0c\u4e0d\u4f1a\u53d1\u751f\u78b0\u649e</li> </ul> </li> </ul>"},{"location":"ZJU-Algorithms%20in%20Game%20Design/AGD%2005%20Collision%20Detection.html#step-4-resolve-collisions","title":"Step 4. Resolve Collisions","text":"<ul> <li>\u5b50\u5f39\u51fb\u4e2d\u76ee\u6807</li> <li>\u649e\u5899\u3001\u901f\u5ea6\u53cd\u5411</li> <li>\u5f39\u6027\u78b0\u649e<ul> <li>\u8ba1\u7b97\u78b0\u649e\u70b9</li> <li>\u78b0\u649e\u5207\u9762</li> <li>\u901f\u5ea6\u5927\u5c0f</li> <li>\u7ed3\u5408 swept sphere \u7684\u7ed3\u679c</li> </ul> </li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/index.html","title":"\u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u7840","text":""},{"location":"ZJU-Assembly%20Fundamentals/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>ASMF 01 \u6570\u636e\u7c7b\u578b\u548c\u53d8\u91cf</li> <li>ASMF 02 \u6c47\u7f16\u8bed\u8a00\u6e90\u7a0b\u5e8f\u683c\u5f0f</li> <li>ASMF 02 \u6c47\u7f16\u8bed\u8a00\u6e90\u7a0b\u5e8f\u683c\u5f0f</li> <li>ASMF 03 \u5185\u5b58\u4e0e\u5bfb\u5740</li> <li>ASMF 04 \u5bc4\u5b58\u5668</li> <li>ASMF 05 \u6bb5\u548c\u5806\u6808</li> <li>ASMF 06 \u4e2d\u65ad\u548c\u51fd\u6570\u8c03\u7528</li> <li>ASMF 07 \u6570\u636e\u4f20\u9001\u6307\u4ee4</li> <li>ASMF 08 \u8f6c\u6362\u6307\u4ee4</li> <li>ASMF 09 \u7b97\u672f\u8fd0\u7b97\u6307\u4ee4</li> <li>ASMF 10 \u903b\u8f91\u8fd0\u7b97\u548c\u79fb\u4f4d\u6307\u4ee4</li> <li>ASMF 11 \u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4</li> <li>ASMF 12 \u63a7\u5236\u8f6c\u79fb\u6307\u4ee4</li> <li>ASMF Cheat Sheet</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/index.html#info","title":"Info","text":"<p>\u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u7840</p> <ul> <li>\u4ee3\u7801\uff1aCS1009G</li> <li>\u5b66\u5206\uff1a2.0</li> <li>\u5b66\u671f\uff1a2024 \u79cb\u51ac</li> <li>\u6559\u5e08\uff1a\u767d\u6d2a\u6b22</li> <li>\u6559\u6750\uff1a80x86 \u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u7840</li> </ul> Grading Policy <ul> <li>\u5e73\u65f6\u5206 50<ul> <li>\u4e3b\u8981\u662f\u4f5c\u4e1a\uff0c\u611f\u89c9\u6ca1\u6709\u8003\u52e4\u8fc7</li> </ul> </li> <li>\u671f\u672b\u8003\u8bd5 50 \u673a\u8003\u3001\u95ed\u5377\u8003\u8bd5</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/index.html#tips","title":"Tips","text":"<p>\u8fd9\u4efd\u7b14\u8bb0\u5e76\u4e0d\u5b8c\u5584</p> <ul> <li>\u8c03\u8bd5\u76f8\u5173\u7684\u5185\u5bb9\u6709\u7f3a\u5931\uff0c\u53ef\u4ee5\u5728\u6559\u6750\u4e0a\u627e\u5230</li> <li>ASMF Cheat Sheet \u662f\u671f\u672b\u590d\u4e60\u624b\u7a3f\uff0c\u53ef\u80fd\u6709\u90e8\u5206\u9519\u8bef\u6216\u8868\u8ff0\u4e0d\u6e05\uff0c\u8bf7\u4ee5\u6559\u6750\u4e3a\u51c6</li> </ul> <p>Tip</p> <ul> <li>\u8fd9\u95e8\u8bfe\u5e76\u6ca1\u6709\u90a3\u4e48\u56f0\u96be\uff0c\u53ea\u8981\u8ba4\u771f\u5b8c\u6210\u4f5c\u4e1a &amp; \u590d\u4e60\u597d\u671f\u672b\u5c31\u80fd\u62ff\u5230\u4e0d\u9519\u7684\u5206\u6570</li> <li>\u5efa\u8bae\u591a\u5c1d\u8bd5\u4e00\u4e9b\u4ee3\u7801\u7f16\u8f91/\u7f16\u8bd1\u73af\u5883\uff0c\u7528\u5f97\u987a\u624b\u5f88\u91cd\u8981</li> </ul> <p>Useful Links</p> <ul> <li>\u6559\u5e08\u4e3b\u9875</li> <li>\u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u7840 - mem \u7684\u5c0f\u7ad9</li> </ul> hello.asm<pre><code>data segment\ns db \"Hello, world!\", 0Dh, 0Ah, '$'\ndata ends\n\ncode segment\nassume cs:code, ds:data\nmain:\n    mov ax, data\n    mov ds, ax\n    mov ah, 9\n    mov dx, offset s\n    int 21h  ; \u8fdb\u884c printf\n    mov ah, 4Ch\n    int 21h\ncode ends\nend main\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2001%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F.html","title":"01 \u6570\u636e\u7c7b\u578b\u548c\u53d8\u91cf","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2001%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F.html#1-\u6c47\u7f16\u8bed\u8a00\u4e2d\u7684\u6570\u636e\u7c7b\u578b","title":"1 \u6c47\u7f16\u8bed\u8a00\u4e2d\u7684\u6570\u636e\u7c7b\u578b","text":"type db dw (word) dd (double words) dq (quadruple words) dt (ten bytes) bits 8 16 32 64 80 c type <code>char</code> <code>short int</code> <code>long int, float</code> <code>long long (__int64), double</code> <code>long double</code> printf <code>%lld, %llx</code> <code>%Lf</code> <p>Note</p> <ul> <li>8086 \u4e2d\u7684 word \u6307\u7684\u662f 2 bytes, 16 bits</li> <li>RISC-V \u4e2d\u7684 word \u4e00\u822c\u6307\u7684\u662f 4bytes, 32bits</li> </ul> \u8fdb\u884c\u51e0\u4e2a\u53d8\u91cf\u58f0\u660e<pre><code>x dd 12345678h\ny dd 3.14159\na dq 1234567887654321h\nb dq 3.14159265\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2001%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F.html#2-\u4f8b\u7a0b\u53d8\u91cf\u7684\u64cd\u4f5c","title":"2 \u4f8b\u7a0b\uff1a\u53d8\u91cf\u7684\u64cd\u4f5c","text":"\u53d8\u91cf\u7684\u7b80\u5355\u64cd\u4f5c<pre><code>.386  ; \u544a\u8bc9\u7f16\u8bd1\u5668\u5c06\u4f7f\u7528 32 \u4f4d\u7684CPU\uff0c\u5141\u8bb8\u4f7f\u7528 32 \u4f4d\u5bc4\u5b58\u5668\ndata segment use16  ; \u8868\u793a\u6bb5\u5185\u53d8\u91cf\u7684\u504f\u79fb\u5730\u5740\u4ecd\u65e7\u662f 16 \u4f4d\uff0c\u56e0\u4e3a dos \u73af\u5883\u53ea\u5141\u8bb8\u4f7f\u7528 16 \u4f4d\u7684\u504f\u79fb\u5730\u5740\n    s db 01h, 02h, 03h, 04h  ; s \u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u76f8\u5f53\u4e8e char s[4] = {1,2,3,4}\uff0c\u6c47\u7f16\u8bed\u8a00\u4e2d\u5f53\u521d\u59cb\u503c\u8d85\u8fc7 1 \u5c31\u662f\u6570\u7ec4\n    t dw 89ABh, CDEFh  ; t \u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u4f46\u662f\u7b2c\u4e00\u9879\u662f t[0]\uff0c\u7b2c\u4e8c\u9879\u5374\u662f t[2]\n    abc dw 1234h\n    xyz dw 5678h\n    ddd dd 12345678h\n    eee dd 0\ndata ends\n\ncode segment use16\nassume cs:code, ds:data\nmain:\n    mov ax, seg abc\n    mov ds, ax\n\n    mov ax, t[2]  ; \u6216\u5199\u6210 mov ax, [t+2]\n    mov abc, ax\n\n    ; mov eax, abc  ; \u4e0d\u7b49\u5bbd 32 != 16\n    mov eax, dword ptr abc\n\n    ; add abc, xyz  ; ERROR: \u4e0d\u53ef\u4ee5\u4e24\u4e2a\u90fd\u662f\u53d8\u91cf\n    add abc, 5678h  ; \u6b63\u786e\u7684\u5199\u6cd5\n    mov ax, xyz  ; \u6216\u8005\u5148\u653e\u5230\u5bc4\u5b58\u5668\u91cc\n    add abc, ax  ; \u6b63\u786e\u7684\u5199\u6cd5\n\n    mov eax, ddd\n    mov eee, eax\n\n    ; mov al, ddd  ; \u7f16\u8bd1\u62a5\u9519\uff0c\u56e0\u4e3a\u4e24\u4e2a\u53c2\u6570\u4e0d\u7b49\u5bbd\n    mov al, byte ptr ddd  ; byte ptr \u76f8\u5f53\u4e8e\u5f3a\u5236\u7c7b\u578b\u8f6c\u5316 (char*)\n\n    ; mov ax, s  ; \u7f16\u8bd1\u8bed\u6cd5\u9519\u8bef\uff0c\u4e0d\u7b49\u5bbd\n    mov ax, word ptr s  ; ax = {s[1],s[0]}\n    mov abc, ax\n\n    mov ah, 4Ch\n    mov al, 0  ; \u8fd4\u56de\u7801\n    int 21h  ;  exit()\n\ncode ends\nend main\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2001%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F.html#21-error-\u548c\u6b63\u786e\u5199\u6cd5\u7684\u533a\u522b","title":"2.1 ERROR \u548c\u6b63\u786e\u5199\u6cd5\u7684\u533a\u522b\uff1f","text":"<ul> <li>\u4e00\u6761\u6307\u4ee4\u4e2d\u7684\u4e24\u4e2a\u53c2\u6570\uff0c\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u662f\u5185\u5b58\u53d8\u91cf</li> <li>\u53e6\u4e00\u4e2a\u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u8005\u5e38\u6570</li> <li>\u65e0\u6cd5\u5b9e\u73b0\u4e24\u4e2a\u5185\u5b58\u53d8\u91cf\u76f4\u63a5\u8fd0\u7b97\u53ef\u80fd\u662f\u56e0\u4e3a\u786c\u4ef6\u9650\u5236</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2001%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F.html#22-\u53d8\u91cf\u7684\u5730\u5740\u8868\u793a","title":"2.2 \u53d8\u91cf\u7684\u5730\u5740\u8868\u793a","text":"<ul> <li><code>\u6bb5\u5730\u5740:[\u504f\u79fb\u5730\u5740]</code> \u7528\u6765\u8868\u793a\u67d0\u4e2a\u5730\u5740\u6307\u5411\u7684\u91cf\uff0c\u7b49\u4ef7\u4e8e C \u8bed\u8a00\u4e2d\u7684 <code>a[3]</code> \u6216 <code>*(a+3)</code></li> <li>\u53ef\u4ee5\u5728 td \u4e2d\u770b\u5230\u7c7b\u4f3c <code>mov    eax [0004]</code> \u7684\u4ee3\u7801\uff0c\u5176\u5b9e\u8fd9\u91cc\u7701\u7565\u4e86 <code>ds:</code></li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2001%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F.html#23-little-endian-\u89c4\u5219","title":"2.3 Little Endian \u89c4\u5219","text":"<p>8086 \u4f7f\u7528\u5c0f\u7aef\u89c4\u5219\uff0c\u6240\u4ee5\u5728 td \u4e2d\u4f1a\u53d1\u73b0 <code>12345678h</code> \u53d8\u6210\u4e86 <code>78563412</code>\uff0c\u4e5f\u5c31\u662f LSD 78 \u88ab\u653e\u5728\u4e86\u5185\u5b58\u5730\u5740\u6700\u5c0f\u7684\u4f4d\u7f6e\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5047\u5b9a <code>a</code> \u7684\u5730\u5740\u662f 1000\uff0c\u5219 <code>a</code> \u7684\u503c\u4ee5\u4ee5\u4e0b\u683c\u5f0f\u5b58\u653e\uff1a</p> Addr Little Endian Big Endian +1000 <code>0x78</code> <code>0x12</code> +1001 <code>0x56</code> <code>0x34</code> +1002 <code>0x34</code> <code>0x56</code> +1003 <code>0x12</code> <code>0x78</code> <p>\u4e3a\u4ec0\u4e48\u5c0f\u7aef\u66f4\u597d</p> <p>\u5982\u679c\u53ea\u8981\u53d6 <code>a</code> \u7684\u6700\u4f4e\u5b57\u8282\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u8bbf\u95ee <code>a</code> \u539f\u672c\u7684\u5730\u5740\uff0c\u65b9\u4fbf\u7f16\u8bd1</p> <p>\u6ce8\u610f\uff0c\u6570\u636e\u7a97\u53e3\u4e2d\u663e\u793a\u7684\u662f <code>78563412h</code>\uff0c\u4f46\u662f\u5bc4\u5b58\u5668\u7a97\u53e3\u4e2d\u4f1a\u662f\u6b63\u5e38\u7684 <code>12345678h</code>\u3002</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2001%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F.html#24-\u7f16\u7a0b\u4e2d\u7684\u53d8\u91cf\u5bf9\u9f50","title":"2.4 \u7f16\u7a0b\u4e2d\u7684\u53d8\u91cf\u5bf9\u9f50","text":"<ul> <li>\u5728\u8fdb\u884c <code>mov eax, ddd</code> \u65f6\uff0c\u7531\u4e8e <code>eax</code> \u662f 32 \u4f4d\u7684\uff0c\u6240\u4ee5 CPU \u4e5f\u4f1a\u4ece <code>ddd</code> \u7684\u5730\u5740\u5904\u5f00\u59cb\u8bfb 4 \u4e2a byte<ul> <li>\u4f46\u8fd9\u8981\u6c42 <code>ddd</code> \u786e\u5b9e\u662f <code>dq</code> \u7c7b\u578b\uff0c\u5426\u5219\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519</li> </ul> </li> <li>\u4f7f\u7528\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u53ef\u4ee5\u5141\u8bb8\u975e\u5bf9\u9f50<ul> <li><code>mov al, byte ptr ddd</code> \u76f8\u5f53\u4e8e <code>al = *(char *)(ds:0004)</code></li> </ul> </li> </ul> 3 \u79cd ptr \u4fee\u9970 byte ptr word ptr dword ptr bytes 1 2 4 <p>Attention</p> <ul> <li>ptr \u5bbd\u5ea6\u4fee\u9970\u4e0d\u80fd\u7528\u4e8e\u5e38\u6570</li> <li>\u53d8\u91cf\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u5df2\u7ecf\u58f0\u660e\u4e86\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u52a0\u4e0a\u4fee\u9970\uff0c\u6240\u4ee5\u4e0d\u7528\u52a0   \u4f46\u5982\u679c\u4e0d\u662f\u901a\u8fc7\u53d8\u91cf\u5f15\u7528\u7684\u65b9\u5f0f\u6765\u5f15\u7528\u53d8\u91cf\uff08\u5373\u4ee3\u7801\u4e2d\u6ca1\u6709\u51fa\u73b0\u53d8\u91cf\u540d\uff09\uff0c\u8fd8\u662f\u9700\u8981\u52a0\u4e0a\u4fee\u9970</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2001%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F.html#25-\u6570\u7ec4\u548c\u5143\u7d20\u5408\u5e76","title":"2.5 \u6570\u7ec4\u548c\u5143\u7d20\u5408\u5e76","text":"<pre><code>s db 01h, 02h, 03h, 04h  ; char s[4] = {1, 2, 3, 4}\n</code></pre> <p>\u6b64\u65f6\uff0c<code>s</code> \u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u5927\u5c0f\u4e3a 4 \u5b57\u8282\u3002\u53ef\u4ee5\u7528 <code>word ptr</code> \u6765\u8bfb\u53d6 <code>s</code>\uff0c\u4f46\u8981\u6ce8\u610f Little Endian\uff0c\u8bfb\u51fa\u7684 word \u662f <code>0201h</code>\u3002\u8fd9\u6837\u8bfb\u53d6\uff0c\u76f8\u5f53\u4e8e\u8fdb\u884c\u4e86\u5408\u5e76\u3002</p> <p>\u540c\u6837\u7684\uff0c\u5982\u679c\u8fdb\u884c <code>mov eax, dword ptr abc</code>\uff0c\u5b9e\u9645\u4e0a\u8bfb\u53d6\u4e86\u5185\u5b58\u4e2d\u8fde\u7eed\u7684 <code>{xyz, abc}</code>\u3002</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2001%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F.html#251-\u7279\u6b8a\u60c5\u51b5","title":"2.5.1 \u7279\u6b8a\u60c5\u51b5","text":"<pre><code>t dw 89ABh, CDEFh\n</code></pre> <p>\u628a <code>t</code> \u4e2d\u5404\u4e2a\u5143\u7d20\u9010\u5b57\u8282\u6309\u5c0f\u7aef\u5c55\u5f00\uff1a</p> <pre><code>t+0 AB\nt+1 89\nt+2 EF\nt+3 CD\n</code></pre> <p>\u6240\u4ee5\uff0c\u4e3a\u4e86\u53d6\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff0c\u5b9e\u9645\u4e0a\u9700\u8981\u53d6 <code>t[2]</code></p> <p>\u6307\u9488\u504f\u79fb\u64cd\u4f5c\u4e0e C \u8bed\u8a00\u7684\u4e0d\u540c</p> <ul> <li>C \u8bed\u8a00\u4e2d <code>ptr+1</code>\uff0c\u4e0d\u4e00\u5b9a\u771f\u7684\u662f <code>+1</code>\uff0c\u800c\u662f\u4f4d\u79fb\u4e86\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\u5927\u5c0f</li> <li>\u6c47\u7f16\u4e2d <code>ptr+1</code>\uff0c\u5c31\u662f\u4f4d\u79fb\u4e00\u4e2a\u5b57\u8282</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2001%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F.html#3-\u7b26\u53f7\u6269\u5145","title":"3 \u7b26\u53f7\u6269\u5145","text":"<p>\u5c06\u4e00\u4e2a\u5bbd\u5ea6\u8f83\u5c0f\u7684\u53d8\u91cf\u8d4b\u503c\u7ed9\u4e00\u4e2a\u5bbd\u5ea6\u8f83\u5927\u7684\u53d8\u91cf\u65f6\uff0c\u4f1a\u53d1\u751f\u6269\u5145</p> <ul> <li>\u96f6\u6269\u5145\uff1a\u5c06\u7a7a\u4f4d\u7528 0 \u8865\u5168</li> <li>\u7b26\u53f7\u6269\u5145\uff1a\u5c06\u7a7a\u4f4d\u7528\u6700\u9ad8\u4f4d sign extend \u8865\u5168</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2001%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F.html#4-hw\u601d\u8003\u9898","title":"4 HW\uff1a\u601d\u8003\u9898","text":"<p>C \u8bed\u8a00\u4e2d\u662f\u5426\u6709\u53ef\u80fd\u5c06\u6570\u7ec4\u67d0\u4e2a\u5143\u7d20\u7684\u540e\u4e00\u534a\u548c\u4e0b\u4e00\u4e2a\u7684\u524d\u4e00\u534a\u7ed3\u5408\u5728\u4e00\u8d77</p> Reassembling data<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    short int a[3] = {0x1234, 0x5678, 0xabcd}, y;\n                      // 34, 12, 78, 56, cd, ab\n    y = *(short int *)((char*)&amp;a[0] + 1);  // \u76f8\u5f53\u4e8e\u6309\u7167\u5b57\u8282\u5bfb\u5740\n    print(\"%x\", y);\n}\n</code></pre> output<pre><code>7812\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html","title":"02 \u6c47\u7f16\u8bed\u8a00\u6e90\u7a0b\u5e8f\u683c\u5f0f","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#1-\u4f4d\u6c47\u7f16\u8bed\u8a00\u8bed\u6cd5\u57fa\u7840","title":"1 \u4f4d\u6c47\u7f16\u8bed\u8a00\u8bed\u6cd5\u57fa\u7840","text":"1+2+3+4+...+100=?<pre><code>.386\n.model flat, stdcall\noption casemap :none\n\ninclude include\\windows.inc\ninclude include\\kernel32.inc\ninclude include\\user32.inc\n\n; \u64cd\u4f5c\u7cfb\u7edf\u76f8\u5173\u51fd\u6570\nincludelib lib\\kernel32.lib\nincludelib lib\\user32.lib\n\n.data\nresult db 100 dup(0); dup:duplicate\u91cd\u590d\n; char result[100]={0};\nformat db \"%d\",0; db:define byte\u5b57\u8282\u7c7b\u578b\n; char format[3]=\"%d\";\nprompt db \"The result\",0\n\n.code\nmain:         ; \u6807\u53f7\n    mov eax, 0; eax:extended ax\n    mov ebx, 1\nagain: \n    add eax, ebx; eax=0+1+2+3\n    add ebx, 1  ; ebx=4\n    cmp ebx, 100; cmp:compare\n    jbe again   ; jbe:jump if below or equal\n\n    invoke wsprintf, offset result, offset format, eax\n    invoke MessageBox,0,offset result,offset prompt,0\n        ret\nend main; \u6307\u5b9a\u7a0b\u5e8f\u7684\u8d77\u59cb\u6267\u884c\u70b9\n        ; end\u540e\u9762\u7684\u6807\u53f7\u51b3\u5b9a\u4e86\u7a0b\u5e8f\u521a\u5f00\u59cb\n        ; \u8fd0\u884c\u65f6\u7684eip\u7684\u503c\u3002\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#11-\u6807\u53f7","title":"1.1 \u6807\u53f7","text":"<ul> <li><code>again:</code> \u662f\u4e00\u4e2a\u6807\u53f7\uff0c\u6807\u53f7\u662f\u540d\u79f0 + \u5192\u53f7</li> <li>\u53ef\u4ee5\u4f5c\u4e3a\u8df3\u8f6c\u6307\u4ee4\u7684\u76ee\u6807\u5730\u5740\uff0c\u5982 <code>jbe again</code>\uff0c\u6709\u70b9\u50cf goto</li> <li>\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u8c03\u7528 call \u7684\u5730\u5740</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#12-\u51fd\u6570\u8c03\u7528","title":"1.2 \u51fd\u6570\u8c03\u7528","text":"<p>\u6c47\u7f16\u8bed\u8a00\u4e5f\u9700\u8981\u8c03\u7528\u51fd\u6570\uff0c\u4e0d\u8fc7\u66f4\u591a\u8c03\u7528\u7684\u662f\u64cd\u4f5c\u7cfb\u7edf API</p> <pre><code>invoke wsprintf, offset result, offset format, eax\n</code></pre> <p>\u5c31\u662f <code>wsprintf(&amp;result[0], &amp;format[0], eax);</code>\uff0c\u8fd9\u662f windows \u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5bf9\u5e94 c \u8bed\u8a00\u4e2d\u7684 <code>sprintf(result, \"%d\", eax);</code></p> <pre><code>invoke MessageBoxA, 0, offset result, offset prompt, 0\n</code></pre> <p>\u4e5f\u5c31\u662f <code>MessageBoxA(0, &amp;result[0], &amp;prompt[0], 0);</code>\uff0c\u8fd9\u662f\u4e00\u4e2a windows \u51fd\u6570\uff0c\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7cfb\u7edf\u5f39\u7a97 - <code>var1</code>: \u5efa\u7684\u6d88\u606f\u6846\u7684\u6240\u6709\u8005\u7a97\u53e3\u7684\u53e5\u67c4 - <code>result</code>: \u8fd9\u91cc\u662f\u5c06\u4f1a\u663e\u793a\u7684\u6d88\u606f\u6587\u672c - <code>prompt</code>: \u8fd9\u91cc\u662f\u7a97\u53e3\u7684\u6807\u9898 - <code>var4</code>: \u8fd9\u91cc\u662f\u5bf9\u4f1a\u8bdd\u6846\u6309\u94ae\u7684\u6837\u5f0f</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#13-\u53d8\u91cf\u5b9a\u4e49","title":"1.3 \u53d8\u91cf\u5b9a\u4e49","text":"<pre><code>.data\nresult db 100 dup(0);  dup: duplicate \u91cd\u590d\n; char result[100] = {0};\nformat db \"%d\", 0;  db: define byte \u5b57\u8282\u7c7b\u578b\n; char format[3] = \"%d\";\nprompt db \"The result\", 0\n</code></pre> <p>Attention</p> <ol> <li>\u6c47\u7f16 string \u4e0d\u4f1a\u81ea\u5e26 <code>\\0</code>\uff0c\u9700\u8981\u81ea\u5df1\u52a0\u4e0a\u4e00\u4e2a 0</li> <li>\u8fd9\u91cc\u5b9a\u4e49\u7684\u53d8\u91cf\u76f8\u5f53\u4e8e C \u7684\u5168\u5c40\u53d8\u91cf\uff0c\u80fd\u88ab\u6240\u6709\u51fd\u6570\u8c03\u7528<ul> <li>\u6c47\u7f16\u4e5f\u80fd\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cf\uff0c\u4f46\u662f\u6bd4\u8f83\u9ebb\u70e6</li> </ul> </li> </ol>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#14-\u7a0b\u5e8f\u7ed3\u6784","title":"1.4 \u7a0b\u5e8f\u7ed3\u6784","text":"<p>\u9664\u4e86\u4e0a\u8ff0 <code>invoke</code> \u7684\u90e8\u5206\uff0c\u90fd\u662f\u76f4\u63a5\u8ba9 CPU \u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u6ca1\u6709\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684 API\u3002\u4f46\u5982\u679c\u8981\u5b9e\u73b0\u8f93\u5165\u8f93\u51fa\uff0c\u5c31\u4e00\u5b9a\u8981\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u51fd\u6570\u3002</p> <p>\u4e3a\u4e86\u83b7\u5f97\u5c3d\u53ef\u80fd\u5927\u7684\u7528\u6237\u6743\u9650\uff0c\u6211\u4eec\u4f7f\u7528\u53e4\u8001\u7684 DOS \u7cfb\u7edf\u6765\u5b66\u4e60\u6c47\u7f16\u8bed\u8a00\u3002</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#2-\u4f4d\u6c47\u7f16\u8bed\u8a00-hello-world","title":"2 \u4f4d\u6c47\u7f16\u8bed\u8a00 Hello, world!","text":"<p>DOS \u7684\u6c47\u7f16\u8bed\u8a00\u662f 16 \u4f4d\u7684 Windows \u548c Linux \u7684\u6c47\u7f16\u8bed\u8a00\u662f 32 \u4f4d\u7684</p> 16 bit asm hello world<pre><code>data segment\nhello db \"Hello, world!\", 0Dh, 0Ah, '$'\ndata ends\n\ncode segment\nassume cs:code, ds:data\nmain:\n    mov ax, data\n    mov ds, ax\n    mov ah, 9\n    mov dx, offset hello\n    int 21h\n    mov ah, 4Ch\n    mov al, 0\n    int 21h\ncode ends\nend main\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#21-\u521b\u5efa\u5b57\u7b26\u4e32\u53d8\u91cf","title":"2.1 \u521b\u5efa\u5b57\u7b26\u4e32\u53d8\u91cf","text":"\u521b\u5efa\u5b57\u7b26\u4e32\u53d8\u91cf<pre><code>data segment\nhello db \"Hello, world!\", 0Dh, 0Ah, '$'\n; 0Dh \u548c 0Ah \u662f 16 \u8fdb\u5236\u5e38\u6570\uff0ch \u662f 16 \u8fdb\u5236\u540e\u7f00\n; 0Dh \u4ee3\u8868\u56de\u8f66\u7684 ASCII \u7801\uff0c0Ah \u4ee3\u8868\u6362\u884c\n; '$' \u6709\u8868\u793a\u672b\u5c3e\u7684\u542b\u4e49\uff0c\u5728\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u4e5f\u662f\u8fd9\u4e2a\u610f\u601d\ndata ends\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#211-\u6362\u884c-or-\u56de\u8f66","title":"2.1.1 \u6362\u884c or \u56de\u8f66\uff1f","text":"<ul> <li><code>0Ah</code> \u4e5f\u5c31\u662f <code>\\n</code><ul> <li>\u5728 windows \u548c dos \u4e2d\uff0c\u4e00\u4e2a enter \u4f1a\u4ea7\u751f\u4e24\u4e2a\u5b57\u7b26 <code>0Dh 0Ah</code></li> <li>\u5728 Mac OS \u548c Linux \u4e2d\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26</li> </ul> </li> <li>\u5728 C \u8bed\u8a00\u4e2d\uff0c\u4f7f\u7528 <code>\"r\"</code> \u6587\u672c\u6587\u4ef6\u53ea\u8bfb\u5f62\u5f0f\u6253\u5f00\uff0c<code>fgetc()</code> \u8bfb\u5230\u4e00\u4e2a <code>0Dh</code> \u65f6\uff0c\u4f1a\u5c06\u540e\u9762\u7684 <code>0Ah</code> \u4e00\u8d77\u8bfb\u5165\u5e76\u5408\u6210 <code>0Ah</code><ul> <li>\u7528 <code>\"rb\"</code> \u53ef\u4ee5\u6bcf\u6b21\u53ea\u8bfb\u4e00\u4e2a\u5b57\u8282</li> <li>linux \u4e2d <code>\"r\"</code> \u548c <code>\"rb\"</code> \u662f\u5b8c\u5168\u4e00\u6837\u7684</li> </ul> </li> <li><code>0Dh</code> \u8868\u793a\u56de\u8f66 \u5149\u6807\u56de\u5230\u884c\u9996</li> <li><code>0Ah</code> \u8868\u793a\u6362\u884c \u5149\u6807\u5782\u76f4\u5f80\u4e0b\u4e00\u884c</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#22-\u6784\u5efa\u53d8\u91cf\u6307\u9488","title":"2.2 \u6784\u5efa\u53d8\u91cf\u6307\u9488","text":"\u6784\u5efa\u53d8\u91cf\u6307\u9488<pre><code>mov ax, data; \u6216\u5199\u6210 mov ax, seg hello\n            ; \u8fd9\u91cc\u7684 seg \u8868\u793a\u53d6 hello \u7684\u6bb5\u5730\u5740\nmov ds, ax; ds = data\n          ; \u4e3a\u4ec0\u4e48\u4e0d\u7528\u4e00\u53e5\u8bdd mov ds, data \u6765\u8fbe\u5230\u76ee\u7684\uff1f\n          ; \u56e0\u4e3a ds \u53ea\u80fd\u63a5\u53d7\u4e00\u4e2a\u53d8\u91cf\u6216\u5bc4\u5b58\u5668\u7ed9\u5b83\u8d4b\u503c\uff0c\u800c data \u521a\u597d\u662f\u5e38\u6570\n          ; \u51e1\u662f s \u7ed3\u5c3e\u7684\u5bc4\u5b58\u5668\u90fd\u6709\u8fd9\u4e2a\u95ee\u9898\n          ; \u8fd9\u91cc\u7684 data \u4ee3\u8868 hello \u7684\u6bb5\u5730\u5740\nmov dx, offset hello; offset hello \u8868\u793a\u53d6 hello \u7684\u504f\u79fb\u5730\u5740\n                    ; \u5b8c\u6210\u4e86\u5bf9 ds \u548c dx \u7684\u8d4b\u503c\uff0c\u8fd9\u6837\u5c31\u6784\u6210\u4e86 ds:dx -&gt; hello \u8fd9\u4e2a\u6307\u9488\n</code></pre> <p>Note</p> <p>\u6784\u5efa\u8fd9\u4e2a\u6307\u9488\u662f\u4e3a\u4e86\u6ee1\u8db3\u51fd\u6570\u8c03\u7528\u7684\u8981\u6c42</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#23-\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u51fd\u6570","title":"2.3 \u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u51fd\u6570","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#231-printf","title":"2.3.1 printf","text":"<pre><code>mov ah, 9; ah = 9 \u7528\u6765\u6307\u5b9a\u8981\u8c03\u7528\u7684\u5b50\u51fd\u6570\u7f16\u53f7\nint 21h; \u8c03\u7528 dos \u7cfb\u7edf\u51fd\u6570\u96c6\n</code></pre> <ul> <li>\u76f8\u5f53\u4e8e C \u8bed\u8a00\u7684 <code>printf(hello)</code></li> <li><code>int 21h</code> \u4e0d\u662f\u6574\u6570\u7c7b\u578b\uff0c\u800c\u662f interrupt \u4e2d\u65ad\u8c03\u7528\uff0c\u8c03\u7528\u4e86\u7f16\u53f7\u4e3a <code>21h</code> \u7684\u51fd\u6570\u96c6\uff0c\u800c\u5bc4\u5b58\u5668 <code>ah=9</code> \u4ee3\u8868\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u96c6\u4e2d\u7b2c 9 \u53f7\u51fd\u6570</li> </ul> <p>\u5728 \u4e2d\u65ad\u5927\u5168 \u4e2d\u67e5\u627e\u8fd9\u4e2a\u51fd\u6570 Int 21/AH=09h (zju.edu.cn)</p> \u8c03\u7528\u51c6\u5907<pre><code>AH = 09h\nDS:DX -&gt; '$'-terminated string\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#232-return","title":"2.3.2 return","text":"<pre><code>mov ah, 4Ch\nmov al, 0\nint 21h\n</code></pre> <ul> <li>\u53c2\u8003 Int 21/AH=4Ch (zju.edu.cn)</li> <li>\u76f8\u5f53\u4e8e C \u8bed\u8a00\u7684 <code>exit(0);</code></li> <li>\u8fd9\u4e09\u6761\u6307\u4ee4\u4e0d\u80fd\u6362\u6210 <code>ret</code> \u5426\u5219\u4f1a\u6b7b\u673a\uff1b\u4e5f\u4e0d\u80fd\u5220\u9664\u8fd9\u4e09\u6761\u6307\u4ee4\uff0c\u5426\u5219 CPU \u4f1a\u7ee7\u7eed\u540e\u7eed\u4ee3\u7801\uff08\u522b\u7684\u7a0b\u5e8f\u9057\u7559\u7684\u5783\u573e\u7a0b\u5e8f\uff09\u5bfc\u81f4\u6b7b\u673a</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#24-\u7f16\u8bd1\u8fd0\u884c","title":"2.4 \u7f16\u8bd1\u8fd0\u884c","text":"<p>\u5b89\u88c5\u597d masm \u73af\u5883\u540e\uff0c\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u7f16\u8bd1\u8fd0\u884c\u3002</p> DOS \u547d\u4ee4\u884c\u754c\u9762<pre><code>D:\\MASM&gt;masm hello\nD:\\MASM&gt;link hello  // \u65e0\u89c6 no stack segment \u62a5\u9519\nD:\\MASM&gt;dir hello.exe  // \u67e5\u627e\u662f\u5426\u5b58\u5728 hello.exe\nD:\\MASM&gt;hello  // \u8fd0\u884c hello\nHello, world!\n                // \u6709\u56de\u8f66\uff0c\u6240\u4ee5\u8f93\u51fa\u4e24\u884c\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#25-\u8c03\u8bd5","title":"2.5 \u8c03\u8bd5","text":"DOS \u547d\u4ee4\u884c\u754c\u9762<pre><code>td hello\n</code></pre> <ul> <li>td \u662f DOS 16 \u4f4d\u6c47\u7f16\u8bed\u8a00\u56fe\u5f62\u754c\u9762\u8c03\u8bd5\u5668</li> <li><code>ctrl+G</code> \u53ef\u4ee5\u627e\u5230\u67d0\u4e2a\u6307\u9488\u4f4d\u7f6e\u7684\u5185\u5b58</li> <li>\u5728 <code>window/user screen</code> \u4e2d\u53ef\u4ee5\u56de\u5230\u547d\u4ee4\u884c</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#3-example-putchar-\u8c03\u7528","title":"3 Example: putchar \u8c03\u7528","text":"<p>\u53c2\u8003 Int 21/AH=02h (zju.edu.cn)</p> 16 bit asm putchar<pre><code>data segment\na db \"ABC\"\ns db \"Hello$world!\", 0Dh, 0Ah, 0\ndata ends\n\ncode segment\nassume cs:code, ds:data\nmain:\n    mov ax, seg a\n    mov ds, ax\n    mov bx, 0\nnext:\n    mov dl, s[bx]; \u7f16\u8bd1\u540e\u4f1a\u53d8\u6210 mov dl, ds:[3+bx]\n                 ; \u5176\u4e2d ds \u662f s \u7684\u6bb5\u5730\u5740\n                 ; 3 \u662f S \u7684\u504f\u79fb\u5730\u5740\uff0c\u8fd9\u662f\u56e0\u4e3a data segment \u524d\u9762\u6709\u4e09\u4e2a\u5b57\u8282\u4e0d\u5c5e\u4e8e s\n    cmp dl, 0\n    je exit\n    mov ah, 2\n    int 21h\n    add bx, 1\n    jmp next\nexit:\n    mov ah, 4Ch\n    mov al, 0\n    int 21h\ncode ends\nend main\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#31-\u6307\u9488\u4f4d\u7f6e","title":"3.1 \u6307\u9488\u4f4d\u7f6e\uff1f","text":"\u6570\u7ec4\u540d\u5185\u79fb<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    char s[4] = \"ABC\";\n    int i;\n    for (i = 0; i &lt; 3; i++) {\n        putchar(0[s+i]);\n    }\n}\n</code></pre> <p>\u8fd9\u91cc\u7684 <code>0</code> \u662f\u4e00\u4e2a\u7a7a\u6307\u9488\uff0c\u540e\u9762\u7684 <code>s+i</code> \u4e5f\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u6b63\u786e\u7684\u4f4d\u79fb</p> <p>td \u4f7f\u7528\u5c0f\u8d34\u58eb</p> <ul> <li>\u6570\u636e\u7a97\u53e3 <code>ctrl+G</code> \u52a0\u5165\u5730\u5740\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u5185\u5b58\u7684\u5185\u5bb9\uff0c\u5982 <code>ds:dx</code></li> <li>\u4ee3\u7801\u7a97\u53e3 <code>ctrl+O</code> \u53ef\u4ee5\u56de\u5230\u5f53\u524d\u6267\u884c\u7684\u547d\u4ee4\u5904</li> <li><code>F2</code> \u8bbe\u7f6e\u4e00\u4e2a\u65ad\u70b9\uff0c\u7136\u540e\u7528 run \u5feb\u901f\u5230\u8fbe\u65ad\u70b9</li> <li>window/user screen \u6216 <code>Alt+F5</code> \u6253\u5f00\u547d\u4ee4\u884c\u89c2\u5bdf</li> <li><code>exit</code> \u5173\u95ed dos \u547d\u4ee4\u884c\u7a97\u53e3</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#4-example-\u5b9e\u73b0-gets","title":"4 Example: \u5b9e\u73b0 <code>gets()</code>","text":"<ul> <li>\u5faa\u73af + <code>putchar()</code> \u5b9e\u73b0</li> </ul> \u8bfb\u53d6\u5b57\u7b26\u4e32\u5e76\u8f6c\u5316\u4e3a\u5927\u5199\u8f93\u51fa<pre><code>data segment\n    s db 100 dup(0)\ndata ends\n\ncode segment\n    assume cs:code, ds:data\n    main:\n        mov ax, seg s\n        mov ds, ax\n    ;;;;;;;;;; s = gets(); ;;;;;;;;;;\n        mov bx, 0\n    input:\n        mov ah, 1\n        int 21h;  al = getchar()\n        cmp al, 0Dh;  if al == '\\n'\n        je input_done\n        mov s[bx], al\n        add bx, 1\n        jmp input\n    input_done:\n        mov s[bx], 0;  s[bx] = '\\0'\n\n    ;;;;;;;;;; printf(\"%s\", upperCase(s)); ;;;;;;;;;\n    output:\n        mov bx, 0\n        mov dl, s[bx]\n        cmp dl, 0\n        je output_done\n        cmp dl, 'a'\n        jl not_lower_case\n        cmp dl, 'z'\n        jg not_lower_case\n    is_lower_case:\n        sub dl, 20h\n    not_lower_case:\n        mov ah, 2\n        int 21h;  putchar(dl)\n        add bx, 1\n        jmp output\n    output_done:\n        mov ah, 4Ch\n        int 21h\ncode ends\n</code></pre> <p>Hint</p> <p>\u6ce8\u610f\u4e0a\u9762\u5faa\u73af\u548c\u5206\u652f\u7684\u5b9e\u73b0</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2002%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F.html#5-hw","title":"5 HW","text":"Reversely putchar<pre><code>data segment\nsth db 10h dup(0)\ns db \"abc123\", 0\ndata ends\n\ncode segment\nassume cs:code ds:data\nmain:\n    mov ax, seg s\n    mov ds, ax; \u5c06 s \u7684\u6bb5\u5730\u5740\u5b58\u5230\u6b63\u786e\u7684\u5bc4\u5b58\u5668\u4e2d\n    mov bx, 0; \u8fd9\u662f\u4e00\u4e2a counter\n    mov dx, offset s; \u5f97\u5230 s \u7684\u504f\u79fb\u5730\u5740\u5e76\u5b58\u5230\u5bc4\u5b58\u5668\u4e2d\uff0cds:dx-&gt;s\n\n; find last '\\0'\nfind_max:\n    mov dl, s[bx]; \u8bfb\u53d6 s[bx]\n    cmp dl, 0\n    je pre_print\n    add bx, 1\n    jmp find_max\n\n; edge case, s == \"\\0\", so bx == 0, empty string\npre_print:\n    mov dl, s[bx]\n    mov ah, 2; indicate putchar func\n    int 21h; call putchar func\n    cmp bx, 0\n    je exit\n    sub bx, 1\n    jmp print\n\nexit:\n    mov ah, 4Ch\n    mov al, 0; indicate exit(0)\n    int 21h; call exit(0)\ncode ends\nendmain\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html","title":"03 \u5185\u5b58\u4e0e\u5bfb\u5740","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#1-\u5185\u5b58","title":"1 \u5185\u5b58","text":"<ul> <li>DOS \u7cfb\u7edf\u5728\u5b9e\u6a21\u5f0f\u4e0b\uff0c\u80fd\u591f\u8bbf\u95ee <code>[00000h, 0FFFFFh]</code> \u5171 1MB \u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u8fd9\u91cc\u7684 <code>12345h</code> \u79f0\u4e3a\u7269\u7406\u5730\u5740\uff0c\u5bc4\u5b58\u5668\u653e\u4e0d\u4e0b\uff0c\u6240\u4ee5\u9700\u8981\u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740</li> <li>\u4e00\u4e2a\u6bb5\u7684\u6700\u5927\u957f\u5ea6\u4f4d <code>0FFFFh</code>\uff0c\u4e5f\u5c31\u662f 64kB</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#2-\u6bb5\u5730\u5740\u504f\u79fb\u5730\u5740","title":"2 \u6bb5\u5730\u5740\u3001\u504f\u79fb\u5730\u5740","text":"<ul> <li>\u6bb5\u5730\u5740\u7684 16 \u8fdb\u5236\u4e2a\u4f4d\u5fc5\u987b\u662f 0</li> <li>\u6bb5\u7684\u957f\u5ea6\u4e3a <code>2233Fh-12340h+1=10000h=64k</code></li> <li>\u4e00\u4e2a\u7269\u7406\u5730\u5740\u53ef\u4ee5\u8868\u793a\u4e3a\u591a\u4e2a\u903b\u8f91\u5730\u5740<ul> <li><code>12398h</code></li> <li><code>1230:0098</code></li> <li><code>1239:0008</code></li> <li><code>1234:0058</code></li> <li> \u603b\u4e4b\u5c31\u662f\u6bb5\u5730\u5740\u53ea\u7ba1\u5230\u5341\u4f4d\uff0c\u504f\u79fb\u5730\u5740\u80fd\u66f4\u6df1\u5165\u4e00\u4f4d </li> <li> \u6bb5\u5730\u5740<code>+1</code> \u7b49\u6548\u4e8e\u504f\u79fb\u5730\u5740 <code>+10h</code> </li> </ul> </li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#21-\u76f4\u63a5\u5bfb\u5740\u548c\u95f4\u63a5\u5bfb\u5740","title":"2.1 \u76f4\u63a5\u5bfb\u5740\u548c\u95f4\u63a5\u5bfb\u5740","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#211-\u76f4\u63a5\u5bfb\u5740\u4f7f\u7528\u5e38\u6570\u6765\u8868\u793a\u504f\u79fb\u5730\u5740","title":"2.1.1 \u76f4\u63a5\u5bfb\u5740\uff1a\u4f7f\u7528\u5e38\u6570\u6765\u8868\u793a\u504f\u79fb\u5730\u5740","text":"<p>Attention</p> <p>\u6bb5\u5730\u5740\u53ea\u80fd\u7528\u5bc4\u5b58\u5668\u6765\u8868\u793a</p> \u95f4\u63a5\u5bfb\u5740<pre><code>mov al, ds:[2000h]\nmov al, byte ptr ds:[2000h]  ; \u58f0\u660e\u7c7b\u578b\u662f\u5b57\u8282\u6307\u9488\n                             ; \u4f46\u5176\u5b9e\u53ef\u4ee5\u7701\u7565\uff0c\u56e0\u4e3a al \u5c31\u662f\u4e00\u4e2a\u5b57\u8282\n</code></pre> <p>\u4e0a\u9762\u7684\u64cd\u4f5c\u7b49\u4ef7\u4e8e\uff1a</p> \u95f4\u63a5\u5bfb\u5740<pre><code>typedef unsigned char byte\nal = *(byte *)(ds:2000h);\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#22-\u95f4\u63a5\u5bfb\u5740-\u4f7f\u7528\u5bc4\u5b58\u5668\u6216\u5bc4\u5b58\u5668-\u5e38\u6570\u6765\u8868\u793a\u504f\u79fb\u5730\u5740","title":"2.2 \u95f4\u63a5\u5bfb\u5740: \u4f7f\u7528\u5bc4\u5b58\u5668\u6216\u5bc4\u5b58\u5668 + \u5e38\u6570\u6765\u8868\u793a\u504f\u79fb\u5730\u5740","text":"<p>Attention</p> <p>\u7528\u4e8e\u95f4\u63a5\u5bfb\u5740\u7684\u5bc4\u5b58\u5668\u4ec5\u9650 <code>bx, bp, si, di</code>\uff0c\u800c\u4e14\u4e00\u5b9a\u662f <code>bx, bp</code> \u4e2d\u7684\u4e00\u4e2a\u80fd\u548c <code>si, di</code> \u4e2d\u7684\u4e00\u4e2a\u76f8\u52a0</p> \u95f4\u63a5\u5bfb\u5740<pre><code>mov bx, 2000h\nmov al, ds:[bx]\nmov al, byte ptr ds:[bx]\n\nmov ds:[bx], 1  ; \u8bed\u6cd5\u9519\u8bef\uff01\uff01\nmov bypt ptr ds:[bx], 1\nmov word ptr ds:[bx], 1\nmov dword ptr ds:[bx], 1\n</code></pre> <p>Warning</p> <p>\u5f53\u6e90\u64cd\u4f5c\u6570\u662f\u5e38\u6570\uff0c\u76ee\u6807\u64cd\u4f5c\u6570\u662f\u53d8\u91cf\u65f6\uff0c\u65e0\u6cd5\u786e\u5b9a\u5bbd\u5ea6\uff0c\u5fc5\u987b\u6307\u5b9a ptr</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#3-\u6bb5\u7f3a\u7701\u548c\u6bb5\u8986\u76d6","title":"3 \u6bb5\u7f3a\u7701\u548c\u6bb5\u8986\u76d6","text":"\u5f15\u7528\u6570\u7ec4\u5143\u7d20<pre><code>mov ah, [abc]  ; \u76f4\u63a5\u64cd\u4f5c abc \u5730\u5740\u6307\u5411\u7684\u5bf9\u8c61\n               ; \u9ed8\u8ba4\u6307\u5b9a\u4e86 byte ptr\n               ; \u9ed8\u8ba4\u6bb5\u5730\u5740\u5c31\u662f ds\n; \u5176\u5b8c\u6574\u5f62\u5f0f\u4e3a\nmov ah, byte ptr ds:[abc]\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#31-\u6bb5\u7f3a\u7701\u7684\u4e09\u4e2a\u539f\u5219","title":"3.1 \u6bb5\u7f3a\u7701\u7684\u4e09\u4e2a\u539f\u5219","text":"<ol> <li>\u76f4\u63a5\u5bfb\u5740\uff0c\u5219\u7f3a\u7701 <code>ds</code></li> <li>\u95f4\u63a5\u5bfb\u5740\uff0c\u542b\u6709 <code>bp</code> \u65f6\uff0c\u7f3a\u7701 <code>ss</code></li> <li>\u95f4\u63a5\u5bfb\u5740\uff0c\u4e0d\u542b <code>bp</code> \u65f6\uff0c\u7f3a\u7701 <code>ds</code></li> </ol>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#32-\u6bb5\u8986\u76d6","title":"3.2 \u6bb5\u8986\u76d6","text":"<ul> <li>\u5f3a\u5236\u4f7f\u7528\u7c7b\u4f3c <code>cs:[1000h]</code> \u7684\u5f62\u5f0f\u8986\u76d6\u6bb5\u7f3a\u7701\u7684\u9ed8\u8ba4\u503c</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#33-assume-\u7684\u4f5c\u7528","title":"3.3 Assume \u7684\u4f5c\u7528","text":"<p>\u5e2e\u52a9\u7f16\u8bd1\u5668\u5efa\u7acb\u5bc4\u5b58\u5668\u4e0e\u6bb5\u7684\u5173\u8054\uff0c\u5f53\u6e90\u7a0b\u5e8f\u5f15\u7528\u4e86\u67d0\u4e2a\u6bb5\u5185\u7684\u53d8\u91cf\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5c06\u6bb5\u5730\u5740\u66ff\u6362\u4e3a\u5173\u8054\u7684\u6bb5\u5730\u5740\u5bc4\u5b58\u5668</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#4-1m-\u5185\u5b58\u7a7a\u95f4\u7684\u5212\u5206","title":"4 1M \u5185\u5b58\u7a7a\u95f4\u7684\u5212\u5206","text":"\u5730\u5740\u8303\u56f4 \u7528\u9014 \u5927\u5c0f <code>[0000:0000, 9000:0000]</code> \u64cd\u4f5c\u7cfb\u7edf\u548c\u7528\u6237\u7a0b\u5e8f 640K <code>[A000:0000, A000:FFFF]</code> \u6620\u5c04\u663e\u5361\u5185\u5b58 \u56fe\u5f62\u6a21\u5f0f 64K <code>[B000:0000, B000:7FFF]</code> \u6620\u5c04\u663e\u5361\u5185\u5b58 32K <code>[B800:0000, B800:7FFF]</code> \u6620\u5c04\u663e\u5361\u5185\u5b58 \u6587\u672c\u6a21\u5f0f 32K <code>[C000:0000, F000:FFFF]</code> \u6620\u5c04 ROM 320K"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#5-\u5bc4\u5b58\u5668\u603b\u7ed3","title":"5 \u5bc4\u5b58\u5668\u603b\u7ed3","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#51-16-\u4f4d-cpu-\u4e2d\u5171\u6709-14-\u4e2a\u5bc4\u5b58\u5668","title":"5.1 16 \u4f4d CPU \u4e2d\u5171\u6709 14 \u4e2a\u5bc4\u5b58\u5668","text":"<ul> <li><code>ax, bx, cx, dx, sp, bp, si, di</code><ul> <li><code>bx, bp, si, di</code> \u7528\u6765\u8868\u793a\u504f\u79fb\u5730\u5740\uff0c\u53ef\u4ee5\u653e\u5728 <code>[]</code> \u5185</li> <li><code>ax, bx, cx, dx</code> \u79f0\u4e3a\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u5e38\u7528\u4e8e\u7b97\u6570\u3001\u903b\u8f91\u8fd0\u7b97</li> </ul> </li> <li><code>cs, ds, es, ss</code> \u7528\u6765\u8868\u793a\u6bb5\u5730\u5740<ul> <li><code>cs:ip</code> \u6307\u5411\u5f53\u524d\u5c06\u8981\u6267\u884c\u7684\u6307\u4ee4\uff0c<code>ip</code> \u662f\u6307\u4ee4\u6307\u9488\uff08instruction pointer\uff09\uff0c<code>cs</code> \u662f\u4ee3\u7801\u6bb5\u5bc4\u5b58\u5668</li> <li><code>ss:sp</code> \u6307\u5411\u5806\u6808\u9876\u7aef\uff0c\u5176\u4e2d <code>sp</code> \u662f\u5806\u6808\u6307\u9488\uff08stack pointer\uff09\uff0c<code>ss</code> \u662f\u5806\u6808\u6bb5\u5bc4\u5b58\u5668</li> <li><code>es</code> \u9644\u52a0\u6bb5\u5bc4\u5b58\u5668\uff0c\u548c <code>ds</code> \u4e00\u6837\uff0c\u53ef\u4ee5\u8868\u793a\u4e00\u4e2a\u6570\u636e\u6bb5\u7684\u5730\u5740</li> </ul> </li> <li><code>ip, fl</code></li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#52-\u5806\u6808\u7684\u7b80\u5355\u64cd\u4f5c","title":"5.2 \u5806\u6808\u7684\u7b80\u5355\u64cd\u4f5c","text":"push and pop<pre><code>stk segment stack\ndb 100h dup(0)\nstk ends\n\ncode segment\nassume cs:code\nmain:\n    mov ax, 1234h\n    mov bx, 5678h\n    push ax\n    push bx\n    mov ax, 0\n    mov bx, 0\n    pop bx\n    pop ax\ncode ends\nend main\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#6-\u8fdc\u6307\u9488\u8fd1\u6307\u9488","title":"6 \u8fdc\u6307\u9488\u3001\u8fd1\u6307\u9488","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#61-lea-\u52a0\u8f7d\u504f\u79fb\u5730\u5740","title":"6.1 <code>lea</code> \u52a0\u8f7d\u504f\u79fb\u5730\u5740","text":"<p>\u52a0\u8f7d\u504f\u79fb\u5730\u5740\uff0cload effective address</p> <pre><code>lea dx, ds:[bx]  ; \u76f8\u5f53\u4e8e mov dx, bx\uff0c\u5e76\u6ca1\u6709\u7b80\u5316\nlea dx, ds:[bx+si+3]  ; \u76f8\u5f53\u4e8e\u4e00\u6b21\u8ba1\u7b97\u4e86\u4e24\u4e2a\u52a0\u6cd5\uff0c\u5176\u4ed6\u6307\u4ee4\u65e0\u6cd5\u505a\u5230\uff0c\u6709\u7528\nlea eax, [eax+eax*4]  ; EAX=EAX*5\uff0c\u7528 lea \u4f5c\u4e58\u6cd5\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#62-\u8fdc\u6307\u9488-far-ptr","title":"6.2 \u8fdc\u6307\u9488 (Far Ptr)","text":"<ul> <li>16 \u4f4d\u6c47\u7f16\uff0c<code>xxxx:xxxx</code>\uff0c\u5373 16 \u4f4d\u6bb5\u5730\u5740 + 16 \u4f4d\u504f\u79fb\u5730\u5740\uff0c<code>dword ptr</code></li> <li>32 \u4f4d\u6c47\u7f16\uff0c<code>xxxx:xxxxx</code>\uff0c\u5373 16 \u4f4d\u6bb5\u5730\u5740 + 32 \u4f4d\u504f\u79fb\u5730\u5740\uff0c<code>fword ptr</code></li> </ul> <pre><code>; &amp;p = 1234:5678\n1000:0000  78\n1000:0001  56\n1000:0002  34\n1000:0003  12\n</code></pre> <p>Attention</p> <ul> <li>\u5c0f\u7aef\u89c4\u5219</li> <li>\u8fdc\u6307\u9488\u548c int \u65e0\u6cd5\u533a\u5206\uff0c\u9700\u8981\u7531\u4f7f\u7528\u8005\u5b9a\u4e49</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#63-les-lds-\u52a0\u8f7d\u6bb5\u5730\u5740","title":"6.3 <code>les</code>, <code>lds</code> \u52a0\u8f7d\u6bb5\u5730\u5740","text":"<p>\u5c06\u6bb5\u5730\u5740\u52a0\u8f7d\u5230 <code>es</code> \u6216\u8005 <code>ds</code> \u4e2d\uff0c\u5c06\u504f\u79fb\u5730\u5740\u52a0\u8f7d\u5230\u6307\u5b9a\u5bc4\u5b58\u5668\u4e2d\uff0cLoad segment address to Extra Segment reg / Data Segment reg</p> \u53d6\u7528\u8fdc\u6307\u9488<pre><code>; bx=0, ds=1000h\nmov di: ds:[bx]  ; di=5678h\nmov es, ds:[bx+2]  ; es=1234h\n\nlds bx, ds:[bx]  ; ds=1234h, bx=5678h\n\nles di, ds:[bx]  ; es=[31:16]=1234h, di=[15:0]=5678h\n</code></pre> <p>Warning</p> <p>\u5e38\u7528 <code>les</code>\uff0c\u56e0\u4e3a <code>ds</code> \u5bc4\u5b58\u5668\u4ee3\u8868\u4ee3\u7801\u6bb5\uff0c\u4e00\u822c\u4e0d\u4fee\u6539</p> Example: \u4f7f\u7528\u53d8\u91cf\u4fdd\u5b58\u8fdc\u6307\u9488<pre><code>data segment\nvideo_addr dw 0000h, 0B800h, 160, 0B800h  ; \u4e0a\u8ff0\u5b9a\u4e49\u4e5f\u53ef\u4ee5\u5199\u6210:\n                                          ; video_addr dd 0B8000000h, 0B80000A0h\n                                          ; video_addr db 00, 00, 00, 0B8h, 0A0h, 00, 00, 00, 0B8h\ndata ends\n\ncode segment\nassume cs:code, ds:data\nmain:\n   mov ax, data\n   mov ds, ax\n   mov bx, 0\n   mov cx, 2\nnext:\n   les di, dword ptr video_addr[bx]  ; es:di=B800:[0000]\n   mov word ptr es:[di], 1741h\n   add bx, 4\n   sub cx, 1\n   jnz next\n   mov ah, 1\n   int 21h\n   mov ah, 4Ch\n   int 21h\ncode ends\nend main\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#7-\u8865\u514532-\u4f4d\u5bfb\u5740\u65b9\u5f0f","title":"7 \u8865\u5145\uff1a32 \u4f4d\u5bfb\u5740\u65b9\u5f0f","text":"<ul> <li><code>[\u5bc4\u5b58\u5668 + \u5bc4\u5b58\u5668*n + \u5e38\u6570]</code><ul> <li><code>n=1,2,4,8</code></li> <li>\u5bc4\u5b58\u5668\u4e3a <code>eax, ebx, ecx, edx, esi, edi, esp, ebp</code> \u4ece\u4e2d\u4efb\u9009\u4e00\u4e2a\uff0c\u53ef\u4ee5\u540c\u540d \u9650\u5236\u66f4\u5c11\u4e86</li> </ul> </li> </ul> \u904d\u5386\u6570\u7ec4<pre><code>; long int a[3]={10,20,30};\n; assume ds=seg a, ebx=offset a, esi=0\n\nmov ecx, 3\nagain:\n    mov eax, ds:[ebx+esi*4]\n    add [sum], eax\n    add esi, 1\n    sub ecx, 1\n    jnz again\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#8-\u663e\u5361\u5730\u5740\u6620\u5c04","title":"8 \u663e\u5361\u5730\u5740\u6620\u5c04","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#81-\u6587\u672c\u6a21\u5f0f\u64cd\u4f5c\u6587\u672c\u5185\u5bb9\u548c\u989c\u8272","title":"8.1 \u6587\u672c\u6a21\u5f0f\uff1a\u64cd\u4f5c\u6587\u672c\u5185\u5bb9\u548c\u989c\u8272","text":"<ul> <li>\u5c4f\u5e55\u7684\u5de6\u4e0a\u89d2\u4e3a\u539f\u70b9\uff0c\u6a2a\u5411\u4e3a \\(x\\) \u8f74\uff0c\u7eb5\u5411\u4e3a \\(y\\) \u8f74\uff0c\u53f3\u4e0b\u89d2\u7684\u5750\u6807\u4e3a \\((79, 24)\\)\uff0c\u4e5f\u5c31\u662f 80 \u683c\u5bbd\uff0c25 \u683c\u9ad8</li> <li><code>offset = (y * 80 + x) * 2</code></li> <li>\u53ef\u4ee5\u6307\u5b9a\u5b57\u7b26\u8f93\u51fa\u7684\u4f4d\u7f6e\u548c\u989c\u8272</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#811-\u6570\u636e\u683c\u5f0f","title":"8.1.1 \u6570\u636e\u683c\u5f0f","text":"<ul> <li>\u6bcf 2 byte \u51b3\u5b9a\u5c4f\u5e55\u4e0a\u7684\u4e00\u4e2a\u5b57\u7b26\uff0c\u5206\u522b\u5bf9\u5e94 <code>[ASCII Code, Color]</code>\uff0c\u989c\u8272\u7684\u9ad8 4 \u4f4d\u662f\u80cc\u666f\u8272\uff0c\u4f4e 4 \u4f4d\u662f\u524d\u666f\u8272</li> <li>\u989c\u8272\u5bf9\u7167\u8868\u5982\u4e0b\uff0c\u7ea2\u7eff\u84dd\u53ef\u4ee5\u5408\u6210\u5176\u4ed6\u989c\u8272</li> </ul> \u80cc\u666f \u524d\u666f \u4f4d 7 6 5 4 3 2 1 0 \u5bf9\u5e94\u989c\u8272\u5143\u7d20 \u95ea\u70c1 \u7ea2 \u7eff \u84dd \u9ad8\u4eae \u7ea2 \u7eff \u84dd"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#812-example","title":"8.1.2 Example","text":"\u5de6\u4e0a\u89d2\u663e\u793a\u7ea2\u8272\u7684 A \u548c\u7eff\u8272\u7684 B<pre><code>mov ax, 0B800h\nmov ds, ax\nmov byte ptr ds:[0], 'A'\nmov byte ptr ds:[1], 74h\nmov byte ptr ds:[2], 'B'\nmov byte ptr ds:[3], 72h\n</code></pre> <p>Hint</p> <ul> <li><code>0B800h</code> \u53ef\u4ee5\u8ba4\u4e3a\u662f\u663e\u5361\u7684\u5730\u5740\uff0c\u5f80\u663e\u5361\u5199\u5165\u5b57\u7b26\u5c31\u53ef\u4ee5\u663e\u793a\u5728\u5c4f\u5e55\u4e0a</li> <li><code>74h</code> \u4e2d\uff0c<code>7</code> \u8868\u793a\u80cc\u666f\u8272\u662f\u767d\u8272\uff0c<code>4</code> \u7528\u6765\u8868\u793a\u524d\u666f\u8272\u662f\u7ea2\u8272</li> </ul> \u6587\u672c\u6a21\u5f0f\u4e0b\u7528 * \u663e\u793a\u6c49\u5b57\u201c\u6211\u201d<pre><code>data segment\nhz db 04h,80h,0Eh,0A0h,78h,90h,08h,90h\n   db 08h,84h,0FFh,0FEh,08h,80h,08h,90h\n   db 0Ah,90h,0Ch,60h,18h,40h,68h,0A0h\n   db 09h,20h,0Ah,14h,28h,14h,10h,0Ch\ndata ends\ncode segment\nassume cs:code, ds:data\nmain:\n   mov ax, data\n   mov ds, ax\n   mov ax, 0B800h\n   mov es, ax\n   mov ax, 0003h\n   int 10h\n   mov di, 0\n   mov dx, 16\n   mov si, 0\nnext_row:\n   mov ah, hz[si]\n   mov al, hz[si+1]\n   add si, 2\n   mov cx, 16\ncheck_next_dot:\n   shl ax, 1\n   jnc no_dot\nis_dot:\n   mov byte ptr es:[di], '*'\n   mov byte ptr es:[di+1], 0Ch\nno_dot:\n   add di, 2\n   sub cx, 1\n   jnz check_next_dot\n   sub di, 32\n   add di, 160\n   sub dx, 1\n   jnz next_row\n   mov ah, 1\n   int 21h\n   mov ah, 4Ch\n   int 21h\ncode ends\nend main\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#82-\u56fe\u5f62\u6a21\u5f0f\u64cd\u4f5c\u50cf\u7d20\u70b9","title":"8.2 \u56fe\u5f62\u6a21\u5f0f\uff1a\u64cd\u4f5c\u50cf\u7d20\u70b9","text":"<p>\u8c03\u7528 <code>int 10h</code> \u4e2d\u65ad\uff0c\u5c06\u663e\u5361\u5207\u6362\u5230 320*200\uff0c256 \u8272\u7684\u56fe\u5f62\u6a21\u5f0f</p> <pre><code>mov ah, 0  ; \u8c03\u7528 int 10h \u7684 0 \u53f7\u5b50\u529f\u80fd\nmov al, 13h  ; \u4ee3\u8868\u56fe\u5f62\u6a21\u5f0f\u7f16\u53f7\nint 10h\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#821-\u5750\u6807\u8f6c\u6362","title":"8.2.1 \u5750\u6807\u8f6c\u6362","text":"<p><code>(x, y) -&gt; y*320+x</code></p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#822-\u6570\u636e\u683c\u5f0f","title":"8.2.2 \u6570\u636e\u683c\u5f0f","text":"<ul> <li>\u663e\u5361\u5185\u5b58\u4e2d\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u70b9</li> </ul> 0 1 2 3 4 5 6 7 \u9ed1 \u84dd \u7eff \u9752 \u7ea2 \u6d0b\u7ea2 \u68d5 \u767d 8 9 A B C D E F \u7070 \u4eae\u84dd \u4eae\u7eff \u4eae\u9752 \u4eae\u7ea2 \u7d2b \u9ec4 \u4eae\u767d <p>```asm title=\"\u8fdb\u5165\u56fe\u5f62\u6a21\u5f0f\u5e76\u663e\u793a\u7ea2\u8272\u65b9\u5757\" hl= code segment assume cs:code; cs\u4e0d\u9700\u8981\u8d4b\u503c\u4f1a\u81ea\u52a8\u7b49\u4e8ecode main:    jmp begin i  dw 0 begin:    mov ax, 0013h    int 10h    mov ax, 0A000h    mov es, ax    ;(320/2, 200/2)    mov di, (100-20)320+(160-20); (160-20,100-20)    ;mov cx, 41; rows=41    mov i, 41 next_row:    ;push cx    push di    mov al, 4; color=red    mov cx, 41; dots=41 next_dot:    mov es:[di], al    add di, 1    sub cx, 1    jnz next_dot    pop di; \u5de6\u4e0a\u89d2(x,y)\u5bf9\u5e94\u7684\u5730\u5740    ;pop cx; cx=41    add di, 320; \u4e0b\u4e00\u884c\u7684\u8d77\u70b9\u7684\u5730\u5740    ;sub cx, 1; \u884c\u6570-1    sub i, 1    jnz next_row    mov ah,0    int 16h;bios\u952e\u76d8\u8f93\u5165,\u7c7b\u4f3cint 21h\u768401h\u529f\u80fd    mov ax, 0003h    int 10h; \u5207\u6362\u52308025\u6587\u672c\u6a21\u5f0f    mov ah, 4Ch    int 21h code ends end main <pre><code>```asm title=\"\u7528\u56fe\u50cf\u6a21\u5f0f\u663e\u793a\u6c49\u5b57\"\u6211\"\"\ndata segment\nhz db 04h,80h,0Eh,0A0h,78h,90h,08h,90h\n   db 08h,84h,0FFh,0FEh,08h,80h,08h,90h\n   db 0Ah,90h,0Ch,60h,18h,40h,68h,0A0h\n   db 09h,20h,0Ah,14h,28h,14h,10h,0Ch\ndata ends\ncode segment\nassume cs:code, ds:data\nmain:\n   mov ax, data\n   mov ds, ax\n   mov ax, 0A000h\n   mov es, ax\n   mov di, 0\n   mov ax, 0013h\n   int 10h\n   mov dx, 16\n   mov si, 0\nnext_row:\n   mov ah, hz[si]\n   mov al, hz[si+1]\n   add si, 2\n   mov cx, 16\ncheck_next_dot:\n   shl ax, 1; \u521a\u79fb\u51fa\u7684\u4f4d\u4f1a\u81ea\u52a8\u8fdb\u5165CF(\u8fdb\u4f4d\u6807\u5fd7)\n   jnc no_dot; \u82e5\u6ca1\u6709\u8fdb\u4f4d\u5373CF=0\u5219\u8df3\u5230no_dot\nis_dot:\n   mov byte ptr es:[di], 0Ch\nno_dot:\n   add di, 1\n   sub cx, 1\n   jnz check_next_dot\n   sub di, 16\n   add di, 320\n   sub dx, 1\n   jnz next_row\n   mov ah, 1\n   int 21h\n   mov ax, 0003h\n   int 10h\n   mov ah, 4Ch\n   int 21h\ncode ends\nend main\n</code></pre></p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#9-\u7aef\u53e3","title":"9 \u7aef\u53e3","text":"<p>Note</p> <p>CPU &lt;-&gt; \u7aef\u53e3 (port) &lt;-&gt; I/O \u8bbe\u5907</p> <p>\u7aef\u53e3\u7f16\u53f7\u5c31\u662f\u7aef\u53e3\u5730\u5740\uff0c<code>[0000h, 0FFFFh]</code> \u4e00\u5171\u6709 65536 \u4e2a\u7aef\u53e3</p> port operation<pre><code>in al, 60h  ; \u4ece 60h \u7aef\u53e3\u83b7\u5f97\u8f93\u5165\nout 60h, al  ; \u5c06 al \u7684\u503c\u8f93\u51fa\u5230 60h \u7aef\u53e3 \n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#91-example-\u8bfb\u53d6\u952e\u76d8\u8f93\u5165\u503c","title":"9.1 Example: \u8bfb\u53d6\u952e\u76d8\u8f93\u5165\u503c","text":"<p><code>60h</code> \u7aef\u53e3\u662f\u952e\u76d8\u7684\u8f93\u5165\u7aef\u53e3\uff0c\u901a\u8fc7\u4fee\u6539\u786c\u4ef6\u65ad\u70b9 <code>int 9h</code> \u51fd\u6570\u6307\u9488\uff0c\u8ba9\u7a0b\u5e8f\u5728\u952e\u76d8\u6572\u51fb\u65f6\u8bfb\u53d6\u952e\u76d8\u8f93\u5165\u503c</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#911-code-fold","title":"9.1.1 Code %% fold %%","text":"key<pre><code>;---------------------------------------\n;PrtSc/SysRq: E0 2A E0 37 E0 B7 E0 AA  ;\n;Pause/Break: E1 1D 45 E1 9D C5        ;\n;---------------------------------------\ndata segment\nold_9h dw 0, 0\nstop   db 0\nkey    db 0; key=31h\nphead  dw 0\nkey_extend  db 'KeyExtend=', 0\nkey_up      db 'KeyUp=', 0\nkey_down    db 'KeyDown=', 0\nkey_code    db '00h ', 0\nhex_tbl     db '0123456789ABCDEF'\ncr          db  0Dh, 0Ah, 0\ndata ends\n\ncode segment\nassume cs:code, ds:data\nmain:\n   mov ax, data\n   mov ds, ax\n   xor ax, ax\n   mov es, ax\n   mov bx, 9*4\n   push es:[bx]\n   pop old_9h[0]\n   push es:[bx+2]\n   pop old_9h[2]    ; \u4fdd\u5b58int 9h\u7684\u4e2d\u65ad\u5411\u91cf\n   cli\n   mov word ptr es:[bx], offset int_9h\n   mov es:[bx+2], cs; \u4fee\u6539int 9h\u7684\u4e2d\u65ad\u5411\u91cf\n   sti\nagain:\n   cmp [stop], 1\n   jne again        ; \u4e3b\u7a0b\u5e8f\u5728\u6b64\u5faa\u73af\u7b49\u5f85\n   push old_9h[0]\n   pop es:[bx]\n   push old_9h[2]\n   pop es:[bx+2]    ; \u6062\u590dint 9h\u7684\u4e2d\u65ad\u5411\u91cf\n   mov ah, 4Ch\n   int 21h\n\nint_9h:\n   push ax\n   push bx\n   push cx\n   push ds\n   mov ax, data\n   mov ds, ax       ; \u8fd9\u91cc\u8bbe\u7f6eDS\u662f\u56e0\u4e3a\u88ab\u4e2d\u65ad\u7684\u4e0d\u4e00\u5b9a\u662f\u6211\u4eec\u81ea\u5df1\u7684\u7a0b\u5e8f\n   in al, 60h       ; AL=key code\n   mov [key], al\n   cmp al, 0E0h\n   je  extend\n   cmp al, 0E1h\n   jne up_or_down\nextend:\n   mov [phead], offset key_extend\n   call output\n   jmp check_esc\nup_or_down:\n   test al, 80h     ; \u6700\u9ad8\u4f4d==1\u65f6\u8868\u793akey up\n   jz down\nup:\n   mov [phead], offset key_up\n   call output\n   mov bx, offset cr\n   call display     ; \u8f93\u51fa\u56de\u8f66\u6362\u884c\n   jmp check_esc\ndown:\n   mov [phead], offset key_down\n   call output\ncheck_esc:   \n   cmp [key], 81h   ; Esc\u952e\u7684key up\u7801\n   jne int_9h_iret\n   mov [stop], 1\nint_9h_iret:\n   mov al, 20h      ; \u53d1EOI(End Of Interrupt)\u4fe1\u53f7\u7ed9\u4e2d\u65ad\u63a7\u5236\u5668\uff0c\n   out 20h, al      ; \u8868\u793a\u6211\u4eec\u5df2\u5904\u7406\u5f53\u524d\u7684\u786c\u4ef6\u4e2d\u65ad(\u786c\u4ef6\u4e2d\u65ad\u5904\u7406\u6700\u540e\u90fd\u8981\u8fd92\u6761\u6307\u4ee4)\u3002\n                    ; \u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u8df3\u8f6c\u5230\u7684old_9h\uff0c\u6240\u4ee5\u5fc5\u987b\u81ea\u5df1\u53d1EOI\u4fe1\u53f7\u3002\n                    ; \u5982\u679c\u8df3\u5230old_9h\u7684\u8bdd\uff0c\u5219old_9h\u91cc\u9762\u6709\u8fd92\u6761\u6307\u4ee4\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8981\u5199\u3002\n   pop ds\n   pop cx\n   pop bx\n   pop ax\n   iret             ; \u4e2d\u65ad\u8fd4\u56de\u6307\u4ee4\u3002\u4ece\u5806\u6808\u4e2d\u9010\u4e2a\u5f39\u51faIP\u3001CS\u3001FL\u3002\n\noutput:\n   push ax\n   push bx\n   push cx\n   mov bx, offset hex_tbl\n   mov cl, 4\n   push ax   ; \u8bbeAL=31h=0011 0001\n   shr al, cl; AL=03h\n   xlat      ; AL = DS:[BX+AL] = '3'\n   mov key_code[0], al\n   pop ax\n   and al, 0Fh; AL=01h\n   xlat       ; AL='1'\n   mov key_code[1], al\n   mov bx, [phead]\n   call display     ; \u8f93\u51fa\u63d0\u793a\u4fe1\u606f\n   mov bx, offset key_code\n   call display     ; \u8f93\u51fa\u952e\u7801\n   pop cx\n   pop bx\n   pop ax\n   ret\n\ndisplay:\n   push ax\n   push bx\n   push si\n   mov si, bx\n   mov bx, 0007h    ; BL = color\n   cld\ndisplay_next:\n   mov ah, 0Eh      ; AH=0Eh, BIOS int 10h\u7684\u5b50\u529f\u80fd\uff0c\u5177\u4f53\u8bf7\u67e5\u4e2d\u65ad\u5927\u5168\n   lodsb\n   or al, al\n   jz display_done\n   int 10h          ; \u6bcf\u6b21\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\n   jmp display_next\ndisplay_done:\n   pop si\n   pop bx\n   pop ax\n   ret\ncode ends\nend main\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#912-explain","title":"9.1.2 Explain","text":"<pre><code>KeyDown=1Eh KeyUp=9Eh  # \u6309\u4e0b\u548c\u62ac\u8d77 A\nKeyDown=1Dh KeyUp=9Dh  # left ctrl\nKeyExtend=E0h KeyDown=1Dh KeyExtend=E0h KeyUp=9Dh  # right ctrl\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#92-example-\u8bfb\u53d6-cmos-\u65f6\u949f","title":"9.2 Example: \u8bfb\u53d6 CMOS \u65f6\u949f","text":"<p><code>70h, 71h</code> \u4e0e CMOS \u65f6\u949f\u6709\u5173\uff0c\u5176\u4e2d\u7684 4, 2, 0 \u5206\u522b\u8868\u793a\u5f53\u524d\u7684\u65f6\u5206\u79d2\uff0c\u4f7f\u7528 BCD \u7801</p> <pre><code>mov al, 2\nout 70h, al  ; 70h \u7aef\u53e3\u6536\u5230 2 \u53f7\u5730\u5740\u4f1a\u5c06\u5730\u5740 2 \u548c 71h \u7aef\u53e3\u8fde\u901a\nmov al, 10h\nout 71h, al  ; \u5c06 10h \u5199\u5165 2 \u53f7\u5730\u5740\nin al, 71h  ; \u8bfb\u53d6 2 \u53f7\u5730\u5740\u7684\u503c\n</code></pre> BCD to char<pre><code>convert:\n    mov ah, al  ; assume ah=al=19h\n    and ah, 0Fh  ; ah=9h\n    shr al, 4  ; al=1h\n    add ah, '0'  ; ah='9'\n    add al, '0'  ; al='1'\n    ret\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#921-code-fold","title":"9.2.1 Code %% fold %%","text":"readtime<pre><code>data segment\ncurrent_time db \"00:00:00\", 0Dh, 0Ah, '$'\ndata ends\ncode segment\nassume cs:code, ds:data\nmain:\n   mov ax, data\n   mov ds, ax\n   mov al, 4\n   out 70h,al; index hour\n   in al,71h ; AL=hour(e.g. 19h means 19 pm.)\n   call convert; AL='1', AH='9'\n   ;mov word ptr current_time[0],ax\n   mov current_time[0], al\n   mov current_time[1], ah\n   mov al,2\n   out 70h,al; index minute\n   in  al,71h; AL=minute\n   call convert\n   mov word ptr current_time[3],ax;\n   ;mov current_time[3], al\n   ;mov current_time[4], ah\n   mov al,0  ; index second\n   out 70h,al\n   in  al,71h; AL=second\n   call convert\n   mov word ptr current_time[6],ax\n   mov ah, 9\n   mov dx, offset current_time\n   int 21h\n   mov ah, 4Ch\n   int 21h\n;---------Convert----------------\n;Input:AL=hour or minute or second\n;      format:e.g. hour   15h means 3 pm.\n;                  second 56h means 56s\n;Output: (e.g. AL=56h)\n;     AL='5'\n;     AH='6'\nconvert:\n    push cx\n    mov ah,al ; e.g. assume AL=56h\n    and ah,0Fh; AH=06h\n    mov cl,4\n    shr al,cl ; AL=05h\n    ; shr:shift right\u53f3\u79fb\n    add ah, '0'; AH='6'\n    add al, '0'; AL='5'\n    pop  cx\n    ret\n;---------End of Convert---------\ncode ends\nend main\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2003%20%E5%86%85%E5%AD%98%E4%B8%8E%E5%AF%BB%E5%9D%80.html#93-\u51e0\u79cd\u8bfb\u53d6\u952e\u76d8\u65b9\u5f0f\u603b\u7ed3","title":"9.3 \u51e0\u79cd\u8bfb\u53d6\u952e\u76d8\u65b9\u5f0f\u603b\u7ed3","text":"<ul> <li><code>mov ah, 1; int 21h</code> \u76f8\u5f53\u4e8e <code>al = getchar()</code>\uff0c\u4e0d\u80fd\u8bfb\u53d6\u65b9\u5411\u952e dos \u4e2d\u65ad\u8c03\u7528</li> <li><code>mov ah, 0; int 16h</code> \u76f8\u5f53\u4e8e <code>ax = \u952e\u76d8\u7f16\u7801</code>\uff0c\u53ef\u4ee5\u8bfb\u53d6\u65b9\u5411\u952e\u3001PgUp \u7b49\uff0c\u4f46\u4e0d\u80fd\u8bfb\u53d6\u5355\u72ec\u7684\u65b9\u5411\u952e bios (basic I/O system) \u8c03\u7528<ul> <li>bios \u5c01\u88c5\u5728 ROM \u82af\u7247\u4e2d\uff0c\u53ef\u4ee5\u5728\u6ca1\u6709\u64cd\u4f5c\u7cfb\u7edf\u7684\u60c5\u51b5\u4e0b\u8c03\u7528</li> </ul> </li> <li><code>in al, 60h</code> \u53ef\u4ee5\u8bfb\u53d6\u6240\u6709\u6309\u952e\u7684\u7f16\u7801 \u7aef\u53e3\u64cd\u4f5c</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html","title":"04 \u5bc4\u5b58\u5668","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#1-\u603b\u7ed3","title":"1 \u603b\u7ed3","text":"<p>8086 \u4e00\u5171\u6709 14 \u4e2a\u5bc4\u5b58\u5668\uff0c\u5206\u522b\u4e3a\uff1a</p> <ul> <li>\u901a\u7528\u5bc4\u5b58\u5668\uff1a<code>AX, BX, CX, DX</code></li> <li>\u6bb5\u5730\u5740\u5bc4\u5b58\u5668\uff1a<code>CS, DS, ES, SS</code></li> <li>\u504f\u79fb\u5730\u5740\u5bc4\u5b58\u5668\uff1a<code>IP, SP, BP, SI, DI</code></li> <li>\u6807\u5fd7\u5bc4\u5b58\u5668\uff1a<code>FL</code></li> </ul> <p>80386 \u4e2d\u9664\u4e86\u6bb5\u5730\u5740\u5bc4\u5b58\u5668\u4ecd\u7136\u662f 16 \u4f4d\uff0c\u5176\u4f59\u5747\u6269\u5c55\u5230 32 \u4f4d</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#2-\u901a\u7528\u5bc4\u5b58\u5668","title":"2 \u901a\u7528\u5bc4\u5b58\u5668","text":"<p>\u7528\u4e8e\u7b97\u6570\u3001\u903b\u8f91\u3001\u79fb\u4f4d\u8fd0\u7b97</p> \u540d\u79f0 <code>AX</code> <code>BX</code> <code>CX</code> <code>DX</code> \u52a9\u8bb0 accumulator base count data"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#3-\u6bb5\u5730\u5740\u5bc4\u5b58\u5668","title":"3 \u6bb5\u5730\u5740\u5bc4\u5b58\u5668","text":"\u540d\u79f0 <code>CS</code> <code>DS</code> <code>ES</code> <code>SS</code> \u52a9\u8bb0 code segment data segment extra segment stack segment \u662f\u5426\u80fd\u7528 <code>mov</code> \u8d4b\u503c \u4e0d\u80fd\u53ea\u80fd\u7528 <code>jmp, call, ret, int</code> \u7b49\u95f4\u63a5\u6539\u53d8 \u53ef\u4ee5\u4f46\u662f <code>SRC</code> \u5fc5\u987b\u662f\u5bc4\u5b58\u5668\u6216\u53d8\u91cf\u800c\u4e0d\u662f <code>imm</code> \u53ef\u4ee5\u4f46\u662f <code>SRC</code> \u5fc5\u987b\u662f\u5bc4\u5b58\u5668\u6216\u53d8\u91cf\u800c\u4e0d\u662f <code>imm</code> \u53ef\u4ee5\u4f46\u662f <code>SRC</code> \u5fc5\u987b\u662f\u5bc4\u5b58\u5668\u6216\u53d8\u91cf\u800c\u4e0d\u662f <code>imm</code> \u53ef\u7528\u7684\u6e90\u5bc4\u5b58\u5668 \u65e0 <code>AX, BX, CX, DX, SP, BP, SI, DI</code> <code>AX, BX, CX, DX, SP, BP, SI, DI</code> <code>AX, BX, CX, DX, SP, BP, SI, DI</code> \u95f4\u63a5\u8d4b\u503c<pre><code>; method 1\nmov ax, 1000h\nmov ds, ax\n\n; method 2\nmov word ptr ds:[bx], 1000h\nmov es, ds:[bx]\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#31-\u5bc4\u5b58\u5668\u5185\u5bb9\u521d\u59cb\u5316","title":"3.1 \u5bc4\u5b58\u5668\u5185\u5bb9\u521d\u59cb\u5316","text":"<p>ASMF 05 \u6bb5\u548c\u5806\u6808#3 \u5bc4\u5b58\u5668\u521d\u59cb\u5316\u8d4b\u503c\u548c <code>psp</code> \u6bb5 \u6709\u66f4\u591a\u5173\u4e8e <code>psp</code> \u6bb5\u7684\u5185\u5bb9</p> <code>CS:IP</code> <code>SS:SP</code> <code>DS</code> <code>ES</code> <code>\u4ee3\u7801\u6bb5\u6bb5\u5730\u5740:\u9996\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740</code> <code>\u5806\u6808\u6bb5\u6bb5\u5730\u5740:\u5806\u6808\u6bb5\u957f\u5ea6</code> <code>psp \u6bb5\u6bb5\u5730\u5740</code> <code>psp \u6bb5\u6bb5\u5730\u5740</code> <p>\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u9700\u8981\u5148\u5bf9 <code>DS</code> \u8fdb\u884c\u8d4b\u503c\uff0c\u624d\u80fd\u5f15\u7528 data segment \u4e2d\u7684\u53d8\u91cf</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#4-\u504f\u79fb\u5730\u5740\u5bc4\u5b58\u5668","title":"4 \u504f\u79fb\u5730\u5740\u5bc4\u5b58\u5668","text":"\u540d\u79f0 <code>IP</code> <code>SP</code> <code>BP</code> <code>SI</code> <code>DI</code> (<code>BX</code>) \u52a9\u8bb0 instruction pointer stack pointer base \u7528\u4e8e <code>[]</code> \u95f4\u63a5\u5bfb\u5740\uff1f \u4e0d\u80fd \u4e0d\u80fd \u80fd\u9690\u542b <code>SS</code> \u6bb5 \u80fd\u9690\u542b <code>DS</code> \u6bb5 \u80fd\u9690\u542b <code>DS</code> \u6bb5 \u80fd\u9690\u542b <code>DS</code> \u6bb5 \u53c2\u4e0e\u7b97\u6570\u3001\u903b\u8f91\u3001\u79fb\u4f4d\u8fd0\u7b97\uff1f \u4e0d\u80fd \u4e0d\u80fd \u80fd \u80fd \u80fd \u80fd"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#5-fl-\u6807\u5fd7\u5bc4\u5b58\u5668","title":"5 FL \u6807\u5fd7\u5bc4\u5b58\u5668","text":"<ul> <li>FL \u662f 16 \u4f4d\u7684\uff0c\u4f46\u662f\u5176\u4e2d\u53ea\u6709\u6bcf\u4e00\u4f4d\u7684\u5e03\u5c14\u503c\u6709\u6548\uff0c\u6574\u4f53\u6ca1\u6709\u610f\u4e49</li> </ul> 15 14 13 12 x x x x 0 0 0 0 11 10 9 8 OF DF IF TF \u6ea2\u51fa\u6807\u5fd7 \u590d\u5236\u65b9\u5411\u6807\u5fd7 \u4e2d\u65ad\u6807\u5fd7 \u9677\u9631\u6807\u5fd7 7 6 5 4 SF ZF x AF \u7b26\u53f7\u6807\u5fd7 \u96f6\u6807\u5fd7 0 \u8f85\u52a9\u8fdb\u4f4d\u6807\u5fd7 3 2 1 0 x PF x CF 0 \u5947\u5076\u6821\u9a8c\u6807\u5fd7 1 \u8fdb\u4f4d\u6807\u5fd7"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#51-carry-flag-\u8fdb\u4f4d\u6807\u5fd7","title":"5.1 Carry Flag \u8fdb\u4f4d\u6807\u5fd7","text":"<ul> <li>CF Carry Flag \u8fdb\u4f4d\u6807\u5fd7<ul> <li>\u52a0\u6cd5\u64cd\u4f5c\u7684\u8fdb\u4f4d\u3001\u5de6\u79fb\u51fa\u6765\u7684 1\uff0c\u90fd\u4f1a\u5b58\u5230 CF</li> <li><code>jc</code> \u5982\u679c\u6709\u8fdb\u4f4d\u5219\u8df3\u8f6c</li> </ul> </li> </ul> <pre><code>code segment\nassume cs:codee\nmain:\n    mov ah, 0FFh\n    add ah, 1  ; ah = 00h, c = 1\n    add ah, 2  ; ah = 02h, c = 0\n    sub ah, 3\n    mov ah, 4Ch\n    int 21h\ncode ends\nend main\n</code></pre> <ul> <li>\u79fb\u4f4d\u64cd\u4f5c\u6700\u540e\u79fb\u51fa\u53bb\u7684\u4e00\u4f4d\uff0c\u4e5f\u4f1a\u4fdd\u5b58\u5230 CF \u4e2d</li> </ul> <pre><code>mov ah, 10110110B\nshr ah, 2  ; CF = 1\nmov ah, 10110110B\nshl ah, 1  ; CF = 1\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#511-\u4e0e-cf-\u76f8\u5173\u7684\u6307\u4ee4","title":"5.1.1 \u4e0e CF \u76f8\u5173\u7684\u6307\u4ee4","text":"<code>jc</code> <code>jnc</code> <code>adc</code> <code>clc</code> <code>stc</code> \u6709\u8fdb\u4f4d\u8df3\u8f6c \u65e0\u8fdb\u4f4d\u8df3\u8f6c \u5e26\u8fdb\u4f4d\u52a0\u6cd5 <code>CF = 0</code> <code>CF = 1</code> <p><code>adc ax, bx  ; ax = ax + bx + CF</code></p> 16 \u4f4d\u8f6c\u4e8c\u8fdb\u5236\u8f93\u51fa<pre><code>code segment\nassume cs:code\nmain:\n    mov ax, 1234h\n    mov cx, 16  ; \u4e00\u822c\u7528 cx \u6765\u8ba1\u6570\nnext:\n    shl ax, 1\n    jc is_1\nis_0:\n    mov dl, '0'\n    jmp output\nis_1:\n    mov dl, '1'\noutput:\n    mov ah, 2\n    int 21h\n    sub cx, 1\n    jnz next\n    mov ah, 4Ch\n    int 21h\ncode ends\nend main\n</code></pre> 16 \u4f4d\u8f6c\u4e8c\u8fdb\u5236\u8f93\u51fa (advanced)<pre><code>code segment\nassume cs:code\nmain:\n    mov bx, 1234h\n    mov cx, 16  ; \u4e00\u822c\u7528 cx \u6765\u8ba1\u6570\nnext:\n    shl bx, 1\n    mov dl, '0'\n    adc dl, 0\noutput:\n    mov ah, 2\n    int 1h\n    sub cx, 1\n    jnz next\n    mov ah, 4Ch\n    int 21h\ncode ends\nend main\n</code></pre> <p>Attention</p> <p><code>mov</code> \u4e0d\u4f1a\u6539\u53d8\u4efb\u4f55\u6807\u5fd7\uff0c<code>push</code> <code>pop</code> \u4e5f\u4e0d\u4f1a\u6539\u53d8\u4efb\u4f55\u6807\u5fd7</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#52-zero-flag-\u96f6\u6807\u5fd7","title":"5.2 Zero Flag \u96f6\u6807\u5fd7","text":"<pre><code>sub ax, ax  ; AX=0, ZF=1, CF=0\nadd ax, 1  ; AX=1, ZF=0, CF=0\nadd ax, 0FFFh  ; AX=0, ZF=1, CF=1\njz is_zero  ; \u4f1a\u53d1\u751f\u8df3\u8f6c\ncmp ax, ax\nje next  ; \u4e5f\u4f1a\u53d1\u751f\u8df3\u8f6c\n</code></pre> <ul> <li><code>jz/je</code> \u5728 <code>ZF=1</code> \u7684\u65f6\u5019\u8df3\u8f6c\uff0c\u672c\u8d28\u4e0a\u662f\u76f8\u540c\u7684</li> <li><code>jnz/jne</code> \u662f\u76f8\u53cd\u7684\u6307\u4ee4</li> <li>\u4f7f\u7528 <code>jz</code> \u8fd8\u662f <code>je</code>\uff0c\u9700\u8981\u5728\u5bf9\u5e94\u7684\u8bed\u5883\u4e0b\u9009\u62e9</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#53-sign-flag-\u7b26\u53f7\u6807\u5fd7","title":"5.3 Sign Flag \u7b26\u53f7\u6807\u5fd7","text":"<ul> <li>\u6bcf\u6b21\u90fd\u4fdd\u5b58\u8fd0\u7b97\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d</li> </ul> <pre><code>mov ah, 7Fh\nadd ah, 1  ; AH=80h=1000 0000B, SF=1\nsub ah, 1  ; AH=7FH=0111 1111B, SF=0\n</code></pre> <ul> <li><code>js</code> \u7b26\u53f7\u8df3\u8f6c\uff0c<code>SF==1</code> \u5219\u8df3\u8f6c</li> <li><code>jns</code> <code>SF==0</code> \u5219\u8df3\u8f6c</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#54-overflow-flag-\u6ea2\u51fa\u6807\u5fd7","title":"5.4 Overflow Flag \u6ea2\u51fa\u6807\u5fd7","text":"<p>\u6709\u7b26\u53f7\u6570\u52a0\u6cd5\u6ea2\u51fa CF \u76f8\u5f53\u4e8e\u65e0\u7b26\u53f7\u6570\u52a0\u6cd5\u6ea2\u51fa\u6807\u5fd7</p> <pre><code>mov ah, 7Fh\nadd ah, 1  ; AH=80h, OF=1, ZF=0, CF=0, SF=1\n           ; 127 + 1 = -128, overflow\nmov ah, 80h\nadd ah, 0FFh  ; AH=7Fh, OF=1, ZF=0, CF=1, SF=0\n              ; -128 + -1 = 127\uff0coverflow\nadd ah, 80h\nsub ah, 1  ; AH=7Fh, OF=1, ZF=0, CF=0, SF=0\n           ; -128 - 1 = 127, overflow\n</code></pre> <ul> <li>\u6b63\u8d1f\u76f8\u52a0\u6c38\u4e0d\u6ea2\u51fa</li> <li><code>jo</code> \u6ea2\u51fa\u8df3\u8f6c\uff0c<code>jno</code> \u4e0d\u6ea2\u51fa\u8df3\u8f6c</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#55-parity-flag-\u5947\u5076\u6821\u9a8c\u4f4d","title":"5.5 Parity Flag \u5947\u5076\u6821\u9a8c\u4f4d","text":"<pre><code>mov ah, 4\nadd ah, 1  ; AH=00000101B, PF=1 \u8868\u793a\u6709\u5076\u6570\u4e2a 1\uff0c\u4f46\u53ea\u7edf\u8ba1\u7ed3\u679c\u7684\u4f4e\u516b\u4f4d\nmov ax, 0101h\nadd ax, 0004h  ; AX=0105h=0000 0001 0000 0101B\n               ; PF \u53ea\u7edf\u8ba1\u7b2c\u516b\u4f4d\u7684 1 \u7684\u4e2a\u6570\n</code></pre> <ul> <li><code>PF=1</code> \u8868\u793a\u7ed3\u679c\u7684\u4f4e\u516b\u4f4d\u4e2d\u6709\u5076\u6570\u4e2a 1</li> <li><code>jp/jpe</code> \u5982\u679c parity even \u8df3\u8f6c</li> <li><code>jnp/jpo</code> \u5982\u679c pairty odd \u8df3\u8f6c</li> </ul> <p>Note</p> <p>\u6807\u51c6 ASCII \u7801\u53ea\u6709 7 \u4f4d\uff0c\u591a\u51fa\u7684\u7b2c\u516b\u4f4d\u5c31\u662f\u5947\u5076\u6821\u9a8c\u4f4d\uff1b\u800c\u6269\u5c55 ASCII \u7801\u6ca1\u6709</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#56-auxiliary-flag-\u8f85\u52a9\u8fdb\u4f4d\u6807\u5fd7","title":"5.6 Auxiliary Flag \u8f85\u52a9\u8fdb\u4f4d\u6807\u5fd7","text":"<p>\u7b2c\u4e09\u4f4d\u5411\u7b2c\u56db\u4f4d\u4ea7\u751f\u8fdb\u4f4d\u6216\u501f\u4f4d</p> <pre><code>mov ah, 1Fh  ; 0001 1111\nadd ah, 01h  ; 0000 0001\n             ; ah=20h, AF=1\n</code></pre> <p>AF \u548c BCD \u7801\u6709\u5173\uff0c\u7528 16 \u8fdb\u5236\u8868\u793a\u5341\u8fdb\u5236\u6570</p> <pre><code>mov al, 29h  ; \u5206\u949f 29h=0010 1001\nadd al, 08h  ; \u8fc7\u4e86 8 \u5206\u949f\n             ; 31h\n</code></pre> <ul> <li><code>daa</code> \u6307\u4ee4 (decimal adjust for addition) \u52a0\u6cd5\u7684\u5341\u8fdb\u5236\u8c03\u6574<ul> <li><code>if AF == 1 or (AL &amp; 0Fh) &gt; 9: AL += 6</code></li> </ul> </li> </ul> <pre><code>mov al, 29h\nadd al, 02h  ; AL=2Hb, AF=0\ndaa  ; AL=AL+6=31h\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#57-direction-flag","title":"5.7 Direction Flag","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#571-\u5b57\u7b26\u4e32\u590d\u5236\u7684\u65b9\u5411","title":"5.7.1 \u5b57\u7b26\u4e32\u590d\u5236\u7684\u65b9\u5411","text":"1000 1001 1002 1003 1004 1005 1006 A B C D E 1000 1001 1002 1003 1004 1005 1006 A B A B C D E <p>\u8981\u5c06\u5b57\u7b26\u4e32\u590d\u5236\u5230\u4ee5 1002 \u4f4d\u9996\u5730\u5740\u7684\u4f4d\u7f6e\uff0c\u6b64\u65f6 \u6e90\u9996\u5730\u5740&lt;\u76ee\u6807\u9996\u5730\u5740\uff0c\u590d\u5236\u5e94\u8be5\u6309\u53cd\u65b9\u5411\uff0c\u5730\u5740\u4ece\u5927\u5230\u5c0f\u3002\u5426\u5219\u4f1a\u5bfc\u81f4\u8fd8\u6ca1\u904d\u5386\u5230\u7684\u539f\u59cb\u6570\u636e\u88ab\u8986\u5199\uff1a</p> 1000 1001 1002 1003 1004 1005 1006 A B A B A B A <ul> <li>\u6e90\u9996\u5730\u5740&lt;\u76ee\u6807\u9996\u5730\u5740\uff1a\u53cd\u65b9\u5411</li> <li>\u6e90\u9996\u5730\u5740&gt;\u76ee\u6807\u9996\u5730\u5740\uff1a\u6b63\u65b9\u5411</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#572-example-\u6b63\u65b9\u5411\u590d\u5236","title":"5.7.2 Example: \u6b63\u65b9\u5411\u590d\u5236","text":"1000 1001 1002 1003 1004 1005 1006 A B C D E <pre><code>; ds, si \u8868\u793a\u6e90\u6307\u9488\uff0c\u6784\u6210 ds:si\n; es, di \u8868\u793a\u76ee\u6807\u6307\u9488\uff0c\u6784\u6210 es:di\n; cx \u4f5c\u4e3a\u5b57\u8282\u8ba1\u6570\u5668\n\n; ds=2000h, si=1002h, es=2000h, di=1000h, cx=5\ncld  ; DF=0, clear direction flag, \u8868\u793a\u6b63\u65b9\u5411\nrep movsb  ; \u628a ds:si \u6307\u5411\u7684\n</code></pre> <p>\u7ec6\u8282</p> <ul> <li>\u9996\u5148\u5c06 A \u590d\u5236\u5230 1000</li> <li>\u7136\u540e <code>cx--</code>, <code>si++</code>, <code>di++</code></li> <li>\u7ee7\u7eed\u8fdb\u884c\uff0c\u76f4\u5230 <code>cx == 0</code> rev movsb in C<pre><code>while (cx != 0) {\n    byte ptr es:[di] = byte ptr ds:[si];\n    cx--;\n    if (df == 0) {\n        di++;\n        si++;\n    } else {\n        di--;\n        si--;\n    }\n} \n</code></pre></li> </ul> <p>Note</p> <ul> <li><code>si</code> source index \u6e90\u504f\u79fb\u5730\u5740</li> <li><code>di</code> destination index \u76ee\u6807\u504f\u79fb\u5730\u5740</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#573-example-\u53cd\u65b9\u5411\u590d\u5236","title":"5.7.3 Example: \u53cd\u65b9\u5411\u590d\u5236","text":"1000 1001 1002 1003 1004 1005 1006 A B C D E <pre><code>; ds=2000h, si=1004h, es=2000h, di=1006h, cx=5\nstd  ; DF=1, set direction flag, \u8868\u793a\u53cd\u65b9\u5411\nrep movsb\n</code></pre> <p>\u7ec6\u8282</p> <ul> <li>\u8fd9\u91cc\u7684 <code>si, di</code> \u90fd\u662f\u4ece\u672b\u5c3e\u5f00\u59cb\u7684\uff0c\u53ea\u8981\u53cd\u65b9\u5411\u590d\u5236\uff0c\u4e00\u5f00\u59cb\u7684\u4f20\u5165\u503c\u90fd\u5e94\u8be5\u662f\u672b\u5730\u5740</li> <li>\u6bcf\u6b21\u90fd\u662f <code>si--, di--, cx--</code>\uff0c\u5176\u4ed6\u540c\u7406</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#58-interrupt-flag-\u4e2d\u65ad\u6807\u5fd7","title":"5.8 Interrupt Flag \u4e2d\u65ad\u6807\u5fd7","text":"<ul> <li><code>IF=1</code> \u5141\u8bb8\u786c\u4ef6\u4e2d\u65ad\uff0c<code>cli</code> \u7f6e\u96f6</li> <li><code>IF=0</code> \u7981\u6b62\u786c\u4ef6\u4e2d\u65ad\uff0c<code>sti</code> \u7f6e\u4e00</li> </ul> <p>Note</p> <ul> <li><code>mov ah, 1; int 21h</code> \u662f\u51fd\u6570\u8c03\u7528\uff0c\u8f6f\u4ef6\u4e2d\u65ad\uff0c\u4ee3\u7801\u5728\u663e\u5f0f\u5730\u7528 <code>int n</code> \u7684\u5f62\u5f0f\u8c03\u7528\u51fd\u6570\u96c6\u7684\u51fd\u6570</li> </ul> <p>\u4ec0\u4e48\u662f\u786c\u4ef6\u4e2d\u65ad</p> example: add 1 to 100<pre><code>mov ax, 0  ; \u6b64\u65f6\u7528\u6237\u6572\u952e\u76d8\n;; int 9h ;; CPU \u63d2\u5165\u5e76\u6267\u884c\u952e\u76d8\u4e2d\u65ad\nmov bx, 1\nnext:\nadd ax, bx  ; \u53d1\u751f\u65f6\u949f\u4e2d\u65ad\n;; int 8h ;; CPU \u63d2\u5165\u5e76\u6267\u884c\u65f6\u949f\u4e2d\u65ad\nadd bx, 1\ncmp bx, 100\njle next\n</code></pre> <ul> <li>\u952e\u76d8\u4e2d\u65ad\uff1a\u5047\u5982\u7528\u6237\u5728\u6267\u884c\u4e0a\u9762\u7a0b\u5e8f\u65f6\u6572\u952e\u76d8\uff0c\u6b64\u65f6 CPU \u5fc5\u987b\u6682\u505c\u5e76\u5904\u7406\u672c\u6b21\u952e\u76d8\u8f93\u5165\uff1a\u5c06\u952e\u76d8\u8f93\u5165\u7f16\u7801\u4fdd\u5b58\u5230\u7cfb\u7edf\u4e2d\u7684\u952e\u76d8\u7f13\u51b2\u533a\u961f\u5217\uff0c<code>int 9h</code> \u4f1a\u8fd4\u56de\u539f\u6765\u7684\u6307\u4ee4</li> <li>\u65f6\u949f\u4e2d\u65ad\uff1a\u7ea6\u6bcf 55 ms \u4f1a\u5728\u4e0b\u4e00\u6761\u6307\u4ee4\u524d\u63d2\u5165\u4e00\u4e2a\u65f6\u949f\u4e2d\u65ad <code>int 8h</code>\uff0c\u5c06\u64cd\u4f5c\u7cfb\u7edf\u5185\u90e8\u7684\u4e00\u4e2a\u8ba1\u6570\u5668 +1</li> </ul> <ul> <li>\u8f6f\u4ef6\u4e2d\u65ad\u662f\u663e\u5f0f\u7684 explicit</li> <li>\u786c\u4ef6\u4e2d\u65ad\u662f\u9690\u5f0f\u7684 implicit</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#581-example-\u4fee\u6539\u51fd\u6570\u6307\u9488\u65f6\u7684\u4fdd\u62a4\u64cd\u4f5c","title":"5.8.1 example: \u4fee\u6539\u51fd\u6570\u6307\u9488\u65f6\u7684\u4fdd\u62a4\u64cd\u4f5c","text":"IF example<pre><code>cli\nmov word ptr es:[bx], offset int_9h\nmov es:[bx+2], cs\nsti\n</code></pre> <p>\u8fd9\u6837\u80fd\u4fdd\u8bc1 <code>int 9h</code> \u4e0d\u4f1a\u5728\u5730\u5740\u6539\u4e86\u4e00\u534a\u7684\u65f6\u5019\u88ab\u786c\u4ef6\u8c03\u7528\uff0c\u4ece\u800c\u4ea7\u751f\u9519\u8bef</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#59-trap-flag-\u9677\u9631\u6807\u5fd7","title":"5.9 Trap Flag \u9677\u9631\u6807\u5fd7","text":"<ul> <li><code>TF=1</code> \u65f6\uff0cCPU \u8fdb\u5165\u5355\u6b65\u6a21\u5f0f (single-step mode)\uff0c\u6bcf\u6267\u884c\u4e00\u6761\u6307\u4ee4\uff0c\u5c31\u4f1a\u63d2\u5165\u4e00\u4e2a <code>int 1h</code> \u4e2d\u65ad</li> <li><code>int 1h</code> \u662f\u672a\u5b9a\u4e49\u7684\uff0c\u8c03\u8bd5\u5668\u4f1a\u81ea\u5b9a\u4e49\u4e00\u4e2a <code>int 1h</code> \u7684\u4e2d\u65ad\u51fd\u6570<ul> <li>\u8c03\u8bd5\u5668 jmp \u5230\u88ab\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u53d6\u5f97\u63a7\u5236\u6743</li> <li>\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u8fdb\u884c\u4e00\u6b65\uff0c\u8c03\u7528 <code>int 1h</code> \u8fd4\u56de\u8c03\u8bd5\u5668</li> <li>\u8c03\u8bd5\u5668\u53ef\u4ee5\u89c2\u5bdf\u88ab\u8c03\u8bd5\u7a0b\u5e8f\u7684\u5bc4\u5b58\u5668\u72b6\u6001\u548c\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u547d\u4ee4\u7b49</li> </ul> </li> </ul> set TF<pre><code>pushf  ; \u76f8\u5f53\u4e8e push FL\uff0c\u4f46\u662f FL \u662f\u4e0d\u80fd\u76f4\u63a5\u5f15\u7528\u7684\npop ax  ; AX=FL\nor ax, 100h  ; \u7b2c 8 \u4e3a\u7f6e 1\uff0c0000 0001 0000 0000\npush ax\npopf  ; pop FL \u5373 FL=AX, TF=1\n</code></pre> clear TF<pre><code>pushf  ; \u76f8\u5f53\u4e8e push FL\uff0c\u4f46\u662f FL \u662f\u4e0d\u80fd\u76f4\u63a5\u5f15\u7528\u7684\npop ax  ; AX=FL\nand ax, 0FEFFh  ; \u7b2c 8 \u4e3a\u7f6e 0\uff0c1111 1110 1111 1111\n                ; \u6216\u8005\u4f7f\u7528 and ax, not 100h\npush ax\npopf  ; pop FL \u5373 FL=AX, TF=0\n</code></pre> <p>\u5982\u679c\u6211\u8981\u505a\u4e00\u4e2a\u8c03\u8bd5\u5668\uff1f</p> <ul> <li>\u7f16\u5199\u65ad\u70b9 <code>int 1h</code> \u7a0b\u5e8f</li> <li>\u7ffb\u8bd1\u6307\u4ee4\uff0c\u65ad\u884c\u5e76\u663e\u793a\u6c47\u7f16\u4ee3\u7801</li> <li>\u7b49\u5f85\u7528\u6237\u8f93\u5165</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#591-int-1h-\u51fd\u6570\u7684\u5b9a\u4e49","title":"5.9.1 <code>int 1h</code> \u51fd\u6570\u7684\u5b9a\u4e49","text":"<pre><code>0:4 78h\n0:5 56h\n0:6 34h\n0:7 12h\n</code></pre> <p>\u90a3\u4e48 <code>int 1h</code> \u7684\u51fd\u6570\u9996\u5730\u5740\uff08\u51fd\u6570\u6307\u9488\uff09\u4e3a <code>1234h:5678h</code></p> <p>Tip</p> <p><code>int n</code> \u51fd\u6570\u7684\u6307\u9488\uff0c\u4e00\u5b9a\u4fdd\u5b58\u5728 <code>0:n*4</code> \u5904\uff0c\u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e2a\u51fd\u6570\u6307\u9488\u90fd\u9700\u8981\u5360\u7528 4 \u4e2a\u5b57\u8282 <code>int 21h</code> \u4e00\u5b9a\u5b58\u653e\u5728 <code>0:84h</code> \u5904</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#592-example-antidbg","title":"5.9.2 example: antidbg","text":"antidbg<pre><code>code segment\nassume cs:code, ds:code\nmain:\n    jmp begin\nold1h dw 0, 0\nprev_addr dw offset first, code  ; \u524d\u6761\u6307\u4ee4\u7684\u5730\u5740\nbegin: \n    push cs\n    pop ds  ; DS=CS\n    xor ax, ax  ; AX=0\n    mov es, ax  ; ES=AX=0\n    mov bx, 4  ; bx=4\n    push es:[bx]  ; 0:[4]\n    pop old1h[0]  ;  \u4fdd\u5b58\u504f\u79fb\u5730\u5740\n    push es:[bx+2]  ; 0:[6]\n    pop old1h[2]  ; \u4fdd\u5b58\u6bb5\u5730\u5740\n    mov word ptr es:[bx], offset int1h  ; \u5b58\u5165\u65b0\u7684\u504f\u79fb\u5730\u5740\n    mov word ptr es:[bx+2], cs  ; \u5b58\u5165\u65b0\u7684\u6bb5\u5730\u5740\uff0c\u6216\u8005\u4f7f\u7528 seg int1h\n    pushf  ; save old FL\n    pushf\n    pop ax\n    or ax, 100h  ; 1 0000 0000 set TF\n    push ax\n    popf; TF=1\nfirst:\n    nop  ; \u5f53\u67d0\u6761\u6307\u4ee4\u6267\u884c\u524dTF==1,\u5219\u8be5\u6761\u6307\u4ee4\u6267\u884c\u540e\u4f1a\n        ; \u81ea\u52a8\u6267\u884cint 01h\u5355\u6b65\u4e2d\u65ad\nsingle_step_begin:\n...\n</code></pre> <p>\u5728\u6267\u884c\u7684\u65f6\u5019\u66ff\u6362\u4e86 <code>int 1h</code> \u7684\u51fd\u6570\u6307\u9488\uff0c\u6240\u4ee5\u66f4\u6539\u4e86\u5355\u6b65\u6a21\u5f0f\u4e0b\u8c03\u7528\u7684\u7a0b\u5e8f</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2004%20%E5%AF%84%E5%AD%98%E5%99%A8.html#510-pushf-popf","title":"5.10 <code>pushf, popf</code>","text":"<p>\u4e13\u95e8\u6267\u884c <code>FL</code> \u7684\u5806\u6808\u64cd\u4f5c</p> \u8bbe\u7f6e TF=1\uff0c\u8fdb\u5165\u5355\u6b65\u8fd0\u884c\u6a21\u5f0f<pre><code>pushf\npop ax\nor ax, 100h  ; 0000 0001 0000 0000\n; and ax, not 100h  ; \u6e05\u96f6\npush ax\npopf\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2005%20%E6%AE%B5%E5%92%8C%E5%A0%86%E6%A0%88.html","title":"05 \u6bb5\u548c\u5806\u6808","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2005%20%E6%AE%B5%E5%92%8C%E5%A0%86%E6%A0%88.html#1-\u5806\u6808\u6bb5\u7684\u5b9a\u4e49","title":"1 \u5806\u6808\u6bb5\u7684\u5b9a\u4e49","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2005%20%E6%AE%B5%E5%92%8C%E5%A0%86%E6%A0%88.html#\u5b9a\u4e49\u548c\u7b80\u5355\u64cd\u4f5c","title":"\u5b9a\u4e49\u548c\u7b80\u5355\u64cd\u4f5c","text":"example: \u6bb5\u7684\u5b9a\u4e49<pre><code>data segment\n\u00a0 \u00a0 abc dw 1234h, 5678h\ndata ends\n\ncode segment\nassume cs:code, ds:data, ss:stk\nmain:\n    mov ax, data\n    mov ds, ax\n    push abc[0]  ; \u76f8\u5f53\u4e8e push 1234h\n    pop abc[2]\n    mov ah, 4C\n    int 21h\ncode ends\nend main\n\nstk segment stack  ; \u5b9a\u4e49\u5806\u6808\u6bb5\uff0c\u5806\u6808\u6bb5\u53ea\u80fd\u5b9a\u4e49\u4e00\u4e2a\n    a db 200h dup('S')  ; \u6216\u5199\u6210 dw 100h dup(0)\uff0c\u8fd9\u91cc\u8bbe\u7f6e\u6210 S \u65b9\u4fbf\u8c03\u8bd5\u7684\u65f6\u5019\u53d1\u73b0\nstk ends  ; \u7a0b\u5e8f\u521a\u5f00\u59cb\u8fd0\u884c\u65f6\uff0css = stk\uff0csp = 200h\n</code></pre> <p>Attention</p> <p>\u5806\u6808\u6bb5\u7684\u5b9a\u4e49\u5fc5\u987b\u8981\u52a0 <code>stack</code> \u4fee\u9970</p> <p><code>push</code> \u64cd\u4f5c\u62c6\u89e3</p> <ul> <li>\u5047\u8bbe\u6b64\u65f6 <code>ss = 1000h</code>\uff0c<code>sp=200h</code></li> <li>\u6267\u884c <code>sp = sp - 2</code>\uff0c\u4e8e\u662f <code>ss:sp = 1000:1FE</code></li> <li>\u6267\u884c <code>word ptr ss:[sp] = abc[0]</code> \u6ce8\u610f\u5c0f\u7aef\u89c4\u5219\uff1a <pre><code>1000:1FE 34h  &lt;ss:sp\n1000:1FE 12h\n1000:200 ???\n</code></pre></li> </ul> <p><code>pop</code> \u64cd\u4f5c\u62c6\u89e3</p> <ul> <li>\u5047\u8bbe\u521a\u521a\u6267\u884c\u4e86\u4e0a\u9762\u7684 <code>push</code></li> <li>\u6267\u884c <code>abc[2] = word ptr ss:[sp]</code></li> <li>\u6267\u884c <code>sp = sp + 2</code></li> </ul> <p>\u8865\u5145</p> <ul> <li>\u65e0\u6cd5\u8fdb\u884c 8 \u4f4d\u7684\u6808\u64cd\u4f5c</li> <li>\u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u5806\u6808\u6bb5\uff1f<ul> <li><code>ds = es = 568D, ss = 569D, sp = 0000</code>\uff0c\u4e5f\u5c31\u662f <code>ss</code> \u7684\u521d\u59cb\u503c\u7b49\u4e8e\u9996\u6bb5\u7684\u6bb5\u5730\u5740</li> <li>\u5982\u679c\u6709 <code>push</code>\uff0c\u90a3\u4e48 <code>sp = sp - 2 = FFFE</code></li> </ul> </li> <li>\u5806\u6808\u53ea\u80fd\u6709\u4e00\u4e2a</li> </ul> dword \u7684\u5806\u6808\u64cd\u4f5c <pre><code>; ss = 1000h, sp = 200h\nmov eax, 12345678h\npush eax\npop ebx\n</code></pre> <p>\u64cd\u4f5c\u62c6\u89e3</p> <ul> <li><code>sp = sp - 4</code></li> <li> <p><code>dword ptr ss:[sp] = 12345678h</code> <pre><code>1000:1FC  78h  &lt;ss:sp\n1000:1FD  56h\n1000:1FE  34h\n1000:1FF  12h\n</code></pre></p> </li> <li> <p><code>ebx = dword ptr ss:[sp]</code></p> </li> <li><code>sp = sp + 4</code></li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2005%20%E6%AE%B5%E5%92%8C%E5%A0%86%E6%A0%88.html#11-\u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u5806\u6808\u6bb5","title":"1.1 \u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u5806\u6808\u6bb5\uff1f","text":"\u8fdb\u884c\u4e00\u6b21 push \u540e<pre><code>569D:0000           data; len=10h\n569D:0010=569E:0000 code; len=20h\n569D:0030=56A0:0000 \u540e\u7eed\u6bb5\n......\n569D:FFFE           &lt;ss:sp\n569D:FFFF\n......\n......\n9000:FFFF\n\nA000:0000 ~ A000:FFFF  ; \u663e\u5361\u5730\u5740\nB000:0000 ~ B000:7FFF  ; \u663e\u5361\u5730\u5740\nB800:0000 ~ B800:7FFF  ; \u663e\u5361\u5730\u5740\nC000:0000 ~ F000:FFFF  ; ROM \u6620\u5c04\uff0c\u53ea\u8bfb\n</code></pre> <p>Important</p> <ul> <li>DOS \u7cfb\u7edf\u662f\u5355\u4efb\u52a1\u7684\uff0c\u6240\u4ee5\u4e00\u6574\u5757\u5185\u5b58\u90fd\u662f\u53ef\u7528\u7684\uff0c\u4e00\u76f4\u5230 <code>9000:FFFF</code> \u90fd\u662f\u8fd9\u4e2a\u7a0b\u5e8f\u53ef\u7528\u7684\u7a7a\u95f4</li> <li><code>A000:0000</code> \u524d\u9762\u4e00\u5171\u6709 640k\uff0c\u5176\u4e2d\u5305\u542b\u4e86 DOS \u7cfb\u7edf\u7684\u5185\u5b58</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2005%20%E6%AE%B5%E5%92%8C%E5%A0%86%E6%A0%88.html#12-\u8c03\u8bd5\u4e2d\u7684\u8868\u73b0","title":"1.2 \u8c03\u8bd5\u4e2d\u7684\u8868\u73b0","text":"<pre><code>569D:0000  34 12 00 00 00 00 00 00  &lt;data segment: 569D:0000 - 569D:0004\n569D:0008  00 00 00 00 00 00 00 00\n568D:0010  B8 9D 56 8E D8 FF 36 00  &lt;code segment: 569E:0000 -\n</code></pre> <p>\u6b64\u65f6 <code>ds 569D</code> <code>cs 569E</code></p> <p><code>data</code> \u6bb5\u4e4b\u540e\u5e94\u8be5\u5c31\u662f <code>code</code> \u6bb5\u5417\uff1f</p> <p>\u5e76\u4e0d\u662f\uff0c\u53ea\u6709\u80fd\u591f\u6574\u9664 <code>0010</code> \u7684\u5730\u5740\u624d\u80fd\u4f5c\u4e3a\u6bb5\u5730\u5740\u7684\u5f00\u59cb\uff0c\u6240\u4ee5 <code>569D:0010</code> \u624d\u662f <code>code</code> \u6bb5\u7684\u5f00\u59cb</p> <p>\u6bb5\u9996\u5730\u5740\u7684\u504f\u79fb\u5730\u5740\u4e0d\u5e94\u8be5\u662f <code>0000</code> \u5417</p> <p>\u53ef\u4ee5\u8ba9 <code>code</code> \u7684\u9996\u5730\u5740\u504f\u79fb\u4e3a <code>0000</code>\uff0c\u53ea\u9700\u8981\u8ba9 <code>cs = 569E</code> \u5373\u53ef\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e <code>569D:0010 == 569E:0000</code>\uff0c\u8fd9\u6837</p> <pre><code>ds:0220 53 53 53 53 53 53 53 53\nds:0228 53 53 53 53 53 53 00 00\nds:0230 ?? ?? ?? ?? ?? ?? ?? ??  &lt;ss:sp = 56A0:01FE = 569D:0230 = ds:0230 = 56A0:\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u6700\u540e\u9762\u6709\u7684 <code>S</code> \u88ab\u8986\u76d6\u6389\u4e86\uff1f</p> <ul> <li>td \u5728\u8f7d\u5165\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u8c03\u7528\u7a0b\u5e8f\u91cc\u5b9a\u4e49\u7684\u5806\u6808\uff0c\u4e8e\u662f\u5c31\u4f1a\u51fa\u73b0\u4e71\u7801</li> <li>\u4e0d\u4ec5\u5982\u6b64\uff0c\u5982\u679c\u7a0b\u5e8f\u91cc\u4f7f\u7528\u4e86 <code>pop</code>\uff0c\u8c03\u8bd5\u7684\u65f6\u5019\u4e5f\u53ef\u80fd\u88ab\u540c\u65f6\u4f7f\u7528\u540c\u4e00\u4e2a\u5806\u6808\u7684\u5176\u4ed6\u7a0b\u5e8f\u8986\u76d6\u6389\uff08\u5982\u8c03\u8bd5\u5668\uff09\uff0c\u5806\u6808\u6307\u9488\u524d\u65b9\u7684\u5185\u5bb9\u662f\u4e0d\u5b89\u5168\u7684</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2005%20%E6%AE%B5%E5%92%8C%E5%A0%86%E6%A0%88.html#3-\u5bc4\u5b58\u5668\u521d\u59cb\u5316\u8d4b\u503c\u548c-psp-\u6bb5","title":"3 \u5bc4\u5b58\u5668\u521d\u59cb\u5316\u8d4b\u503c\u548c <code>psp</code> \u6bb5","text":"<p>\u7a0b\u5e8f\u8f7d\u5165\u5185\u5b58\u65f6\uff0cdos \u4f1a\u5bf9\u4ee5\u4e0b\u5bc4\u5b58\u5668\u505a\u521d\u59cb\u5316\u8d4b\u503c</p> <code>ss:sp</code> <code>cs:ip</code> <code>ds</code> <code>es</code> <code>ss=stk, sp=\u5806\u6808\u957f\u5ea6</code> <code>cs=code, ip=offset main</code> <code>ds=psp</code> <code>es=psp</code> <p><code>psp</code></p> <ul> <li><code>psp</code> \u662f\u7a0b\u5e8f\u6bb5\u524d\u7f00 (program segment prefix)\uff0c\u662f\u4e00\u5757\u957f\u5ea6\u4e3a 100h \u5b57\u8282\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u4e00\u5b9a\u4f4d\u4e8e\u7a0b\u5e8f\u9996\u6bb5\u7684\u524d\u65b9</li> <li><code>psp</code> \u662f\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u4e49\u7684\uff0c\u50a8\u5b58\u4e86\u4e0e\u5f53\u524d\u8fdb\u7a0b\u76f8\u5173\u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u4f8b\u5982\u547d\u4ee4\u884c\u53c2\u6570</li> <li>\u521d\u59cb\u90fd\u8d4b\u503c\u6210 <code>psp</code>\uff0c\u65b9\u4fbf\u8bbf\u95ee <code>psp</code> \u91cc\u7684\u5185\u5bb9 <pre><code>mov ax, data\nmov ds, ax\n; \u7b49\u4ef7\u4e8e\nmov ax, ds\nadd ax, 10h\nmov ax, ds \n</code></pre></li> </ul> <p>Attention</p> <p><code>ip</code> \u7684\u4f4d\u7f6e\u7531 <code>end X</code> \u51b3\u5b9a\uff0c<code>ip</code> \u4f1a\u88ab\u8d4b\u503c\u6210 <code>X</code> label \u7684\u4f4d\u79fb\u5730\u5740\uff0c\u6240\u4ee5 <code>end</code> \u5176\u5b9e\u6307\u5b9a\u4e86\u7a0b\u5e8f\u7684\u5165\u53e3</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2005%20%E6%AE%B5%E5%92%8C%E5%A0%86%E6%A0%88.html#31-\u8c03\u8bd5\u89c2\u5bdf-psp-\u6bb5\u8868\u73b0","title":"3.1 \u8c03\u8bd5\u89c2\u5bdf <code>psp</code> \u6bb5\u8868\u73b0","text":"<pre><code>ss 123 456 abc\n</code></pre> <pre><code>ds:0080  0C 20 31 32 33 20 34 35  ? 123 45\nds:0088  36 20 61 62 63 0D 00 FF  6 abc???\n</code></pre> <p>\u5185\u5bb9\u89e3\u8bfb</p> <p>\u7b2c\u4e00\u4e2a <code>0C</code> \u662f\u53c2\u6570\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f 12\uff0c\u5373\u5b57\u7b26\u4e32 <code>\" 123 456 abc\"</code></p> <pre><code>data1 segment\nabc db 1, 2, 3\nend data1\n\ndata2 segment\nxyz db 4, 5, 6\nend data2\n\ncode segment\nassume cs:code, ds:data1, es:data2\nmain:\n    mov ax, data1\n    mov ds, ax\n    mov ax, data2\n    mov ds, ax\n    mov ah, abc[1]  ; -&gt; mov ah, ds:[abc+1] -&gt; mov ah, ds:[0+1] -&gt; mov ah, ds:[1]\n    mov xyz[1], ah\n</code></pre> <p><code>ds = 569D, es = 569E, cs = 569F</code></p> memory<pre><code>ds:0000  01 02 03 00 00 00 00 00  &lt;ds\nds:0008  00 00 00 00 00 00 00 00\nds:0010  04 05 06 00 00 00 00 00  &lt;es\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2005%20%E6%AE%B5%E5%92%8C%E5%A0%86%E6%A0%88.html#4-\u6bb5\u5730\u5740\u7684\u9690\u542b\u548c\u8986\u76d6","title":"4 \u6bb5\u5730\u5740\u7684\u9690\u542b\u548c\u8986\u76d6","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2005%20%E6%AE%B5%E5%92%8C%E5%A0%86%E6%A0%88.html#41-\u6bb5\u5730\u5740\u7684\u9690\u542b","title":"4.1 \u6bb5\u5730\u5740\u7684\u9690\u542b","text":"\u6bb5\u5730\u5740\u7684\u9690\u542b<pre><code>; \u9690\u542b\u4e86 ds:\nmov ax, [bx]\nmov ax, [si]\nmov ax, [di+2]\nmov ax, [bx+di+2]\nmov ax, [1000h]\n\n; \u9690\u542b\u4e86 ss:\n; \u53ea\u8981 [] \u4e2d\u6709 bp\uff0c\u9ed8\u8ba4\u7684\u6bb5\u5730\u5740\u5c31\u662f ss\nmov ax, [bp]\nmov ax, [bp+2]\nmov ax, [bp+si+2]\n</code></pre> <p>\u5806\u6808\u6bb5\u7684\u5f15\u7528</p> <ul> <li><code>ss:[sp]</code> \u662f\u8bed\u6cd5\u9519\u8bef\u7684\uff0c\u56e0\u4e3a <code>sp</code> \u4e0d\u80fd\u653e\u5728\u65b9\u62ec\u53f7\u91cc</li> <li>\u4f7f\u7528 <code>bp</code> \u6765\u8fdb\u884c\u76f4\u63a5\u7684\u5806\u6808\u6bb5\u7684\u5f15\u7528</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2005%20%E6%AE%B5%E5%92%8C%E5%A0%86%E6%A0%88.html#42-\u6bb5\u8986\u76d6","title":"4.2 \u6bb5\u8986\u76d6","text":"<p>\u5c31\u662f\u5728\u64cd\u4f5c\u6570\u524d\u6dfb\u52a0\u4e00\u4e2a\u6bb5\u524d\u7f00\u6765\u6539\u53d8\u9ed8\u8ba4\u7684 <code>ds</code></p> segment override<pre><code>mov bx, sp\nmov ax, ss:[bx]\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html","title":"06 \u4e2d\u65ad\u548c\u51fd\u6570\u8c03\u7528","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#1-\u4e2d\u65ad","title":"1 \u4e2d\u65ad","text":"div00<pre><code>code segment\nassume code:cs\nmain:\n    mov ax, 123h\n    mov bl, 1\n    div bl\n    mov ah, 4Ch\n    int 21h\ncode ends\nend main\n</code></pre> <p>Note</p> <ul> <li>\u4e0a\u8ff0\u4ee3\u7801\u4f1a\u9020\u6210 <code>al</code> \u6ea2\u51fa\uff0c\u64cd\u4f5c\u7cfb\u7edf\u8f93\u51fa <code>Divide overflow</code>\uff0c\u5982\u679c\u4f7f\u7528\u8c03\u8bd5\u5668\uff0c\u4f1a\u5f97\u5230 <code>Divide by zero</code> \u62a5\u9519</li> <li>\u4e24\u6b21\u7684\u8f93\u51fa\u4e0d\u4e00\u6837\uff0c\u662f\u56e0\u4e3a\u4e2d\u65ad\u662f\u53ef\u4ee5\u5b9a\u4e49\u7684</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#11-\u4fee\u6539\u4e2d\u65ad","title":"1.1 \u4fee\u6539\u4e2d\u65ad","text":"<p>\u8bd5\u56fe\u4fee\u6539\u4e2d\u65ad\uff0c\u5b9e\u73b0\u6ea2\u51fa\u65f6\u81ea\u5b9a\u4e49\u8f93\u51fa\u5185\u5bb9\uff0c\u5e76\u5f3a\u5236\u6267\u884c\u5269\u4f59\u6307\u4ee4</p> DIV0<pre><code>data segment\nold_00h dw 0, 0\ndata ends\n\ncode segment\nassume cs:code, ds:data\nmain:\n    mov ax, data\n    mov ds, ax\n    xor ax, ax\n    mov es, ax  ; es=0\n    mov ax, es:[0]\n    mov dx, es:[2]\n    mov old_00h[0], ax\n    mov old_00h[2], dx  ; \u4fdd\u5b58\u65e7\u7684 00h\n\n    mov word ptr es:[0], offset my_00h\n    mov word ptr es:[2], cs  ; \u4fee\u6539\u4e2d\u65ad\u5411\u91cf\u4e3a cs:offset my_00h\n\n    mov ax, 1234h\n    mov bl, 00h\n    ; \u8fd0\u884c\u5230 divide\uff0cCPU \u63d2\u5165 int 00h\uff0c\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b\uff1a\n    ; pushf\n    ; push cs  ; \u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u6bb5\u5730\u5740\n    ; push offset divide  ; \u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u504f\u79fb\u5730\u5740\n    ; jmp dword ptr 0:[0]  ; far ptr \u8df3\u8f6c\ndivide:\n    div bl\nnext:\n    mov ax, old_00h[0]\n    mov dx, old_00h[2]\n    mov es:[0], ax\n    mov es:[2], dx  ; \u6062\u590d int 00h\n\n    mov ah, 4Ch\n    int 21h\n\nmy_00h:\n    ;;;;; \u4fee\u6539\u4e0b\u4e00\u6761\u6307\u4ee4\u5730\u5740\u4ee5\u8df3\u8fc7 div \u6307\u4ee4 ;;;;;\n    push bp  ; \u4fdd\u62a4 bp\n    mov bp, sp  ; \u56e0\u4e3a sp \u4e0d\u80fd\u51fa\u73b0\u5728\u65b9\u62ec\u53f7\u5185\uff0c\u8981\u7528 bp \u66ff\u4ee3\n    add word ptr [bp+2], 2  ; \u65b9\u62ec\u53f7\u91cc\u6709 bp\uff0c\u9ed8\u8ba4\u662f\u6bb5\u5730\u5740\u662f ss\n                            ; bp+2\uff0c\u8df3\u8fc7\u521a\u624d push \u7684 bp\uff0c\u4fee\u6539\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u504f\u79fb\u5730\u5740\uff08offset divide\uff09\n                            ; +2 \u540e\u76f8\u5f53\u4e8e\u8df3\u8fc7\u4e86 div bl \u8fd9\u4e2a 2 \u5b57\u8282\u7684\u6307\u4ee4\uff0c\u76f4\u63a5\u6267\u884c\u540e\u9762\u7684\u6307\u4ee4\n\n    pop bp\n\n    ;;;;; \u81ea\u5b9a\u4e49\u4e00\u79cd\u8f93\u51fa\u6837\u5f0f ;;;;;\n    push ax  ; \u4fdd\u62a4\n    push dx  ; \u4fdd\u62a4\n    mov ah, 2\n    mov dl, 'D'\n    int 21h  ; \u5c4f\u5e55\u4e0a\u8f93\u51fa\u4e00\u4e2a\u5b57\u6bcd D\n    pop dx\n    pop ax\n    iret  ; \u4e2d\u65ad\u8fd4\u56de\n          ; CPU \u6267\u884c iret \u65f6\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u800c\u6267\u884c ret \u53ea\u4f1a pop ip\n          ; pop ip  ; \u8f7d\u5165\u4e86\u4fee\u6539\u540e\u7684\u6307\u4ee4\u5730\u5740\n          ; pop cs\n          ; popf\ncode ends\nend main\n</code></pre> <p>\u5047\u8bbe <code>div</code> \u6307\u4ee4\u53d1\u751f\u65f6\uff0c<code>ss=1000h, sp=2000h</code>\uff0c\u90a3\u4e48\u5728\u6267\u884c <code>add word ptr [bp+2], 2</code> \u65f6\u5806\u6808\u4e2d\u7684\u72b6\u6001\u5982\u4e0b\uff1a</p> <pre><code>ss:1FF8    old bp &lt;- bp (ss)\nss:1FFA    offset divide (ip)\nss:1FFC    CS\nss:2000    FL\n</code></pre> <p>Attention</p> <p>\u4e00\u5b9a\u8981\u4fdd\u8bc1\u5806\u6808\u5e73\u8861\uff01</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#12","title":"1.2","text":"<pre><code>mov ah, 1\nint 21h  ; pushf\n         ; push cs\n         ; push offset next  ; \u5c06\u4e0b\u4e00\u4e2a cs:ip \u5165\u6808\n         ; IF = 0  ; \u8fdb\u5165 int 21h \u51fd\u6570\u540e\uff0c\u7981\u6b62\u4e2d\u65ad\n         ; TF = 0  ; \u8fdb\u5165 int 21h \u51fd\u6570\u540e\uff0c\u4e34\u65f6\u6062\u590d\u6b63\u5e38\u6a21\u5f0f\n         ; jmp dword ptr 0:[84h]  ; \u4e2d\u65ad\u5411\u91cf\uff0c0:[4*n]\n</code></pre> <p>Note</p> <ul> <li>\u56e0\u4e3a\u662f\u8fdc\u8df3\u8f6c\uff0c\u6240\u4ee5\u9700\u8981 <code>push cs:(next ip)</code></li> <li><code>pushf</code> \u65b9\u4fbf\u8fd4\u56de\u4e4b\u540e\u6062\u590d\u539f\u6837</li> </ul> <pre><code>\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#2-\u51fd\u6570\u8c03\u7528","title":"2 \u51fd\u6570\u8c03\u7528","text":"<ul> <li>\u5f53 <code>call</code> \u6267\u884c\u65f6\uff0cCPU \u4f1a <code>push</code> \u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\uff0c\u5373<ul> <li><code>push offset next</code></li> <li><code>jmp f</code></li> </ul> </li> <li>\u5f53 <code>ret</code> \u6267\u884c\u65f6\uff0cCPU \u4f1a <code>pop</code> \u5f97\u5230\u8fd4\u56de\u5730\u5740\uff0c\u5373<ul> <li><code>pop ip</code></li> </ul> </li> </ul> <p>\u51fd\u6570\u8fd4\u56de\u4e0e\u4e2d\u65ad\u8c03\u7528\u4e0e\u8fd4\u56de\u7684\u4e0d\u540c\u4e4b\u5904</p> <ul> <li>\u8c03\u7528<ul> <li>\u51fd\u6570\u4f7f\u7528 <code>call f</code><ul> <li>\u6839\u636e label \u5bfb\u5740</li> <li>\u53ea <code>push</code> \u8fd4\u56de\u5730\u5740</li> <li><code>push next_ip; jmp f</code></li> </ul> </li> <li>\u4e2d\u65ad\u4f7f\u7528 <code>int n</code><ul> <li>\u6839\u636e\u5185\u5b58\u4e2d\u4e2d\u65ad\u51fd\u6570\u5730\u5740\u5bfb\u5740</li> <li><code>push</code> \u4e86 <code>FL, CS</code> \u548c\u8fd4\u56de\u5730\u5740</li> <li><code>pushf; push cs; push next_ip; jmp dword ptr 0:[4*n]</code></li> </ul> </li> </ul> </li> <li>\u8fd4\u56de<ul> <li>\u51fd\u6570\u4f7f\u7528 <code>ret</code><ul> <li><code>pop ip</code> \u7136\u540e\u81ea\u52a8\u5c31\u56de\u5230\u4e86\u539f\u672c\u5e94\u5f53\u6267\u884c\u7684\u4e0b\u4e00\u6761\u6307\u4ee4</li> </ul> </li> <li>\u4e2d\u65ad\u4f7f\u7528 <code>iret</code><ul> <li><code>pop ip; pop cs; popf</code> \u56e0\u4e3a\u662f\u4e00\u8d77\u6267\u884c\u7684\uff0c\u6240\u4ee5\u4e0d\u7528\u8003\u8651 <code>ip</code> \u88ab <code>pop</code> \u4e4b\u540e\u5c31\u65e0\u6cd5\u6267\u884c\u540e\u9762\u4e24\u4e2a <code>pop</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#21-\u4e09\u79cd\u53c2\u6570\u4f20\u9012\u5f62\u5f0f","title":"2.1 \u4e09\u79cd\u53c2\u6570\u4f20\u9012\u5f62\u5f0f","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#211-\u5bc4\u5b58\u5668\u4f20\u9012","title":"2.1.1 \u5bc4\u5b58\u5668\u4f20\u9012","text":"\u5bc4\u5b58\u5668\u4f20\u9012<pre><code>f:\n    add ax, ax\n    ret\nmain:\n    mov ax, 3\n    call f\nnext:\n    mov ah, 4Ch\n    int 21h\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#212-\u53d8\u91cf\u4f20\u9012","title":"2.1.2 \u53d8\u91cf\u4f20\u9012","text":"\u53d8\u91cf\u4f20\u9012<pre><code>f:\n    mov ax, var\n    add ax, ax\n    ret\nmain:\n    mov var, 3\n    call f\n</code></pre> <ul> <li>con: \u65e0\u6cd5\u652f\u6301\u591a\u7ebf\u7a0b</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#213-\u5806\u6808\u4f20\u9012","title":"2.1.3 \u5806\u6808\u4f20\u9012","text":"\u5806\u6808\u4f20\u9012<pre><code>f:\n    push bp\n    mov bp, sp\n    mov ax, [bp+4]\n    add ax, ax\n    pop bp\n    ret\nmain:\n    mov ax, 3\n    push ax\n    call f\n    add sp, 2\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#214-example-\u5b9e\u73b0\u52a0\u6cd5\u51fd\u6570","title":"2.1.4 Example: \u5b9e\u73b0\u52a0\u6cd5\u51fd\u6570","text":"func add<pre><code>func_add:\n    push bp  ; \u4fdd\u62a4 bp\n    mov bp, sp  ; \u56e0\u4e3a sp \u4e0d\u80fd\u653e\u5728\u65b9\u62ec\u53f7\u91cc\u9762\n    mov ax, [bp+4]  ; \u8fd9\u662f\u56e0\u4e3a\uff0c\u9700\u8981\u8d8a\u8fc7\u521a\u624d push \u7684 bp \u548c call \u538b\u5165\u7684\u8fd4\u56de\u5730\u5740\n    add ax, [bp+6]\n    pop bp\n    ret\nmain:\n    mov ax, 3\n    push ax\n    mov ax, 2\n    push ax\n    call f\n    add sp, 4  ; \u7ef4\u6301\u5806\u6808\u5e73\u8861\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#22-call-ret-\u6307\u4ee4\u548c\u51fd\u6570\u8c03\u7528\u64cd\u4f5c","title":"2.2 <code>call, ret</code> \u6307\u4ee4\u548c\u51fd\u6570\u8c03\u7528\u64cd\u4f5c","text":"<p>\u590d\u4e60\u53c2\u6570\u4f20\u9012</p> <ul> <li>\u5bc4\u5b58\u5668\u4f20\u9012 \uff08\u590d\u4e60\u8ba1\u7ec4\uff0cRISC-V \u9996\u9009\u5bc4\u5b58\u5668\u4f20\u9012\uff0c\u653e\u4e0d\u4e0b\u624d\u7528\u6808\uff09</li> <li>\u5168\u5c40\u53d8\u91cf\u4f20\u9012</li> <li>\u5806\u6808\u4f20\u9012</li> </ul> <p>\u53c2\u6570\u7684\u987a\u5e8f</p> <p>\u5f62\u5982 <code>f(2, 3)</code>\uff0c\u53c2\u6570\u7684\u4ee3\u5165\u987a\u5e8f\u662f\u4ece\u53f3\u5230\u5de6\u7684\uff0c\u5148 3 \u540e 2 \u8fde\u7eed <code>push</code> \u4e24\u6b21</p> function add<pre><code>f:  ; \u5047\u8bbe\u6808\u9876\u4e24\u4e2a word \u662f\u8f93\u5165\n    push bp  ; \u7528\u524d\u4fdd\u62a4\n    mov bp, sp  ; \u8fd9\u662f\u56e0\u4e3a\uff0c\u65b9\u62ec\u53f7\u5185\u53ea\u80fd\u7528 bp\n    mov ax, [bp+4]  ; ax = a\n    add ax, [bp+6]  ; ax += b\n    pop bp  ; \u6062\u590d bp\n    ret\nmain:\n    mov ax, 3\n    push ax\n    mov ax, 2\n    push ax\n    ; 16 \u4f4d\u4e0d\u80fd\u76f4\u63a5 push 3, push 2\n    ; 32 \u4f4d\u624d\u80fd\u8fd9\u6837\u7528\n    call f\nhere:\n    add sp, 4  ; \u5806\u6808\u5e73\u8861\uff0c\u5f53\u7136\u53ef\u4ee5\u7528 pop\uff0c\u4f46\u662f\u9700\u8981\u62ff\u4e00\u4e2a\u5bc4\u5b58\u5668\u6765\u505a\u5783\u573e\u6876\uff0c\u4e0d\u5982\u76f4\u63a5\u6062\u590d\u6808\u6307\u9488\u65b9\u4fbf\n</code></pre> <p><code>call</code> \u4e0e <code>jmp</code> \u7684\u4e0d\u540c\u4e4b\u5904</p> <p>\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c<code>call f</code> \u540c\u65f6\u4f1a <code>push offset here</code></p> <p>\u8fd4\u56de\u503c\u4f20\u9012</p> <p>\u4e00\u822c\u4f1a\u628a 16 \u4f4d\u51fd\u6570\u8fd4\u56de\u503c\u653e\u5728 <code>ax</code> \u4e2d\uff0c\u5982\u679c 32 \u4f4d\u7528 <code>eax</code> \u6700\u7b80\u5355</p> stack<pre><code>ss:1FF8  old bp\nss:1FFA  here\nss:1FFC  2\nss:1FFE  3\nss:2000\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u4e0d\u7528 <code>int f(static int para)</code> \uff1f</p> <p>\u4e00\u822c\u6765\u8bf4 <code>static int</code> \u90fd\u662f\u5b9a\u4e49\u5728 <code>data</code> \u6bb5\u5185\u7684\uff0c\u4f8b\u5982 <code>static int c ==&gt; c dw</code>\uff0c\u4e0d\u5728\u5806\u6808\u91cc\uff0c\u4f46\u51fd\u6570\u7684\u53c2\u6570\u4f7f\u7528\u5806\u6808\u4f20\u9012</p> <ul> <li>\u9759\u6001\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf\u90fd\u76f8\u5f53\u4e8e\u5728 <code>data</code> \u6bb5\u5185\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u5176\u5730\u5740\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684</li> <li>\u52a8\u6001\u53d8\u91cf\uff08\u5305\u62ec\u5f62\u5f0f\u53c2\u6570\uff09\u4e00\u5b9a\u5b58\u5728\u4e8e\u5806\u6808\u4e2d\uff0c\u662f\u52a8\u6001\u8bde\u751f\u548c\u6b7b\u4ea1\u7684\uff0c\u5730\u5740\u53ef\u80fd\u53d1\u751f\u53d8\u5316</li> </ul> <p>\u5176\u4ed6\u8c03\u7528\u65b9\u5f0f</p> <ul> <li>Pascal \u8bed\u8a00<ul> <li><code>push</code> \u987a\u5e8f\uff1a\u4ece\u5de6\u5230\u53f3</li> <li>\u53c2\u6570\u7531 callee \u91ca\u653e\uff0c<code>ret 4</code> \u76f8\u5f53\u4e8e\u540c\u65f6\u6267\u884c\u4e86 <code>pop ip; add sp, 4</code></li> </ul> </li> <li>stdcall: windows api<ul> <li><code>push</code> \u987a\u5e8f\uff1a\u4ece\u53f3\u5230\u5de6</li> <li>\u53c2\u6570\u7531 caller \u91ca\u653e</li> </ul> </li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#23-\u8865\u5145c-\u8bed\u8a00\u4e2d\u51fd\u6570\u7684\u53c2\u6570","title":"2.3 \u8865\u5145\uff1aC \u8bed\u8a00\u4e2d\u51fd\u6570\u7684\u53c2\u6570","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#231-\u53c2\u6570\u672a\u5b9a\u51fd\u6570","title":"2.3.1 \u53c2\u6570\u672a\u5b9a\u51fd\u6570","text":"<p><code>int printf(char *format, ...)</code> \u53c2\u6570\u7684\u6570\u91cf\u548c\u7c7b\u578b\u90fd\u662f\u672a\u6307\u5b9a\u7684</p> <pre><code>double f(char *s, ...) {\n    double y = 0;\n    char *p;\n    p = (char*)&amp;s;\n    p += sizeof(s);  // \u8fd9\u6837\u5c31\u5230\u4e86\u7b2c\u4e00\u4e2a\u672a\u5b9a\u53c2\u6570\n    while (*s != 0) {\n        if (*s == 'i') {  // \u8868\u660e\u662f int \u7c7b\u578b\u53d8\u91cf\n            y += *(int *)p;\n            p += sizeof(int);  // \u8df3\u8fc7\u4e86\u7b2c\u4e00\u4e2a\u672a\u5b9a\u53c2\u6570\n        } else if (*s == 'l') {\n            y += *(long *)p;\n            p += sizeof(long);\n        } else if (*s == 'd') {\n            y += *(double*) p;\n            p += sizeof(32)\n        }\n    }\n    return y;\n}\n\nvoid main() {\n    double y;\n    y = f(\"ild\", 100, 200L, 3.0)\nhere:\n}\n</code></pre> stack<pre><code>old bp\nhere\n&amp;\"ild\"[0]\n100\n200L\n3,0\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#232-\u5c40\u90e8\u52a8\u6001\u53d8\u91cf","title":"2.3.2 \u5c40\u90e8\u52a8\u6001\u53d8\u91cf","text":"<pre><code>int f(int a, int b)\n{\n    int c;\n    c = a + b;\n    return c;\n}\n</code></pre> <pre><code>f:\n    push bp\n    mov bp, sp\n    sub sp, 2  ; \u76f8\u5f53\u4e8e\u7a7a\u7684 push \u884c\u4e3a\uff0c\u6316\u4e86\u4e00\u4e2a\u5751\u7ed9 c\n    mov ax, [bp+4]\n    add ax, [bp+6]\n    mov [bp-2], ax  ; \u8ba1\u7b97 c \u7684\u503c\n    mov ax, [bp-2]\n    mov sp, bp  ; \u53d8\u91cf c \u6b7b\u4ea1\n    pop bp\n    ret\n</code></pre> stack<pre><code>ss:1FF6  c       &lt;-- sp\nss:1FF8  old bp\nss:1FFA  here\nss:1FFC  2\nss:1FFE  3\nss:2000\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#24-\u51fd\u6570\u6846\u67b6","title":"2.4 \u51fd\u6570\u6846\u67b6","text":"\u51fd\u6570\u6846\u67b6\u4e0e\u5bc4\u5b58\u5668\u4fdd\u62a4<pre><code>f:\n    push bp\n    mov bp, sp  ; \u521b\u5efa\u5806\u6808\u6846\u67b6\n    sub sp, n  ; \u5206\u914d\u52a8\u6001\u53d8\u91cf\u7684\u7a7a\u95f4\u4e3a n \u4e2a\u5b57\u8282\n    push bx\n    push si\n    push di\n    ...\n    pop di\n    pop si\n    pop bx\n    mov sp, bp\n    pop bp\n    ret\n</code></pre> <p>Note</p> <p>Callee \u4e00\u5b9a\u9700\u8981\u4fdd\u62a4 <code>bp, bx, si, di</code> \u56db\u4e2a\u53ef\u4ee5\u6bb5\u7f3a\u7701\u7684\u504f\u79fb\u5730\u5740\u5bc4\u5b58\u5668</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#25-\u9012\u5f52","title":"2.5 \u9012\u5f52","text":"<p>\u6ce8\u610f\u5806\u6808\u7684\u64cd\u4f5c\uff0c\u7279\u522b\u662f\u6bcf\u6b21\u8c03\u7528\u7684 <code>bp</code> \u503c</p> \u9012\u5f52\u6c42\u548c<pre><code>code segment\nassume cs:code\n;Input: n=[bp+4]\n;Output: AX=1+2+3+...+n\nf proc near\n   push bp       ; (3)(6)(9)\n   mov bp, sp\n   mov ax, [bp+2]\n   cmp ax, 1\n   je done\n   dec ax\n   push ax       ; (4)(7)\n   call f        ; (5)(8)\nthere:\n   add sp, 2     ; (12)(15)\n   add ax, [bp+2]\ndone:\n   pop bp        ; (10)(13)(16)\n   ret           ; (11)(14)(17)\nf endp\n\nmain:\n   mov ax, 3\n   push ax       ; (1)\n   call f        ; (2)\nhere:            ; f(3)\u7684\u8fd4\u56de\u503c\u5728AX\u4e2d, \u503c\u4e3a6\n   add sp, 2     ; (18)\n   mov ah, 4Ch\n   int 21h\ncode ends\nend main\n</code></pre> stack<pre><code>ss:1FEE  bp2    (9)  &lt;-- bp\nss:1FF0  there  (8)\nss:1FF2  ax=1   (7)\nss:1FF4  bp1=1FF(6)  &lt;-- bp2\nss:1FF6  there  (5)\nss:1FF8  ax=2   (4)\nss:1FFA  old bp (3)  &lt;-- bp1\nss:1FFC  here   (2)\nss:1FFE  ax=3   (1)\nss:2000\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#3-\u6df7\u5408\u8bed\u8a00\u7f16\u7a0b","title":"3 \u6df7\u5408\u8bed\u8a00\u7f16\u7a0b","text":"<p>c + asm</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#31-tc","title":"3.1 TC","text":"TC<pre><code>main() {\n    int x=10, y=20, z;\n    asm mov ax, [x]\n    asm add ax, [y]\n    asm mov [z], ax\n    printf(\"z = %d\",z);\n}\n</code></pre> <p>\u7f16\u8bd1</p> <ul> <li>TC \u4e0d\u80fd\u7f16\u8bd1\u542b\u6709\u5185\u5d4c\u6c47\u7f16\u6307\u4ee4\u7684\u7a0b\u5e8f\uff0c\u8981\u4f7f\u7528 <code>tcc</code> \u7f16\u8bd1\u5668\uff0c\u5728\u547d\u4ee4\u884c\u754c\u9762\u8fdb\u884c\u64cd\u4f5c <pre><code>d:\ncd \\tc\ntcc -v tcasm.c\ntd tcasm\n</code></pre></li> </ul> \u652f\u6301\u6807\u53f7<pre><code>main() {\n    int i;\n    {\n        again:\n        asm mov ah, 2\n        asm mov dl, 'A'\n        asm ...\n    }\n}\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#32-vc","title":"3.2 VC","text":"<p>\u4f7f\u7528 <code>__asm{}</code> \u5305\u88f9</p> \u6c47\u7f16\u4ee3\u7801\u6bb5<pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\nint main() {\n    int x=-1, y=-2, z;\n    __asm\n    {\n        mov eax, [x]\n        add eax, [y]\n        mov [z], eax\n        push [z]\n        call abs  // \u53ef\u4ee5\u8c03\u7528\u5176\u4ed6\u51fd\u6570\n        add esp 4\n        mov [z], eax\n    }\n    printf(\"%d\", z);\n    return 0;\n}\n</code></pre> \u7eaf\u6c47\u7f16\u51fd\u6570<pre><code>__declspec(naked) int f(int a, int b)  // \u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u9700\u8981\u4e3a\u51fd\u6570\u63d2\u5165\u51fd\u6570\u6846\u67b6\n{\n    __asm\n    {\n        push ebp\n        mov ebp, esp\n        ... \n    }\n}\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2006%20%E4%B8%AD%E6%96%AD%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.html#33-tc-\u8c03\u7528\u6c47\u7f16\u8bed\u8a00\u6a21\u5757","title":"3.3 TC \u8c03\u7528\u6c47\u7f16\u8bed\u8a00\u6a21\u5757","text":"<pre><code>// int f(int x, int y, int *p){\n//    return (*p = x - y);\n// }\n\nextern int f(int x, int y, int *p);  // extern \u8ba9\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u4e0d\u4f1a\u62a5\u9519\n\nvoid main() {\n    int x=1000, y=1001, z=0;\n    f(x, y, *z);\n    printf(\"z=%d\", z);\n}\n</code></pre> <pre><code>public _f  ; \u8868\u793a f \u662f\u5168\u5c40\u7684\uff0c\u53ef\u4ee5\u63d0\u4f9b\u7ed9\u5916\u90e8\u51fd\u6570\u8c03\u7528\uff0c\u5982\u679c\u4e0d\u5199\u7684\u8bdd\u53ea\u80fd\u88ab\u672c\u6587\u4ef6\u4e2d\u7684\u5176\u4ed6\u51fd\u6570\u8c03\u7528\n_TEXT segment byte public 'CODE'  ; _TEXT \u662f\u56e0\u4e3a C \u8bed\u8a00\u4ee3\u7801\u6bb5\u4e5f\u662f\u8fd9\u6837\u547d\u540d\nassume cs:_TEXT\n;int f(int x, int y, int *p)\n_f proc near  ; procedure \u8fc7\u7a0b\u5373\u51fd\u6570\uff0c\u8fd9\u91cc\u7684\u4e0b\u5212\u7ebf\u662f\u56e0\u4e3a c \u5728\u7f16\u8bd1\u7684\u65f6\u5019\u6240\u6709\u51fd\u6570\u540d\u524d\u90fd\u4f1a\u52a0\u4e0a\u4e0b\u5212\u7ebf\npush bp\nmov bp, sp\npush bx\nmov ax, [bp+4]; AX = x\nsub ax, [bp+6]; AX = x - y\nmov bx, [bp+8]; BX = p\nmov [bx], ax  ; *p = x - y\nmov ax, [bp+4]\nadd ax, [bp+6]; return AX\npop bx\npop bp\nret\n_f endp\n_TEXT ends\nend  ; \u8fd9\u4e2a\u6a21\u5757\u6ca1\u6709 main\uff0c\u6240\u4ee5\u4e0d\u9700\u8981 end main\n</code></pre> \u7f16\u8bd1\u65b9\u6cd5<pre><code>masm /Ml called.asm;  # \u4e3a\u4e86\u5c06\u6240\u6709\u6807\u53f7\u7684\u5927\u5c0f\u5199\u4fdd\u7559 -&gt; called.obj\ncopy called.asm /tc\ncd /tc\ntcc callasm.c called.obj  # \u8fdb\u884c\u8054\u5408\u7f16\u8bd1\uff0c\u5148\u751f\u6210 callasm.obj\uff0c\u7136\u540e\u94fe\u63a5\n</code></pre> \u8c03\u8bd5\u65b9\u6cd5<pre><code>tcc -v callasm.c called.obj  # \u5305\u542b\u6e90\u7801\u8c03\u8bd5\u4fe1\u606f\ntd called.exe  # \u7136\u540e\u53ef\u4ee5\u6253\u5f00\u6307\u4ee4\u7a97\u53e3\uff0c\u770b\u5230\u6c47\u7f16\u4ee3\u7801\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2007%20%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4.html","title":"07 \u6570\u636e\u4f20\u9001\u6307\u4ee4","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2007%20%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4.html#1-\u901a\u7528\u6570\u636e\u4f20\u9001\u6307\u4ee4","title":"1 \u901a\u7528\u6570\u636e\u4f20\u9001\u6307\u4ee4","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2007%20%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4.html#11-xchg-exchange-\u4ea4\u6362","title":"1.1 XCHG: exchange \u4ea4\u6362","text":"<p><code>asm title\"xchg example\" mov ax, 1 mov bx, 2 xchg ax, bx xchg ax, ds:[bx]</code></p> <p>\u4ea4\u6362\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u6216\u4e00\u4e2a\u5bc4\u5b58\u5668\u548c\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u7684\u503c</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2007%20%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4.html#2-\u5730\u5740\u4f20\u9001\u6307\u4ee4-lea-lds-les","title":"2 \u5730\u5740\u4f20\u9001\u6307\u4ee4 <code>lea, lds, les</code>","text":"<p>ASMF 03 \u5185\u5b58\u4e0e\u5bfb\u5740#6 \u8fdc\u6307\u9488\u3001\u8fd1\u6307\u9488</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2008%20%E8%BD%AC%E6%8D%A2%E6%8C%87%E4%BB%A4.html","title":"08 \u8f6c\u6362\u6307\u4ee4","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2008%20%E8%BD%AC%E6%8D%A2%E6%8C%87%E4%BB%A4.html#1-\u7b26\u53f7\u6269\u5145\u6307\u4ee4-sign-extend","title":"1 \u7b26\u53f7\u6269\u5145\u6307\u4ee4 (sign extend)","text":"<pre><code>mov al, 0FEh\ncbw  ; \u5c06 AL \u505a sign ext \u653e\u5728 AX \u4e2d\n</code></pre> <code>cbw</code> <code>cwd</code> <code>cdq</code> <code>movsx al, ax</code> <code>movzx al, ax</code> convert byte to word convert word to dword convert dword to qword move with sign extension move with zero extension AL-&gt;AX AX-&gt;DX:AX EAX-&gt;EDX:EAX \u7b26\u53f7\u6269\u5145 \u96f6\u6269\u5145 <p>Attention</p> <p><code>cbw, cwd, cdq</code> \u6ca1\u6709\u53c2\u6570\uff0c\u9700\u8981\u8bb0\u4f4f\u76ee\u6807\u5bc4\u5b58\u5668</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2008%20%E8%BD%AC%E6%8D%A2%E6%8C%87%E4%BB%A4.html#11-\u6269\u5c55\u7b26\u53f7\u4f4d","title":"1.1 \u6269\u5c55\u7b26\u53f7\u4f4d","text":"cbw \u6269\u5c55 al \u7b26\u53f7\u4f4d<pre><code>mov al, -2\ncbw  ; \u5982\u679c\u4e0d\u4f7f\u7528 cbw\uff0c\u8981\u5224\u65ad al \u7684\u6b63\u8d1f\uff0c\u4f7f\u7528\u5206\u652f\u7ed3\u6784\nmov bl, 2\nidiv bl\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2008%20%E8%BD%AC%E6%8D%A2%E6%8C%87%E4%BB%A4.html#12-\u96f6\u6269\u5145\u6307\u4ee4-movzx","title":"1.2 \u96f6\u6269\u5145\u6307\u4ee4 <code>movzx</code>","text":"a \u5bc4\u5b58\u5668\u4e0a\u7684\u96f6\u6269\u5145<pre><code>movzx ax, al\nmovzx eax, al\n</code></pre> <p>Tip</p> <p>\u53ef\u4ee5\u968f\u610f\u6307\u5b9a\u6e90\u5bc4\u5b58\u5668\u548c\u76ee\u6807\u5bc4\u5b58\u5668</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2008%20%E8%BD%AC%E6%8D%A2%E6%8C%87%E4%BB%A4.html#13-\u7b26\u53f7\u6269\u5145\u6307\u4ee4-movsx","title":"1.3 \u7b26\u53f7\u6269\u5145\u6307\u4ee4 <code>movsx</code>","text":"<p>\u7528\u4e8e\u6dd8\u6c70 <code>cbw</code> \u6307\u4ee4\uff0c\u65b9\u4fbf\u4f7f\u7528\u4e14\u7b26\u5408\u76f4\u89c9</p> title<pre><code>movsx ax, al\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2008%20%E8%BD%AC%E6%8D%A2%E6%8C%87%E4%BB%A4.html#2-xlat-\u6362\u7801\u6307\u4ee4","title":"2 <code>XLAT</code> \u6362\u7801\u6307\u4ee4","text":"<p>\u8ba9 <code>ds:bx</code> \u6307\u5411\u8868\uff0c<code>al</code> \u4e3a\u6570\u7ec4\u7684\u4e0b\u6807\uff0c\u6267\u884c <code>xlat</code> \u540e\u6709 <code>al=ds:[bx+al]</code></p> \u67e5\u8868\u6cd5 in C<pre><code>char t[] = \"01234567890ABCDEF\";\nchar i;\ni = 10;\ni = t[i];  // \u597d\u5904\u662f\uff0c\u4e0d\u9700\u8981\u66f4\u591a\u7684 if else \u5224\u65ad\uff1b\u4f46\u662f\u6bd4\u8f83\u6d88\u8017\u7a7a\u95f4\n</code></pre> \u4f7f\u7528\u67e5\u8868\u6cd5\u5b9e\u73b0 16 \u8fdb\u5236\u6570\u8f93\u51fa<pre><code>.386 ; \u8868\u793a\u7a0b\u5e8f\u4e2d\u4f1a\u752832\u4f4d\u7684\u5bc4\u5b58\u5668\ndata segment use16; use16\u8868\u793a\u504f\u79fb\u4f7f\u752816\u4f4d\nt db \"0123456789ABCDEF\"\nx dd 2147483647\ndata ends\n\ncode segment use16\nassume cs:code, ds:data\nmain:\n   mov ax, data    ;\\\n   mov ds, ax      ; / ds:bx-&gt;t[0]\n   mov bx, offset t;/\n   mov ecx, 8\n   mov eax, x\nnext:\n   rol eax, 4\n   push eax\n   and eax, 0Fh\n   xlat\n   mov ah, 2\n   mov dl, al\n   int 21h\n   pop eax\n   sub ecx, 1\n   jnz next\n   mov ah, 4Ch\n   int 21h\ncode ends\nend main\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html","title":"09 \u7b97\u672f\u8fd0\u7b97\u6307\u4ee4","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#1-\u7b97\u672f\u8fd0\u7b97\u6307\u4ee4\u683c\u5f0f\u4ee5\u52a0\u6cd5\u4e3a\u4f8b","title":"1 \u7b97\u672f\u8fd0\u7b97\u6307\u4ee4\u683c\u5f0f\uff08\u4ee5\u52a0\u6cd5\u4e3a\u4f8b\uff09","text":"add \u8bed\u53e5\u7684\u51e0\u79cd\u7528\u6cd5<pre><code>add ax, bx                       ; reg, reg \nadd ax, 2                        ; reg, constant\nadd ax, ds:[1000h]               ; reg, variable\nadd byte ptr ds:[1000h], 1       ; varible, constant\nadd ds:[1000h], ah               ; varible, reg\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#11-add-reg-reg","title":"1.1 <code>add reg, reg</code>","text":"<p>\u5bc4\u5b58\u5668\u5fc5\u987b\u7b49\u5bbd\uff01</p> <pre><code>add ax, bh  ; wrong\nadd ah, bx  ; wrong\n</code></pre> <p>\u4e0a\u9762\u7684\u52a0\u6cd5\u4e2d\uff0c\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u6709 8 \u4f4d\u548c 16 \u4f4d\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u76f8\u52a0\u3002</p> <p>Solution</p> <p>\u5982\u679c\u4e00\u5b9a\u8981\u76f8\u52a0\uff0c\u5219\u5fc5\u987b\u5c06\u8f83\u77ed\u7684\u8fdb\u884c\u6269\u5c55\uff1a  <pre><code>mov bl, bh  ; let bh = 12h, then bl = 12h\nmov bh, 0  ; bx = 0012h\nadd ax, bx\n</code></pre></p> <p>\u5bc4\u5b58\u5668\u7684\u5173\u7cfb</p> <p><code>mov eax, 12345678h</code> \u5219 <code>ax=5678h</code>\uff0c<code>ah=56h</code>\uff0c<code>al=78h</code>\uff0c\u4e5f\u5c31\u662f</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#12-add-var-constant","title":"1.2 <code>add var, constant</code>","text":"<p>\u5fc5\u987b\u624b\u52a8\u58f0\u660e\u53d8\u91cf\u5bbd\u5ea6\uff01</p> <pre><code>add byte ptr ds:[1000h], 1\n</code></pre> <p>Attention</p> <p>\u6c47\u7f16\u8bed\u8a00\u4e2d\u5e38\u6570\u6ca1\u6709\u5bbd\u5ea6\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u81ea\u52a8\u786e\u5b9a\u53d8\u91cf\u5bbd\u5ea6\uff0c\u5fc5\u987b\u624b\u52a8\u786e\u5b9a\u53d8\u91cf\u5bbd\u5ea6\u4e3a <code>byte ptr</code></p> <p>\u8bbe <code>ds=2000h</code>\uff0c\u4e14\u4ece\u5730\u5740 <code>2000h:1000h</code> \u8d77\u5b58\u653e\u4e86\u4e0b\u9762\u56db\u4e2a\u5b57\u8282\uff1a</p> <pre><code>2000:1000 0FFh\n2000:1001 0FFh\n2000:1002 0FFh\n2000:1003 0FFh\n</code></pre> <p>Attention</p> <p>\u6c47\u7f16\u8bed\u8a00\u4e2d\uff0c\u7531\u4e8e\u4f7f\u7528\u540e\u7f00 <code>h</code> \u6765\u58f0\u660e 16 \u8fdb\u5236\u6570\uff0c\u5f53\u8fd9\u4e2a 16 \u8fdb\u5236\u6570\u5f00\u5934\u6070\u597d\u662f\u5b57\u6bcd\u65f6\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u8bc6\u522b\u8fd9\u662f\u4e00\u4e2a\u53d8\u91cf\u8fd8\u662f\u4e00\u4e2a\u6570\u3002 \u6240\u4ee5\uff0c\u589e\u52a0\u4e00\u4e2a\u524d\u7f00 <code>0</code> \u6765\u8bf4\u660e\u8fd9\u662f\u4e00\u4e2a\u6570\u800c\u4e0d\u662f\u4e00\u4e2a\u53d8\u91cf\u3002</p> \u540c\u4e00\u4e2a\u5730\u5740\u53ef\u4ee5\u6307\u5411\u5bbd\u5ea6\u4e0d\u540c\u7684\u5bf9\u8c61<pre><code>add byte ptr ds:[1000h], 1\n; \u6b64\u65f6\u6307\u7684\u662f 0FFh\uff0c\u8fdb\u884c\u52a0\u4e00\u540e\u53d8\u6210\u4e86 00h\n\nadd word ptr ds:[1000h], 1\n; \u6b64\u65f6\u662f 0FFFFh + 1 = 0000h\n\nadd dword ptr ds:[1000h], 1\n; \u6b64\u65f6\u662f 0FFFFFFFFh + 1 = 00000000h\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#13-\u4e0d\u5b58\u5728-add-var-var","title":"1.3 \u4e0d\u5b58\u5728 <code>add var, var</code>","text":"<p>Hint</p> <p>\u7531\u4e8e Intel CPU \u7684\u786c\u4ef6\u9650\u5236\uff0c\u4e00\u4e2a step \u4e2d\u53ea\u80fd\u8bbf\u95ee\u4e00\u4e2a\u5730\u5740\u7684\u5185\u5b58\uff0c\u56e0\u6b64\u65e0\u6cd5\u76f4\u63a5\u5c06\u4e24\u4e2a var \u76f8\u52a0</p> \u9519\u8bef\u548c\u5bf9\u5e94\u7684\u4fee\u6b63<pre><code>; wrong\nadd byte ptr ds:[1000h], byte ptr ds:[2000h]\n\n; correct\nmov ah, ds:[2000h]\nadd ds:[1000h], ah\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#131-\u7f16\u8bd1\u5668\u5982\u4f55\u5904\u7406\u53d8\u91cf\u76f8\u52a0","title":"1.3.1 \u7f16\u8bd1\u5668\u5982\u4f55\u5904\u7406\u53d8\u91cf\u76f8\u52a0","text":"<pre><code>a += b;\n</code></pre> visual c++ \u65e0\u4f18\u5316<pre><code>00401028    mov        eax, [00424a30]\n0040102D    add        eax, dword ptr [00424a34]\n00401033    mov        [00424a30], eax\n</code></pre> <p>Note</p> <ul> <li>\u4e0a\u8ff0\u7684\u6c47\u7f16\u8bed\u8a00\u5176\u5b9e\u53ef\u4ee5\u538b\u7f29\u5230\u4e24\u6b65</li> <li><code>[00424a30]</code> \u8fd9\u91cc\u76f8\u5f53\u4e8e\u7701\u7565\u4e86 <code>ds:</code></li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#2-\u52a0\u6cd5\u548c\u51cf\u6cd5","title":"2 \u52a0\u6cd5\u548c\u51cf\u6cd5","text":"\u52a0\u6cd5\u6307\u4ee4 <code>add</code> <code>inc</code> <code>adc</code> \u542b\u4e49 \u52a0\u6cd5 \u81ea\u589e \u5e26\u8fdb\u4f4d\u52a0\u6cd5 \u5907\u6ce8 \u4e0d\u5f71\u54cd <code>CF</code> \u51cf\u6cd5\u6307\u4ee4 <code>sub</code> <code>dec</code> <code>sbb</code> <code>neg</code> <code>cmp</code> \u542b\u4e49 \u51cf\u6cd5 \u81ea\u51cf \u5e26\u501f\u4f4d\u51cf\u6cd5 \u7b26\u53f7\u76f8\u53cd\u6570 \u51cf\u6cd5\u6bd4\u8f83 \u5907\u6ce8 \u4e0d\u5f71\u54cd <code>CF</code> \u76f8\u5f53\u4e8e\u666e\u901a\u51cf\u6cd5 \u4e0d\u4fdd\u5b58\u8ba1\u7b97\u7ed3\u679c\u7ed3\u679c <p>\u4e58\u9664\u6cd5\u7684\u8bed\u6cd5\u6bd4\u8f83\u590d\u6742\uff0c\u672c\u6b21\u8bfe\u4e0d\u4f1a\u6d89\u53ca</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#21-inc-\u81ea\u589e","title":"2.1 <code>inc</code> \u81ea\u589e","text":"<ul> <li>\u6bd4 <code>add ax, 1</code> \u673a\u5668\u7801\u66f4\u77ed\uff0c\u6267\u884c\u901f\u5ea6\u66f4\u5feb</li> <li>\u4e0d\u4f1a\u5bfc\u81f4 <code>CF</code> \u7684\u6539\u53d8\uff0c\u4f46\u662f\u4f1a\u5f71\u54cd\u522b\u7684\u6807\u5fd7\u4f4d</li> </ul> \u66f4\u77ed\u7684\u4ee3\u7801<pre><code>again:\n    add ax, cx\n    jc done\n    add cx, 1\n    jmp again\ndone:\n\nagain:\n    add ax, cx\n    inc cx\n    jnc again\ndone:\n</code></pre> <ul> <li>\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5148\u4f7f\u7528 <code>inc cx</code> \u5bf9\u4e0b\u4e00\u6b21\u5faa\u73af\u505a\u51c6\u5907\uff0c\u7136\u540e\u518d\u8fdb\u884c\u8df3\u8f6c\u5224\u65ad\uff0c\u51cf\u5c11\u4e86\u8df3\u8f6c\u8bed\u53e5</li> </ul> <p><code>dec</code> \u540c\u7406</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#22-adc-\u5e26\u8fdb\u4f4d\u52a0\u6cd5","title":"2.2 <code>adc</code> \u5e26\u8fdb\u4f4d\u52a0\u6cd5","text":"\u4e0d\u4f7f\u7528 32 \u4f4d\u5bc4\u5b58\u5668\u5b8c\u6210\u5927\u6570\u52a0\u6cd5 12345678h+5678FFFFh<pre><code>mov dx, 1234h\nmov ax, 5678h  ; dx:ax\nadd ax, 0FFFFh  ; CF=1\nadc dx, 5678h  ; dx + 5678h + CF\n</code></pre> <p><code>adc a, b ==&gt; a = a + b + CF</code></p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#221-\u7528-adc-\u5b9e\u73b0\u66f4\u5927\u7684\u52a0\u6cd5","title":"2.2.1 \u7528 <code>adc</code> \u5b9e\u73b0\u66f4\u5927\u7684\u52a0\u6cd5","text":"\u4f7f\u7528\u6570\u7ec4\u8868\u793a\u7684\u5927\u6570\u52a0\u6cd5<pre><code>x db 100 dup(88h)\ny db 100 dup(89h)\nz db 101 dup(0)\n\nmain:\n    mov cx, 100\n    mov si, offset x\n    mov di, offset y\n    mov bx, offset z\n    clc\nagain:\n    mov al, [si]\n    adc al, [di]\n    mov [bx], al\n    inc si\n    inc di\n    inc bx\n    dec cx\n    jnz again\n</code></pre> <ul> <li>\u6bcf\u6b21\u90fd\u76f4\u63a5\u4f7f\u7528 <code>adc</code>\uff0c\u7c7b\u4f3c\u63a5\u529b\u7684\u65b9\u6cd5</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#23-sbb-\u5e26\u501f\u4f4d\u51cf\u6cd5-subtract-with-borrow","title":"2.3 <code>sbb</code> \u5e26\u501f\u4f4d\u51cf\u6cd5 (subtract with borrow)","text":"sbb: 56781234h-1111FFFFh<pre><code>mov ax, 1234h\nsub ax, 0FFFFh  ; CF=1\nmov dx, 5678h\nsbb dx, 1111h  ; DX=5678h-1111h-CF\n</code></pre> <ul> <li><code>sbb a, b ==&gt; a = a - b - CF</code></li> <li>\u8fd0\u7b97\u65f6\u5e94\u8be5\u5148\u7b97\u4f4e\u4f4d\u4ea7\u751f\u501f\u4f4d\uff0c\u7136\u540e\u518d\u7528 <code>sbb</code> \u5f97\u5230\u9ad8\u4f4d\u8003\u8651\u501f\u4f4d\u7684\u7ed3\u679c</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#24-neg-\u76f8\u53cd\u6570","title":"2.4 <code>neg</code> \u76f8\u53cd\u6570","text":"<pre><code>neg ax  ; ax = 0 - ax\n; neg ax = ~ax + 1\n</code></pre> <p>Attention</p> <p>\u5e94\u5f53\u5f53\u4f5c\u666e\u901a\u7684\u51cf\u6cd5\u6307\u4ee4\u6765\u770b\u5f85\uff0c\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#25-cmp-\u51cf\u6cd5\u6bd4\u8f83","title":"2.5 <code>cmp</code> \u51cf\u6cd5\u6bd4\u8f83","text":"<p><code>cmp</code> \u548c <code>sub</code> \u7684\u533a\u522b\u5728\u4e8e\uff0c\u8fdb\u884c\u4e86\u51cf\u6cd5\uff0c\u4fdd\u7559\u4e86\u5bf9\u6807\u5fd7\u4f4d\u7684\u5f71\u54cd\uff0c\u4f46\u662f\u4e22\u5f03\u4e86\u7ed3\u679c</p> <ul> <li><code>jg, jl, jge, jle</code> \u662f\u6709\u7b26\u53f7\u6570\u6bd4\u8f83\u76f8\u5173\u8df3\u8f6c\u6307\u4ee4<ul> <li><code>jg: SF==OF &amp;&amp; ZF==0</code></li> <li><code>jge: SF==OF</code></li> <li><code>jl: SF!=OF</code></li> <li><code>jle: SF!=OF || ZF==1</code></li> </ul> </li> <li><code>ja, jb, jae, jbe</code> \u662f\u65e0\u7b26\u53f7\u6570\u6bd4\u8f83\u76f8\u5173\u8df3\u8f6c\u6307\u4ee4<ul> <li><code>jb: CF=1</code> (jump if below)</li> <li><code>ja: CF=0 &amp; ZF=0</code> (jump if above)</li> </ul> </li> </ul> <p>Example</p> <pre><code>mov ah, 0FFh\nmov al, 01h\ncmp ah, al\nja jump1\njg jump2\n</code></pre> <ul> <li>\u4e0a\u8ff0 <code>ah</code> \u662f\u6709\u7b26\u53f7\u6570 <code>-1</code>\uff0c\u6240\u4ee5 <code>ja</code> \u4f1a\u8df3\u8f6c\u800c <code>jg</code> \u4e0d\u4f1a\u8df3\u8f6c</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#3-\u4e58\u6cd5\u548c\u9664\u6cd5","title":"3 \u4e58\u6cd5\u548c\u9664\u6cd5","text":"\u6307\u4ee4 <code>mul</code> <code>imul</code> \u542b\u4e49 \u65e0\u7b26\u53f7\u4e58\u6cd5 \u7b26\u53f7\u6570\u4e58\u6cd5 \u6307\u4ee4 <code>div</code> <code>idiv</code> \u542b\u4e49 \u65e0\u7b26\u53f7\u6574\u9664 \u7b26\u53f7\u6570\u9664\u6cd5"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#31-mul-\u65e0\u7b26\u53f7\u4e58\u6cd5","title":"3.1 <code>mul</code> \u65e0\u7b26\u53f7\u4e58\u6cd5","text":"\u4f4d\u5bbd <code>8 * 8 -&gt; 16</code> <code>16 * 16 -&gt; 32</code> <code>32 * 32 -&gt; 64</code> \u6307\u4ee4 <code>mul src(r/m[8])</code> <code>mul src(r/m[16])</code> <code>mul src(r/m[32])</code> \u9690\u542b\u88ab\u4e58\u6570 <code>AL</code> <code>AX</code> <code>EAX</code> \u542b\u4e49 <code>AX = AL * SRC</code> <code>DX:AX = AX * SRC</code> <code>EDX:EAX = EAX * SRC</code>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#311-8-\u4f4d\u4e58\u6cd5","title":"3.1.1 8 \u4f4d\u4e58\u6cd5","text":"<ul> <li>\u53e6\u4e00\u4e2a\u4e58\u6570\u4e00\u5b9a\u662f AL</li> <li>\u4e58\u79ef\u4e00\u5b9a\u662f AX</li> </ul> 8-bit mul example<pre><code>mov al, 12h\nmov bl, 10h\nmul bl;  AX=AL*BL=0120h\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#312-16-\u4f4d\u4e58\u6cd5","title":"3.1.2 16 \u4f4d\u4e58\u6cd5","text":"<ul> <li>\u88ab\u4e58\u6570\u4e00\u5b9a\u662f AX</li> <li>\u4e58\u79ef\u4e00\u5b9a\u662f DX:AX</li> </ul> 16-bit mul example<pre><code>mov ax, 1234h\nmov bx, 100h\nmul bx  ; dx=0012h, ax=3400h\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#313-32-\u4f4d\u4e58\u6cd5","title":"3.1.3 32 \u4f4d\u4e58\u6cd5","text":"<ul> <li>\u88ab\u4e58\u6570\u4e00\u5b9a\u662f EAX</li> <li>\u4e58\u79ef\u4e00\u5b9a\u662f EDX:EAX</li> </ul> <p><code>mul ebx  ; edx:eax=eax*ebx</code></p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#3131-example-\u5341\u8fdb\u5236\u6570\u5b57\u7b26\u4e32\u8f6c-int32","title":"3.1.3.1 Example: \u5341\u8fdb\u5236\u6570\u5b57\u7b26\u4e32\u8f6c int32","text":"dec2int32<pre><code>.386  ; \u542f\u7528 32 \u4f4d\u5bc4\u5b58\u5668\ndata segment use16  ; \u6bb5\u5185\u504f\u79fb\u5730\u5740\u90fd\u662f\u7528\u7684 16 \u4f4d\ns db \"2147483647\", 0  ; 7FFF FFFFh\nabc dd 0\ndata ends\n\ncode segment use16\nassume cs:code, ds:data\nmain:\n    mov ax, data\n    mov ds, ax\n    mov eax, 0  ; \u7b54\u6848\u5b58\u653e\u7684\u4f4d\u7f6e\n    mov si, 0  ; index\nagain:\n    cmp s[si], 0\n    je done\n    mov ebx, 10\n    mul ebx  ; eax = eax * 10\n    mov edx, 0  ; \u4fdd\u8bc1 edx \u6e05\u7a7a\uff0c\u53ea\u6709 dl \u6709\u503c\uff0c\u907f\u514d\u52a0\u6cd5\u51fa\u9519\n    mov dx, s[si]\n    sub dl, '0'\n    inc si\n    add eax, edx\ndone:\n    mov abc, eax\n    mov ah, 4Ch\n    int 21h\ncode ends\nend main\n</code></pre> <p>\u6bcf\u8bfb\u51fa\u4e00\u4e2a\u5b57\u7b26\uff0c\u8f6c\u6362\u6210\u6570\u5b57\uff0c\u5c06\u539f\u6765\u7684\u503c\u4e58\u4ee5\u5341\u52a0\u4e0a\u8fd9\u4e2a\u6570</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#32-imul-\u7b26\u53f7\u6570\u4e58\u6cd5\u6307\u4ee4","title":"3.2 <code>imul</code> \u7b26\u53f7\u6570\u4e58\u6cd5\u6307\u4ee4","text":"\u7c7b\u578b <code>imul src(r/m[8/16/32])</code> <code>imul src1(r[16/32]), src2(r/m[16/32])</code> <code>imul src1(r[16]), src2(r/m[16]), constant(imm[16])</code> \u9690\u542b\u88ab\u4e58\u6570 <code>AL/AX/EAX</code> \u65e0 \u65e0 \u542b\u4e49 <code>AX = AL * SRC</code>/<code>DX:AX = AX * SRC</code>/<code>EDX:EAX = EAX * SRC</code> <code>SRC1 = SRC1 * SRC2</code> <code>SRC1 = SRC2 * CONSTANT</code> imul \u53ef\u4ee5\u5305\u542b 2 \u4e2a\u6216\u8005 3 \u4e2a\u64cd\u4f5c\u6570<pre><code>imul eax, ebx  ; eax = eax * ebx\nimul eax, ebx, 3  ; eax = ebx * 3\uff0c\u8fd9\u79cd\u7528\u6cd5\u4e2d\u7b2c\u4e09\u4e2a\u53c2\u6570\u53ea\u80fd\u662f\u5e38\u6570\n</code></pre> <p>\u89c4\u8303</p> <ul> <li>\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u53d8\u91cf</li> <li>\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u6570\u5fc5\u987b\u662f\u5e38\u6570</li> </ul> <p>Bug</p> <ul> <li>\u53ef\u80fd\u4f1a\u9020\u6210\u4e58\u6cd5\u6ea2\u51fa\uff0c\u4e0d\u50cf\u9664\u6cd5\u6ea2\u51fa\u90a3\u6837\uff0cCPU \u4e0d\u4f1a\u4e2d\u65ad\u5904\u7406\u4e58\u6cd5\u6ea2\u51fa</li> <li><code>idiv</code> \u6ca1\u6709\u7c7b\u4f3c\u7684\u4f7f\u7528\u65b9\u6cd5</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#33-div-\u65e0\u7b26\u53f7\u6570\u9664\u6cd5","title":"3.3 <code>div</code> \u65e0\u7b26\u53f7\u6570\u9664\u6cd5","text":"\u4f4d\u5bbd <code>16 / 8 -&gt; 8</code> <code>32 / 16 -&gt; 16</code> <code>64 / 32 -&gt; 32</code> \u6307\u4ee4 <code>div src(r/m[8])</code> <code>div src(r/m[16])</code> <code>div src(r/m[32])</code> \u9690\u542b\u88ab\u9664\u6570 <code>AX</code> <code>DX:AX</code> <code>EDX:EAX</code> \u542b\u4e49 <code>AX / SRC = AL ... AH</code> <code>DX:AX / SRC = AX ... DX</code> <code>EDX:EAX / SRC = EAX ... EDX</code>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#331-16-\u4f4d\u9664-8-\u4f4d\u5f97-8-\u4f4d","title":"3.3.1 16 \u4f4d\u9664 8 \u4f4d\u5f97 8 \u4f4d","text":"<p><code>ax / \u9664\u6570 = al..ah</code></p> 16/8 example<pre><code>mov ax, 123h\nmov bh, 10h\ndiv bh  ; AL=12h, AH=03h\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#332-32-\u4f4d\u9664-16-\u4f4d\u5f97-16-\u4f4d","title":"3.3.2 32 \u4f4d\u9664 16 \u4f4d\u5f97 16 \u4f4d","text":"<p><code>dx:ax / \u9664\u6570 = ax..dx</code></p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#333-64-\u4f4d\u9664-32-\u4f4d\u5f97-32-\u4f4d","title":"3.3.3 64 \u4f4d\u9664 32 \u4f4d\u5f97 32 \u4f4d","text":"<p><code>edx:eax / \u9664\u6570 = eax..edx</code></p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#334-\u9664\u6cd5\u6ea2\u51fa","title":"3.3.4 \u9664\u6cd5\u6ea2\u51fa","text":"<ul> <li>\u9664\u4ee5 0 \u4f1a\u53d1\u751f\u6ea2\u51fa\uff0c\u4f46\u6709\u65f6\u5019\u9664\u4ee5 1 \u4e5f\u4f1a\u5bfc\u81f4\u5546\u592a\u5927\u800c\u65e0\u6cd5\u4fdd\u5b58\u5230\u5546\u5bc4\u5b58\u5668\u4e2d</li> </ul> <pre><code>mov ax, 123h\nmov bh, 1\n; int 00h  ; \u4f1a\u81ea\u52a8\u63d2\u5165\u8fd9\u4e00\u6761\uff0c\u505c\u6b62\u7a0b\u5e8f\ndiv bh  ; \u5546\u4f1a\u6ea2\u51fa\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#335-example-\u4e8c\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236\u8f93\u51fa","title":"3.3.5 Example: \u4e8c\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236\u8f93\u51fa","text":"<pre><code>.386\ndata segment use16\nabc dd 7FFFFFFFh\ns db 10 dup(' '), 0Dh, 0Ah, '$'\ndata ends\ncode segment use16\nassume cs:code, ds:data\nmain:\n   mov ax, data\n   mov ds, ax\n   mov di, 0; \u6570\u7ec4s\u7684\u4e0b\u6807\n   mov eax, abc\n   mov cx, 0; \u7edf\u8ba1push\u7684\u6b21\u6570\nagain:\n   mov edx, 0; \u88ab\u9664\u6570\u4e3aEDX:EAX\n   mov ebx, 10\n   div ebx; EAX=\u5546, EDX=\u4f59\u6570\n   add dl, '0'\n   push dx\n   inc cx; \u76f8\u5f53\u4e8eadd cx, 1\n   cmp eax, 0\n   jne again\npop_again:\n   pop dx\n   mov s[di], dl\n   inc di\n   dec cx; \u76f8\u5f53\u4e8esub cx, 1\n   jnz pop_again\n\n   mov ah, 9\n   mov dx, offset s\n   int 21h\n   mov ah, 4Ch\n   int 21h\ncode ends\nend main\n</code></pre> <p>Attention</p> <ul> <li>\u8981\u4f7f\u7528 64 \u4f4d\u9664 32 \u4f4d\u624d\u884c\uff0c\u5426\u5219\u4f1a\u6ea2\u51fa</li> <li>\u4f7f\u7528\u6808\u5148\u5165\u540e\u51fa\u7684\u6027\u8d28\uff0c\u6765\u5c06\u4f59\u6570\u6309\u7167\u6b63\u786e\u7684\u987a\u5e8f\u8f93\u51fa</li> <li>\u5806\u6808\u53ea\u80fd\u8fdb\u884c 16 \u4f4d\u6216 32 \u4f4d\u64cd\u4f5c\uff0c\u6240\u4ee5\u5373\u4f7f <code>dl</code> \u662f\u9700\u8981\u7684 <code>char</code>\uff0c\u4e5f\u8981 <code>push dx</code></li> <li><code>edx</code> \u5728\u8fdb\u884c\u9664\u6cd5\u524d\u5fc5\u987b\u6e05\u96f6\uff01</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#34-idiv-\u7b26\u53f7\u6570\u9664\u6cd5\u6307\u4ee4","title":"3.4 <code>idiv</code> \u7b26\u53f7\u6570\u9664\u6cd5\u6307\u4ee4","text":"\u8ba1\u7b97 -2/2<pre><code>mov ax, -2\nmov bl, 2\nidiv bl  ; idiv \u662f\u6709\u7b26\u53f7\u6570\u9664\u6cd5\u6307\u4ee4\uff0cAL=0FFh\uff0cAH=0\n         ; \u4f7f\u7528 div \u65e0\u7b26\u53f7\u6570\u9664\u6cd5\uff0c\u4f1a\u5bfc\u81f4\u6ea2\u51fa\uff0c65534/2\n</code></pre> <p>Attention</p> <p>\u9664\u6cd5\u4e2d\uff0c\u5982\u679c\u9664\u6570\u4e3a\u96f6\u6216\u8005\u5546\u5bc4\u5b58\u5668\u653e\u4e0d\u4e0b\u90fd\u4f1a\u53d1\u751f\u9664\u6cd5\u6ea2\u51fa\uff0c\u6b64\u65f6 CPU \u4f1a\u5728\u9664\u6cd5\u6307\u4ee4\u4e0a\u9762\u63d2\u5165 <code>int 00h</code> \u4e2d\u65ad</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#4-\u6d6e\u70b9\u6570\u8fd0\u7b97","title":"4 \u6d6e\u70b9\u6570\u8fd0\u7b97","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#41-fp-\u6307\u4ee4","title":"4.1 FP \u6307\u4ee4","text":"<ul> <li><code>fadd, fsub, fmul, fdiv</code> \u662f\u52a0\u51cf\u4e58\u9664\u6307\u4ee4</li> <li><code>fld</code> \u5c06\u5c0f\u6570\u7c7b\u578b\u53d8\u91cf\u4ece\u5185\u5b58\u8f7d\u5165 CPU \u4e2d\u7684\u5c0f\u6570\u5bc4\u5b58\u5668</li> <li><code>fild</code> \u5c06\u6574\u6570\u7c7b\u578b\u8f6c\u5316\u4e3a\u5c0f\u6570\u5e76\u8f7d\u5165\u5c0f\u6570\u5bc4\u5b58\u5668</li> <li><code>fst</code> \u5c06\u5c0f\u6570\u5bc4\u5b58\u5668 <code>st(0)</code> \u4fdd\u5b58\u5230\u53d8\u91cf\u4e2d</li> <li><code>fstp</code> \u5c06\u5c0f\u6570\u5bc4\u5b58\u5668 <code>st(0)</code> \u4fdd\u5b58\u5230\u53d8\u91cf\u4e2d\u5e76\u5f39\u51fa <code>st(0)</code></li> </ul> <p>\u6700\u65e9\u7684 8086 \u4e0d\u652f\u6301\u6d6e\u70b9\u6570\u8ba1\u7b97\uff0c\u800c\u662f\u7531\u5355\u72ec\u7684\u914d\u5957 FPU 8087 \u8fdb\u884c\u8ba1\u7b97</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2009%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4.html#42-fp-\u5bc4\u5b58\u5668","title":"4.2 FP \u5bc4\u5b58\u5668","text":"<ul> <li><code>st(0), st(1), ..., st(7)</code> \u5f62\u6210\u5806\u6808\u7684\u5f62\u5f0f<ul> <li>\u5728 <code>fld/fild</code> \u7684\u65f6\u5019\u4f1a\u5c06 <code>st(0)</code> \u5f80\u540e <code>push</code> \u5230 <code>st(1)</code></li> </ul> </li> <li>\u5bbd\u5ea6\u5747\u4e3a 80-bit \u7684 <code>long double</code> \u7c7b\u578b</li> </ul> float<pre><code>data segment\nx dt 3.1415926535897932  ; long double x\ny dq 9.3759765625        ; double y\nz dd 2.71828             ; float z\ni dd 2                   ; long int i\nr dt 0                   ; short int r\ndata ends\n\ncode segment\nassume cs:code, ds:data\nmain:\n    mov ax, data\n    mov ds, ax\n\n    fild [i]            ; st(0)=2\n    fld [x]             ; st(0)=3.14...., st(1)=2\n    fmul st, st(1)      ; st \u662f st(0) \u7684\u7b80\u5199\n                        ; \u4e58\u6cd5\u7684\u7ed3\u679c\u653e\u56de st(0)\n    fstp [i]\n    mov ah, 4Ch\n    int 21h\ncode ends\nend main\n</code></pre> <p>Attention</p> <ul> <li>\u7f16\u8bd1\u5668\u4f1a\u5728\u4efb\u4f55 float \u6307\u4ee4\u524d\u540e\u63d2\u5165 <code>wait</code>\uff0c\u56e0\u4e3a 8086 \u9700\u8981\u7b49\u5f85 8087 \u8ba1\u7b97\u5b8c\u6210</li> <li><code>td</code> \u4e2d\u89c2\u5bdf FP \u5bc4\u5b58\u5668\u9700\u8981\u6253\u5f00 <code>View/Numeric Processor</code> \u7a97\u53e3</li> <li>\u8fd0\u884c\u5b8c\u53ef\u4ee5\u5728\u6570\u636e\u7a97\u4e2d\u770b\u5230 <code>i</code>\uff0c\u4ee5 IEEE754 \u683c\u5f0f\u8868\u793a</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2010%20%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E5%92%8C%E7%A7%BB%E4%BD%8D%E6%8C%87%E4%BB%A4.html","title":"10 \u903b\u8f91\u8fd0\u7b97\u548c\u79fb\u4f4d\u6307\u4ee4","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2010%20%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E5%92%8C%E7%A7%BB%E4%BD%8D%E6%8C%87%E4%BB%A4.html#1-\u903b\u8f91\u8fd0\u7b97","title":"1 \u903b\u8f91\u8fd0\u7b97","text":"\u6307\u4ee4 <code>and</code> <code>or</code> <code>xor</code> <code>not</code> <code>test</code> C \u7b97\u7b26 <code>&amp;</code> <code>\\|</code> <code>^</code> <code>~</code> \u89e3\u91ca \u4e0d\u4fdd\u7559\u7ed3\u679c\u7684 <code>and</code>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2010%20%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E5%92%8C%E7%A7%BB%E4%BD%8D%E6%8C%87%E4%BB%A4.html#11-test-\u8fd0\u7b97","title":"1.1 <code>test</code> \u8fd0\u7b97","text":"<p>Note</p> <ul> <li>\u76f8\u5f53\u4e8e\u8fdb\u884c\u4e00\u4e2a <code>AND</code> \u8fd0\u7b97\uff0c\u7ed3\u679c\u4e0d\u4f1a\u4fdd\u7559\u4f46\u4f1a\u5f71\u54cd flag</li> <li><code>test</code> \u4e0e <code>and</code> \u7684\u5173\u7cfb\u76f8\u5f53\u4e8e <code>cmp</code> \u548c <code>sub</code> \u7684\u5173\u7cfb</li> </ul> test<pre><code>mov ax, 1234h\ntest ax, 8000h  ; ZF = 0, AX = 1234h\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2010%20%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E5%92%8C%E7%A7%BB%E4%BD%8D%E6%8C%87%E4%BB%A4.html#2-\u79fb\u4f4d\u8fd0\u7b97","title":"2 \u79fb\u4f4d\u8fd0\u7b97","text":"\u6307\u4ee4 <code>shl</code> <code>shr</code> <code>rol</code> <code>ror</code> <code>sal</code> <code>sar</code> <code>rcl</code> <code>rcr</code> C \u7b97\u7b26 <code>&lt;&lt;</code> <code>&gt;&gt;</code> <code>_rotl()</code> <code>_rotr()</code> \u89e3\u91ca \u5faa\u73af\u5de6\u79fb \u5faa\u73af\u53f3\u79fb \u7b97\u6570\u5de6\u79fb \u7b97\u6570\u53f3\u79fb \u5e26\u8fdb\u4f4d\u7684\u903b\u8f91\u5de6\u79fb \u5e26\u8fdb\u4f4d\u7684\u903b\u8f91\u53f3\u79fb"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2010%20%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E5%92%8C%E7%A7%BB%E4%BD%8D%E6%8C%87%E4%BB%A4.html#21-\u5faa\u73af\u79fb\u4f4d\u6307\u4ee4-rol-ror","title":"2.1 \u5faa\u73af\u79fb\u4f4d\u6307\u4ee4 <code>rol, ror</code>","text":"<p>\u79fb\u4f4d\u4e0e <code>CF</code> \u7684\u5173\u7cfb</p> <p>Warning</p> <p><code>CF</code> \u91cc\u4fdd\u7559\u7684\u4e00\u5b9a\u662f\u6700\u540e\u79fb\u51fa\u53bb\u7684\u4e00\u4f4d\uff0c\u4e0d\u8bba\u662f\u4ec0\u4e48\u79fb\u4f4d\u6307\u4ee4</p> shift - CF<pre><code>mov ah, 0EFh  ; 1110 1111, CF = ?\nror ah, 1  ;    1111 0111, CF = 1\n</code></pre> printf()<pre><code>.386\ndata segment use16\nabc dd 2147483647\ndata ends\n\ncode segment use16\nassume cs:code, ds:data\nmain:\n    mov ax, seg abc\n    mov ds, ax\n    mov eax, abc  ; \u590d\u4e60\uff1a\u7f16\u8bd1\u540e\u7f16\u7a0b mov eax, ds:[0]\uff0c\u6240\u4ee5\u524d\u9762\u8981\u5148\u8d4b\u503c\n    mov cx, 8\nagain:\n    rol eax, 4\n    push eax  ; \u4e3a\u4e86\u6682\u65f6\u4fdd\u62a4 eax \u7684\u503c\uff0c\u4fdd\u5b58\u5230\u6808\u4e2d\n    and eax, 0Fh  ; \u8fd9\u65f6 and \u8fd0\u7b97\u6e05\u9664\u4e86 eax \u524d\u9762\u90e8\u5206\u7684\u5185\u5bb9\n    cmp al, 10\n    jb is_digit\nis_alpha:  // 16\u8fdb\u5236\u4e2d\u7684\u5b57\u6bcd\u4e5f\u53ef\u4ee5\u6253\u5370\n    sub al, 10\n    add al, 'A'\n    jmp finish_4bits\nis_digit:\n    add al, '0'\nfinish_4bits:\n    mov ah, 2\n    mov dl, al\n    int 21h\n    pop eax  ; \u8868\u793a\u4ece\u6808\u4e2d\u6062\u590d\u4e0a\u6b21 push \u65f6 eax \u7684\u503c\n    sub cx, 1\n    jnz again  ; jump if not zero\n    mov ah, 4Ch\n    int 21h\ncode ends\nend main\n</code></pre> <p>\u4f7f\u7528 <code>rol</code> \u6307\u4ee4\uff0c\u5c06 32-bit \u6570\u8f93\u51fa\u6210 16 \u8fdb\u5236\u7684\u683c\u5f0f</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2010%20%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E5%92%8C%E7%A7%BB%E4%BD%8D%E6%8C%87%E4%BB%A4.html#22-\u7b97\u6570\u79fb\u4f4d\u6307\u4ee4-sal-sar","title":"2.2 \u7b97\u6570\u79fb\u4f4d\u6307\u4ee4 <code>sal, sar</code>","text":"<ul> <li><code>sal</code> \u7b97\u6570\u5de6\u79fb\uff0c\u5176\u5b9e\u7b49\u4ef7\u4e8e <code>shl</code></li> <li><code>sar</code> \u7b97\u6570\u53f3\u79fb\uff0c\u4e0d\u7b49\u4e8e <code>shr</code>\uff0c\u56e0\u4e3a\u6709\u7b26\u53f7\u95ee\u9898</li> </ul> arithmetic shift<pre><code>mov ah, 0FEh  ; 1111 1110 = -2\nsar ah, 1  ;    1111 1111 = -1\n\nmov ah, 0FEh  ; 1111 1110 = 254\nshr ah, 1  ;    0111 1111 = 124\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2010%20%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E5%92%8C%E7%A7%BB%E4%BD%8D%E6%8C%87%E4%BB%A4.html#23-\u8fdb\u4f4d\u5faa\u73af\u4f4d\u79fb\u6307\u4ee4-rcl-rcr","title":"2.3 \u8fdb\u4f4d\u5faa\u73af\u4f4d\u79fb\u6307\u4ee4 <code>rcl, rcr</code>","text":"<ul> <li><code>rcl</code> \u5e26\u8fdb\u4f4d\u5faa\u73af\u5de6\u79fb</li> <li><code>rcr</code> \u5e26\u8fdb\u4f4d\u5faa\u73af\u53f3\u79fb</li> <li>\u6bcf\u6b21\u79fb\u5165 <code>CF</code>\uff0c\u79fb\u51fa\u7684\u5230 <code>CF</code></li> </ul> shift 1234ABCDh left 3 bit without 32-bit reg<pre><code>; method 1\nmov ax, 0ABCDh\nmov dx, 1234h\nshl dx, 3\nmov bx, ax\nshl ax, 3\nshr bx, 13\nor dx, bx\n\n; method 2 with rcl\nmov ax, 0ABCDh\nmov dx, 1234h\nmov cx, 3\nnext:\n    shl ax, 1  ; \u79fb\u5230 CF\n    rcl dx, 1  ; CF \u4f1a\u8865 DX \u53f3\u4fa7\u7684\u7a7a\u6d1e\n    dec cx\n    jnq next\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html","title":"11 \u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#1-\u5b57\u7b26\u4e32\u590d\u5236\u6307\u4ee4","title":"1 \u5b57\u7b26\u4e32\u590d\u5236\u6307\u4ee4","text":"copy<pre><code>memcpy(void *t, void *s, int n);\nmemmove(void *t, void *s, int n);\nstrcpy(char *t, char *s);\nstrncpy(char *t, char *s, int n);  // n \u8868\u793a\u6700\u591a\u590d\u5236\u7684\u5b57\u7b26\u6570\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#11-rep-movsb","title":"1.1 <code>rep movsb</code>","text":"<p>\u4ece <code>ds:si</code> \u5f00\u59cb\u590d\u5236\u5230 <code>es:di</code>\uff0c\u5411\u524d\u5411\u540e\u7531 <code>DF</code> \u51b3\u5b9a\uff0c\u6b21\u6570\u7531 <code>CX</code> \u51b3\u5b9a</p> movsb<pre><code>again:\n    if (xc == 0)\n        goto done;\n    byte ptr es:[di] = byte ptr ds:[si]\n    if (df == 0)\n        { si++, di++; }\n    else\n        { si-- ; di--; }\n    cx--\n    goto again\ndone:\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#111-example","title":"1.1.1 Example","text":"example: \u4ece\u5de6\u8fb9\u590d\u5236\u5230\u53f3\u8fb9<pre><code>1000:0000  \"A\"   2000:0000  \"A\"\n1000:1001  \"B\"   2000:0001  \"B\"\n1000:1002  \"C\"   2000:0002  \"C\"\n1001:1003   0    2000:0003   0\n</code></pre> example<pre><code>mov ax, 1000h\nmov ds, ax\nmov si, 0  ; mov si, 3\nmov ax, 2000h\nmov es, ax\nmov di, 0  ; mov di, 3\nmov cx, 4\ncld        ; std\nrep movsb\n</code></pre> <p>Attention</p> <ul> <li><code>si, di</code> \u4e00\u5b9a\u4f1a\u8d85\u51fa\u590d\u5236\u8303\u56f4 1</li> <li>\u5982\u679c <code>cld</code>\uff0c\u90a3\u4e48\u6700\u7ec8 <code>si=di=4</code></li> <li>\u5982\u679c <code>std</code>\uff0c\u90a3\u4e48\u6700\u7ec8 <code>si=di=FFFF</code></li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#12-rep-movsw","title":"1.2 <code>rep movsw</code>","text":"<p>\u4e00\u6b21\u590d\u5236\u4e00\u4e2a word</p> <pre><code>again:\n    if (cx == 0)\n        goto done;\n    word ptr es:[di] = word ptr ds:[si]\n    if (df == 0)\n        { si+=2; di+=2; }\n    else\n        { si-=2; di-=2; }\n    goto again\ndone:\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#13-rep-movsd","title":"1.3 <code>rep movsd</code>","text":"<p>\u540c\u7406\uff0c\u53ea\u662f\u4e00\u6b21\u590d\u5236 4 \u4e2a byte</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#14-\u5982\u679c\u4e00\u6b21\u4e0d\u662f-4-\u4e2a-byte","title":"1.4 \u5982\u679c\u4e00\u6b21\u4e0d\u662f 4 \u4e2a byte","text":"<p>\u5728 32 \u4f4d\u7cfb\u7edf\u4e0b\uff0c\u5982\u679c\u8981\u590d\u5236\u7684\u5b57\u8282\u6570 <code>ecx</code> \u4e0d\u662f 4 \u7684\u500d\u6570\uff0c\u53ef\u4ee5\u505a\u4e0b\u9762\u8fd9\u6837\u7684\u5904\u7406\uff0c\u76f8\u5f53\u4e8e\u5904\u7406\u4e86\u6700\u540e\u51e0\u4e2a</p> <pre><code>push ecx\nshr ecx, 2\nrep movsd\npop ecx\nand ecx, 3  ; \u76f8\u5f53\u4e8e ecx = ecx % 4\nrep movsb\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#2-\u5b57\u7b26\u4e32\u6bd4\u8f83\u6307\u4ee4","title":"2 \u5b57\u7b26\u4e32\u6bd4\u8f83\u6307\u4ee4","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#21-cmpsb","title":"2.1 <code>cmpsb</code>","text":"<pre><code>cmp byte ptr ds:[si] and byte ptr es:[di]\nif df == 0:\n    si++\n    di++\nelse:\n    si--\n    di--\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#22-repe-cmpsb","title":"2.2 <code>repe cmpsb</code>","text":"<p>\u82e5\u672c\u6b21\u76f8\u7b49\u5219\u7ee7\u7eed\u6bd4\u8f83\u4e0b\u4e00\u4e2a\uff0crepeat if equal</p> <pre><code>again:\n    if (cx == 0)\n        goto done\n    compare byte ptr ds:[si] and byte ptr es:[di]\n    if (df == 0)\n        { si++; di++; }\n    else\n        { si--; di--; }\n    cx--\n    if (\u672c\u6b21\u6bd4\u8f83\u76f8\u7b49)\n        goto again\ndone:\n</code></pre> <p>Attention</p> <ul> <li>\u8fd9\u91cc\u7684 <code>cx</code> \u7684\u4f5c\u7528\u662f\u786e\u5b9a\u4e00\u4e2a\u6700\u5927\u6bd4\u8f83\u4f4d\u6570</li> <li>\u6bcf\u6b21\u6bd4\u8f83\uff0c\u65e0\u8bba\u662f\u5426\u76f8\u7b49\uff0c<code>si, di</code> \u90fd\u4f1a\u53d8\u5316\uff0c\u6240\u4ee5\u8981\u6ce8\u610f\u8fb9\u754c</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#23-repne-cmpsb","title":"2.3 <code>repne cmpsb</code>","text":"<p>\u5982\u679c\u672c\u6b21\u6bd4\u8f83\u4e0d\u76f8\u7b49\u5219\u7ee7\u7eed\u6bd4\u8f83\u4e0b\u4e00\u4e2a\uff0crepeat if not equal</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#24-\u5b9e\u73b0-strcmp","title":"2.4 \u5b9e\u73b0 <code>strcmp</code>","text":"strcmp<pre><code>    repe cmpsb\n    je equal\n    dec si\n    dec di\nequal:\n</code></pre> <ul> <li>\u5982\u679c\u6700\u540e\u4e00\u6b21\u6bd4\u8f83\u76f8\u7b49\uff0c\u8bf4\u660e\u4ece <code>CX==0</code> \u5904\u9000\u51fa\uff0c\u4e24\u4e2a\u5b57\u7b26\u4e32\u5168\u7b49\uff0c<code>di, si</code> \u6b63\u597d\u505c\u5728\u5b57\u7b26\u4e32\u5916\u9762\u4e00\u4f4d</li> <li>\u5982\u679c\u6700\u540e\u4e00\u6b21\u4e0d\u76f8\u7b49\uff0c\u8bf4\u660e\u4ece <code>if (\u672c\u6b21\u6bd4\u8f83\u76f8\u7b49)</code> \u9000\u51fa\uff0c\u4e0d\u5168\u7b49\uff0c<code>di, si</code> \u505c\u5728\u7b2c\u4e00\u4e2a\u4e0d\u540c\u4f4d\u7f6e\u7684\u540e\u9762\u4e00\u4f4d\uff0c\u6240\u4ee5\u9700\u8981 <code>dec</code> \u4e00\u6b21\u6765\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u76f8\u7b49\u7684\u5b57\u7b26</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#3-\u5b57\u7b26\u4e32\u626b\u63cf\u6307\u4ee4","title":"3 \u5b57\u7b26\u4e32\u626b\u63cf\u6307\u4ee4","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#31-scasb","title":"3.1 <code>scasb</code>","text":"<p>\u5c06 <code>al</code> \u4e0e\u5b57\u7b26\u8fdb\u884c\u6bd4\u8f83\uff0cscan string by byte</p> <pre><code>cmp al, es:[di]\nif (df == 0)\n    di++;\nelse\n    di--;\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#32-repne-scasb","title":"3.2 <code>repne scasb</code>","text":"<p>\u5982\u679c\u672c\u6b21\u6bd4\u8f83\u4e0d\u76f8\u7b49\u5219\u7ee7\u7eed\u6bd4\u8f83\u4e0b\u4e00\u4e2a</p> <pre><code>next:\n    if (cx == 0) goto done\n    cmp al, es:[di]\n    if (df == 0) di++;\n    else di--;\n    cx--\n    je done\n    goto next\ndone:\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#321-\u5e94\u7528\u5b9e\u73b0-strlen","title":"3.2.1 \u5e94\u7528\uff1a\u5b9e\u73b0 <code>strlen</code>","text":"<pre><code>mov ax, 1000h\nmov es, ax\nmov di, 2000h  ; es:di \u5c31\u662f\u76ee\u6807\u5b57\u7b26\u4e32\nmov cx, 0FFFFh  ; \u6700\u591a\u67e5\u627e FFFF \u6b21\nmov al, 0  ; \u5f85\u67e5\u627e\u7684\u5b57\u7b26\ncld  ; \u4f7f\u7528\u6b63\u65b9\u5411\nrepne scasb\nnot cx  ; \u76f8\u5f53\u4e8e FFFF-cx\ndec cx\n</code></pre> <ul> <li>\u7531\u4e8e\u626b\u63cf\u5230 <code>\\0</code> \u65f6\u4ecd\u7136\u4f1a <code>cx--</code>\uff0c\u6240\u4ee5 <code>not cx</code> \u662f\u5305\u62ec <code>\\0</code> \u7684</li> <li>\u7531\u4e8e\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u5305\u62ec <code>\\0</code>\uff0c\u6240\u4ee5\u9700\u8981 <code>dec</code></li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#33-repe-scasb","title":"3.3 <code>repe scasb</code>","text":"<p>\u5982\u679c\u672c\u6b21\u6bd4\u8f83\u76f8\u7b49\u5219\u7ee7\u7eed\u6bd4\u8f83\u4e0b\u4e00\u4e2a</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#331-\u5e94\u7528\u5b9e\u73b0\u5220\u9664\u5b57\u7b26\u4e32\u524d\u9762\u7684\u5b57\u7b26","title":"3.3.1 \u5e94\u7528\uff1a\u5b9e\u73b0\u5220\u9664\u5b57\u7b26\u4e32\u524d\u9762\u7684\u5b57\u7b26","text":"<p>Question</p> <p>\u52a0\u5165 <code>1000:0000</code> \u5b58\u6709 <code>###ABC</code>\uff0c\u8981\u6c42\u8df3\u8fc7\u524d\u9762\u7684 <code>#</code>\uff0c\u5c06\u5269\u4f59\u90e8\u5206\u590d\u5236\u5230 <code>2000:0000</code></p> <pre><code>assume that es=1000h, di=0, cx=7\nmov al, '#'\ncld\nrepe scasb\ndec di  ; ES:DI-&gt;\"ABC\"\ninc cx  ; CX=4\npush es\npop ds  ; DS=ES\npush di\npop si  ; SI=DI\nmov ax, 2000h\nmov es, ax\nrep movsb\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#4-\u8bfb\u53d6\u5b57\u7b26\u4e32\u6307\u4ee4-lodsbwd","title":"4 \u8bfb\u53d6\u5b57\u7b26\u4e32\u6307\u4ee4 <code>lodsb/w/d</code>","text":"<p>\u52a0\u8f7d <code>ds:si</code> \u6307\u5411\u7684\u5185\u5bb9\u5e76\u79fb\u52a8\u6307\u9488</p> <pre><code>AL/AX/EAX = DS:[SI];\nSI++;\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#411-rep-lodsb","title":"4.1.1 <code>rep lodsb</code>","text":"<p>\u5b9e\u73b0\u7528 <code>CX</code> \u63a7\u5236\u7684\u8bfb\u53d6\u7ed9\u5b9a\u957f\u5ea6\u5185\u5b58</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#5-\u5b57\u7b26\u4e32\u5199\u5165\u6307\u4ee4-stosbwd","title":"5 \u5b57\u7b26\u4e32\u5199\u5165\u6307\u4ee4 <code>stosb/w/d</code>","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#51-stosbwd-\u586b\u5145\u6307\u4ee4","title":"5.1 <code>stosb/w/d</code> \u586b\u5145\u6307\u4ee4","text":"<p>\u8fdb\u884c\u4e00\u6b21\u586b\u5145\uff0c\u79fb\u52a8 <code>di</code></p> <pre><code>es:[di] = al\nif (df == 0)\n    di++\nelse\n    di--\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#511-rep-stosb","title":"5.1.1 <code>rep stosb</code>","text":"<p>\u5faa\u73af <code>cx</code> \u6b21 <code>stosb</code></p> <pre><code>again:\n    if (cx == 0) goto done\n    es:[di] = al / ax / eax\n    if (df == 0)\n        di++ / di+=2 / di+=4\n    else\n        di-- / di-=2 / di-=4\n    cx--\n    goto again\ndone:\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#512-\u7528\u5904\u5185\u5b58\u521d\u59cb\u5316","title":"5.1.2 \u7528\u5904\uff1a\u5185\u5b58\u521d\u59cb\u5316","text":"\u5c06 1000:10A0 \u5f00\u59cb\u5171 100h \u4e2a\u5b57\u8282\u90fd\u6e05\u96f6<pre><code>mov ax, 1000h\nmov es, ax\nmov di, 10A0h\nmov cx, 100h\ncld\nxor al, al\nrep stosb\n</code></pre> <p>\u6216\u8005\u4f7f\u7528 double word \u586b\u5145\uff0c\u80fd\u591f\u66f4\u5feb</p> \u5c06 1000:10A0 \u5f00\u59cb\u5171 100h \u4e2a\u5b57\u8282\u90fd\u6e05\u96f6<pre><code>mov ax, 1000h\nmov es, ax\nmov di, 10A0h\nmov cx, 40h\ncld\nxor eax, eax\nrep stosd\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2011%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.html#513-example-\u8fc7\u6ee4\u5b57\u7b26","title":"5.1.3 Example: \u8fc7\u6ee4\u5b57\u7b26","text":"<p><code>ds:si -&gt; \"##AB#12#XY\"</code>\uff0c<code>es:di</code> \u6307\u5411\u7a7a\u6570\u7ec4\uff0c<code>cx=11</code> \u8fc7\u6ee4\u5b57\u7b26\u4e32\u5e76\u653e\u5230\u7a7a\u6570\u7ec4\u4e2d</p> <pre><code>    cld\nagain:\n    lodsb\n    cmp al, '#'\n    je next\n    stosb\nnext:\n    dec cx\n    jnz again\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2012%20%E6%8E%A7%E5%88%B6%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4.html","title":"12 \u63a7\u5236\u8f6c\u79fb\u6307\u4ee4","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2012%20%E6%8E%A7%E5%88%B6%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4.html#1-\u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4-jmp","title":"1 \u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 <code>jmp</code>","text":"\u77ed\u8df3\u8f6c \u8fd1\u8df3\u8f6c \u8fdc\u8df3\u8f6c \u673a\u5668\u7801 <code>EB</code> <code>E9</code> <code>EA</code> \u8303\u56f4 <code>[80h, 7Fh]</code> <code>[8000h, 7FFFh]</code> <code>[0000:0000, FFFF:FFFF]</code> \u5907\u6ce8 \u76f8\u5bf9\u504f\u79fb \u76f8\u5bf9\u504f\u79fb\uff0c\u5c0f\u7aef\u89c4\u5219 \u8fdc\u6307\u9488"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2012%20%E6%8E%A7%E5%88%B6%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4.html#11-\u77ed\u8df3\u8f6c","title":"1.1 \u77ed\u8df3\u8f6c","text":"<pre><code>1000:0100  EB06  jmp 0108h  ; \u4fdd\u5b58\u7684\u662f\u76f8\u5bf9\u5730\u5740\n1000:0102\n1000:0104\n1000:0106\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u662f <code>EB06</code></p> <p>\u8ba1\u7b97 <code>0108h - 0102h = 06</code> \u7528\u76ee\u6807\u5730\u5740\u51cf\u53bb\u4e0b\u4e00\u6761\u6307\u4ee4\u5730\u5740\u5373\u53ef</p> <p>\u5982\u679c\u662f\u4e0b\u9762\u8fd9\u79cd\u60c5\u51b5\uff1a</p> <p><pre><code>1D3E:00F0  ...\n1D3E:0100  EB??  jmp 00F0h\n</code></pre> \u6b64\u65f6\u8ba1\u7b97 <code>00F0h - 0102h = FFEEh</code> \u53ef\u4ee5\u8fdb\u884c\u7b26\u53f7\u622a\u65ad\uff0c\u5f97\u5230 <code>EE</code></p> <p>Note</p> <p>\u77ed\u8df3\u8f6c\u7684\u8303\u56f4\u4e3a <code>[-128, 127]</code></p> <p>Tip</p> <p>\u597d\u5904\u5728\u4e8e\uff0c\u5982\u679c\u4ee3\u7801\u88ab\u6574\u6bb5\u590d\u5236\uff0c\u8df3\u8f6c\u7684\u673a\u5668\u7801\u4e0d\u9700\u8981\u4fee\u6539</p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2012%20%E6%8E%A7%E5%88%B6%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4.html#111-\u4ee3\u7801\u79fb\u52a8","title":"1.1.1 \u4ee3\u7801\u79fb\u52a8","text":"<pre><code>code segment\nassume cs:code, ds:code, es:code\nmain:\n   push cs\n   pop ds; DS=CS\n   push cs\n   pop es; ES=CS\n   cld\n   mov ah, 2\n   mov dl, 'A'\n   int 21h\n   mov si, offset begin_flag  ; \u8d77\u59cb\u6307\u4ee4\u5730\u5740\n   mov di, 1000h  ; \u76ee\u6807\u5730\u5740\n   mov cx, offset end_flag - offset begin_flag  ; \u5f97\u5230\u8fd9\u6bb5\u4ee3\u7801\u673a\u5668\u8bed\u8a00\u7684\u603b\u957f\u5ea6\n   rep movsb\n   mov cx, offset end_flag - offset main  ; \u672c\u6bb5\u4ee3\u7801\u7684\u603b\u957f\u5ea6\n   mov di, offset main\n   mov bx, 1000h\n   jmp bx\nbegin_flag:\n   jmp next\nnext:\n   mov al, 0\n   rep stosb\n   mov ah, 2\n   mov dl, 'B'\n   int 21h\n   mov ah, 4Ch\n   int 21h\nend_flag:\ncode ends\nend main\n</code></pre> <p>Tip</p> <ul> <li>\u5c06 <code>begin_flag</code> \u540e\u9762\u7684\u5185\u5bb9\u79fb\u52a8\u5230\u65b0\u7684\u4f4d\u7f6e</li> <li>\u5728\u65b0\u7684\u4f4d\u7f6e\uff0c\u6709 <code>jmp</code> \u77ed\u8df3\u8f6c\u7684\u673a\u5668\u7801\u4e0d\u53d8\uff0c\u76f8\u5bf9\u504f\u79fb\u4ecd\u7136\u6b63\u786e</li> <li>\u5728\u65b0\u7684\u4f4d\u7f6e\u6267\u884c\u63a5\u4e0b\u6765\u7684\u7a0b\u5e8f\uff0c\u5c06\u539f\u6765\u4f4d\u7f6e\u7684\u4ee3\u7801\u62b9\u9664</li> <li>\u8f93\u51fa\u5b57\u7b26 <code>B</code></li> </ul> C \u4e2d\u7684\u4ee3\u7801\u79fb\u52a8<pre><code>extern int printf();\nint f(int a, int b)\n{\n   return a+b;\n}\nvoid zzz(void)\n{\n}\nmain()\n{\n   char buf[100];\n   char *p = (char *)printf;\n   char *q = (char *)f;\n   int n = (char *)zzz - (char *)f;\n   int y;\n   memcpy(buf, p, n);\n   memcpy(p, q, n);\n   y = printf(10, 20);\n   memcpy(p, buf, n);\n   printf(\"y=%d\\n\", y);\n}\n</code></pre> <p>Tip</p> <ul> <li>\u8fd9\u91cc\u7684 <code>zzz</code> \u53ea\u662f\u4e3a\u4e86\u786e\u5b9a <code>f</code> \u7684\u957f\u5ea6\uff0c\u76f8\u5f53\u4e8e label</li> <li>\u9996\u5148\u5907\u4efd\u539f\u672c\u7684 <code>printf</code></li> <li>\u7136\u540e\u66ff\u6362\uff0c\u8c03\u7528</li> <li>\u6700\u540e\u6062\u590d\u539f\u6765\u7684 <code>printf</code></li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2012%20%E6%8E%A7%E5%88%B6%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4.html#12-\u8fd1\u8df3\u8f6c","title":"1.2 \u8fd1\u8df3\u8f6c","text":"\u8fd1\u8df3\u8f6c\u7684\u4e09\u79cd\u683c\u5f0f<pre><code>jmp 1000h  ; \u504f\u79fb\u5730\u5740\u6216\u8005\u6807\u53f7\njmp bx  ; 16 \u4f4d\u5bc4\u5b58\u5668\njmp word ptr [addr]  ; 16 \u4f4d\u53d8\u91cf\n</code></pre> <pre><code>1D3E:0100  E9FD1E  jmp 2000h\n1D3E:0103\n....\n1D3E:2000\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u662f <code>FD1E</code></p> <p><code>2000h - 0103h = 1EFD</code>\uff0c\u5e76\u4f7f\u7528\u5c0f\u7aef\u683c\u5f0f\u8868\u793a\u6210 <code>FD1E</code></p> <p>Note</p> <p>\u8fd1\u8df3\u8f6c\u7684\u8303\u56f4\u4e3a <code>[8000h, 7FFFh]</code></p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2012%20%E6%8E%A7%E5%88%B6%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4.html#13-\u8fdc\u8df3\u8f6c","title":"1.3 \u8fdc\u8df3\u8f6c","text":"<pre><code>code segment\nassume cs:code\nmain:\n    ; jmp far ptr 0FFFFh:0000h \u76f4\u63a5\u7528\u8fd9\u4e2a\u7f16\u8bd1\u4e0d\u4f1a\u901a\u8fc7\n    db 0EAh;  jmp far ptr \u7684\u673a\u5668\u8bed\u8a00\u6307\u4ee4\n    dw 0\n    dw 0FFFFh\ncode ends\nend main\n</code></pre> <p>Note</p> <p>\u4e0a\u9762\u7684 <code>jmp 0FFFFh:0000h</code> \u76f8\u5f53\u4e8e\u91cd\u542f\uff0c\u8fd9\u662f ROM \u6620\u5c04\u7684\u5730\u5740\uff0c\u662f\u5f00\u673a\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4</p> <pre><code>data segment\n    addr dw 0000h, 0FFFFh\n    ; \u6216 addr dd 0000FFFFh\ndata ends\n\ncode segment\nassume cs:code, ds:data\nmain:\n    mov ax, data\n    mov ds, ax\n    jmp dword ptr [addr]\ncode ends\nend main\n</code></pre>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2012%20%E6%8E%A7%E5%88%B6%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4.html#14-\u603b\u7ed3","title":"1.4 \u603b\u7ed3","text":"<pre><code>code segment\nassume cs:code\nmain:\n    jmp next  ; \u6ca1\u6709\u5fc5\u8981\u5199\u6210 jmp short next\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u8fa8\u522b\u662f\u77ed\u8df3\u8fd8\u662f\u8fd1\u8df3\nexit:\n    mov ah, 4Ch\n    mov dl, 'A'\n    int 21h\n    jmp abc  ; jmp neat ptr abc\n    db 200h dup(0)  ; \u4e13\u95e8\u7528\u6765\u963b\u788d\u77ed\u8df3\nabc:\n    jmp far ptr away\ncode ends\n\nfff segment\nassume cs:fff\naway:\n    mov ah, 2\n    mov dl, 'F'\n    int 21h\n    jmp far ptr exit  ; jmp far ptr exit\nfff ends\nend main\n</code></pre> <p>Note</p> <p>\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u4f1a\u4ea7\u751f\u8fd9\u6837\u7684\u7ed3\u679c <pre><code>jmp next\nnop\n... \n</code></pre> \u8fd9\u662f forward reference\uff0c\u7f16\u8bd1\u5668\u8fd8\u4e0d\u77e5\u9053 <code>next</code> \u5728\u54ea\u91cc\uff0c\u53ef\u80fd\u9700\u8981 3 byte \u7684\u77ed\u8df3\uff0c\u6240\u4ee5\u5148\u7a7a\u51fa 3 byte\uff0c\u53d1\u73b0\u4e3a\u77ed\u8df3\u4e4b\u540e\u518d\u6539\u6210 <code>nop</code></p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2012%20%E6%8E%A7%E5%88%B6%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4.html#2-\u5faa\u73af\u6307\u4ee4-loop","title":"2 \u5faa\u73af\u6307\u4ee4 <code>loop</code>","text":"<pre><code>    mov ax, 0\n    mov cx, 3\n    ; jcxz done\nnext:\n    add ax, cx\n    loop next  ; cx = 2, 1, 0\n               ; dec cx\n               ; jnz next\ndone:\n</code></pre> <p>Warning</p> <p>\u5982\u679c <code>cx = 0</code>\uff0c\u5e76\u4e0d\u662f 0 \u6b21\u5faa\u73af\uff0c\u56e0\u4e3a <code>cx--</code> \u4f1a\u5148\u6267\u884c\uff0c\u6240\u4ee5\u4f1a\u6267\u884c <code>10000h</code> \u6b21 \u5982\u679c\u4e0d\u5e0c\u671b\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u53ef\u4ee5\u5728\u5faa\u73af\u5916\u9762\u8fdb\u884c\u4e00\u4e2a\u5224\u65ad <code>jcxz done</code></p> <p>Note</p> <p>\u53e6\u6709 <code>loopz, loopnz</code> \u6307\u4ee4\uff0c\u53ef\u4ee5\u6839\u636e\u6bd4\u8f83\u7684\u7ed3\u679c\u6765\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u5faa\u73af <pre><code>mov ax, 8000h\nmov bx, 8\nmov cx, 10h\nagain:\n    rol ax 1\n    test bx, ax\n    loopz again\n</code></pre></p>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%2012%20%E6%8E%A7%E5%88%B6%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4.html#3-\u5b50\u7a0b\u5e8f\u8c03\u7528\u4e0e\u8fd4\u56de\u6307\u4ee4","title":"3 \u5b50\u7a0b\u5e8f\u8c03\u7528\u4e0e\u8fd4\u56de\u6307\u4ee4","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%20Cheat%20Sheet.html","title":"Cheat Sheet","text":""},{"location":"ZJU-Assembly%20Fundamentals/ASMF%20Cheat%20Sheet.html#\u7f16\u7a0b-tips","title":"\u7f16\u7a0b tips","text":"<ul> <li><code>add dl, '0'</code> \u8f6c\u5b57\u7b26\u683c\u5f0f</li> <li><code>add dl, 20h</code> \u5927\u5199\u8f6c\u5c0f\u5199</li> <li><code>sub dl, 20h</code> \u5c0f\u5199\u8f6c\u5927\u5199</li> <li>32 \u4f4d\u6574\u6570\u8f6c 16 \u8fdb\u5236\u8f93\u51fa<ul> <li>\u6bcf\u6b21 <code>rol -&gt; push -&gt; and 0Fh -&gt; ... -&gt; pop</code> \u5b9e\u73b0\u4ece\u9ad8\u5230\u4f4e\uff0c\u6bcf\u6b21\u53d6\u56db\u4f4d</li> <li>\u903b\u8f91\u5224\u65ad <code>cmp al, 10</code>\uff0c\u9009\u62e9\u8f93\u51fa\u4e00\u4e2a\u6570\u5b57\u6216\u8005\u5b57\u6bcd</li> </ul> </li> <li>\u4e8c\u8fdb\u5236\u53d8\u91cf\u8f6c\u5341\u8fdb\u5236\u8f93\u51fa<ul> <li>\u6bcf\u6b21\u8fdb\u884c <code>64 / 32 -&gt; 32</code> \u9664\u6cd5\u8fd0\u7b97\u9632\u6b62\u6ea2\u51fa</li> <li>\u4f7f\u7528\u6808\u8fdb\u884c\u53cd\u5411\u8f93\u51fa\uff0c\u8ba9\u4e2a\u4f4d\u6700\u540e\u8f93\u51fa</li> <li>\u9700\u8981\u7edf\u8ba1 push \u7684\u6b21\u6570</li> </ul> </li> <li>\u5220\u9664\u5b57\u7b26\u4e32\u524d\u9762\u7684\u5b57\u7b26<ul> <li>\u4f7f\u7528 <code>repe scasb</code> \u6765\u8df3\u8fc7\u7b49\u4e8e <code>al</code> \u7684\u5b57\u7b26</li> </ul> </li> <li><code>strcmp</code><ul> <li><code>repe cmpsb</code><ul> <li>\u5982\u679c\u6700\u540e\u4e00\u6b21\u76f8\u7b49\uff0c\u5219\u5168\u7b49\uff0c\u4e14\u8fc7\u5b8c\u4e86\u6574\u4e2a\u5b57\u7b26\u4e32</li> <li>\u5426\u5219\uff0c\u4e0d\u5168\u7b49\uff0c\u505c\u5728\u4e86\u7b2c\u4e00\u4e2a\u4e0d\u76f8\u7b49\u5b57\u7b26\u4e32\u7684\u540e\u9762</li> </ul> </li> </ul> </li> <li>\u5185\u5b58\u6e05\u96f6<ul> <li><code>rep stosb</code> \u6765\u8fdb\u884c\u6279\u91cf\u7f6e\u96f6</li> </ul> </li> <li>\u8fc7\u6ee4\u5b57\u7b26\u4e32\u5b57\u7b26<ul> <li>\u9996\u5148\u8bbe\u7f6e\u597d <code>cld</code>\uff0c\u786e\u8ba4 <code>di, si</code> \u5730\u5740\u6b63\u786e\uff0c\u7136\u540e\u6bcf\u4e00\u4e2a\u5b57\u7b26\u90fd <code>lodsb ... stosb</code> \u6765\u5b9e\u73b0</li> </ul> </li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%20Cheat%20Sheet.html#\u6307\u4ee4\u8868","title":"\u6307\u4ee4\u8868","text":"<ul> <li>\u6570\u636e\u4f20\u9001\u6307\u4ee4<ul> <li>\u901a\u7528\u6570\u636e\u4f20\u9001\u6307\u4ee4 <code>mov,push,pop,xchg</code><ul> <li><code>mov dest, src</code><ul> <li>\u4e0d\u80fd\u7ed9 <code>cs</code> \u8d4b\u503c</li> <li>\u4e0d\u5f71\u54cd\u6807\u5fd7\u4f4d</li> <li>\u4e24\u4e2a\u64cd\u4f5c\u6570\u4e0d\u80fd\u90fd\u662f\u5185\u5b58\u53d8\u91cf</li> <li>\u7b49\u5bbd\u4fee\u9970\uff01\uff01</li> <li>\u4e0d\u80fd\u5c06\u5e38\u6570\u8d4b\u503c\u7ed9\u6bb5\u5bc4\u5b58\u5668</li> <li>\u4e0d\u80fd\u5f15\u7528 <code>ip, fl</code> \u5bc4\u5b58\u5668</li> </ul> </li> <li><code>push op</code> \u5c06 <code>src</code> \u538b\u5165\u5806\u6808\u5e76\u66f4\u65b0 <code>sp</code><ul> <li>\u4e0d\u5f71\u54cd\u6807\u5fd7\u4f4d</li> <li>\u4e0d\u652f\u6301 8 \u4f4d\u64cd\u4f5c\u6570</li> </ul> </li> <li><code>pop op</code> \u5f39\u51fa\u7ed9 <code>op</code>\uff0c\u6ce8\u610f\u4e8b\u9879\u548c <code>push</code> \u4e00\u6837</li> <li><code>xchg src1, src2</code> \u4ea4\u6362\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u503c<ul> <li>\u4e0d\u5f71\u54cd\u6807\u5fd7\u4f4d</li> <li>\u4e0d\u80fd\u6709\u6bb5\u5bc4\u5b58\u5668</li> </ul> </li> </ul> </li> <li>\u8f93\u5165\u8f93\u51fa\u6307\u4ee4 <code>in, out</code> \u7528\u4e8e\u7aef\u53e3\u64cd\u4f5c<ul> <li><code>in al, port</code> \u4ece\u7aef\u53e3\u8bfb\u53d6\u5230 <code>al</code><ul> <li><code>port</code> &lt; 0FFh \u7684\u65f6\u5019\u624d\u80fd\u7528\u5e38\u6570\uff0c\u5426\u5219\u8981\u7528 dx \u5bc4\u5b58\u5668\uff0c<code>in al, dx</code></li> </ul> </li> <li><code>out port, al</code> \u5c06 <code>al</code> \u5199\u5165\u5230\u7aef\u53e3\uff0c\u548c <code>in</code> \u4e00\u6837\u6ce8\u610f\u4e8b\u9879</li> </ul> </li> <li>\u5730\u5740\u4f20\u9001\u6307\u4ee4 <code>lea, lds, les</code><ul> <li><code>lea dest, src</code> load effective address \u52a0\u8f7d\u504f\u79fb\u5730\u5740</li> <li><code>lds dest, src</code> \u5c06 <code>src</code> \u504f\u79fb\u5730\u5740\u653e\u5230 <code>dest</code>\uff0c\u6bb5\u5730\u5740\u653e\u5728 <code>ds</code></li> <li><code>les dest, src</code> \u5c06 <code>src</code> \u504f\u79fb\u5730\u5740\u653e\u5230 <code>dest</code>\uff0c\u6bb5\u5730\u5740\u653e\u5728 <code>es</code></li> </ul> </li> <li>\u6807\u5fd7\u5bc4\u5b58\u5668\u4f20\u9001\u6307\u4ee4 <code>lahf, sahf, pushf, popf</code><ul> <li><code>lahf</code> \u5c06 <code>fl</code> \u4f4e 8 \u4f4d\u8d4b\u503c\u7ed9 <code>ah</code> (load AH with Flags)</li> <li><code>sahf</code> \u5c06 <code>ah</code> \u8d4b\u503c\u7ed9 <code>fl</code> \u4f4e 8 \u4f4d (Store AH in Flags)</li> <li><code>pushf(d)</code> \u52a0 d \u662f <code>efl</code></li> <li><code>popf(d)</code> \u52a0 d \u662f <code>efl</code></li> </ul> </li> </ul> </li> <li>\u8f6c\u6362\u6307\u4ee4<ul> <li>\u6269\u5145\u6307\u4ee4<ul> <li><code>cbw</code> <code>al-&gt;ax</code></li> <li><code>cwd</code> <code>ax-&gt;dx:ax</code></li> <li><code>cdq</code> <code>eax-&gt;edx:eax</code></li> <li><code>movsx dest, src</code> \u5c06 <code>src</code> \u7b26\u53f7\u6269\u5145\u653e\u5230 <code>dest</code></li> <li><code>movzx dest, src</code> \u5c06 <code>src</code> \u96f6\u6269\u5145\u653e\u5230 <code>dest</code></li> <li><code>xlat</code> \u628a <code>byte ptr ds:[bx+al]</code> \u8d4b\u503c\u7ed9 <code>al</code><ul> <li>\u5148\u6784\u9020 <code>ds:bx-&gt;array</code></li> <li>\u7136\u540e\u5728 <code>al</code> \u4e2d\u5199\u5165\u5b57\u8282\u4e0b\u6807\uff0c\u4f7f\u7528 <code>xlat</code> \u53d6\u8fd9\u4e2a\u5b57\u8282</li> </ul> </li> </ul> </li> </ul> </li> <li>\u7b97\u6570\u8fd0\u7b97\u6307\u4ee4<ul> <li>\u52a0\u6cd5\u6307\u4ee4<ul> <li><code>add dest, src</code></li> <li><code>inc op</code> \u4e0d\u5f71\u54cd CF</li> <li><code>adc dest, src</code> <code>dest = dest + src + CF</code></li> </ul> </li> <li>\u51cf\u6cd5\u6307\u4ee4<ul> <li><code>sub dest, src</code></li> <li><code>sbb dest, src</code> <code>dest = dest - src - CF</code><ul> <li>\u8ba1\u7b97\u501f\u4f4d\u51cf\u6cd5\u4e5f\u5e94\u8be5\u4ece\u4f4e\u4f4d\u7b97\u5230\u9ad8\u4f4d</li> </ul> </li> <li><code>dec op</code> \u4e0d\u5f71\u54cd CF</li> <li><code>neg op</code></li> <li><code>cmp op1, op2</code> <code>temp = op1 - op2</code><ul> <li>\u5f71\u54cd\u6807\u5fd7\u4f4d\uff0c\u4f46\u662f\u5e76\u4e0d\u4fdd\u5b58\u7ed3\u679c</li> <li>\u540e\u9762\u5e38\u4f34\u968f\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4</li> </ul> </li> </ul> </li> <li>\u4e58\u6cd5\u6307\u4ee4<ul> <li><code>mul src</code> \u65e0\u7b26\u53f7\u6570\u4e58\u6cd5<ul> <li><code>src</code> 8 \u4f4d\uff0c<code>ax = al * src</code></li> <li><code>src</code> 16 \u4f4d\uff0c<code>dx:ax = ax * src</code></li> <li><code>src</code> 32 \u4f4d\uff0c<code>edx:eax = eax * src</code></li> </ul> </li> <li><code>imul</code> \u6709\u7b26\u53f7\u6570\u4e58\u6cd5<ul> <li><code>imul src</code> \u548c <code>mul src</code> \u7528\u6cd5\u76f8\u540c</li> <li><code>imul src1, src2</code> <code>src1 = src1 * src2</code></li> <li><code>imul src1, src2, imm</code> <code>src1 = src1 * src2 * imm</code></li> </ul> </li> </ul> </li> <li>\u9664\u6cd5\u6307\u4ee4<ul> <li><code>div op</code> \u65e0\u7b26\u53f7\u6570\u9664\u6cd5<ul> <li>8-bit, <code>ax / op = al...ah</code></li> <li>16-bit, <code>dx:ax / op = ax...dx</code></li> <li>32-bit, <code>edx:eax / op = eax...edx</code></li> <li>\u6ea2\u51fa<ul> <li>\u9664\u6570\u4e3a 0\uff0c\u6216\u8005\u5546\u8fc7\u5927\u5bfc\u81f4\u5546\u5bc4\u5b58\u5668\u65e0\u6cd5\u5bb9\u7eb3</li> <li>CPU \u4f1a\u5728\u9664\u6cd5\u524d\u9762\u63d2\u5165 <code>int 00h</code> \u6253\u5370 overflow \u5e76\u505c\u6b62\u7a0b\u5e8f</li> <li>\u53ef\u4ee5\u8c03\u6574 <code>dx:[0]</code> \u7684 <code>int 00h</code> \u4e2d\u65ad\u77e2\u91cf\u6765\u6539\u53d8\u884c\u4e3a</li> </ul> </li> </ul> </li> <li><code>idiv op</code> \u6709\u7b26\u53f7\u6570\u9664\u6cd5\uff0c\u548c <code>div</code> \u4e00\u6837</li> </ul> </li> <li>\u6d6e\u70b9\u8fd0\u7b97\u6307\u4ee4<ul> <li>fp \u5bc4\u5b58\u5668\u90fd\u662f 80-bit\uff0c\u4e00\u5171\u6709 <code>st(0), ..., st(7)</code> \u516b\u4e2a</li> <li><code>fld op</code> (float load) \u5c06\u4e00\u4e2a\u6d6e\u70b9\u6570\u538b\u5165\u5806\u6808</li> <li><code>fild op</code> (float int load) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\u538b\u5165\u5806\u6808</li> <li><code>fst dest</code> (float store) \u5c06 <code>st(0)</code> \u4fdd\u5b58\u5230\u4e00\u4e2a\u6d6e\u70b9\u7c7b\u578b\u53d8\u91cf\u6216\u5c0f\u6570\u5bc4\u5b58\u5668</li> <li><code>fstp dest</code> (float store and pop) \u4e00\u6837\u7684\u64cd\u4f5c\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2a pop \u7684\u6b65\u9aa4<ul> <li><code>fstp st</code> \u4e00\u822c\u7528\u6765\u5f53 pop \u7528</li> </ul> </li> </ul> </li> </ul> </li> <li>\u5341\u8fdb\u5236\u8c03\u6574\u6307\u4ee4<ul> <li>\u538b\u7f29 BCD \u7801\u8c03\u6574\u6307\u4ee4<ul> <li><code>daa</code> (decimal adjust after addition) \u5c06 <code>al</code> \u5728\u52a0\u6cd5\u4e4b\u540e\u91cd\u65b0\u8c03\u6574\u4e3a BCD \u7801</li> <li><code>das</code> (decimal adjust after substraction) \u5c06 <code>al</code> \u5728\u5251\u6cd5\u4e4b\u540e\u91cd\u65b0\u8c03\u6574\u4e3a BCD \u7801</li> </ul> </li> <li> \u975e\u538b\u7f29 BCD \u7801\u8c03\u6574\u6307\u4ee4 <ul> <li><code>aaa</code> (ASCII adjust after addition) \u975e\u538b\u7f29 BCD \u7801\u52a0\u6cd5\u8c03\u6574</li> <li><code>aas</code> (ASCII adjust after substraction) \u51cf\u6cd5\u8c03\u6574</li> <li><code>aam</code> (ASCII adjust after mul) \u4e58\u6cd5\u8c03\u6574</li> <li><code>aad</code> (ASCII adjust after div)</li> </ul> </li> </ul> </li> <li>\u903b\u8f91\u8fd0\u7b97\u548c\u79fb\u4f4d\u6307\u4ee4<ul> <li>\u903b\u8f91\u8fd0\u7b97\u6307\u4ee4<ul> <li><code>and dest, src</code></li> <li><code>or dest, src</code></li> <li><code>xor dest, src</code></li> <li><code>not op</code></li> <li><code>test dest, src</code> \u8fdb\u884c and \u8fd0\u7b97\u4f46\u662f\u4e0d\u4fdd\u7559\u7ed3\u679c</li> </ul> </li> <li>\u79fb\u4f4d\u6307\u4ee4 \u6700\u540e\u79fb\u51fa\u7684\u4e00\u4f4d\u6c38\u8fdc\u653e\u5230 CF<ul> <li><code>shl dest, count</code> \u903b\u8f91\u5de6\u79fb<ul> <li>\u6ca1\u6709 <code>.386</code> \u7684\u8bdd\uff0c\u53ea\u80fd\u662f <code>shl reg, 1</code></li> </ul> </li> <li><code>shr dest, count</code> \u903b\u8f91\u53f3\u79fb</li> <li><code>sal dest, count</code> \u7b97\u6570\u5de6\u79fb\uff0c\u548c SHL \u5b8c\u5168\u4e00\u6837</li> <li><code>srl dest, count</code> \u7b97\u6570\u53f3\u79fb\uff0c\u5de6\u8fb9\u8865\u7b26\u53f7\u4f4d</li> <li><code>rol dest, count</code> \u5faa\u73af\u5de6\u79fb\uff0c\u6700\u540e\u79fb\u51fa\u53c8\u79fb\u5165\u7684\u6570\u8fd8\u662f\u653e\u5728 CF</li> <li><code>ror dest, count</code> \u5faa\u73af\u53f3\u79fb</li> <li><code>rcl dest, count</code> \u5e26\u8fdb\u4f4d\u5faa\u73af\u5de6\u79fb\uff0c\u53f3\u8fb9\u8865 CF\uff0c\u5de6\u8fb9\u79fb\u5230 CF\uff0c\u76f8\u5f53\u4e8e CF \u4f5c\u4e3a\u591a\u4f59\u7684\u4e00\u4f4d\u53c2\u4e0e\u5faa\u73af\u79fb\u4f4d\u4e86</li> <li><code>rcr dest, count</code> \u5e26\u8fdb\u4f4d\u5faa\u73af\u53f3\u79fb</li> </ul> </li> </ul> </li> <li>\u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4<ul> <li>\u5b57\u7b26\u4e32\u590d\u5236\u6307\u4ee4 <code>rep movsb/w/d</code> (mov string in byte)<ul> <li><code>movsb</code> \u5148\u590d\u5236\u518d\u79fb\u52a8 SI DI<ol> <li><code>byte ptr es:[di] = byte ptr ds:[si]</code> \u5206\u522b\u662f data segment:source index \u548c extra segment:destination index</li> <li><code>if (!DF) { di++; si++; } else { di--; si--; }</code> w d \u5206\u522b\u4e3a 2 4</li> </ol> </li> <li><code>rep</code><ol> <li>\u5148\u5224\u65ad CX \u662f\u4e0d\u662f 0\uff0c\u5982\u679c\u662f\u5c31\u7ed3\u675f</li> <li>\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\uff0c\u7136\u540e CX--</li> </ol> </li> <li><code>rep movsb</code> \u5c06 <code>ds:[si]</code> \u6307\u5411\u7684\u5b57\u7b26\u4e32\u590d\u5236\u5230 <code>es:[di]</code>\uff0cCX \u6307\u5b9a\u590d\u5236\u5b57\u7b26\u6570\u91cf\uff0cDF \u5236\u5b9a\u590d\u5236\u65b9\u5411</li> </ul> </li> <li>\u5b57\u7b26\u4e32\u6bd4\u8f83\u6307\u4ee4 <code>repe/ne cmpsb/w/d</code><ul> <li><code>cmpsb</code> \u5148\u6bd4\u8f83\u518d\u79fb\u52a8 SI DI<ol> <li><code>cmp byte ptr ds:[si], byte ptr es:[di]</code>\uff0c\u72b6\u6001\u4fdd\u5b58\u5728 FL</li> <li><code>if (!DF) { di++; si++; } else { di--; si--; }</code></li> </ol> </li> <li><code>repe/ne</code> repeat if equal/not equal<ol> <li>\u5148\u5224\u65ad CX \u662f\u4e0d\u662f 0\uff0c\u5982\u679c\u662f\u5c31\u7ed3\u675f</li> <li>\u8fdb\u884c\u6307\u4ee4\u64cd\u4f5c</li> <li>CX-- \u4e0d\u5f71\u54cd\u6807\u5fd7\u4f4d</li> <li>\u5224\u65ad ZF \u662f\u5426\u4e3a 0\uff0c\u518d\u51b3\u5b9a\u662f\u7ec8\u6b62\u8fd8\u662f\u7ee7\u7eed</li> </ol> </li> <li><code>strcmp: repe cmpsb</code><ul> <li>\u521d\u59cb\u5316 CX \u4e3a\u5b57\u7b26\u4e32\u957f\u5ea6</li> <li><code>repe cmpsb</code></li> <li>\u5982\u679c\u6700\u540e\u4e00\u6b21\u662f equal\uff0c\u90a3\u4e48\u9047\u5230 <code>\\0</code> \u9000\u51fa\uff0c\u5b57\u7b26\u4e32\u5168\u7b49</li> <li>\u5426\u5219\uff0c\u627e\u5230\u4e0d\u76f8\u7b49\u7684\u5b57\u7b26\uff0c\u7531\u4e8e <code>cmpsb</code> \u6bd4\u8f83\u4e4b\u540e\u4e00\u5b9a\u4f1a\u79fb\u52a8 DI SI\uff0c\u6240\u4ee5 <code>dec si, dec di</code> \u624d\u80fd\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u5b57\u7b26\u4f4d\u7f6e</li> </ul> </li> </ul> </li> <li>\u641c\u7d22\u5b57\u7b26\u4e32\u6307\u4ee4 <code>repe/ne scasb/w/d</code><ul> <li><code>scasb</code> \u53ea\u548c <code>es:[di]</code> \u6709\u5173\u4e86\uff0c\u5176\u5b9e\u5c31\u662f cmpsb \u91cc\u7684\u6e90\u5b57\u7b26\u4e32\u53d8\u6210\u4e86 al/ax/eax<ol> <li><code>cmp al, byte ptr es:[di]</code></li> <li><code>if (!DF) di++; else di--;</code></li> </ol> </li> <li><code>strlen: repne scasb</code> \u53ef\u4ee5\u7528\u6765\u6c42\u5b57\u7b26\u4e32\u957f\u5ea6<ul> <li><code>al = 0</code></li> <li>\u521d\u59cb\u5316 CX=0FFFFh\uff0c\u8868\u793a\u6700\u5927\u641c\u7d22\u957f\u5ea6</li> <li>\u641c\u5230 0 \u7684\u65f6\u5019\uff0c\u6839\u636e repne \u7684\u6d41\u7a0b\uff0c\u8fd8\u4f1a\u8fdb\u884c CX--</li> <li>\u4f7f\u7528 <code>not cx</code> \u5f97\u5230\u641c\u7d22\u8fc7\u7684\u5b57\u7b26\u6570\u91cf\uff0c\u8fd8\u9700\u8981 <code>dec cx</code> \u5f97\u5230\u6ca1\u6709 <code>\\0</code> \u7684\u5b57\u7b26\u6570\u91cf</li> </ul> </li> </ul> </li> <li>\u5199\u5165\u5b57\u7b26\u4e32\u6307\u4ee4 <code>rep stosb/w/d</code><ul> <li><code>stosb</code> \u5c06 al/ax/eax \u5199\u5165 <code>es:[di]</code><ol> <li><code>byte ptr es:[di] = al</code></li> <li><code>if (!DF) di++; else di--;</code></li> </ol> </li> <li>\u53ef\u4ee5\u7528\u4e8e\u6570\u7ec4\u6e05\u96f6 <code>cx=len; al=0; rep stosb</code><ul> <li>\u540c\u65f6\u4f7f\u7528 <code>stosb/d</code><ul> <li><code>cx=len; push cx; shr cx, 2</code></li> <li><code>rep stosd</code></li> <li><code>pop cx; and cx, 3</code></li> <li><code>rep stosb</code></li> </ul> </li> </ul> </li> </ul> </li> <li>\u8bfb\u53d6\u5b57\u7b26\u4e32\u6307\u4ee4 <code>lodsb/w/d</code><ul> <li>\u4ece <code>ds:[si]</code> \u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26\u5230 al/ax/eax\uff0c\u5e76\u6309\u7167 DF \u6307\u793a\u79fb\u52a8 SI</li> <li>\u7b80\u5316\u4e86\u6570\u7ec4\u904d\u5386\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u7528\u4e8e\u8fc7\u6ee4\u5b57\u7b26</li> </ul> </li> </ul> </li> <li>\u63a7\u5236\u8f6c\u79fb\u6307\u4ee4<ul> <li>\u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 <code>jmp</code><ul> <li><code>jmp short dest</code> <code>EBXX</code></li> <li><code>jmp near ptr dest</code> <code>E9XXXX</code></li> <li><code>jmp far ptr dest</code> <code>EAXXXXXXXX</code></li> </ul> </li> <li>\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 <code>jcc</code> \u8df3\u8f6c\u8ddd\u79bb\u5168\u90fd\u662f 1 \u5b57\u8282\uff0c\u4e5f\u5c31\u662f short jump<ul> <li><code>ja = jnbe</code></li> <li><code>jb = jc = jnae</code></li> <li><code>jae = jnc = jnb</code></li> <li><code>jbe = jna</code></li> <li><code>jg = jnle</code></li> <li><code>jl = jnge</code></li> <li><code>jge = jnl</code></li> <li><code>jle = jng</code></li> <li><code>jz = je</code></li> <li><code>jnz = jne</code></li> <li><code>jp = jpe</code> \u6709\u5947\u5076\u6821\u9a8c\u4f4d\u5219\u8df3\u8f6c\uff0c\u4e5f\u5c31\u662f\u8fd0\u7b97\u7ed3\u679c\u4f4e 8 \u4f4d\u7684 1 \u6709\u5076\u6570\u4e2a</li> <li><code>jnp = jpo</code> jump is no parity</li> <li><code>jcxz</code> jump if cx is zero</li> <li><code>jecxz</code> jump if ecx is zero</li> </ul> </li> </ul> </li> <li>\u5faa\u73af\u6307\u4ee4<ul> <li><code>loop dest</code><ol> <li>CX--</li> <li>\u5982\u679c CX \u4e0d\u4e3a 0\uff0c\u5219\u8df3\u8f6c dest</li> <li>loop \u5faa\u73af\uff1a\u5faa\u73af\u4f53\uff0ccx--\uff0c\u5224\u65ad\uff1brep \u7cfb\u5217\u5faa\u73af\uff1a\u5224\u65ad\uff0c\u5faa\u73af\u4f53\uff0ccx--<ul> <li> \u8fd9\u5c31\u4f1a\u5bfc\u81f4\u5982\u679c\u521d\u59cb CX=0\uff0c\u5b9e\u9645\u4e0a\u4f1a\u6267\u884c FFFF \u6b21 </li> </ul> </li> </ol> </li> <li><code>loopz dest == loope dest</code><ol> <li>CX--</li> <li>\u5982\u679c <code>ZF==1 &amp;&amp; CX!=0</code>\uff0c\u624d\u8df3\u8f6c\u5230 dest</li> </ol> </li> <li><code>loopnz dest</code></li> </ul> </li> <li>\u5b50\u7a0b\u5e8f\u8c03\u7528\u4e0e\u8fd4\u56de\u6307\u4ee4<ul> <li><code>call near ptr dest</code> <code>E8 XXXX</code> \u8fd1\u8c03\u7528<ul> <li><code>back_addr = ip + 3</code></li> <li><code>push back_addr</code></li> <li><code>id = back_addr + delta</code></li> </ul> </li> <li><code>retn</code> \u8fd1\u8fd4\u56de<ul> <li>\u6d41\u7a0b<ul> <li><code>pop back_addr</code></li> <li><code>ip = back_addr</code></li> </ul> </li> <li><code>retn idata16</code> \u7528\u4e8e\u5806\u6808\u5e73\u8861\uff0c\u5c06\u8c03\u7528\u51fd\u6570\u65f6\u538b\u5165\u7684\u53c2\u6570\u5f39\u51fa\uff0c\u8fd9\u6837\u4e3b\u7a0b\u5e8f\u5c31\u4e0d\u9700\u8981\u7ba1\u7406\u5806\u6808\u5e73\u8861\u4e86<ul> <li><code>pop back_addr</code></li> <li><code>sp += idata16</code> <code>idata16</code> \u662f\u51fd\u6570\u53c2\u6570\u6240\u5360\u7684\u5b57\u8282\u6570\uff0c\u4e0d\u7b97\u8fd4\u56de\u5730\u5740\u7684</li> <li><code>ip = back_addr</code></li> </ul> </li> <li> \u6ce8\u610f <ul> <li>\u6807\u53f7\u5b9a\u4e49\u3001<code>name proc...name endp</code> \u5b9a\u4e49\u548c <code>name proc near...name endp</code> \u5b9a\u4e49\u7684\u51fd\u6570\u4e2d\uff0cret \u9ed8\u8ba4\u5c31\u662f retn</li> <li><code>name proc far...name endp</code> \u5b9a\u4e49\u7684\u51fd\u6570\u4e2d\uff0cret \u9ed8\u8ba4\u662f retf\uff0c\u6240\u4ee5 retn \u4e0d\u80fd\u7b80\u5199\u6210 ret</li> </ul> </li> </ul> </li> <li><code>call far ptr dest</code> <code>9A XXXX XXXX</code> \u8fdc\u8c03\u7528<ul> <li>\u6d41\u7a0b<ul> <li><code>push cs</code></li> <li><code>push ip+5</code> \u8fd9\u6837\u5728\u5806\u6808\u91cc\u7684 far ptr \u4e5f\u6ee1\u8db3\u4e86\u5c0f\u7aef\u89c4\u5219</li> <li><code>ip = dest_l</code></li> <li><code>cs = dest_h</code></li> </ul> </li> <li>dest \u53ef\u4ee5\u662f\u8fdc\u6807\u53f7 <code>name label far/ name proc far</code>\uff0c\u4e5f\u53ef\u4ee5\u662f mem32<ul> <li><code>call dword ptr es:[di]</code></li> </ul> </li> </ul> </li> <li><code>retf idata16</code> \u8fdc\u8fd4\u56de\uff0c\u5e76\u540c\u65f6\u53c2\u6570\u5806\u6808\u5e73\u8861</li> </ul> </li> <li>\u4e2d\u65ad\u548c\u4e2d\u65ad\u8fd4\u56de\u6307\u4ee4<ul> <li><code>int idata8</code> <code>CD XX</code><ul> <li><code>pushf</code></li> <li><code>push cs</code></li> <li><code>push ip+2</code></li> <li><code>ip = word ptr 0000:[idata8 * 4]</code></li> <li><code>cs = word ptr 0000:[idata8 * 4 + 2]</code></li> </ul> </li> <li><code>int 3</code> <code>CC</code> \u8f6f\u4ef6\u7aef\u70b9\u4e2d\u65ad<ul> <li><code>pushf</code></li> <li><code>push cs</code></li> <li><code>push ip+1</code></li> <li><code>ip = word ptr 0000:[000Ch]</code></li> <li><code>cs = word ptr 0000:[000Eh]</code></li> </ul> </li> <li><code>into</code> <code>CE</code> \u6ea2\u51fa\u4e2d\u65ad interrupt on overflow<ul> <li>\u5148\u5224\u65ad OF \u662f\u5426\u4e3a 1\uff0c\u662f\u624d\u63a5\u7740\u6267\u884c</li> <li><code>pushf</code></li> <li><code>push cs</code></li> <li><code>push ip+1</code></li> <li><code>ip = word ptr 0000:[0010h]</code></li> <li><code>cs = word ptr 0000:[0012h]</code></li> </ul> </li> <li><code>iret</code> \u4e2d\u65ad\u8fd4\u56de<ul> <li><code>pop ip</code></li> <li><code>pop cs</code></li> <li><code>popf</code></li> </ul> </li> </ul> </li> </ul> \u77ed\u8df3\u8f6c \u8fd1\u8df3\u8f6c \u8fdc\u8df3\u8f6c \u6307\u4ee4\u683c\u5f0f <code>jmp short dest</code> <code>jmp near ptr dest</code> <code>jmp far ptr dest</code> \u673a\u5668\u7801 <code>EB</code> <code>E9</code> <code>EA</code> \u793a\u4f8b <code>EB06</code> <code>E93412</code> <code>EA78563412</code> \u8303\u56f4 <code>[80h, 7Fh]</code> <code>[8000h, 7FFFh]</code> <code>[0000:0000, FFFF:FFFF]</code> \u76f8\u5bf9\u5730\u5740 <code>dest-($+2)</code> <code>dest-($+3)</code> \u7edd\u5bf9\u5730\u5740 \u5907\u6ce8 \u76f8\u5bf9\u504f\u79fb \u76f8\u5bf9\u504f\u79fb\uff0c\u5c0f\u7aef\u89c4\u5219 \u8fdc\u6307\u9488\uff0c\u5c0f\u7aef\u89c4\u5219 \u8df3\u8f6c\u6307\u4ee4 \u6761\u4ef6 \u89e3\u91ca \u8df3\u8f6c\u6307\u4ee4 \u6761\u4ef6 \u89e3\u91ca <code>je</code> <code>ZF==0</code> <code>jne</code> <code>ZF!=0</code> <code>jae</code> (above or eq) <code>CF==0</code> \u6ca1\u6709\u501f\u4f4d\uff0c\u8bf4\u660e\u7b2c\u4e00\u4e2a\u5927 <code>jge</code> <code>SF==OF</code> \u6b63\u6570\u4e14\u6ca1\u6709\u6ea2\u51fa/\u8d1f\u6570\u4e14\u6709\u6ea2\u51fa\uff08\u5b9e\u9645\u5e94\u8be5\u662f\u6b63\u6570\uff09 <code>ja</code> (above) <code>CF==0 &amp;&amp; ZF==0</code> \u6ca1\u6709\u501f\u4f4d\uff0c\u800c\u4e14\u4e0d\u76f8\u7b49 <code>jg</code> (greater) <code>SF==OF &amp;&amp; ZF!=0</code> \u6ee1\u8db3 <code>jge</code> \u4e14\u4e0d\u76f8\u7b49 <code>jbe</code> <code>CF==1</code> \u6709\u501f\u4f4d\uff0c\u8bf4\u660e\u7b2c\u4e8c\u4e2a\u5927 <code>jle</code> <code>SF!=OF</code> \u8d1f\u6570\u4e14\u6ca1\u6709\u6ea2\u51fa/\u6b63\u6570\u4e14\u6709\u6ea2\u51fa\uff08\u5b9e\u9645\u5e94\u8be5\u662f\u8d1f\u6570\uff09 <code>jb</code> <code>CF==1 &amp;&amp; ZF!=0</code> \u6709\u501f\u4f4d\uff0c\u800c\u4e14\u4e0d\u76f8\u7b49 <code>jl</code> <code>SF!=OF &amp;&amp; ZF!=0</code> \u6ee1\u8db3 <code>jle</code> \u4e14\u4e0d\u76f8\u7b49"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%20Cheat%20Sheet.html#\u5bc4\u5b58\u5668","title":"\u5bc4\u5b58\u5668","text":"<ul> <li><code>ax, bx, cx, dx, sp, bp, si, di</code><ul> <li><code>bx, bp, si, di</code> \u7528\u6765\u8868\u793a\u504f\u79fb\u5730\u5740\uff0c\u53ef\u4ee5\u653e\u5728 <code>[]</code> \u5185</li> <li><code>ax, bx, cx, dx</code> \u79f0\u4e3a\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u5e38\u7528\u4e8e\u7b97\u6570\u3001\u903b\u8f91\u8fd0\u7b97</li> </ul> </li> <li><code>cs, ds, es, ss</code> \u7528\u6765\u8868\u793a\u6bb5\u5730\u5740<ul> <li><code>cs:ip</code> \u6307\u5411\u5f53\u524d\u5c06\u8981\u6267\u884c\u7684\u6307\u4ee4\uff0c<code>ip</code> \u662f\u6307\u4ee4\u6307\u9488\uff08instruction pointer\uff09\uff0c<code>cs</code> \u662f\u4ee3\u7801\u6bb5\u5bc4\u5b58\u5668</li> <li><code>ss:sp</code> \u6307\u5411\u5806\u6808\u9876\u7aef\uff0c\u5176\u4e2d <code>sp</code> \u662f\u5806\u6808\u6307\u9488\uff08stack pointer\uff09\uff0c<code>ss</code> \u662f\u5806\u6808\u6bb5\u5bc4\u5b58\u5668</li> <li><code>es</code> \u9644\u52a0\u6bb5\u5bc4\u5b58\u5668\uff0c\u548c <code>ds</code> \u4e00\u6837\uff0c\u53ef\u4ee5\u8868\u793a\u4e00\u4e2a\u6570\u636e\u6bb5\u7684\u5730\u5740</li> </ul> </li> <li><code>ip</code> PC \u6307\u9488</li> <li><code>fl</code> \u6807\u5fd7\u5bc4\u5b58\u5668</li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%20Cheat%20Sheet.html#\u6807\u5fd7\u5bc4\u5b58\u5668","title":"\u6807\u5fd7\u5bc4\u5b58\u5668","text":"<ul> <li><code>ZF</code> \u96f6\u6807\u5fd7</li> <li><code>SF</code> \u7b26\u53f7\u6807\u5fd7</li> <li><code>OF</code> \u6ea2\u51fa\u6807\u5fd7</li> <li><code>PF</code> \u5947\u5076\u6821\u9a8c\u6807\u5fd7</li> <li><code>AF</code> \u8f85\u52a9\u8fdb\u4f4d\u6807\u5fd7\u548c BCD \u7801\u7684\u8c03\u6574\u6709\u5173</li> <li><code>DF</code> \u65b9\u5411\u6807\u5fd7<ul> <li><code>std; cld;</code></li> </ul> </li> <li><code>IF</code> \u4e2d\u65ad\u6807\u5fd7\uff0cIF=0 \u7981\u6b62\u786c\u4ef6\u4e2d\u65ad<ul> <li><code>sti; cli</code></li> </ul> </li> <li><code>TF</code> \u9677\u9631\u6807\u5fd7\uff0cTF=1 \u8fdb\u5165\u5355\u6b65\u6a21\u5f0f\uff0c\u6bcf\u4e00\u6761\u6307\u4ee4\u540e\u9762\u90fd\u4f1a\u8ddf\u7740\u4e00\u6761 <code>int 01h</code><ul> <li>\u53ea\u80fd\u4f7f\u7528 <code>pushf popf</code> \u6765\u64cd\u4f5c\uff0c\u4f8b\u5982 <code>pushf; pop ax; or ax, 100h; push ax; popf</code></li> <li>\u8c03\u8bd5\u5668\u5229\u7528\u5355\u6b65\u6a21\u5f0f\u6765\u83b7\u5f97\u63a7\u5236\u6743</li> </ul> </li> </ul>"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%20Cheat%20Sheet.html#\u5185\u5b58\u7a7a\u95f4","title":"\u5185\u5b58\u7a7a\u95f4","text":"\u5730\u5740\u8303\u56f4 \u7528\u9014 \u5927\u5c0f <code>[0000:0000, 9000:0000]</code> \u64cd\u4f5c\u7cfb\u7edf\u548c\u7528\u6237\u7a0b\u5e8f 640K <code>[A000:0000, A000:FFFF]</code> \u6620\u5c04\u663e\u5361\u5185\u5b58 \u56fe\u5f62\u6a21\u5f0f 64K <code>[B000:0000, B000:7FFF]</code> \u6620\u5c04\u663e\u5361\u5185\u5b58 32K <code>[B800:0000, B800:7FFF]</code> \u6620\u5c04\u663e\u5361\u5185\u5b58 \u6587\u672c\u6a21\u5f0f 32K <code>[C000:0000, F000:FFFF]</code> \u6620\u5c04 ROM 320K"},{"location":"ZJU-Assembly%20Fundamentals/ASMF%20Cheat%20Sheet.html#\u5e38\u7528\u4e2d\u65ad","title":"\u5e38\u7528\u4e2d\u65ad","text":"<ul> <li><code>int 21h</code></li> </ul> AH \u529f\u80fd \u8c03\u7528\u53c2\u6570 \u8fd4\u56de\u53c2\u6570 00 \u7a0b\u5e8f\u7ec8\u6b62 CS=\u7a0b\u5e8f\u6bb5\u524d\u7f00 01 \u952e\u76d8\u8f93\u5165\u5e76\u56de\u663e AL=\u8f93\u5165\u5b57\u7b26 02 \u663e\u793a\u8f93\u51fa DL=\u8f93\u51fa\u5b57\u7b26 09 \u663e\u793a\u5b57\u7b26\u4e32 DS:DX=\u5b57\u7b26\u4e32\u5730\u5740 4C \u5e26\u8fd4\u56de\u7801\u7ed3\u675f AL=\u8fd4\u56de\u7801 <ul> <li><code>int 00h</code> \u9664\u6cd5 overflow \u9519\u8bef\u4e2d\u65ad</li> <li><code>int 10h</code><ul> <li><code>ah = 0, al = 13h</code> \u663e\u5361\u5207\u6362\u5230 320x200 \u56fe\u5f62\u6a21\u5f0f</li> <li>\u663e\u5361\u7684\u6587\u672c\u6a21\u5f0f\u76f4\u63a5\u8fd9\u6837\u5c31\u884c <code>mov ax, 0B800h; mov es, ax; mov al, 'A'; mov ah, 71h; mov es:[di], ax;</code><ul> <li>\u6ce8\u610f\u8fd9\u91cc\u9ad8\u4f4d\u7684\u5185\u5b58\u5730\u5740\u66f4\u5927\uff0c\u5e94\u8be5\u662f\u989c\u8272\uff0c\u4f4e\u4f4d\u624d\u662f\u5b57\u7b26</li> </ul> </li> </ul> </li> <li><code>int 16h</code><ul> <li><code>ah = 0</code> \u4ece\u952e\u76d8\u8bfb\u53d6\u4e00\u4e2a\u952e\u7684\u7f16\u7801\uff0c\u653e\u5230 <code>ax</code></li> </ul> </li> </ul>"},{"location":"ZJU-Computer%20Organization/index.html","title":"Computer Organization","text":""},{"location":"ZJU-Computer%20Organization/index.html#table-of-contents","title":"Table of Contents","text":"<p>Note</p> <p>\u7531\u4e8e\u7b14\u8bb0\u6e90\u6587\u4ef6\u4f7f\u7528\u4e86 PDF++ \u63d2\u4ef6\u6765\u5f15\u7528\u8bfe\u4ef6\uff0c\u65e0\u6cd5\u88ab MkDocs \u6e32\u67d3\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u7b14\u8bb0\u90fd\u662f\u5bfc\u51fa\u540e\u7684</p> <ul> <li>01 Computer Abstraction and Technology</li> <li>02 Instructions</li> <li>03 Arithmetic for Computer</li> <li>04 The Processor Pt1</li> <li>04 The Processor Pt2</li> <li>05 Memory Hierarchy</li> <li>06 IO</li> <li>Cheatsheets<ul> <li>Midterm Cheat sheet</li> <li>Final Cheat sheet</li> </ul> </li> </ul>"},{"location":"ZJU-Computer%20Organization/index.html#info","title":"Info","text":"<p>Computer Organization</p> <ul> <li>\u4ee3\u7801\uff1aCS2055M</li> <li>\u5b66\u5206\uff1a4.5</li> <li>\u5b66\u671f\uff1a2024 \u79cb\u51ac</li> <li>\u6559\u5e08\uff1a\u6797\u8283</li> <li>\u6559\u6750\uff1aComputer Organization and Design [RISC-V Edition]</li> </ul> Grading Policy <ul> <li>\u5e73\u65f6 20<ul> <li>\u4f5c\u4e1a\u3001\u8bfe\u5802\u3001\u9605\u8bfb</li> <li>\u671f\u672b\u8003\u8bd5\u590d\u4e60\u8bb2\u9898\u52a0\u5206</li> </ul> </li> <li>\u671f\u4e2d\u8003\u8bd5 10</li> <li>\u671f\u672b\u8003\u8bd5 40 40 \u5206\u65a9\u6740</li> <li>\u5b9e\u9a8c 30<ul> <li>Lab00-03 30%</li> <li>Lab04 \u5355\u5468\u671f CPU 30%</li> <li>Lab05 \u6d41\u6c34\u7ebf CPU 40%</li> <li>bonus \u4e0d\u6ea2\u51fa</li> </ul> </li> </ul>"},{"location":"ZJU-Computer%20Organization/index.html#tips","title":"Tips","text":"<p>\u8fd9\u4efd\u7b14\u8bb0\u5e76\u4e0d\u5b8c\u5584</p> <ul> <li>02 Instructions \u6ca1\u6709\u7b14\u8bb0\uff0c\u4ec5\u5728 cheetsheet \u4e2d\u6709\u63d0\u5230</li> <li>\u8ba1\u7ec4\u5404\u5b66\u671f\u3001\u5404\u73ed\u6559\u5b66\u5185\u5bb9\u4e0d\u5b8c\u5168\u76f8\u540c\uff0c\u8bf7\u4ee5\u6559\u5e08\u8981\u6c42\u4e3a\u51c6</li> </ul> <p>Tip</p> <ul> <li>A4 \u6ca1\u6709\u90a3\u4e48\u5173\u952e\uff0c\u4e0a\u4e86\u8003\u573a\u5176\u5b9e\u6839\u672c\u4e0d\u4f1a\u53bb\u770b<ul> <li> \u4e0e\u5176\u6284\u5f88\u591a\u77e5\u8bc6\u70b9\uff0c\u4e0d\u5982\u6284\u51e0\u9053\u6709\u53c2\u8003\u4ef7\u503c\u7684\u8ba1\u7b97\u9898 </li> </ul> </li> <li>\u8003\u8bd5\u91cd\u70b9\u590d\u4e60\u4e00\u4e9b\u5927\u9898\uff0c\u4f8b\u5982 CPI \u8ba1\u7b97\u3001hazard\u3001c \u8f6c\u6c47\u7f16\u7b49\u7b49\uff0c\u4e0a\u8bfe\u8bb2\u8fc7\u7684\u4f8b\u9898\u4e00\u5b9a\u8981\u641e\u61c2</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/index.html","title":"Fundamentals of Data Structures","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>Ch.02 Algorithm Analysis</li> <li>Ch.03 List</li> <li>Ch.04 Trees</li> <li>Ch.05 Priority Queues (Heaps)</li> <li>Ch.06 Sorting</li> <li>Ch.07 Hashing</li> <li>Ch.08 Disjoint Set</li> <li>Ch.09 Graph Algorithms</li> <li>Cheat Sheet</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/index.html#info","title":"Info","text":"<p>Fundamentals of Data Structures</p> <ul> <li>\u4ee3\u7801\uff1aCS1018F (211C0020)</li> <li>\u5b66\u5206\uff1a2.5</li> <li>\u5b66\u671f\uff1a2024 \u6625\u590f</li> <li>\u6559\u5e08\uff1a\u9648\u8d85\u8d85</li> <li>\u6559\u6750\uff1aData Structures and Algorithm Analysis in C, 2<sup>nd</sup> Edition</li> </ul> Grading Policy <ul> <li>Maximum 60 </li> <li>Lecture Grade 35 <ul> <li>Homework 10 </li> <li>Quizzes 10 \u4e0d\u5b9a\u65f6\u6d4b\u8bd5\uff0c\u8bfe\u524d\u6216\u8bfe\u540e\uff0c\u5171 2\uff5e3 \u6b21\uff0c\u6bcf\u6b21 10 \u5206\u949f\u5171 10 \u5206 </li> <li>Mid-Term Exam 15 \u5982\u679c\u671f\u672b\u6210\u7ee9\u66f4\u9ad8\uff0c\u53ef\u4ee5\u7528\u671f\u672b\u5206\u6570\u8986\u76d6 </li> </ul> </li> <li>Laboratory Grade 25/30 \u72ec\u7acb\u5b8c\u6210\uff0c3 \u6b21\u53d6\u5e73\u5747\u503c <ul> <li>normal 25 </li> <li>hard 30 \u5728\u94bb\u77f3\u8d5b\u4e2d\u53d6\u5f97\u524d 30% \u53ef\u4ee5\u9009\u62e9 </li> </ul> </li> <li>Bonus 4 2 \u6b21\uff0c\u4f1a\u5728 pta \u4e0a\u653e\u51fa </li> <li>Final 40</li> </ul> Peer Review Requirements <p>Rubric items: 6  </p> <p>Item 1: 6 points  </p> <p>The cover page must be presented with the title and the date of completion (+2 pts.). A complete problem description must be given in Chapter 1 (+4 pts.). Deduct points if:  </p> <ul> <li>the cover page is not complete (-1)  </li> <li>the introduction is a simple copy + paste of the assignment statement (-3)  </li> <li>the introduction is not very clear -- in this chapter one is supposed to make it clear WHAT is to be done, besides why one is doing it (-1 ~ -2)  </li> <li>others - please specify in the final comments.  </li> </ul> <p>Item 2: 12 points  </p> <p>Chapter 2 is supposed to contain the descriptions (pseudo-code preferred) of all the key algorithms involved (+3 pts. for the data structures; +7 pts. for the algorithms), plus a sketch of the main program (+2 pts.). Deduct points if:  </p> <ul> <li>the algorithm specification is not complete \u2013 the data structure description is missing (-2)  </li> <li>the algorithm specification is not complete \u2013the key algorithm is missing (-3 ~ -7)  </li> <li>not making one's algorithm easier to understand than a simple program (-2)  </li> <li>only a program + comments, which is not acceptable (-4)  </li> <li>others - please specify in the final comments.  </li> </ul> <p>Item 3: 2 points  </p> <p>The overall style of documentation is supposed to be neat and clear. Deduct (at most 2) points if:  </p> <ul> <li>the document looks messy - some of the data in the charts and tables are missing (-1)  </li> <li>the hand-in is not zipped with proper folders (-1)  </li> <li>the hand-in is not complete - some files are missing (-1)  </li> <li>others - please specify in the final comments.  </li> </ul> <p>Item 4: 20 points  </p> <p>A complete table of test cases with testing purposes must be given in Chapter 3. A minimum of 3 test cases must be given (+10 pts.). Besides at least one comprehensive test (+6 pts.), the cases with the smallest or the largest sizes, and some extreme cases must be covered (+4 pts.). Deduct points if:  </p> <ul> <li>the testing results contain some test cases, however with no specification on their purposes (-3)  </li> <li>the testing results contain some test cases, but there are still bugs missed (-1 ~ -10)  </li> <li>the testing results contain too few cases and hence is too simple to be considered as being complete (-4 ~ -10)  </li> <li>others - please specify in the final comments.  </li> </ul> <p>Item 5: 10 points  </p> <p>Analysis of both the time (+5 pts.) and space (+5 pts.) complexities of the algorithms are supposed to be given in Chapter 4. Bonus point for discussing more than just one algorithm (+2 pts.). Deduct points if:  </p> <ul> <li>analysis of the complexities of time and/or space is missing -- one must show how one has reached the conclusions, instead of simply listing them (-4)  </li> <li>others - please specify in the final comments.  </li> </ul> <p>Item 6: 50 points  </p> <p>For the programming work, deduct points if:  </p> <ul> <li>the programs are not working properly (-1 ~ -20)  </li> <li>the programs are not well-commented (-50)  </li> <li>the programming style is too messy to be judged (-1 ~ -5)  </li> <li>others - please specify in the final comments.</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/index.html#tips","title":"Tips","text":"<p>\u8fd9\u4efd\u7b14\u8bb0\u975e\u5e38\u5b8c\u5584</p> <ul> <li>\u672c\u7b14\u8bb0\u6db5\u76d6\u4e86\u6240\u6709\u8bfe\u7a0b\u5185\u5bb9\uff0c\u4e3b\u8981\u6765\u6e90\u4e8e slides\u3001\u8001\u5e08\u7684\u8bb2\u89e3\u548c\u4e2a\u4eba\u7406\u89e3  </li> <li>\u6bcf\u7ae0\u8282\u7b14\u8bb0\u672b\u5c3e\u6709 pta \u9898\u76ee\u7684\u8ba2\u6b63/\u601d\u8def\uff0c\u7531\u4e8e\u8bfe\u7a0b\u8981\u6c42\uff0c\u6ca1\u6709\u4efb\u4f55\u6e90\u7801 </li> <li>\u4e00\u4efd\u53ef\u80fd\u6ca1\u4ec0\u4e48\u7528\u7684 Cheat Sheet</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.02%20Algorithm%20Analysis.html","title":"Ch.02 Algorithm Analysis","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.02%20Algorithm%20Analysis.html#1-complexity-asymptotic-notation","title":"1 Complexity: Asymptotic Notation","text":"<ul> <li>\\(T(N)=O(f(N))\\) if there are positive constants \\(c\\) and \\(n_0\\) such that \\(T(N)\\le cf(N)\\) for all \\(N\\ge n_0\\)<ul> <li>Big O \u4ee3\u8868\u4e00\u79cd\u4e0a\u754c\uff0c\u5c0f\u4e8e\u7b49\u4e8e</li> </ul> </li> <li>\\(T(N)=\\Omega(g(N))\\) if there are positive constants \\(c\\) and \\(n_0\\) such that \\(T(N)\\ge cg(N)\\) for all \\(N\\ge n_0\\)<ul> <li>Big Omega \u4ee3\u8868\u4e00\u79cd\u4e0b\u754c\uff0c\u5927\u4e8e\u7b49\u4e8e</li> </ul> </li> <li>\\(T(N)=\\Theta (h(N))\\) if and only if \\(T(N)=O(h(N))\\) and \\(T(N)=\\Omega(h(N))\\)<ul> <li>Big Theta \u4ee3\u8868\u4e0a\u4e0b\u754c\u540c\u9636\uff0c\u662f\u786e\u754c</li> </ul> </li> <li>\\(T(N)=o(p(N))\\) if \\(T(N)=O(p(N))\\) and \\(T(N)\\ne \\Theta(p(N))\\) <ul> <li>Small o \u4ee3\u8868\u4e25\u683c\u6e10\u8fdb\u4e0a\u754c\uff0c\u4e25\u683c\u5c0f\u4e8e</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.02%20Algorithm%20Analysis.html#11-rules-of-asymptotic-notation","title":"1.1 Rules of Asymptotic Notation","text":"<ul> <li>\\(T_1(N)=O(f(N))\\,\\, T_2(N)=O(g(N))\\) <ul> <li>\\(T_1(N)+T_2(N)=\\mathrm{max}(O(f(N)),O(g(N)))\\)</li> <li>\\(T_1(N)*T_2(N)=O(f(N)*g(N))\\)</li> </ul> </li> <li>\\(log^kN=O(N)\\) for any constant \\(k\\), logarithms grow very slowly</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.02%20Algorithm%20Analysis.html#12-general-rules","title":"1.2 General Rules","text":"<ul> <li><code>if/else</code><ul> <li>\u4e0a\u754c\u662f\u4e0d\u540c\u9009\u62e9\u4e2d runtime \u6700\u5927\u7684</li> </ul> </li> <li>Recursions<ul> <li>\u4f7f\u7528\u9012\u63a8\u6570\u5217\u6765\u8ba1\u7b97</li> <li>for example: Fibonacci number<ul> <li>\\(T(N)=T(N-1)+T(N-2)+2\\)</li> <li>\\((\\frac{3}{2})^N\\le Fib(N) \\le (\\frac{5}{3})^N\\) grows exponentially</li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.02%20Algorithm%20Analysis.html#2-compare-the-algorithms","title":"2 Compare the Algorithms","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.02%20Algorithm%20Analysis.html#21-maxsubsequencesum-problem","title":"2.1 MaxSubsequenceSum problem","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.02%20Algorithm%20Analysis.html#211-divide-and-conquer","title":"2.1.1 Divide and Conquer","text":"<ul> <li>\u5148 divide\uff0c\u627e\u5230\u6bcf\u4e2a\u6700\u5c0f\u5355\u5143\uff08\u5355\u4e2a\u6570\uff09\u8fd4\u56de\u8fd9\u4e2a\u6570</li> <li>\u7136\u540e conquer\uff0c\u9700\u8981\u8fdb\u884c\u5224\u65ad<ul> <li>\u5982\u679c\u4e24\u4e2a\u5b50\u5e8f\u5217\u8fde\u8d77\u6765\uff08\u52a0\u4e0a\u4e2d\u95f4\u90e8\u5206\uff09\u5927\u4e8e\u7b49\u4e8e\u539f\u6765\u7684\u4e24\u4e2a\u5b50\u6570\u5217\uff0c\u5219\u53d6\u8fd9\u4e2a\u5927\u7684</li> <li>\u53cd\u4e4b\uff0c\u53d6\u5b50\u5e8f\u5217\u4e2d\u8f83\u5927\u7684\u2018</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.02%20Algorithm%20Analysis.html#212-on-line-algotithm","title":"2.1.2 On-line Algotithm","text":"<ul> <li>\u4f7f\u7528 ThisSum \u8bb0\u5f55\u8fd9\u4e2a\u5b50\u5e8f\u5217\u7684\u548c<ul> <li>\u5982\u679c ThisSum \u5c0f\u4e8e\u96f6\uff0c\u8bf4\u660e\u8fd9\u4e2a\u4f4d\u7f6e\u524d\u9762\u7684\u5b50\u5e8f\u5217\u5df2\u7ecf\u4e3a\u8d1f\u6570\uff0c\u53ef\u4ee5\u629b\u5f03\uff0c\u91cd\u7f6e ThisSum \u4e3a 0</li> <li>\u5982\u679c ThisSum \u5927\u4e8e MaxSum\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u65b0\u7684\u6700\u5927\u548c</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.02%20Algorithm%20Analysis.html#3-recursion-analysis","title":"3 Recursion Analysis","text":"<ul> <li>\u53ea\u9700\u8981\u8bb0\u5f97\u524d\u9762\u7684\u6307\u6570\u4e3a \\(\\log_ba\\) \u9700\u8981\u548c\u540e\u9762\u7684 \\(k\\) \u8fdb\u884c\u6bd4\u8f83 </li> </ul> <p>Example</p> <ul> <li>\\(T(N)=2T(N/2)+N\\) -&gt; \\(O(NlogN)\\)</li> <li>\\(T(N)=2T(N/2)+N\\log N\\) -&gt; \\(O(N\\log^2 N)\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.02%20Algorithm%20Analysis.html#4-hw","title":"4 HW","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.02%20Algorithm%20Analysis.html#41-euclids-algorithm-\u6c42-gcd-\u6700\u5927\u516c\u7ea6\u6570","title":"4.1 Euclid's Algorithm \u6c42 GCD \u6700\u5927\u516c\u7ea6\u6570","text":"<ul> <li>\u8f97\u8f6c\u76f8\u9664\u6cd5 \\(\\mathrm{gcd}(a,b)=\\mathrm{gcd}(b, a\\,\\mathrm{mod}\\,b)\\)<ul> <li>\u5927\u9664\u5c0f<ul> <li>\u6709\u4f59\u6570\uff0c\u5219\u8ba1\u7b97\u5c0f\u9664\u4f59\u6570</li> <li>\u76f4\u5230\u51fa\u73b0\u6574\u9664\uff0c\u8f93\u51fa\u6700\u540e\u90a3\u4e2a\u9664\u6570\u5c31\u662f\u7b54\u6848</li> </ul> </li> </ul> </li> </ul> <pre><code>int gcd(int a, int b) {\n    while(b^=a^=b^=a%=b);   // \u4ea4\u6362ab\uff0c\u5e76\u8ba1\u7b97a/b\u7684\u4f59\u6570\n    return a;\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.02%20Algorithm%20Analysis.html#42-exponentiation-\u5feb\u901f\u5e42","title":"4.2 Exponentiation \u5feb\u901f\u5e42","text":"<ul> <li>\u4f8b\u5982\u8ba1\u7b97 \\(7^{10}\\) \u53ef\u4ee5\u770b\u4f5c \\(7^{(101010)_2}=7^{2^5}*7^{2^3}*7^{2^1}\\)</li> <li>\u6839\u636e\u516c\u5f0f \\(n^{2^{m-1}}*n^{2^{m-1}}=n^{2^m}\\) \u5feb\u901f\u8ba1\u7b97\u51fa\u6240\u6709\u7684 \\(7^{2^1}, 7^{2^2}, 7^{2^3}, 7^{2^4}, 7^{2^5}\\) \u7136\u540e\u9009\u62e9\u5176\u4e2d\u7528\u5230\u7684\u91cf\u7b97\u51fa\u7ed3\u679c\u5373\u53ef</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.02%20Algorithm%20Analysis.html#43-pta","title":"4.3 PTA","text":"<ul> <li><ul> <li>\u53ef\u80fd\u9700\u8981\u81ea\u5df1\u7b97\u4e00\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u8bb0\u4f4f\u8fd9\u4e2a\u7b54\u6848</li> <li>\u8fd9\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u4e0a\u9762\u7684\u663e\u7136\u662f log\uff0c\u4e0b\u9762\u7684\u56e0\u4e3a\u6bcf\u6b21\u9664\u4e09\u53c8\u4e58\u4e09\uff0c\u6240\u4ee5\u662f O(N)</li> </ul> </li> <li><ul> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\u7b49\u4e8e\u9012\u5f52\u6df1\u5ea6\uff0c\u800c\u7531\u4e8e\u5b58\u5728 \\(F_{N-1}\\)\uff0c\u6700\u5927\u9012\u5f52\u6df1\u5ea6\u4e3a N</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html","title":"Ch.03 List","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#1-abstract-data-type-adt","title":"1 Abstract Data Type (ADT)","text":"<ul> <li>\\(Data Type = \\{Objects\\} \\cup \\{Operations\\}\\)</li> <li>ADT: The specification on objects and specification of the operations on the objects are separated from the representation of the objects and implementation on the operations.<ul> <li>\u5c01\u88c5\uff0c\u51fd\u6570\u5316\u7f16\u7a0b\uff0c\u4e0d\u8003\u8651\u5177\u4f53\u5b9e\u73b0</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#2-the-list-adt","title":"2 The List ADT","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#21-operations","title":"2.1 Operations","text":"<ul> <li>FindLength</li> <li>PrintList</li> <li>MakeEmpty</li> <li>FindKthElement</li> <li>InsertAfterKth</li> <li>Delete</li> <li>FindNext</li> <li>FindPrevious</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#22-implementation","title":"2.2 Implementation","text":"<ul> <li>Array<ul> <li>\u9700\u8981\u63d0\u524d\u4f30\u8ba1\u5bb9\u91cf</li> <li>\u63d2\u5165\u5220\u9664 O(N)\uff0c\u79fb\u52a8\u6570\u636e</li> <li>\u67e5\u627e k-th O(1)</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#221-linked-list","title":"2.2.1 Linked List","text":"<ul> <li>\u4f7f\u7528 dummy head node\uff0c\u53ef\u4ee5\u5220\u9664\u7b2c\u4e00\u4e2a</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#222-doubly-linked-circular-lists","title":"2.2.2 Doubly Linked Circular Lists","text":"<ul> <li>\u65b9\u4fbf\u67e5\u627e previous</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#23-two-applications","title":"2.3 Two Applications","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#231-the-polynomial-adt-\u591a\u9879\u5f0f\u8868\u793a","title":"2.3.1 The Polynomial ADT \u591a\u9879\u5f0f\u8868\u793a","text":"<ul> <li>coefficient \u7cfb\u6570 exponent \u6307\u6570</li> <li>Operations<ul> <li>FindDegree \u627e\u5230\u6700\u9ad8\u6b21\u9879\u6307\u6570</li> <li>Addition</li> <li>Subtration</li> <li>Multiplication</li> <li>Differentiation</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#2311-representation-1","title":"2.3.1.1 Representation 1","text":"<pre><code>typedef struct {\n    int CoeffArray [MaxDegree + 1];\n    int HighPower;\n} *Polynomial\n</code></pre> <ul> <li>\u5bf9\u4e8e\u7a00\u758f\u6570\u7ec4\uff0c\u8fc7\u4e8e\u590d\u6742</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#2312-representation-2","title":"2.3.1.2 Representation 2","text":"<pre><code>typedef struct poly_node *poly_ptr;\nstruct poly_node {\n    int Coefficient;\n    int Exponent;\n    poly_ptr Next;\n} ;\ntypedef poly_ptr a; // nodes sorted by exponent\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#232-multilists","title":"2.3.2 Multilists","text":"<p>Ch.09 Graph Algorithms#1.1.3 Adjacency Multilists \u4e5f\u4f7f\u7528\u5230\u4e86 multilist \u7684\u601d\u60f3</p> <p>For example, represent the relationship between students and the courses. Array would be too complex in space</p> <p></p> <ul> <li>\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a pair relationship\uff0c\u8282\u70b9\u5185\u8981\u5b58\u50a8\u5b66\u751f\u7f16\u53f7\u548c\u8bfe\u7a0b\u7f16\u53f7</li> </ul> HW: Sparse matrix representation <ol> <li> <p>\u5750\u6807\u5217\u8868\uff08Coordinate List, COO\uff09\uff1a    \u5728\u8fd9\u79cd\u8868\u793a\u4e2d\uff0c\u77e9\u9635\u88ab\u8868\u793a\u4e3a\u4e09\u4e2a\u6570\u7ec4\uff1a\u884c\u7d22\u5f15\u3001\u5217\u7d22\u5f15\u548c\u6570\u636e\u503c\u3002\u6bcf\u4e2a\u975e\u96f6\u5143\u7d20\u7531\u5176\u884c\u7d22\u5f15\u3001\u5217\u7d22\u5f15\u548c\u503c\u7ec4\u6210\u3002</p> </li> <li> <p>\u538b\u7f29\u7a00\u758f\u884c\uff08Compressed Sparse Row, CSR\uff09\uff1a    CSR \u8868\u793a\u7531\u4e09\u4e2a\u6570\u7ec4\u7ec4\u6210\uff1a\u975e\u96f6\u5143\u7d20\u7684\u503c\u3001\u884c\u6307\u9488\u548c\u5217\u7d22\u5f15\u3002\u884c\u6307\u9488\u6570\u7ec4\u6307\u5411\u5217\u7d22\u5f15\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u884c\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\u8fd9\u79cd\u8868\u793a\u65b9\u5f0f\u9002\u5408\u4e8e\u884c\u64cd\u4f5c\uff0c\u5982\u884c\u7684\u63d2\u5165\u548c\u5220\u9664\u3002</p> </li> <li> <p>\u538b\u7f29\u7a00\u758f\u5217\uff08Compressed Sparse Column, CSC\uff09\uff1a    CSC \u4e0e CSR \u7c7b\u4f3c\uff0c\u4f46\u662f\u662f\u6309\u7167\u5217\u6765\u7ec4\u7ec7\u7684\u3002\u5b83\u5305\u542b\u4e09\u4e2a\u6570\u7ec4\uff1a\u975e\u96f6\u5143\u7d20\u7684\u503c\u3001\u5217\u6307\u9488\u548c\u884c\u7d22\u5f15\u3002\u5217\u6307\u9488\u6570\u7ec4\u6307\u5411\u884c\u7d22\u5f15\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5217\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\u8fd9\u79cd\u8868\u793a\u65b9\u5f0f\u9002\u5408\u4e8e\u5217\u64cd\u4f5c\u3002</p> </li> <li> <p>\u5b57\u5178\u5f0f\uff08Dictionary of Keys, DICTIONARY\uff09\uff1a    \u8fd9\u79cd\u8868\u793a\u65b9\u6cd5\u4f7f\u7528\u5b57\u5178\uff08\u6216\u54c8\u5e0c\u8868\uff09\u6765\u5b58\u50a8\u975e\u96f6\u5143\u7d20\u7684\u4f4d\u7f6e\u548c\u503c\uff0c\u952e\u662f\u5143\u7d20\u7684\u7d22\u5f15\u5bf9\uff08\u884c\u7d22\u5f15\uff0c\u5217\u7d22\u5f15\uff09\u3002</p> </li> <li> <p>\u5757\u7a00\u758f\u77e9\u9635\uff08Block Sparse Matrix\uff09\uff1a    \u5f53\u77e9\u9635\u7684\u7a00\u758f\u6027\u5728\u5b50\u77e9\u9635\u7ea7\u522b\u4e0a\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5757\u7a00\u758f\u77e9\u9635\u8868\u793a\u3002\u8fd9\u79cd\u8868\u793a\u5c06\u77e9\u9635\u5206\u5272\u6210\u5c0f\u5757\uff0c\u5e76\u4e14\u53ea\u5b58\u50a8\u90a3\u4e9b\u975e\u96f6\u7684\u5757\u3002</p> </li> <li> <p>\u5e26\u72b6\u7a00\u758f\u77e9\u9635\uff08Banded Sparse Matrix\uff09\uff1a    \u5f53\u975e\u96f6\u5143\u7d20\u4ec5\u51fa\u73b0\u5728\u77e9\u9635\u7684\u4e3b\u5bf9\u89d2\u7ebf\u9644\u8fd1\u7684\u51e0\u6761\u5bf9\u89d2\u7ebf\u4e0a\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5e26\u72b6\u7a00\u758f\u77e9\u9635\u8868\u793a\u3002\u8fd9\u79cd\u8868\u793a\u901a\u5e38\u5305\u542b\u5bf9\u89d2\u7ebf\u5bbd\u5ea6\u548c\u975e\u96f6\u5143\u7d20\u3002</p> </li> </ol>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#233-cursor-implementation-of-linked-lists-no-pointer","title":"2.3.3 Cursor Implementation of Linked Lists (no pointer)","text":"<ul> <li>\u7ef4\u62a4\u4e00\u4e2a <code>freelist</code> \uff0c\u7b49\u4ef7\u4e3a\u4ece 0 \u5f00\u59cb\u7684\u5faa\u73af\u94fe\u8868</li> <li>malloc\uff0c\u5c31\u662f\u5728 <code>freelist</code> \u4e2d\u5220\u53bb 0 \u4e4b\u540e\u7684\u8282\u70b9</li> <li>free\uff0c\u5c31\u662f\u5c06\u4e00\u4e2a\u8282\u70b9\u6dfb\u52a0\u5230 <code>freelist</code> 0 \u4e4b\u540e</li> </ul> <p>Title</p> <ul> <li>malloc \u53ef\u4ee5\u770b\u51fa <code>CursorSpace[0].Next</code> \u603b\u662f\u961f\u5c3e\u7684\u7a7a\u4f4d\uff0c\u4e14\u961f\u5c3e\u7684\u4e0b\u4e00\u4e2a\u4e00\u5b9a\u662f\u7a7a\u7684</li> <li>free \u64cd\u4f5c\u7684\u539f\u7406<ul> <li>\u5c06\u539f\u672c\u961f\u5c3e\u7b2c\u4e00\u4e2a\u7a7a\u4f4d\u653e\u5728\u8981\u5220\u9664\u7684\u5143\u7d20\u540e\u9762</li> <li>\u5c06 <code>CursorSpace[0].Next</code> \u6307\u5411\u8981\u5220\u9664\u7684\u5143\u7d20</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#3-the-stack-adt","title":"3 The Stack ADT","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#31-operations","title":"3.1 Operations","text":"<pre><code>int IsEmpty( Stack S );\nStack CreateStack();\nDisposeStack( Stack S );\nMakeEmpty( Stack S );\nPush( ElementType X, Stack S );\nElementType Top( Stack S );\nvoid Pop( Stack S );\n</code></pre> <ul> <li>\u6ee1\u7684 stack push error</li> <li>\u7a7a\u7684 stack pop error</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#32-\u5b9e\u73b0\u65b9\u6cd5","title":"3.2 \u5b9e\u73b0\u65b9\u6cd5","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#321-\u94fe\u8868\u5b9e\u73b0","title":"3.2.1 \u94fe\u8868\u5b9e\u73b0","text":"<ul> <li>dummy head \u6307\u5411\u6808\u9876\u5143\u7d20\uff0c\u76f8\u5f53\u4e8e\u94fe\u8868\u63d2\u5165\u5934\u8282\u70b9</li> <li>\u51fa\u6808\u9700\u8981 <code>free()</code> \uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a <code>recycle bin</code> \u94fe\u8868\u6765\u5b58\u50a8\u6240\u6709 pop \u51fa\u6765\u7684\u5143\u7d20\uff0c\u51cf\u5c11 <code>free</code> \u7684\u6b21\u6570\u6709\u5229\u4e8e\u63d0\u5347\u6027\u80fd</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#322-\u6570\u7ec4\u5b9e\u73b0","title":"3.2.2 \u6570\u7ec4\u5b9e\u73b0","text":"<pre><code>typedef struct {\n    int StackSize;\n    int Top;    // top pointer\n    Element type *Array;\n} Stack;\n</code></pre> <ul> <li>\u4e00\u5b9a\u8981\u5c01\u88c5\u597d\uff0c\u4e0d\u80fd\u8ba9\u4e3b\u7a0b\u5e8f\u80fd\u591f\u76f4\u63a5\u8bfb\u53d6\u975e\u6808\u9876\u5143\u7d20</li> <li>\u5bf9\u4e8e pop, push \u9700\u8981\u8fdb\u884c\u68c0\u67e5</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#33-application","title":"3.3 Application","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#331-balancing-symbols","title":"3.3.1 Balancing Symbols","text":"<ul> <li>\u68c0\u67e5\u5b57\u7b26\u4e32\u4e2d\u7684\u62ec\u53f7\u7b49\u662f\u5426\u80fd\u8fc7\u591f\u914d\u5bf9</li> <li>On-line \\(T(N)=O(N)\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#332-postfix-evaluation","title":"3.3.2 Postfix Evaluation","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#3321-\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f","title":"3.3.2.1 \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f","text":"<ul> <li><code>a+b*c-d/e</code> infix expression \u4e2d\u7f00\u8868\u8fbe\u5f0f</li> <li><code>- + a * b c / d e</code> prefix expression \u524d\u7f00\u8868\u8fbe\u5f0f</li> <li><code>a b c * + d e / -</code> postfix evalution \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#3322-\u64cd\u4f5c\u65b9\u6cd5","title":"3.3.2.2 \u64cd\u4f5c\u65b9\u6cd5","text":"<ul> <li>\u9047\u5230\u5143\u7d20\uff0c\u5165\u6808</li> <li>\u9047\u5230\u7b26\u53f7\uff0c\u628a\u6808\u9876\u4e24\u4e2a\u5143\u7d20\u62ff\u51fa\u6765\u5904\u7406\uff0c\u7ed3\u679c\u518d\u5165\u6808</li> <li>\u7b97\u5b8c\u4e4b\u540e\u8f93\u51fa\u6808\u5185\u552f\u4e00\u5143\u7d20</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#333-infix-to-postfix-conversion","title":"3.3.3 Infix to Postfix Conversion","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#3331-\u6ca1\u6709\u62ec\u53f7\u7684\u8bdd","title":"3.3.3.1 \u6ca1\u6709\u62ec\u53f7\u7684\u8bdd","text":"<ul> <li>\u8bfb\u5230\u5143\u7d20\u76f4\u63a5\u8f93\u51fa</li> <li>\u8bfb\u5230\u7b26\u53f7<ul> <li>\u5982\u679c\u6808\u9876\u7b26\u53f7\u4f18\u5148\u7ea7 \\(\\ge\\) \u5f53\u524d\u8bfb\u5230\u7684\u7b26\u53f7\uff0c\u51fa\u6808</li> <li>\u5426\u5219\uff0c\u5165\u6808</li> </ul> </li> <li>\u6700\u540e pop \u5269\u4f59\u7684\u7b26\u53f7</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#3332-\u6709\u62ec\u53f7","title":"3.3.3.2 \u6709\u62ec\u53f7","text":"<p>a*(b+c)-d -&gt; </p> <ul> <li>\u8bfb\u5230\u5143\u7d20\u76f4\u63a5\u8f93\u51fa</li> <li>\u8bfb\u5230\u7b26\u53f7\uff08\u5305\u62ec\u62ec\u53f7\uff09<ul> <li>if \u8bfb\u5230 <code>(</code>\uff0c\u5165\u6808</li> <li>else if \u8bfb\u5230 <code>)</code>\uff0c\u4e00\u76f4\u51fa\u6808\u5230\u5de6\u62ec\u53f7</li> <li>else if \u6808\u9876\u4e0d\u662f <code>(</code> &amp;&amp; \u6808\u9876\u7b26\u53f7\u4f18\u5148\u7ea7 \\(\\ge\\) \u5f53\u524d\u8bfb\u5230\u7684\u7b26\u53f7\uff0c\u51fa\u6808</li> <li>else \u5165\u6808</li> </ul> </li> </ul> <p>\u53ef\u4ee5\u7406\u89e3\u4e3a</p> <ul> <li>\u8bfb\u5230 <code>(</code> \u4e00\u5b9a\u5165\u6808</li> <li>\u8bfb\u5230 <code>)</code> \u624d\u80fd\u8ba9 <code>(</code> \u51fa\u6808\uff0c\u800c\u4e14\u4e2d\u95f4\u7684\u5168\u90e8\u51fa\u6808</li> <li>\u5176\u4ed6\u4e00\u6837</li> </ul> <p>\u6ce8\u610f\uff0c\u8fd9\u4e2a\u95ee\u9898\u9700\u8981\u5355\u72ec\u5206\u6790</p> <p>Note:\u00a0 a \u2013 b \u2013 c will be converted to a b \u2013 c \u2013.\u00a0 However, 2^2^3 ( \\(2^{2^3}\\) ) must be converted to 2 2 3 ^ ^, not 2 2 ^ 3 ^ since exponentiation associates right to left.</p>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#334-function-calls-system-stack","title":"3.3.4 Function Calls - System Stack","text":"<ul> <li>\u7cfb\u7edf\u91cc\u6709\u4e24\u4e2a\u6307\u9488\uff0c\u5206\u522b\u662f sp, stack pointer fp, frame pointer</li> <li>\u5c3e\u9012\u5f52\u53ef\u4ee5\u4f18\u5316\u6210\u5faa\u73af\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u79cd\u4f18\u5316</li> <li>\u9012\u5f52\u4f1a\u6d88\u8017\u5927\u91cf\u7cfb\u7edf\u8d44\u6e90\uff0c\u6548\u7387\u5f88\u4f4e<ul> <li>\u80fd\u7528\u9012\u5f52\u5b8c\u6210\u7684\u64cd\u4f5c\u90fd\u4e00\u5b9a\u53ef\u4ee5\u4e0d\u7528\u9012\u5f52\u5b8c\u6210</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#4-the-queue-adt","title":"4 The Queue ADT","text":"<ul> <li>\u4e0e\u6808\u76f8\u53cd\uff0cfirst in first out</li> <li>\u5c3e\u90e8\u63d2\u5165\uff0c\u961f\u9996\u53d6\u51fa</li> </ul> <pre><code>int IsEmpty( Queue Q );\nQueue CreateQueue();\nvoid DisposeQueue( Queue Q );\nvoid MakeEmpty( Queue Q );\nvoid Enqueue ( ElementType X, Queue Q );\nElementType Front( Queue Q );       // \u83b7\u53d6\u961f\u5217\u7b2c\u4e00\u4e2a\u5143\u7d20\nvoid Dequeue( Queue Q );\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#41-\u5b9e\u73b0","title":"4.1 \u5b9e\u73b0","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#411-array-implementation","title":"4.1.1 Array Implementation","text":"<pre><code>struct QueueRecord {\n    int Capacity;\n    int Front;\n    int Rear;  //Rear == -1 \u961f\u5217\u4e3a\u7a7a\n    int Size;   // current size\n    ElementType *Array;\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#412-circular-queue","title":"4.1.2 Circular Queue","text":"<ul> <li>\u961f\u5217\u9996\u5c3e\u76f8\u63a5\uff0c\u76f8\u5f53\u4e8e\u6570\u7ec4\u6700\u540e\u6dfb\u52a0\u5143\u7d20\u6dfb\u52a0\u5230\u6570\u7ec4\u7684\u5f00\u5934</li> <li>Rear \u9ed8\u8ba4\u5728 0\uff0cFront \u9ed8\u8ba4\u5728 1<ul> <li>Enqueue \u65f6\uff0c<code>rear++</code> \u5728 <code>rear</code> \u52a0\u5165 job</li> <li>Dequeue \u65f6\uff0c\u5220\u53bb <code>front</code> \u7684 job\uff0c<code>front++</code></li> <li>Rear \u548c Front \u5dee 2 \u8ba4\u4e3a\u662f\u6ee1\u6808\uff0c\u5dee 1 \u8ba4\u4e3a\u662f\u7a7a\u6808</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.03%20List.html#5-hw","title":"5 HW","text":"<ul> <li>Sequential List \u5c31\u662f\u987a\u5e8f\u8868\uff0c\u5c31\u662f\u6570\u7ec4</li> <li><ul> <li>\u7531\u4e8e ps \u4e0d\u80fd\u53d8\u4f4d\u7f6e\uff0c\u53ea\u6709\u524d\u9762\u7684\u4e09\u4e2a o \u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u8f93\u51fa</li> <li>\u8fd9\u6837\u627e\u5230\u6240\u6709\u7684\u53ef\u80fd<ul> <li>i i i o o o</li> <li>i i o ...<ul> <li>i i o i o o</li> <li>i i o o i o</li> </ul> </li> <li>i o i ...<ul> <li>i o i i o o</li> <li>i o i o i o</li> </ul> </li> <li>i o o \u4e0d\u5141\u8bb8\uff0c\u5df2\u7ecf\u7a7a</li> </ul> </li> </ul> </li> <li><ul> <li>\u7ed3\u5408 4.1.2 Circular Queue \u5185\u5bb9\u601d\u8003</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html","title":"Ch.04 Trees","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#1-preliminaries","title":"1 Preliminaries","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#11-definition","title":"1.1 Definition","text":"<ul> <li>A tree is a collection of nodes. The collection can be empty, which is sometimes denoted as A. Otherwise, a tree consists of a distinguished node r, called the root, and zero or more (sub)trees T 1, T 2, . . . , Tk, each of whose roots are connected by a directed edge to r.<ul> <li>\u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u7684\u5b9a\u4e49</li> </ul> </li> <li>Note<ul> <li>subtrees must not connect to each other</li> <li>there are N-1 edges in a tree with N nodes</li> </ul> </li> <li>Degree<ul> <li>for a node, degree(node) = the number of its children node</li> <li>for a tree, it is the maximum of degree of its node</li> </ul> </li> <li>Parent, children, sibilings, leaf \u90fd\u662f\u7279\u6b8a\u5b9a\u4e49\u7684\u8282\u70b9</li> <li>Path: the path from node A to node B is unique in a tree \u53ea\u80fd\u662f\u4ece\u4e0a\u5230\u4e0b\u8d70<ul> <li>Length of path: \u8def\u5f84\u4e2d\u8fb9\u7684\u4e2a\u6570</li> </ul> </li> <li>Depth: the length of the path from root to this node, Depth(root)=0</li> <li>Height the length of the longest path from this node to a leaf, height(leaf)=0</li> <li>height(depth) of a tree = height(root) = depth(deepest leaf)</li> <li>Ancestors: all the nodes along the path from this node up to the root</li> <li>descendants: all the nodes in its subtrees</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#12-implementation","title":"1.2 Implementation","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#121-list-representation","title":"1.2.1 List Representation","text":"<ul> <li>\u53ef\u4ee5\u7528 (A(B(E,F),C,D)) \u7684\u7ebf\u6027\u7ed3\u6784\u6765\u8868\u793a</li> <li>\u53ef\u4ee5\u7528\u94fe\u8868\u6765\u8868\u793a<ul> <li>\u52a3\u52bf\uff1atree \u5728\u751f\u957f\u7684\u65f6\u5019\u6bcf\u4e2a\u8282\u70b9\u9700\u8981\u51e0\u4e2a pointer \u4e0d\u597d\u786e\u5b9a<ul> <li>\u5982\u679c\u63d0\u524d\u77e5\u9053\u4e86 degree\uff0c\u4e5f\u4f1a\u6d6a\u8d39\u7a7a\u95f4</li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#122-firstchild-nextsibiling-representation","title":"1.2.2 FirstChild-NextSibiling Representation","text":"<ul> <li>\u6bcf\u4e2a node \u90fd\u6709\u4e24\u4e2a pointer\uff0c\u7b2c\u4e00\u4e2a\u6307\u5411 firstchild\uff0c\u7b2c\u4e8c\u4e2a\u6307\u5411 nextsibiling</li> <li>\u8868\u8fbe\u4e0d\u552f\u4e00\uff0c\u5b50\u8282\u70b9\u7684\u987a\u5e8f\u662f\u4e0d\u91cd\u8981\u7684</li> </ul> <p>general tree can be converted into a Binary Tree</p>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#2-binary-tree","title":"2 Binary Tree","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#21-definition","title":"2.1 Definition","text":"<ul> <li>\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u80fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9</li> <li>\u76f8\u5f53\u4e8e general \u7684 firstchild-nextsibiling \u8868\u8fbe\u65cb\u8f6c 45\u00b0</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#22-applications","title":"2.2 Applications","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#221-expression-tree-syntax-trees","title":"2.2.1 Expression Tree (syntax trees)","text":"<ul> <li>review: postfix expression -&gt; stack</li> <li>constructing an Expression Tree from postfil expression<ul> <li>operand, push</li> <li>operatior, operator \u6307\u5411\u6808\u9876\u4e24\u4e2a\u5143\u7d20\uff0cpush operator \u7684\u6307\u9488</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#23-tree-traversels","title":"2.3 Tree Traversels","text":"<ul> <li>preorder \u5148\u6839\u904d\u5386\uff0c\u6839\u5de6\u53f3</li> <li>postorder \u540e\u6839\u904d\u5386\uff0c\u5de6\u53f3\u6839</li> <li>levelorder \u6df1\u5ea6\u904d\u5386<ul> <li>\u4f7f\u7528 queue \u5b58\u50a8\u5c06\u8981\u904d\u5386\u7684\u8282\u70b9\u6307\u9488</li> <li>\u6bcf\u904d\u5386\u4e00\u4e2a\u8282\u70b9\uff0c\u5c06\u5b83\u7684\u5b50\u8282\u70b9\u52a0\u5165\u961f\u5217</li> </ul> </li> <li>Inorder Traversal \u4e2d\u6839\u904d\u5386\uff0c\u5de6\u6839\u53f3<ul> <li>\u5148\u5de6\u5b50\u6811\uff0c\u518d\u6839\u8282\u70b9\uff0c\u518d\u53f3\u5b50\u6811</li> <li>\u9012\u63a8\u5f62\u5f0f\u975e\u5e38\u590d\u6742\uff0c\u9012\u5f52\u5f88\u597d\u8bfb</li> </ul> </li> </ul> <pre><code>void iter_inorder( tree_ptr tree )\n{\n    Stack S = CreateStack(MAX_SIZE);\n    for(;;) {\n        for(; tree; tree = tree-&gt;left) Push(tree, S);\n        tree = Top(S); Pop(S);\n        if(!tree) break;\n        visit(tree-&gt;Element);\n        tree = tree-&gt;Right;\n    }\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#231-expression-tree","title":"2.3.1 expression tree","text":"<ul> <li>\u6309\u7167\u4e0d\u540c\u7684\u904d\u5386\u65b9\u5f0f\uff0c\u80fd\u5f97\u5230\u4e0d\u540c\u7684\u8868\u8fbe\u5f0f\uff0c\u8fd9\u5c31\u662f expression tree \u7684\u4f5c\u7528</li> <li>perorder: prefix exp</li> <li>inorder: infix exp</li> <li>postorder: postfix exp</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#232-print-directory","title":"2.3.2 print directory","text":"<ul> <li>\u4f7f\u7528 preorder \u904d\u5386\uff0c\u5148\u6253\u5370\u6839\u76ee\u5f55</li> <li>\u8bb0\u5f55 depth\uff0c\u7528\u4f5c print \u7684\u7f29\u8fdb</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#233-calculating-the-size-of-a-directory","title":"2.3.3 Calculating the size of a directory","text":"<ul> <li>\u4f7f\u7528 postorder\uff0c\u5148\u8ba1\u7b97\u5b50\u8282\u70b9\uff08\u6587\u4ef6\u6216\u6587\u4ef6\u5939\uff09\u7684\u5927\u5c0f\uff0c\u5728\u8fd4\u56de\u5b50\u8282\u70b9</li> <li>\\(T(N)=O(N)\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#24-different-binary-trees","title":"2.4 Different Binary Trees","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#241-threaded-binary-trees-\u7ebf\u7d22\u4e8c\u53c9\u6811","title":"2.4.1 Threaded Binary Trees \u7ebf\u7d22\u4e8c\u53c9\u6811","text":"<ul> <li>\u4e00\u4e2a\u4e8c\u53c9\u6811\u6709 n \u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u5c31\u4e00\u5b9a\u6709 n+1 \u4e2a\u7a7a\u7684\u6307\u9488\uff0c\u6240\u4ee5\u4e3a\u4e86 \u907f\u514d\u6d6a\u8d39\u53ef\u4ee5\u4f7f\u7528 threads</li> <li>Rules: \u6709\u4e00\u4e2a dummy head node<ol> <li>\u5982\u679c\u5de6\u6307\u9488\u7a7a\uff0c\u66ff\u6362\u4e3a\u4e2d\u5e8f\u904d\u5386\u7684\u524d\u9a71<ol> <li>\u5982\u679c\u6ca1\u6709\u524d\u9a71\uff0c\u66ff\u6362\u4e3a dummy head node</li> </ol> </li> <li>\u5982\u679c\u53f3\u6307\u9488\u7a7a\uff0c\u66ff\u6362\u4e3a\u4e2d\u5e8f\u904d\u5386\u7684\u540e\u7ee7</li> </ol> </li> <li>\u4fbf\u4e8e\u4ece\u4e0b\u9762\u6765\u5f80\u4e0a\u904d\u5386</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#242-other-binary-trees","title":"2.4.2 Other binary trees","text":"<ul> <li>Skewed Binary Trees: \u659c\u6811\uff0c\u9000\u5316\u6210\u7ebf\u6027\u7ed3\u6784 \u8868\u8fbe\u80fd\u529b\u5f88\u5f31\uff0c\u4e0d\u5982\u7528 linear list</li> <li>Complete Binary Trees: \u5b8c\u5168\u4e8c\u53c9\u6811 ^bfe95b<ul> <li>\u9664\u4e86\u6700\u540e\u4e00\u5c42\uff0c\u5168\u90fd\u586b\u6ee1</li> <li>\u6700\u540e\u4e00\u5c42\u4ece\u5de6\u5f80\u53f3\u586b</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#25-properties-of-binary-trees","title":"2.5 Properties of Binary Trees","text":"<ul> <li>\u7b2c i \u5c42\u6700\u5927\u6709 \\(2^{i-1}\\) \u4e2a\u8282\u70b9</li> <li>k \u5c42\u4e8c\u53c9\u6811\u7684\u6700\u5927\u8282\u70b9\u4e2a\u6570\u4e3a \\(2^k-1\\)</li> <li>\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0c\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570\u6bd4 2 \u5ea6\u8282\u70b9\u4e2a\u6570\u591a 1 \\(n_0=n_2+1\\)<ul> <li></li> <li>\u6216\u8005\u8fd9\u6837\u7406\u89e3<ul> <li>\u5982\u679c\u6ca1\u6709\u4e8c\u5ea6\u8282\u70b9\uff0c\u53ea\u4f1a\u6709\u4e00\u4e2a\u53f6\u5b50</li> <li>\u6bcf\u591a\u4e00\u4e2a\u4e8c\u5ea6\u8282\u70b9\uff0c\u5c31\u80fd\u591a\u4e00\u6761\u652f\u8def\uff0c\u591a\u4e00\u4e2a\u53f6\u5b50</li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#3-the-search-tree-adt-binary-search-tree","title":"3 The Search Tree ADT - Binary Search Tree","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#31-definition","title":"3.1 Definition","text":"<ul> <li>\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a key\uff0c\u4e3a\u6574\u6570\uff0c\u6bcf\u4e2a key \u4e0d\u540c</li> <li>\u5de6\u5b50\u6811\u7684 key \u90fd\u5c0f\u4e8e root</li> <li>\u53f3\u5b50\u6811\u7684 key \u90fd\u5927\u4e8e root</li> <li>Binary Search Tree \u7684\u5b50\u6811\u4e5f\u662f Binary Search Tree</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#32-adt","title":"3.2 ADT","text":"<ul> <li>Objects: A finite ordered list with zero or more elements</li> <li>Operations</li> </ul> <pre><code>SearchTree MakeEmpty( SearchTree T );\nPosition Find( ElementType X, SearchTree T );\nPosition FindMin( SearchTree T );\nPosition FindMax( SearchTree T );\nSearchTree Insert( ElementType X, SearchTree T );\nSearchTree Delete( ElementType X, SearchTree T );\nElementType Retrieve( Position P );\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#33-implementations","title":"3.3 Implementations","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#331-find","title":"3.3.1 Find","text":"<ul> <li>\u9012\u5f52\u53ef\u4ee5\u5b9e\u73b0</li> <li>\u7531\u4e8e\u662f\u5c3e\u9012\u5f52\uff0c\u53ef\u4ee5\u4f18\u5316\u4e3a\u5faa\u73af</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5c31\u662f\u6811\u7684\u6df1\u5ea6 d</li> </ul> <pre><code>Position Iter_Find( ElementType X, SearchTree T )\n{\n    while(T){\n        if(X == T-&gt;Element) return T;    // found\n        else if(X &lt; T-&gt;Element) T = T-&gt;Left;\n        else T = T-&gt;Right;\n    }\n    return NULL;    // not found\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#332-findminfindmax","title":"3.3.2 FindMin/FindMax","text":"<ul> <li>\u627e\u5230\u5de6\u4e0b\u89d2/\u53f3\u4e0b\u89d2\u7684\u8282\u70b9 \u5faa\u73af\u89e3\u51b3</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a d</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#333-insert","title":"3.3.3 Insert","text":"<ul> <li>\u627e\u5230\u5f85\u63d2\u5165\u7684\u4f4d\u7f6e\uff08\u7236\u8282\u70b9\uff09<ul> <li>\u8fdb\u884c\u548c Find \u4e00\u6837\u7684\u64cd\u4f5c</li> <li>\u6700\u540e\u4e00\u4e2a\u9047\u5230\u7684\u8282\u70b9\u5c31\u662f\u8fd9\u4e2a\u6570\u7684\u7236\u8282\u70b9</li> </ul> </li> <li>\u521b\u5efa\u8282\u70b9\u5e76\u8fd4\u56de\u6307\u9488</li> <li>\u4e0a\u4e00\u5c42\u8c03\u7528\u4e2d\u4f7f\u7236\u8282\u70b9\u7684\u6307\u9488\u7b49\u4e8e\u8fd9\u4e2a\u65b0\u8282\u70b9\u7684\u6307\u9488</li> <li>\\(T(N)=O(d)\\) </li> </ul> <pre><code>SearchTree Insert( ElementType X, SearchTree T )\n{\n    if(T == NULL){ // the initial T is NULL, or the position of X is found\n        T = (SearchTree)malloc(sizeof(struct TreeNode));\n        if(T == NULL) FatalError(\"Out of space!!\");\n        else{\n            T-&gt;Element = X;\n            T-&gt;Left = NULL; T-&gt;Right = NULL;\n        }\n    }\n    else{\n        if(X &lt; T-&gt;Element) T-&gt;Left = Insert(X, T-&gt;Left); // need to update T-&gt;Left in this recursion\n        else if(X &gt; T-&gt;Element) T-&gt;Right = Insert(X, T-&gt;Right);\n        // else X already exist, do nothing\n    }\n    return T;   // make this return because the original T is allowed to be NULL, thus we need to build such a tree and ptr to it!!!\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#334-delete","title":"3.3.4 Delete","text":"<ul> <li>delete leaf node: free \u5e76\u5c06\u7236\u8282\u70b9\u6307\u5411\u7a7a</li> <li>delete 1 degree node: \u5c06\u5b83\u7684\u5b50\u8282\u70b9\u76f4\u63a5\u63a5\u5230\u7236\u8282\u70b9\u4e0a</li> <li>delete 2 degree node: <ul> <li>\u5c06\u8fd9\u4e2a\u8282\u70b9\u66ff\u6362\u4e3a\u5de6\u5b50\u6811\u4e2d\u6700\u5927\u7684\uff0c\u6216\u53f3\u5b50\u6811\u4e2d\u6700\u5c0f\u7684</li> <li>\u5bf9\u88ab\u6362\u8fc7\u6765\u7684\u8fd9\u4e2a\u8282\u70b9\u9012\u5f52\u8fdb\u884c delete \u64cd\u4f5c</li> </ul> </li> </ul> <pre><code>SearchTree Delete( ElementType X, SearchTree T )\n{\n    Position TmpCell;\n    if(T == NULL) Error(\"Element not found\");\n    if(X &lt; T-&gt;Element) T-&gt;Left = Delete(X, T-&gt;Left);    // go left\n    else if(X &gt; T-&gt;Element) T-&gt;Right = Delete(X, T-&gt;Right); // go right\n    else{   // found, just this node\n        if(T-&gt;Left &amp;&amp; T-&gt;Right){    // two child\n            TmpCell = FindMax(T-&gt;Left);\n            T-&gt;Element = TmpCell-&gt;Element;\n            T-&gt;Left = Delete(T-&gt;Element, T-&gt;Left);\n        }\n        else{       // one or no child\n            TmpCell = T;\n            if(T-&gt;Left) T = T-&gt;Left;    // left not empty, replace with left\n            else if(T-&gt;Right) T = T-&gt;Right; // right not empty, replace with right\n            free(TmpCell);  // don't forget to free memory!\n        }\n    }\n    return T;   // if deleted, ptr has to be updated\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#3341-lazy-deletion","title":"3.3.4.1 Lazy Deletion","text":"<ul> <li>\u4f7f\u7528\u4e00\u4e2a flag \u6765\u6807\u8bb0\u8fd9\u4e2a\u8282\u70b9\u662f\u5426 active\uff0c\u6807\u8bb0\u4e3a deleted \u5c31\u53ef\u4ee5\uff0c\u7528\u4e8e\u51cf\u5c11 free \u64cd\u4f5c</li> <li>\u5982\u679c\u4e8c\u53c9\u6811\u6bd4\u8f83\u5e73\u8861\u7684\u8bdd\uff0c\u4f7f\u7528 lazy deletion \u53ea\u4f1a\u4f7f\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u589e\u52a0\u4e00\u70b9\u70b9</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#34-average-case-analysis","title":"3.4 Average-Case Analysis","text":"<ul> <li>\u5efa\u7acb\u4e00\u4e2a n \u4e2a\u8282\u70b9\u7684 binary search tree</li> <li>\\(height(bst)\\in[h-1,\\lceil\\log_2(n+1)\\rceil-1]\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#4-hw-4","title":"4 HW 4","text":"<ol> <li>There exists a binary tree with 2016 nodes in total, and with 16 nodes having only one child. F<ol> <li>\u53bb\u9664\u6240\u6709\u7684\u5355\u4e2a\u5b69\u5b50\u7684\u8282\u70b9\uff0c\u5269\u4e0b 2000 \u4e2a\u8282\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u4f46 2000 \u4e0d\u662f 2 \u7684\u6b21\u65b9\u6570</li> </ol> </li> <li>Given a tree of degree 3. Suppose that there are 3 nodes of degree 2 and 2 nodes of degree 3. Then the number of leaf nodes must be ____.<ol> <li>\u5982\u679c\u6240\u6709\u7684 degree \u90fd\u662f 1\uff0c\u90a3\u4e48\u53ea\u6709\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9</li> <li>every extra degree add 1 leaf node</li> <li>1+3+2*2=8</li> </ol> </li> <li>If a general tree\u00a0T\u00a0is converted into a binary tree\u00a0BT, then which of the following\u00a0BT\u00a0traversals gives the same sequence as that of the post-order traversal of\u00a0T?<ol> <li>left right root</li> <li>the sequence of M H I J D</li> <li>T preorder = BT preorder; T postorder = BT inorder</li> </ol> </li> <li>Among the following threaded binary trees (the threads are represented by dotted curves), which one is the postorder threaded tree?<ol> <li>threaded binary tree \u7a7a\u6307\u9488\u7684\u66ff\u6362\u89c4\u5219\u53ef\u4ee5\u662f postorder, inorder, preorder</li> </ol> </li> </ol>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#41-\u51fd\u6570\u9898isomorphic-\u540c\u6784\u6811","title":"4.1 \u51fd\u6570\u9898\uff1aIsomorphic \u540c\u6784\u6811","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#411-idea-1","title":"4.1.1 Idea 1","text":"<ul> <li>\u9700\u8981\u4f7f\u7528\u9012\u5f52\uff0c\u6bcf\u6b21\u5224\u65ad\u4e00\u5c42\uff0c\u7136\u540e\u62c6\u6210\u5b50\u6811\u518d\u6b21\u5224\u65ad</li> <li>degree \u4e0d\u76f8\u7b49\u76f4\u63a5\u8fd4\u56de 0<ul> <li>\u5bf9\u4e8e degree = 2 \u8282\u70b9\u5728\u672c\u5c42\uff0c\u5224\u65ad\u4e0b\u4e00\u5c42\u7684 value \u662f\u5426\u5bf9\u5e94<ul> <li>\u5bf9\u5e94\uff0c\u5219\u5bf9\u5e94\u9012\u5f52\u8c03\u7528</li> <li>\u4e0d\u5bf9\u5e94\uff0c\u5219\u8fd4\u56de 0</li> </ul> </li> <li>\u5bf9\u4e8e degree = 1 \u8282\u70b9\u5728\u672c\u5c42\uff0c\u5224\u65ad\u4e0b\u4e00\u5c42\u7684 value \u662f\u5426\u5bf9\u5e94</li> <li>\u5bf9\u4e8e degree = 0 \u7684\u8282\u70b9\u8fd4\u56de 1</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#412-idea-2","title":"4.1.2 Idea 2","text":"<ul> <li>\u5224\u65ad\u503c\u662f\u5426\u76f8\u7b49\uff0c\u4e0d\u76f8\u7b49\u8fd4\u56de 0</li> <li>\u5224\u65ad degree<ul> <li>not equal return 0</li> <li>= 2<ul> <li>if tree 1 left == tree 2 left<ul> <li>iso(left, left)</li> <li>iso(right, right)</li> </ul> </li> <li>else<ul> <li>iso(left, right)</li> <li>iso(right, left)</li> </ul> </li> </ul> </li> <li>=1<ul> <li>\u76f8\u5e94\u8c03\u7528</li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#413-\u6613\u9519\u70b9\u6539\u8fdb\u5efa\u8bae","title":"4.1.3 \u6613\u9519\u70b9\u3001\u6539\u8fdb\u5efa\u8bae","text":"<ul> <li>\u9700\u8981\u8003\u8651\u5bf9\u4e24\u4e2a\u7a7a\u6811\u8c03\u7528\u7684\u60c5\u51b5</li> <li>\u4f7f\u7528 bitmap \u6765\u7edf\u4e00\u8868\u793a\uff0c\u53ef\u4ee5\u7a0d\u5fae\u51cf\u5c11\u5224\u65ad\u7684\u95ee\u9898</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#42-\u7f16\u7a0b\u9898zigzagging-on-a-tree","title":"4.2 \u7f16\u7a0b\u9898\uff1aZigZagging on a Tree","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#421-question","title":"4.2.1 Question","text":"<ul> <li>how to build a tree from inorder array and postorder array?</li> <li>how to traversal this binary tree in required form?</li> <li>build binary tree</li> <li>traversal it</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#422-idea-1-abandoned-\u7a7a\u95f4\u592a\u5927\u4e86\u5176\u5b9e\u64cd\u4f5c\u5f88\u7b80\u5355\u771f\u6b63\u5efa\u7acb\u6811\u7684\u7ed3\u6784\u6ca1\u6709\u7528","title":"4.2.2 idea 1: abandoned \u7a7a\u95f4\u592a\u5927\u4e86\uff0c\u5176\u5b9e\u64cd\u4f5c\u5f88\u7b80\u5355\uff0c\u771f\u6b63\u5efa\u7acb\u6811\u7684\u7ed3\u6784\u6ca1\u6709\u7528","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#4221-\u5efa\u7acb\u6811","title":"4.2.2.1 \u5efa\u7acb\u6811","text":"<ul> <li>\u62ff\u5230 postorder \u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a pivot</li> <li>\u5728 parent \u4e0b\u5efa\u7acb\u8fd9\u4e2a\u8282\u70b9</li> <li>\u5728 inorder \u4e2d\u627e\u5230\u8fd9\u4e2a pivot\uff0c\u67e5\u8be2\u5de6\u53f3\u5b50\u6811\u957f\u5ea6</li> <li>\u9012\u5f52\u8c03\u7528\uff0c\u5206\u522b\u4f20\u5165 root \u7684\u5de6\u53f3\u6307\u9488</li> <li>\u5f53 size = 1 \u65f6\uff0c\u5efa\u7acb\u8fd9\u4e2a\u8282\u70b9\uff0c\u9012\u5f52\u51fa\u53e3</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#4222-\u904d\u5386\u6811","title":"4.2.2.2 \u904d\u5386\u6811","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#423-idea-2","title":"4.2.3 idea 2","text":"<ul> <li>\u4f7f\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 inorder \u6807\u8bb0\u6bcf\u4e2a\u6570\u5b57\u7684\u6df1\u5ea6\uff1f<ul> <li>\u9700\u8981\u7528\u5230\u904d\u5386\uff0c\u6bcf\u6b21\u53d6 postorder \u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e3a pivot\uff0c\u8bbe\u7f6e\u8fd9\u4e2a pivot \u7684\u6df1\u5ea6\uff0c\u5e76\u9012\u5f52\u6c42\u5b50\u6811\u5143\u7d20\u7684\u6df1\u5ea6</li> </ul> </li> <li>\u7136\u540e\u76f4\u63a5\u4ea4\u53c9\u904d\u5386\u6570\u7ec4\uff1f</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#4231-\u8bc4\u4ef7\u975e\u5e38\u597d\u4e00\u904d\u8fc7\u5f88\u7701\u7a7a\u95f4","title":"4.2.3.1 \u8bc4\u4ef7\uff1a\u975e\u5e38\u597d\uff0c\u4e00\u904d\u8fc7\uff01\u5f88\u7701\u7a7a\u95f4","text":"<ul> <li>\u6700\u540e\u6362\u6210\u5355\u72ec\u7684 depths \u6570\u7ec4\uff0c\u7ef4\u62a4\u8d77\u6765\u6bd4\u8f83\u65b9\u4fbf</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#4232-\u5efa\u8bae","title":"4.2.3.2 \u5efa\u8bae","text":"<ul> <li>\u6ce8\u610f\u8f93\u51fa\u683c\u5f0f\u7684\u9650\u5236\uff0c\u672b\u5c3e\u662f\u5426\u5141\u8bb8\u6709\u591a\u4f59\u7684\u7a7a\u683c</li> <li>\u6ce8\u610f\u8fd9\u662f C \u8bed\u8a00\uff0c\u4e0d\u662f python</li> <li>\u4e09\u76ee\u8fd0\u7b97\u7b26 <code>int max = a&gt;b?a:b;</code></li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#5-hw","title":"5 HW","text":"<ul> <li>There exists a binary tree with 2016 nodes in total, and with 16 nodes having only one child. F<ul> <li>\u6839\u636e 2.5 Properties of Binary Trees \u8fdb\u884c\u63a8\u5bfc\u5f97\u51fa \\(2n_2=1999\\) \u9664\u4e0d\u5c3d\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd</li> </ul> </li> <li>In a binary search tree which contains several integer keys including 4, 5, and 6, if 4 and 6 are on the same level, then 5 must be their parent. F<ul> <li>False: \u53ef\u4ee5\u662f\u4e09\u5c42\u7684\u6811\uff0c5 \u4e3a\u6839\uff0c4 \u4e3a\u53f3\u5b69\u5b50\uff0c6 \u4e3a\u5de6\u5b69\u5b50</li> </ul> </li> <li><ul> <li>\u4e0b\u5217\u4e8c\u53c9\u6811\u4e2d\uff0c\u53ef\u80fd\u6210\u4e3a\u6298\u534a\u67e5\u627e\u5224\u5b9a\u6811\uff08\u4e0d\u542b\u5916\u90e8\u7ed3\u70b9\uff09\u7684\u662f\uff08\uff09_\u4e0b\u5217\u4e8c\u53c9\u6811\u4e2d,\u53ef\u80fd\u6210\u4e3a\u6298\u534a\u67e5\u627e\u5224\u5b9a\u6811(\u4e0d\u542b\u5916\u90e8\u7ed3\u70b9)\u7684\u662f:-CSDN\u535a\u5ba2</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.04%20Trees.html#6-review","title":"6 Review","text":"<ul> <li>The time comlexity of Binary Search will be the same no matter we store the elements in an array or a linked list.<ul> <li>F, idkw</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html","title":"Ch.05 Priority Queues (Heaps)","text":"<p>Priority queues</p> <p>delete the element with the highest / lowest priority</p>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#1-adt-model","title":"1 ADT Model","text":"<ul> <li>Objects: A finite ordered list with zero or more elements</li> <li>Operations</li> </ul> <pre><code>PriorityQueue Initialize( int MaxElements );\nvoid Insert( ElementType X, PriorityQueue H );\nElementType DeleteMin( PriorityQueue H );\nElementType FindMin( PriorityQueue H );\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#2-simple-implementations","title":"2 Simple Implementations","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#21-array","title":"2.1 Array","text":"<ul> <li>Insertion, \\(\\Theta(1)\\)</li> <li>Deletion<ul> <li>find the largest / smallest \\(\\Theta(n)\\)</li> <li>remove the item and shift array \\(O(n)\\)</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#22-linked-list-usually-best","title":"2.2 Linked List Usually Best","text":"<ul> <li>Insertion<ul> <li>add to the front \\(\\Theta(1)\\)</li> </ul> </li> <li>Deletion<ul> <li>find \\(\\Theta(n)\\)</li> <li>remove \\(\\Theta(1)\\)</li> </ul> </li> <li>Why best<ul> <li>deletion \u6c38\u8fdc\u6bd4 insertion \u5c0f\uff0cinserrtion \u6b21\u6570\u591a\uff0c\u4f7f\u5f97\u63d2\u5165\u66f4\u5c0f\u5c31\u597d</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#23-ordered-array","title":"2.3 Ordered Array","text":"<ul> <li>Insertion<ul> <li>find the proper position \\(O(n)\\)</li> <li>shift \\(O(n)\\)</li> </ul> </li> <li>Deletion: delete the last \\(O(1)\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#24-ordered-linked-list","title":"2.4 Ordered Linked List","text":"<ul> <li>Insertion:<ul> <li>find position \\(O(n)\\)</li> <li>insert \\(\\Theta(1)\\)</li> </ul> </li> <li>Deletion: delete first/last item \\(\\Theta(n)\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#25-binary-search-tree","title":"2.5 Binary Search Tree","text":"<ul> <li>\u7531\u4e8e\u603b\u662f\u5220\u9664\u5de6\u4e0b\u89d2\u7684\u8282\u70b9\uff0c\u4e8c\u53c9\u6811\u4e00\u5b9a\u4f1a\u4e0d\u5e73\u8861</li> <li>\u7ef4\u62a4\u4e00\u4e2a\u5e73\u8861\u4e8c\u53c9\u6811\uff1f AVL Tree in ads</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#3-binary-heap","title":"3 Binary Heap","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#31-structure-property","title":"3.1 Structure Property","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#311-definition","title":"3.1.1 Definition","text":"<ul> <li>A binary tree with n nodes and height h is complete iff its nodes correspond to the nodes numbered from 1 to n in the prefect binary tree of height h. \u4e5f\u5c31\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u4f46\u662f\u53ea\u6709\u524d n \u4e2a\u8282\u70b9</li> <li>\u5bf9\u4e8e\u4e00\u4e2a\u9ad8\u5ea6\u4e3a h \u7684\u4e8c\u53c9\u6811\uff0c\u6709 \\([2^h,2^{h+1}-1]\\) \u4e2a\u5143\u7d20<ul> <li>\\(h=\\lfloor\\log_2 N\\rfloor\\)</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#312-array-representation","title":"3.1.2 Array Representation","text":"<ul> <li>\u4f7f\u7528 BT[N+1]\uff0c\u7b2c\u96f6\u4e2a index \u5b9e\u9645\u6ca1\u6709\u7528</li> <li>for any node with index i, we have:<ul> <li>\u7236\u4eb2\u4e3a i/2 \u5411\u4e0b\u53d6\u6574<ul> <li>\\(parent(i)=\\,\\lfloor i/2\\rfloor (i\\ne 1), \\space None(i=1)\\)</li> </ul> </li> <li>\u5de6\u5b69\u5b50\u4e3a 2i<ul> <li>\\(left\\_child(i)=\\,2i(2i\\le n),\\space None(2i&gt;n)\\)</li> </ul> </li> <li>\u53f3\u5b69\u5b50\u4e3a 2i+1<ul> <li>\\(right\\_child(i)=\\,2i+1(2i+1\\le n),\\space None(2i+1&gt;n)\\)</li> </ul> </li> </ul> </li> <li>\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u5728\u7b2c\u96f6\u4e2a index \u8bbe\u7f6e\u4e00\u4e2a\u6700\u5c0f\u7684\u503c\uff0c\u79f0\u4e3a sentinel \u54e8\u5175</li> </ul> <pre><code>PriorityQueue Initialize( int MaxElements )\n{\n    PriorityQueue H;\n    if(MaxElements &lt; MinPQSize) return Error(\"Priority queue size is too small\");  // too small size, no need for a queue\n    H = malloc(sizeof(struct HeapStruct));\n    if(H == NULL) return FatalError(\"Out of space!!\");\n    /*allocate the array plus one extra for sentinel*/\n    H-&gt;Elements = malloc((MaxElements + 1)*sizeof(ElememtType));\n    if(H-&gt;ELements == Null) return FatalError(\"Out of space!!\");\n    H-&gt;capacity = MaxElements;  // max allowed num of elements\n    H-&gt;Size = 0;    // current, no elements\n    H-&gt;Elements[0] = MinData;  // sentinel\n    return H;\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#32-heap-order-property","title":"3.2 Heap Order Property","text":"<ul> <li>\u6700\u5c0f\u6811\uff1a\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u4e0d\u6bd4\u5b69\u5b50\u5927</li> <li>\u6700\u5c0f\u5806\uff1a\u662f\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u4e5f\u662f\u4e00\u4e2a\u6700\u5c0f\u6811\uff0c\u6700\u5c0f\u503c\u5728\u6839</li> <li>\u6700\u5927\u5806\uff0c\u6700\u5927\u503c\u5728\u6839</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#33-basic-heap-operations","title":"3.3 Basic Heap Operations","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#331-insertion","title":"3.3.1 Insertion","text":"<ul> <li>\u63d2\u5165\u4e4b\u540e\u6811\u7684\u7ed3\u6784\u662f\u4e00\u5b9a\u7684\uff0c\u56e0\u4e3a\u8981\u4fdd\u6301 index \u8fde\u7eed</li> <li>\u63d2\u5165\u5230\u65b0\u5f00\u7684\u8282\u70b9\uff0c\u5982\u679c\u6bd4\u7236\u8282\u70b9\u5927\uff0c\u5c31\u4e92\u6362\uff0c\u5e76\u9012\u5f52\u6bd4\u8f83\u4e92\u6362 Percolate Up</li> </ul> <pre><code>void insert( ElementType X, PriorityQueue H )\n{\n    int i;  // node ptr\n    if(isFull(H)){\n        Error(\"Priority queue is full!!\");\n        return;\n    }\n\n    for(i = ++H-&gt;size; H-&gt;Element[i/2] &gt; x; i/=2){    // \u96f6\u53f7\u6709\u54e8\u5175\uff0c\u4e0d\u9700\u8981\u5224\u65ad\u662f\u5426\u4e3a\u6839\u8282\u70b9\n        H-&gt;Elements[i] = H-&gt;Elements[i/2];    // Procolete up, dont swap!!!\n    }\n\n    H-&gt;Elements[i] = x;\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#332-deletemin","title":"3.3.2 DeleteMin","text":"<ul> <li>\u5148\u628a\u6700\u5927 index \u7684\u5143\u7d20\u5199\u5230\u6839\u8282\u70b9</li> <li>\u627e\u5230\u6839\u8282\u70b9\u5de6\u53f3\u5b69\u5b50\u4e2d\u6700\u5c0f\u7684\uff0c\u5982\u679c\u6bd4\u5b83\u5927\uff0c\u4e0e\u5176\u4ea4\u6362 Percolate Down</li> <li>\u9012\u5f52\u8c03\u7528</li> <li>\\(O(logn)\\)</li> </ul> <pre><code>ElementType DeleteMin( Priority Queue H)\n{\n    int i, Child;  // ptrs\n    ElementType MinElement, LastElement;\n    if(IsEmpty(H)){\n        Error(\"Priority queue is empty\");\n        return H-&gt;Elements[0];    // return the sential\n    }\n    MinElement = H-&gt;Elements[1];    // save the smallest\n    LastElement = H-&gt;Elements[H-&gt;Size--];    // take last and reset szie\n    for(i = 1; i*2 &lt;= H-&gt;Size; i = Child){    // find smaller child\n        Child = i*2;    // find left child\n        if(Child != H-&gt;Size &amp;&amp; H-&gt;ELements[Child+1] &lt; H-&gt;Elements[Child]) Child++;    // if there is smaller right child, jump to it\n        if(LastElement &gt; H-&gt;Elements[Child]) H-&gt;Elements[i] = H-&gt;Elements[Child];    // percolate down one level\n        else break;    // proper postion found\n    }\n    H-&gt;Elements[i] = LastElement;   // put it there\n    return MinElement;\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#333-other-heap-operations","title":"3.3.3 Other Heap Operations","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#3331-decreasekeyp-delta-h-percolate-up","title":"3.3.3.1 DecreaseKey(P, delta, H) Percolate up","text":"<ul> <li>Lower the value of the key in the heap H at position P by a positive amount of delta</li> <li>\u540c\u6837\uff0c\u53d6\u51fa\uff0c\u7136\u540e percolate\u8fd9\u6837\u4e0d\u9700\u8981 swap\uff0c\u627e\u5230\u6b63\u786e\u4f4d\u7f6e\u5199\u5165</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#3332-increasekeyp-delta-h-percolate-down","title":"3.3.3.2 IncreaseKey(P, delta, H) Percolate down","text":"<ul> <li>Increases the value ofthe key in the heap H at position P by a positive amount of delta</li> <li>\u53d6\u51fa\uff0c\u7136\u540e percolate \u6ce8\u610f\u8981\u627e\u6bd4\u8f83\u5c0f\u7684\u5b69\u5b50\uff0c\u627e\u5230\u6b63\u786e\u4f4d\u7f6e\uff0c\u5199\u5165</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#3333-deletep-h-\u5220\u9664\u7b2c-p-\u4e2a\u5143\u7d20","title":"3.3.3.3 Delete(P, H) \u5220\u9664\u7b2c P \u4e2a\u5143\u7d20","text":"<ul> <li>DecreaseKey(P, infty, H); DeleteMin(H); \u53d8\u6210\u6839\u8282\u70b9\uff0c\u7136\u540e deleteMin</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#3334-buildheaph-\u5c06\u4e00\u4e2a\u6570\u7ec4\u6392\u5217\u6210\u5806","title":"3.3.3.4 BuildHeap(H) \u5c06\u4e00\u4e2a\u6570\u7ec4\u6392\u5217\u6210\u5806","text":"<ul> <li>\u5148\u6784\u5efa\u5806\uff08\u5199\u5165\u6570\u7ec4\uff09</li> <li>PercolateDown(7, 6, 5, 4, ....)<ul> <li>\u4ece index \u6700\u5927\u7684\u7236\u8282\u70b9\u5f00\u59cb percolate down</li> </ul> </li> <li>\u65f6\u95f4\u590d\u6742\u5ea6<ul> <li>\u8003\u8651\u6ee1\u4e8c\u53c9\u5806\uff0c\u4e00\u5171 \\(2^{h+1}-1\\) \u4e2a\u8282\u70b9\uff0c\u6240\u6709\u8282\u70b9\u7684\u9ad8\u5ea6\u4e4b\u548c \\(\\sum_{i=0}^h h*2^h=2^{h+1}-1-(h+1)\\)\uff0c\u6240\u4ee5\uff1a<ul> <li>\\(T(N)=O(N)\\)</li> </ul> </li> <li>\u5982\u679c\u4f7f\u7528 insert \u64cd\u4f5c\uff0c\u6bcf\u6b21 logN\uff0c\u4e00\u5171\u6267\u884c N \u6b21\uff0c\u6548\u7387\u8f83\u4f4e</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#4-applications-of-priority-queues-find-the-kth-largest-element","title":"4 Applications of Priority Queues: Find the kth largest element","text":"<ul> <li>\u5efa\u7acb\u6700\u5927\u5806</li> <li>\u8fdb\u884c k-1 \u6b21 deleteMin\uff0c\u6bcf\u6b21 \\(\\log N\\)</li> <li>\\(T(N)=O(N)\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#5-d-heaps","title":"5 d-Heaps","text":"<ul> <li>\u6240\u6709\u7684 node \u90fd\u6709 d \u4e2a\u5b69\u5b50\uff0c\u6bd4\u5982 3-heap</li> <li>\u4e8b\u5b9e\u4e0a\uff0c\u8ba1\u7b97\u7684\u65f6\u5019 *2 \u548c /2 \u90fd\u662f\u79fb\u4f4d\u64cd\u4f5c\uff0c\u6240\u4ee5 binary \u6700\u5feb</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#6-exercises","title":"6 Exercises","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#61-hw-6","title":"6.1 HW 6","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#611-2-2","title":"6.1.1 2-2","text":"<ul> <li> <p>Using the linear algorithm to build a min-heap from the sequence {15, 26, 32, 8, 7, 20, 12, 13, 5, 19}, and then insert 6. Which one of the following statements is FALSE?</p> <ul> <li>A. The root is 5</li> <li>B. The path from the root to 26 is {5, 6, 8, 26}</li> <li>C. 32 is the left child of 12</li> <li>D. 7 is the parent of 19 and 15</li> </ul> </li> <li> <p>\u4ec0\u4e48\u662f linear algorithm ?</p> <ul> <li>\u5148\u5c06\u5143\u7d20\u5199\u6210\u5806\u7684\u6837\u5b50</li> <li>\u7136\u540e\u4ece\u6700\u540e\u4e00\u4e2a\u7236\u8282\u70b9\u5f00\u59cb <code>PercolateDown</code></li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#612-complete-binary-search-tree","title":"6.1.2 Complete Binary Search Tree","text":"<ul> <li>sort the input array</li> <li>inorder write into the CBT</li> <li>print</li> </ul> <pre><code>void inorderInsert(int* array, int* CBST, int N, int* indexArray, int indexCBST)\n{\n    if(indexCBST &gt;= N) return;        // invalid node, exit\n    inorderInsert(array, CBST, N, indexArray, indexCBST*2+1);        // left\n    CBST[indexCBST] = array[*indexArray];        // root\n    (*indexArray)++;\n    inorderInsert(array, CBST, N, indexArray, indexCBST*2+2);        // right\n}\n</code></pre> <ul> <li>\u4ecd\u7136\u8981\u6ce8\u610f <code>(*p)++</code> \u7684\u95ee\u9898</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#62-midterm","title":"6.2 Midterm","text":"<ul> <li>In the binary MAX heap built from the array { 25, 14, 28, 51, 27, 11, 33, 20, 39, 23 }, the index of 39 is 1 (note that the index starts from 0)<ul> <li>\u8fd9\u91cc\u90fd\u8bf4\u4e86 index \u4ece 0 \u5f00\u59cb\uff0c\u5c31\u4e0d\u8981\u6309\u7167 heap \u7684\u5b9a\u4e49\u6765\u4e86</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.05%20Priority%20Queues%20%28Heaps%29.html#621-review","title":"6.2.1 Review","text":"<ul> <li><ul> <li>\u76f4\u63a5\u5c06\u8fd9\u4e2a max heap percolate down\uff0c\u8fd9\u5c31\u662f linear algorithm \u7684\u542b\u4e49</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html","title":"Ch.06 Sorting","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#1-preliminaries","title":"1 Preliminaries","text":"<p><code>void X_Sort ( ElementType A[], int N )</code></p> <ul> <li>N must be a legal integer</li> <li>Assume integer array for the sake of simplicity</li> <li>'&gt;' and '&lt;' operators exist and are the only operations allowed on the input data</li> <li>internal sorting \u5185\u90e8\u6392\u5e8f</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#2-insertion-sort","title":"2 Insertion Sort","text":"<pre><code>void InsertionSort( ElementType A[], int N)\n{\n    int j, P;\n    ElementType Tmp;\n\n    for(P = 1; P &lt; N; P++){\n        Tmp = A[P];\n        for(j = P; j &gt; 0 &amp;&amp; A[j-1] &gt; Tmp; j--)\n            A[j] = A[j-1];   // move backwards\n        A[j] = Tmp;\n    }\n}\n</code></pre> <ul> <li>worst case, decending sequence, \\(T=O(N^2)\\)</li> <li>best case, \\(T=O(N)\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#3-a-lower-bound-for-simple-sorting-algortihms","title":"3 A Lower Bound for Simple Sorting Algortihms","text":"<ul> <li>An Inversion \u9006\u5e8f\u5bf9\uff0cindex \u5927\u5c0f\u548c\u503c\u7684\u5927\u5c0f\u76f8\u53cd\uff0c\u7c7b\u6bd4\u9006\u5e8f\u6570\u95ee\u9898\uff0c\u5047\u8bbe\u9006\u5e8f\u6570\u4e3a n</li> <li>There are \\(n\\) swaps needed to sort this list by insertion sort</li> <li>\\(T(N, I)=O(I+N)\\) \\(I\\) <ul> <li>\u81f3\u5c11\u9700\u8981\u6570\u7ec4\u8fc7\u4e00\u904d \\(N\\)</li> <li>\u6bcf\u4e2a\u9006\u5e8f\u5bf9\u90fd\u9700\u8981 swap \\(I\\)</li> <li>\u5982\u679c\u672c\u6765\u5c31\u63a5\u8fd1\u4e8e\u6392\u597d\u4e86\uff0c\u90a3\u4e48\u63a5\u8fd1\u4e8e \\(O(N)\\) Linear</li> </ul> </li> <li>The average number of inversion in an random array of N distinct numbers is \\(N(N-1)/4\\)</li> <li>Any sorting algorithm that sorts by exchanging adjacent elements requires \\(\\Omega(N^2)\\) time on average</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#31-improvement","title":"3.1 Improvement","text":"<ul> <li>\u6bcf\u6b21\u6392\u5e8f\u4ea4\u6362\u76f8\u9694\u6bd4\u8f83\u8fdc\u7684\u4e24\u4e2a\u5143\u7d20</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#4-shellsort","title":"4 Shellsort","text":"<ul> <li>\u5b9a\u4e49\u5e8f\u5217 \\(h\\)\uff0c\u7136\u540e\u8fdb\u884c\u591a\u6b21\u6392\u5e8f\uff0c\u6bcf\u6b21 \\(h\\) \u51cf\u5c0f\uff0c\u76f4\u5230\u6700\u540e \\(h=1\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#41-naive-shellsort","title":"4.1 Naive Shellsort","text":"<p>\\(h_t=\\lfloor N/2\\rfloor,\\,h_k=\\lfloor h_{k+1}/2\\rfloor\\)</p> <pre><code>void Shellsort( ElementType A[], int N )\n{\n    int i, j, increment;\n    ElementType Tmp;\n    for(increment = N / 2; increment &gt; 0; increment /= 2)\n        /*h sequence*/\n        for(i = increment; i &lt; N; i++){\n            Tmp = A[i];\n            for(j = i; j &gt;= increment; j -= increment)\n        }\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#411-worst-case-analysis","title":"4.1.1 Worst-Case Analysis","text":"<ul> <li>\\(Theorem\\): The worst-case running time of Shellsort is \\(\\Theta(N^2)\\)</li> <li>bad-case\u53ef\u80fd\u51fa\u73b0\u524d\u9762 \\(h&gt;1\\) \u6392\u5b8c\u90fd\u4e0d\u53d8\uff0c\u6700\u540e\u4e00\u6b21\u6392\u624d\u6392\u597d\u7684\u60c5\u51b5</li> <li>sequence \u9009\u62e9\u7d20\u6570\u4f1a\u6709\u66f4\u597d\u7684\u6548\u679c</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#42-hibbards-increment-sequence","title":"4.2 Hibbard's Increment Sequence","text":"<ul> <li>\\(h_k=2^k-1\\)</li> <li>\\(Theorem\\): The worst-case running time of Shellsort, using Hibbard's increments, is \\(\\Theta(N^{3/2})\\)</li> <li>\\(Conjectures\\)<ul> <li>\\(\\overline T_{Hibbard}(N)=O(N^{5/4})\\)</li> <li>Sedgewick's best sequence is \\(\\{9*4^i-9*2^i+1\\} \\cup \\{4^i-3*2^i+1\\}\\)<ul> <li>\\(T_{avg}(N)=O(N^{7/6})\\) \\(T_{worst}(N)=O(N^{4/3})\\)</li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#5-heapsort","title":"5 Heapsort","text":"<ul> <li>\u5982\u679c\u4e0d\u9700\u8981\u77e5\u9053\u6240\u6709\u7684\u987a\u5e8f\uff0c\u53ea\u9700\u8981\u77e5\u9053\u6700\u5927/\u6700\u5c0f\u7684\u51e0\u4e2a\u503c\uff0c\u90a3\u4e48 Heapsort \u66f4\u5feb</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#51-algorithm-1","title":"5.1 Algorithm 1","text":"<pre><code>Algorithm1\n{\n    BuildHeap( H );   /*O(N)*/\n    for(i = 0; i &lt; N; i++)\n        TmpH[i] = DeleteMin( H );   /*O( log N )*/\n    for(i = 0; i &lt; N; i++)\n        H[i] = TmpH[i];   /*O(1)*/\n}\n</code></pre> <ul> <li>\\(T(N)=O(N\\log N)\\)</li> <li>con: The space requirement is doubled.</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#52-algorithm-2","title":"5.2 Algorithm 2","text":"<ul> <li>\u4e0d\u5982\u76f4\u63a5\u5c06 <code>deleteMax</code> \u7684\u7ed3\u679c\u5199\u9053\u6570\u7ec4\u7684\u540e\u9762\u53bb</li> </ul> <pre><code>void Heapsort( ElementType A[], int N )\n{\n    int i;\n    for(i = N / 2; i &gt;= 0; i--) /*Build Heap*/\n        PercDown(A, i, N);\n    for(i = N - 1; i &gt; 0; i--){\n        Swap(&amp;A[0], &amp;A[i]); /*DeleteMax*/\n        PercDown(A, 0, i);\n    }\n}\n</code></pre> <ul> <li>\\(Note\\) that <code>A[0]</code> is a valid entry \u7b2c\u96f6\u4e2a\u4e5f\u662f\u8981\u6392\u5e8f\u7684\u6709\u6548\u5143\u7d20</li> <li>\u5bf9\u4e8e\u4efb\u610f\u7684\u6570\u7ec4\uff0c\u5e73\u5747\u6bd4\u8f83\u6b21\u6570 \\(2N\\log N-O(N\\log\\log N)\\)</li> <li>\\(Note\\) Although Heapsort gives the best average time, in practice it is slower than a version of Shellsort that uses Sedgewick's increment sequence \u56e0\u4e3a\u5e38\u6570\u6bd4\u8f83\u5927</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#6-mergesort","title":"6 Mergesort","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#61-merge-two-sorted-lists","title":"6.1 Merge two sorted lists","text":"<ul> <li>\\(T=O(N)\\)</li> <li>\u4e24\u4e2a pointer\uff0c\u5c0f\u7684\u653e\u5165\u65b0\u6570\u7ec4\uff0c\u5e76\u4e14 ptr \u53f3\u79fb\u4e00\u4f4d\uff0c\u76f4\u5230 ptr \u90fd\u5230\u8fbe\u672b\u5c3e</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#62-mergesort","title":"6.2 Mergesort","text":"<pre><code>void MSort( ElementType A[], ElementType TmpArray[], int Left, int Right )\n{\n    int Center;\n    if(Left &lt; Right){  // if there are elements to e sorted\n        Center = (Left + Right) / 2;\n        MSort(A, TmpArray, Left, Center);   // T(N/2)\n        MSort(A, TmpArray, Center + 1, Right);   // T(N/2)\n        Merge(A, TmpArray, Left, Center + 1, Right);   // O(N)\n    }\n}\n\nvoid Mergesort( ElementType A[], int N )\n{\n    ElementType *TmpArray;   // need O(N) extra space\n    TmpArray = malloc(N * sizeof(ElementType));\n    if(TmpArray != NULL){\n        Msort(A, TmpArray, 0, N-1);\n        free(TmpArray);\n    }\n    else FatalError(\"No space for tmp array!!\");\n}\n</code></pre> <ul> <li>\u4e3a\u4ec0\u4e48\u8981\u5728\u5916\u90e8\u5b9a\u4e49 <code>TmpArray</code><ul> <li>\u51cf\u5c11\u5185\u5b58\u7533\u8bf7\u548c\u91ca\u653e</li> <li>\u51cf\u5c11\u7a7a\u95f4\u5f00\u9500\uff0c\u9012\u5f52\u6df1\u5ea6 \\(\\log N\\)\uff0c\u6bcf\u5c42\u90fd\u8981 \\(N\\) \u957f\u5ea6\u6570\u7ec4\uff0c\\(S(N)=O(N\\log N)\\)</li> </ul> </li> </ul> <pre><code>void Merge( ElementType A[], ElementType TmpArray[], int Lpos, int Rpos, int RightEnd )\n{\n    int i, LeftEnd, NumElements, TmpPos;\n    LeftEnd = Rpos - 1;\n    TmpPos = Lpos;\n    NumElements = RightEnd - Lpos + 1;\n    while(Lpos &lt;= LeftEnd &amp;&amp; Rpos &lt;= RightEnd)  // main loop\n        if(A[Lpos] &lt;= A[Rpos])\n            TmpArray[TmpPos++] = A[Lpos++];\n        else\n            TmpArray[TmpPos++] = A[Rpos++];\n    while(Lpos &lt;= LeftEnd)   // copy rest of first half\n        TmpArray[TmpPos++] = A[Lpos++];\n    while(Rpos &lt;= RightEnd)   // copy rest of second half\n        TmpArray[TmpPos++] = A[Rpos++];\n    for(i = 0; i &lt; NumElements; i++, RightEnd--)\n        // copy TmpArray back\n        A[RightEnd] = TmpArray[RightEnd];\n}\n</code></pre> \\[ \\begin{aligned} T(1)&amp;=1\\\\ T(N)&amp;=2T(N/2)+O(N)\\\\ &amp;=2^kT(N/2^k)+k*O(N)\\\\ &amp;=N*T(1)+\\log N*O(N)\\\\ &amp;=O(N+N\\log N) \\end{aligned} \\] <ul> <li>pro: \u9002\u7528\u4e8e \u5916\u90e8\u6392\u5e8f</li> <li>cons<ul> <li>\u9700\u8981\u66f4\u591a\u7a7a\u95f4 \\(S(N)=O(N)\\)</li> <li>\u6570\u7ec4\u7684\u590d\u5236\u65f6\u5f88\u6162\u7684</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#7-quicksort","title":"7 Quicksort","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#71-the-algorithm","title":"7.1 The Algorithm","text":"<pre><code>void Quicksort ( ElementType A[], int N)\n{\n    if(N &lt; 2) return;\n    pivot = pick any element in A[];\n    Partition S = {A[] \\ pivot} into two disjoint sets:\n        A1 = { a \\in S | a &lt;= pivot} and A2 = { a \\in S | a &gt;= pivot};\n    A = Quicksort(A1, N1) \\union { pivot } \\union Quicksort(A2, N2);\n}\n</code></pre> <ul> <li>Complexity<ul> <li>Best case:  \\(T(N)=O(N\\log N)\\)<ul> <li>\u6bcf\u6b21 <code>pivot</code> \u7684\u9009\u62e9\u90fd\u662f\u4e2d\u4f4d\u6570</li> </ul> </li> <li>Average case: \\(T(N)=O(N\\log N)\\)</li> </ul> </li> <li>Property<ul> <li>\u6bcf\u6b21\u7684 <code>pivot</code> \u5728\u540e\u7eed\u7684\u6392\u5e8f\u4e2d\u4f4d\u7f6e\u4e0d\u4f1a\u53d8\u5316\uff0c\u5feb\u7684\u539f\u56e0</li> <li><code>pivot</code> \u9009\u62e9\u548c <code>partition</code> \u662f\u5bb9\u6613\u9519\u7684\u5730\u65b9</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#72-picking-the-pivot","title":"7.2 Picking the Pivot","text":"<ul> <li>A Wrong Way <code>pivot = A[0]</code><ul> <li>Worst case: if <code>A[]</code> is presorted, \\(O(N^2)\\)</li> </ul> </li> <li>A Safe Maneuver <code>pivot = random select from A[]</code><ul> <li>\u968f\u673a\u6570\u4ea7\u751f\u6d6a\u8d39\u8d44\u6e90</li> </ul> </li> <li>Median-of-Three Partitioning<ul> <li><code>pivot = median(left, center, right)</code> \u53d6\u5176\u4e2d\u7684\u4e2d\u4f4d\u6570</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#73-partition-strategy","title":"7.3 Partition Strategy","text":"<ul> <li>Double Pointer<ul> <li><code>i</code> \u548c <code>j</code>\uff0c\u4ece\u4e24\u8fb9\u5f80\u5185\u8d70\uff0c\u76f4\u5230\u4e00\u4e2a</li> </ul> </li> <li>\u5982\u679c <code>pivot = key</code><ul> <li><code>i</code> \u548c <code>j</code> \u90fd\u505c\u4e0b\u6765\u8fdb\u884c <code>swap</code><ul> <li>\u867d\u7136\u53ef\u80fd\u5b58\u5728\u4e0d\u5fc5\u8981\u7684\u4ea4\u6362 \\(\\{1,1,1,1,1,1,1,1\\}\\)</li> <li>\u4f46\u662f\u81f3\u5c11\u4fdd\u8bc1\u4e86\u5212\u5206\u7684\u4e24\u90e8\u5206\u5927\u5c0f\u76f8\u8fd1<ul> <li>\u5426\u5219 \\(T(N)=O(N^2)\\)</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#74-small-arrays","title":"7.4 Small Arrays","text":"<ul> <li>Problem: Quicksort is slower than insertion sort for small \\(N\\le 20\\)</li> <li>Solution: N \u6bd4\u8f83\u5c0f\u65f6\uff0c\u5c31\u8c03\u7528 <code>insertionSort</code></li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#75-implementation","title":"7.5 Implementation","text":"<pre><code>ElementType Median3( ElementType A[], int left, int right )\n{\n    int center = (left + right) / 2;\n    if(A[left] &gt; A[center]) Swap(&amp;A[left], &amp;A[center]);\n    if(A[left] &gt; A[right]) Swap(&amp;A[left], &amp;A[right]);\n    if(A[center] &gt; A[right]) Swap(&amp;A[center], &amp;A[right]);\n    Swap(&amp;A[center], &amp;A[right-1]); // hide pivot\n    return A[right-1];\n}\n\nvoid Qsort( ElementType A[], int left, int right )\n{\n    int i, j;\n    ElementType pivot;\n    if(left + CUTOFF &lt;= right){\n        pivot = Median3(A, left, right); // select pivot\n        i = left; j = right - 1;\n        for(;;){\n            while(A[++i] &lt; pivot);\n            while(A[--j] &gt; pivot); // stop at invalid element\n            if(i &lt; j) Swap(&amp;A[i], &amp;A[j]); // adjust partition\n            else break; // partion done\n        }\n        Swap(&amp;A[i], &amp;A[right - 1]); // restore pivot\n        Qsort(A, left, i-1);\n        Qsort(A, i+1, right);\n    }else InsertionSort(A + left, right - left + 1)\n}\n\nvoid Quicksort( ElementType A[], int N )\n{\n    Qsort(A, 0, N-1);\n}\n</code></pre> <ul> <li>Note: <code>Median3</code> \u8c03\u7528\u540e\uff0c\u5de6\u4e2d\u53f3\u7684\u4e09\u4e2a\u5143\u7d20\u5df2\u7ecf\u6392\u597d\u4e86\uff0c\u4f46\u662f\u7531\u4e8e <code>++i</code> <code>--j</code>\uff0c\u5b9e\u9645\u4e0a\u8df3\u8fc7\u4e86\u8fd9\u6765\u54e5\u54e5\u5143\u7d20\u3002</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#76-analysis","title":"7.6 Analysis","text":"<ul> <li>\\(T(N) = T(i)+T(N-i-1)+cN\\)</li> <li>Worst case: \\(T(N)=T(N-1)+cN=O(N^2)\\)</li> <li>Best case: \\(T(N)=2T(N/2)+cN=O(N\\log N)\\)</li> <li>Average case<ul> <li>Assume the average value of \\(T(i)\\) for any \\(i\\) is \\(\\frac{1}{N}[\\sum_{j=0}^{N-1}T(j)]\\)</li> <li> \\[T(N)=\\frac{2}{N}[\\sum_{j=0}^{N-1}T(j)]+cN=O(N\\log N)\\] </li> </ul> </li> </ul> <p>Quicksort to find the kth largest element</p> <p>\u6bcf\u6b21\u627e\u5230 pivot \u8fdb\u884c partition \u4e4b\u540e\uff0c\u8ba1\u7b97\u5927\u7684\u4e00\u8fb9\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u5224\u65ad\u7b2c k \u5927\u7684\u5143\u7d20\u5728\u54ea\u8fb9\uff0c\u76f4\u5230\u5176\u51fa\u73b0\u5728 pivot \\(T(N)=O(N)\\) Linear</p> <ul> <li>Space Complexity \u7b49\u4e8e\u9012\u5f52\u6df1\u5ea6 \\(O(\\log N)\\)<ul> <li>\u6700\u574f\u60c5\u51b5 \\(O(N)\\)</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#8-sorting-large-structures","title":"8 Sorting Large Structures","text":"<ul> <li>Solution: Add a pointer field to the structure and swap ptrs instead</li> <li>Table Sort<ul> <li>\u5bf9\u4e8e\u6240\u6709\u7684 key\uff0c\u5148\u521b\u5efa\u4e00\u4e2a <code>table[]</code>\uff0c\u7528\u6765\u5b58\u50a8\u76ee\u6807\u7684 index<ul> <li>\u6784\u6210\u4e86 cycle\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7 list index \u548c table \u76ee\u6807\u4f4d\u7f6e\u6784\u6210\u7684\u9700\u8981\u4ea4\u6362\u7684 cycle!</li> <li>\u5177\u4f53\u64cd\u4f5c\u65f6<ul> <li>\u5148\u8fdb\u884c tablesort<ul> <li>table \u521d\u59cb\u5316\u4e3a <code>[0, 1, 2, 3, 4, 5]</code></li> <li>\u4f9d\u636e <code>key</code> \u5bf9 table \u4e2d\u7684 index \u8fdb\u884c\u6392\u5e8f</li> </ul> </li> <li>\u7136\u540e\u4ea4\u6362 <code>key</code><ul> <li>\u904d\u5386 list\uff0c\u53ea\u8981\u51fa\u73b0\u4e86 <code>list index != table element</code>\uff0c\u90a3\u4e48\u5c31\u8fdb\u884c <code>cycle exchange</code><ul> <li>\u8bb0\u5f55\u8fd9\u4e2a <code>entry</code> \u4ee5\u53ca\u8fd9\u4e2a <code>key</code></li> <li>\u8fdb\u884c\u8f6e\u6362\uff0c\u76f4\u5230\u9047\u5230\u4e00\u4e2a\u5143\u7d20\u7684 <code>table element == entry</code> \u7ed3\u675f</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li>Note: Every permutation is made up of disjoint cycles</li> </ul> </li> <li>Analysis<ul> <li>worst case, \\(\\lfloor N/2\\rfloor\\) cycles and \\(\\lfloor 3N/2\\rfloor\\) record moves</li> <li>\\(T=O(mN)\\) where \\(m\\) is the size of the structure</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#9-a-general-lower-bound-for-sorting","title":"9 A General Lower Bound for Sorting","text":"<ul> <li>\\(Theorem\\) Any algorithm that sorts by comparisons only must have a worst case computing time of \\(\\Omega(N\\log N)\\)<ul> <li>Can be proved by decision tree</li> <li></li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#10-bucket-sort-and-radix-sort","title":"10 Bucket Sort and Radix Sort","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#101-bucket-sort","title":"10.1 Bucket Sort","text":"<ul> <li>\u5bf9\u4e8e\u79bb\u6563\u3001\u53d6\u503c\u8303\u56f4\u5f88\u5c0f\u7684\u6570\u636e</li> <li>\u521b\u5efa\u6240\u6709\u6570\u636e\u53d6\u503c\u70b9\u7684 bucket\uff0c\u6bcf\u4e2a\u79f0\u4e3a slot\u69fd</li> <li>\u7ebf\u6027\u904d\u5386\u6570\u7ec4\uff0c\u662f\u54ea\u4e2a\u5c31\u653e\u5728\u54ea\u4e2a slot</li> <li>\\(T(N, M) = O(M+N)\\)<ul> <li>\u5982\u679c \\(M\\) \u8fdc\u5927\u4e8e \\(N\\)\uff0c\u90a3\u4e48\u6548\u7387\u4f1a\u5f88\u4f4e\uff0c\u4e0d\u5982 quicksort</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#102-radix-sort","title":"10.2 Radix Sort","text":"<ul> <li>\u8fdb\u884c\u591a\u8f6e\u6392\u5e8f\uff0c\u6bcf\u6b21\u6392\u4e00\u4e2a\u6570\u4f4d\uff0cLeast Significant Digit First</li> <li>\\(T=O(P(N+B))\\)<ul> <li>\\(P\\) \u662f number of passes\uff0c\u4e5f\u5c31\u662f\u4f4d\u6570</li> <li>\\(B\\) \u662f number of buckets</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#1021-msd-most-significant-digit","title":"10.2.1 MSD (Most Significant Digit)","text":"<ul> <li>\u9ad8\u4f4d\u5206\u5230 bucket \u4e4b\u540e\uff0c\u6bcf\u4e2a bucket \u5185\u90e8<ul> <li>\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u7684\u6392\u5e8f\u7b97\u6cd5</li> <li>\u53ef\u4ee5\u5e76\u884c\u64cd\u4f5c</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#1022-lsd-least-significant-digit","title":"10.2.2 LSD (Least Significant Digit)","text":"<ul> <li>\u9ad8\u4f4d\u7684\u6392\u5e8f\u4f9d\u8d56\u4e8e\u4f4e\u4f4d\u7684\u6392\u5e8f</li> <li>\u53ea\u80fd\u4e32\u884c\u8fdb\u884c</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.06%20Sorting.html#11-hw","title":"11 HW","text":"<ul> <li>After the first run of Insertion Sort, it is possible that no element is placed in its final position<ul> <li>T</li> </ul> </li> <li>Shell sort is stable.<ul> <li>F</li> <li>stable \u6307\u7684\u662f\u76f8\u540c\u7684\u5143\u7d20\u5728\u6392\u5e8f\u524d\u540e\u7684\u987a\u5e8f\u662f\u4e0d\u53d8\u7684<ul> <li>\u5047\u8bbe\u5b58\u5728\u4e24\u4e2a\u76f8\u7b49\u7684\u5143\u7d20\uff0c\u6392\u5e8f\u4e4b\u540e\u539f\u672c\u5728\u524d\u9762\u7684\u8fd8\u662f\u5728\u524d\u9762</li> </ul> </li> </ul> </li> <li>Mergesort is stable. T</li> <li>During the sorting, processing every element which is not yet at its final position is called a \"run\". Which of the following cannot be the result after the second run of quicksort?<ul> <li></li> <li>\u6ce8\u610f<ul> <li>\u8fd9\u91cc quicksort \u7684 run \u6307\u7684\u662f\u9012\u5f52\u6df1\u5ea6\uff0c\u4e24\u5c42\u9012\u5f52\u80fd\u591f\u9009\u5b9a 3 \u4e2a pivot \u4f4d\u7f6e</li> <li>\u8fd9\u91cc\u7684 quicksort \u5b9e\u73b0\u65b9\u5f0f\u4e0d\u662f\u9009\u4e2d\u4f4d\u6570</li> </ul> </li> <li>A \u53ef\u80fd\u662f 72 28</li> <li>B \u53ef\u80fd\u662f 2 72</li> <li>C \u53ef\u80fd\u662f 2 28</li> <li>D \u4e0d\u53ef\u80fd\uff0c\u53ea\u6709 32</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html","title":"Ch.07 Hashing","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#1-interpolation-search","title":"1 Interpolation Search","text":"<p>Find Key from a sorted list <code>f[l].key, f[l+1].key, ..., f[u].key</code></p> \\[ \\frac{f[u].key-f[l].key}{n}=\\frac{key-f[l].key}{i-l}\\quad \\rightarrow i=l+\\frac{(key-f[l].key)*n}{f[u].key-f[l].key} \\] <ul> <li>\u5982\u679c\u662f\u51f9\u51fd\u6570\uff0ci \u5728\u53f3\u534a\u90e8\u5206 <code>l=i</code>\uff0c \u7ee7\u7eed\u627e</li> <li>\u5982\u679c\u662f\u51f8\u51fd\u6570\uff0ci \u5728\u5de6\u534a\u90e8\u5206 <code>u=i</code>\uff0c\u7ee7\u7eed\u627e</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#2-general-idea","title":"2 General Idea","text":"<ul> <li>Symbol Table (\u7b26\u53f7\u8868) (==Dictonary) ::= {}<ul> <li>name = since</li> <li>attrribute = a list of meanings</li> <li>\u4e00\u4e2a name \u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a list</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#21-symbol-table-adt","title":"2.1 Symbol Table ADT","text":"<ul> <li>Objedcts: name-attribute pairs, names are unique</li> <li>Operations</li> </ul> <pre><code>SybTab Create(TableSize);\nBoolean Isin(symbtab, name);\nAttribute Find(symtab, name);\nSymTab Insert(symtab, namne, attr);\nSymTab Delete(symtab, name);\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#22-hash-tables","title":"2.2 Hash Tables","text":"<ul> <li>loading density \u662f\u9664\u4ee5\u8868\u7684\u5bb9\u91cf</li> <li> <p>identifier density \u662f\u9664\u4ee5 name \u7684\u4e2a\u6570</p> </li> <li> <p>A collision occurs when we hash two nonidentical identifiers into the same bucket, \\(f(i_1)=f(i_2), i_1\\ne i_2\\)</p> </li> <li>An overflow occurs when we hash a new identifier into a full bucket<ul> <li>without overflow \\(T_{search}=T_{insert}=T_{delete}=O(1)\\)</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#3-hash-function","title":"3 Hash Function","text":"<p>Note</p> <ul> <li>\\(f(x)\\) must be easy to compute and minimizes the number of collisions</li> <li>\\(f(x)\\) should be unbiased<ul> <li>\u5e73\u5747\u4e0b\u6765\u53d6\u5230\u6bcf\u4e00\u4e2a bucket \u7684\u6982\u7387\u662f\u4e00\u6837\u7684</li> </ul> </li> </ul> <ol> <li>\\(f(x)=x\\%{TableSize}\\)<ol> <li>\u5982\u679c tablesize \u662f 10\uff0cx \u7ed3\u5c3e\u90fd\u662f 0\uff0c\u5c31\u4e0d\u597d</li> <li>\u6240\u4ee5 tablesize should be prime number</li> </ol> </li> <li>\\(f(x)=(\\sum x[i])\\%TableSize\\) when x is a string<ol> <li>\u5982\u679c x \u5f88\u77ed\uff0c \\(\\sum x[i]\\) \u76f8\u5bf9\u4e8e tablesize \u53ef\u80fd\u592a\u5c0f</li> </ol> </li> <li>\\(f(x)=(x[0]+x[1]*27+x[2]*27^2)\\%TableSize\\)<ol> <li>\u4e8b\u5b9e\u4e0a\u4e09\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u7ec4\u5408\u6570\u6ca1\u6709\u8fd9\u4e48\u5927</li> </ol> </li> <li>\\(f(x)=(\\sum x[N-i-1]*32^i)\\%TableSize\\)</li> </ol> <pre><code>Index Hash3(const char* x, int TableSize)\n{\n    unsigned int HashVal = 0;\n    while(*x) HashVal = (HashVal &lt;&lt; 5) | *x++;\n    return HashVal % TableSize\n}\n</code></pre> <ul> <li>\u5982\u679c\u5b57\u7b26\u4e32\u592a\u957f\uff0c\u53ef\u80fd\u8981\u9009\u62e9 unique \u7684\u4e00\u90e8\u5206</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#4-separate-chaining","title":"4 Separate Chaining","text":"<p>-- Keep a list of all keys that hash to the same value - \u5c06\u54c8\u5e0c\u8868\u6bcf\u4e2a\u5143\u7d20\u90fd\u53d8\u6210\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9</p> <p>Attention</p> <ul> <li>Separate Chaining \u53ef\u4ee5\u4f7f\u7528\u5934\u63d2\u6cd5\uff0c\u4e5f\u5c31\u662f\u5f80\u6bcf\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\u540e\u63d2\u5165\uff0c\u4e0d\u9700\u8981\u653e\u5728\u94fe\u8868\u7684\u5c3e\u90e8\uff0c\u6240\u4ee5 \\(T_{insert}=O(1)\\)</li> <li>\u4f46\u662f\u5728 Find \u7684\u65f6\u5019\uff0c\u8fd8\u662f\u9700\u8981\u4e00\u4e2a\u4e00\u4e2a\u53bb\u627e\uff0cworst case \\(T_{find}=T_{delete}=O(N)\\)</li> </ul> <pre><code>struct ListNode;\ntypedef struct LIstNode *Position;\nstruct HasTbl;\ntypedef struct HashTbl *HashTable;\n\nstruct ListNode {\n    ElementType Element;\n    Position Next;\n};\ntypedef Position List;\n\nstruct HashTbl {\n    int TableSize;\n    List *TheLIsts;\n};\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#41-create-an-empty-table","title":"4.1 Create an empty table","text":"<pre><code>HashTable InitializeTable( int TableSize )\n{\n    HashTable H;\n    int i;\n    if(TalbeSize &lt; MinTableSize){\n        Error(\"Table size too small\"); return NULL;\n    }\n    H = malloc(sizeof(struct HashTbl));\n    if(H == NULL) FatafError(\"Out of space!!!\");\n    H-&gt;TableSize = NextPrime(TableSize); // better be a prime\n    H-&gt;TheLists = malloc(sizeof(List) * H-&gt;TableSize);\n    if(H-&gt;TheLists == NULL) FatalError(\"Out of space!!!\");\n    for(i = 0; i &lt; H-&gt;TableSize; i++){\n        H-&gt;TheLists[i] == malloc(sizeof(struct ListNode)); // SLOW!!!!!!\n        if(H-&gt;TheLists[i] == NULL) FatalError(\"Out of space!!!\");\n        else H-&gt;TheLists[i]-&gt;Next = NULL;\n    }\n    return H;\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#42-find-a-key-from-a-hash-table","title":"4.2 Find a key from a hash table","text":"<pre><code>Position Find( ElementType Key, HashTable H )\n{\n    Position P;\n    List L;\n\n    L = H-&gt;TheLists[Hash(Key, H-&gt;TableSize)];\n\n    P = L-&gt;Next;\n    whiel(P != NULL &amp;&amp; P-&gt;Element != Key) P = P-&gt;Next;\n    return P;\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#43-insert-a-key-into-a-hash-table","title":"4.3 Insert a key into a hash table","text":"<pre><code>void Insert( ElementType Key, HashTable H )\n{\n    Position Pos, NewCell;\n    List L;\n    Pos = Find(Key, H);\n    if(Pos == NULL){\n        NewCell = malloc(sizeof(struct ListNode));\n        if(NewCell == NULL) FatalError(\"Out of space!!!\");\n        else{\n            L = H-&gt;TheLists[Hash(Key, H-&gt;TableSize)]; // Find \u505a\u8fc7\u7684\u54c8\u5e0c\u53ef\u4ee5\u7f13\u5b58\u8d77\u6765\n            NewCell-&gt;Next = L-&gt;Next;\n            NewCell-&gt;Element = Key; // Probably need strcpy!\n            L-&gt;Next = NewCell;\n        }\n    }\n}\n</code></pre> <p>Tip: TableSize \u5e94\u8be5\u548c\u9884\u671f\u8981\u5b58\u7684 Key \u7684\u6570\u91cf\u5dee\u4e0d\u591a</p>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#5-open-addressing","title":"5 Open Addressing","text":"<p>-- find another empty cell to solve collision (avoid pointers)</p> <pre><code>Algorithm: insert key into an array of hash table\n{\n    index = hash(key);\n    initialize i = 0;\n    while(collision at index){\n        index = (hash(key) + f(i)) % TableSize; // f(0) = 0\n        if(table is full) break;\n        else i++;\n    }\n    if(table is full) ERROR(\"No space left\");\n    else insert Key at index;\n}\n</code></pre> <p>Tip: \u4e00\u822c \\(\\lambda &lt; 0.5\\)\uff0c\u624d\u80fd\u5c3d\u91cf\u907f\u514d\u53d1\u751f\u51b2\u7a81</p>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#51-linear-probing","title":"5.1 Linear Probing","text":"<ul> <li>\\(f(i)=i\\) LInear function</li> <li>\\(p=\\frac{1}{2}(1+\\frac{1}{(1-\\lambda)^2})\\) for insertions and unsuccessful searches</li> <li>\\(p=\\frac{1}{2}(1+\\frac{1}{1-\\lambda})\\) for successful searches</li> <li>\u5c3d\u7ba1 \\(p\\) \u53ef\u4ee5\u5f88\u5c0f\uff0c\u4f46\u662f\u53ef\u80fd\u51fa\u73b0 worst case \u5f88\u5927\u7684\u60c5\u51b5<ul> <li>primary clustering</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#52-quadratic-probing","title":"5.2 Quadratic Probing","text":"<p>\\(Theorem\\)</p> <p>If quadratic probing is used, and the table size is prime, then a new element can always be inserted if the table is at least half empty.</p> <ul> <li>Proof<ul> <li></li> </ul> </li> <li>Note<ul> <li>If the table size is a prime of the form \\(4k+3\\), then the quadratic probing \\(f(i)=\\pm i^2\\), can probe the entire table.</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#521-find","title":"5.2.1 Find","text":"<pre><code>Postion Find( ElementType Key, HashTable H )\n{\n    Position CurrentPos = Hash(Key, H-&gt;TableSize);\n    int CollisionNum = 0;\n    while(H-&gt;TheCells[CurrentPos].Info != Empty &amp;&amp; H-&gt;TheCells[CurrentPos].Element != Key){ // \u907f\u514d\u6bb5\u9519\u8bef\n        CurrentPos += 2 * (++CollisionNum) - 1;\n        if(CurrentPos &gt;= H-&gt;TableSize) CurrentPos -= H-&gt;TableSize; // \u53ef\u80fd\u6709\u95ee\u9898\uff0c\u5982\u679c\u6bd4tablesize\u7684\u4e24\u500d\u8fd8\u5927\n    }\n}\n</code></pre> <ul> <li>Note<ul> <li>while \u91cc\u9762\u7528\u9012\u589e\u6765\u52a0\u4e0a\u6bcf\u4e2a\u5e73\u65b9\u6570\uff0c\u4f7f\u7528\u4f4d\u8fd0\u7b97\uff0c\u6548\u7387\u63d0\u9ad8</li> <li>\u4f7f\u7528 if \u6765\u51b3\u5b9a\u662f\u662f\u5426\u51cf\uff0c\u8fd9\u6837\u6bd4\u53d6\u6a21\u6548\u7387\u9ad8</li> <li>\u8fd4\u56de\u4e86\u4ec0\u4e48\uff1f<ul> <li>\u5982\u679c\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u4e86\u8fd9\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e</li> <li>\u5982\u679c\u6ca1\u627e\u5230\uff0c\u8fd4\u56de\u4e86\u7b2c\u4e00\u4e2a\u627e\u5230\u7684\u7a7a\u7684\u5f85\u63d2\u5165\u7684\u4f4d\u7f6e</li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#522-insert","title":"5.2.2 Insert","text":"<pre><code>void Insert( ElementType Key, HashTable H )\n{\n    Position Pos = Find(Key, H);\n    if(H-&gt;TheCells[Pos].Info != Legitimate){ // ok to insert here\n        H-&gt;TheCells[Pos].Info = Legitimate;\n        H-&gt;TheCells[Pos].Element = Key; // probably need strcpy\n    }\n}\n</code></pre> <ul> <li>Note<ul> <li>\u8fd9\u91cc\u7684 <code>info</code> \u4ee3\u8868\u7740 <code>cell</code> \u7684\u72b6\u6001<ul> <li><code>Empty</code>\uff0c\u4ee3\u8868\u7a7a</li> <li><code>Legitimate</code>\uff0c\u4ee3\u8868\u88ab\u5360\u7528</li> <li>\u8fd9\u6837\u65b9\u4fbf\u7ba1\u7406</li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#53-double-hashing","title":"5.3 Double Hashing","text":"<ul> <li>\\(f(i)=i*hash_2(x)\\) \u7b2c\u4e8c\u4e2a\u54c8\u5e0c\u51fd\u6570<ul> <li>easy to compute</li> <li>\\(hash_2(x) \\not\\equiv 0\\)</li> <li>\u786e\u4fdd\u6bcf\u4e2a <code>cell</code> \u90fd\u80fd\u63a2\u6d4b\u5230</li> <li>\\(hash_2(x)=R-(x\\%R)\\) \u662f\u6bd4\u8f83\u597d\u7684\u51fd\u6570\uff0c\u5176\u4e2d \\(R\\) \u662f\u5c0f\u4e8e <code>TableSize</code> \u7684\u8d28\u6570</li> </ul> </li> <li>Note<ul> <li>\u5982\u679c\u5b9e\u73b0\u7684\u597d\uff0c\u90a3\u4e48\u5e73\u5747\u7684\u67e5\u627e\u65f6\u95f4\u57fa\u672c\u4e0a\u7b49\u4e8e random collision resolution strategy</li> <li>Quadratic Probing \u4e0d\u9700\u8981\u7b2c\u4e8c\u4e2a\u54c8\u5e0c\u51fd\u6570\uff0c\u56e0\u6b64\u66f4\u5feb\u66f4\u7b80\u5355</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#54-other-methods","title":"5.4 Other methods","text":"<ul> <li>\u5e03\u8c37\u9e1f\u54c8\u5e0c\uff1a\u5efa\u7acb\u4e24\u4e2a\u54c8\u5e0c\u8868\uff0c\u9e20\u5360\u9e4a\u5de2</li> <li>\u54c8\u5e0c\u6c60\uff1a\u5982\u679c\u8868\u91cc\u53d1\u751f\u51b2\u7a81\uff0c\u5c06\u5143\u7d20\u4e22\u5230\u6c60\u5b50\u91cc\uff0c\u6c60\u5b50\u5f88\u5c0f\uff0c\u67e5\u627e\u65f6\u95f4 \\(O(1+n)\\)<ul> <li>\u9002\u5408\u51b2\u7a81\u53d1\u751f\u8f83\u5c11\u7684\u60c5\u51b5</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#6-rehashing","title":"6 Rehashing","text":"<ul> <li>Build another table that is about twice as big</li> <li>Scan down the entire original hash table for non-deleted elements</li> <li>Use a new function to hash those elements into new table</li> <li>\\(T(N)=O(N)\\)</li> <li>Question: When to rehash?<ul> <li>As soon as the table is half full</li> <li>When an insertion fails</li> <li>When the table reaches a certain load factor</li> </ul> </li> </ul> <p>Note</p> <p>Usually there should have been \\(N/2\\) insertions before rehash, so \\(O(N)\\) rehash only adds a constant cost to each insertion. However, in an interactive system, the unfortunate user whose insertion caused a rehash could see a slowdown. \u5e73\u5747\u5230\u6bcf\u4e2a\u7528\u6237\u7684\u64cd\u4f5c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u589e\u52a0\u4e86\u5e38\u6570 \u4f46\u662f\u5982\u679c\u67d0\u4e2a\u7528\u6237\u7684\u64cd\u4f5c\u89e6\u53d1\u4e86 rehashing\uff0c\u90a3\u4e48\u4ed6\u5c31\u8981\u7b49\u5f88\u4e45</p>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.07%20Hashing.html#7-hw","title":"7 HW","text":"<ul> <li>The average search time of searching a hash table with N elements is cannot be determined</li> <li>Which of the following statements about HASH is true?<ul> <li>A. the expected number of probes for insertions is greater than that for successful searches in linear probing method \u5bf9\uff0c\u56e0\u4e3a\u63d2\u5165\u603b\u8981\u627e\u5230\u4e00\u4e2a\u7a7a\u7684 slot \u624d\u505c\u6b62\uff0c\u4f46\u641c\u7d22\u4e0d\u9700\u8981</li> <li>B. if the table size is prime and the table is at least half empty, a new element can always be inserted with quadratic probing \u4e0d\u786e\u5b9a</li> <li>C. in separate chaining method, if duplicate elements are allowed in the list, insertions are generally quicker than deletions \u8fd9\u65f6 insert \u53ea\u8981\u63d2\u5165\u5934\u8282\u70b9\uff0cdeletion \u8981\u641c\u7d22</li> <li>D. all of the above</li> </ul> </li> <li>Suppose that the numbers {4371, 1323, 6173, 4199, 4344, 9679, 1989} are hashed into a table of size 10 with the hash function\u00a0h(X)=X%10, and hence have indices {1, 3, 4, 9, 5, 0, 2}. What are their indices after rehashing using\u00a0h(X)=X%TableSize\u00a0with linear probing? why <ul> <li>A. 11, 3, 13, 19, 4, 0, 9</li> <li>B. 1, 3, 4, 9, 5, 0, 2</li> <li>C. 1, 12, 9, 13, 20, 19, 11</li> <li>D. 1, 12, 17, 0, 13, 8, 14</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html","title":"Ch.08 Disjoint Set","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#1-equivalence-relations","title":"1 Equivalence Relations","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#11-definition","title":"1.1 Definition","text":"<ul> <li>R: \u76f8\u5173\u5173\u7cfb</li> <li>~: \u7b49\u4ef7\u5173\u7cfb\uff0c\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u7b49\u4ef7</li> <li>\u7b49\u4ef7\u7c7b\uff1a\u5177\u6709\u7b49\u4ef7\u5173\u7cfb\u4f20\u9012\u6210\u7684\u4e00\u4e2a\u5b50\u96c6</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#2-the-dynamic-equivalence-problem","title":"2 The Dynamic Equivalence Problem","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#21-linear-solution","title":"2.1 Linear solution","text":"<ul> <li>\u6570\u7ec4\u6216\u94fe\u8868\u90fd\u53ef\u4ee5</li> <li>\u4f2a\u4ee3\u7801 union and find <ul> <li>\u8bfb\u53d6\u6240\u6709\u7b49\u4ef7\u89c4\u5219 a~b on-line<ul> <li>\u5982\u679c ab \u4e0d\u5728\u4e00\u4e2a class \u91cc<ul> <li>\u5408\u5e76 class</li> </ul> </li> </ul> </li> <li>\u89e3\u51b3\u8f93\u5165\u7684\u67e5\u627e\u8bf7\u6c42</li> </ul> </li> <li>\\(O(N)\\) \u5982\u679c\u4e0d\u8003\u8651\u67e5\u627e\u7684\u65f6\u95f4</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#22-tree-solution-forest","title":"2.2 Tree solution (forest)","text":"<ul> <li>\u6784\u5efa\u6811\u6307\u9488\u6307\u5411\u6839\uff0c\u65b9\u4fbf\u627e\u5230\u7ec4\u957f</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#3-basic-data-structure","title":"3 Basic Data Structure","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#31-unioni-j","title":"3.1 Union(i, j)","text":"<ul> <li>\u5c06\u4e24\u4e2a\u7b49\u4ef7\u7c7b \\(S_i, S_j\\) \u5408\u5e76</li> <li>\u53ea\u9700\u8981\u5c06\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9\u6307\u5411\u53e6\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9\u5373\u53ef</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#311-implementation-1","title":"3.1.1 Implementation 1","text":"<ul> <li>\u4f7f\u7528\u6570\u7ec4\u6765\u7ec4\u7ec7\u68ee\u6797</li> <li>\u5408\u5e76\u6570\u7ec4\u5373\u53ef</li> <li>\u592a\u6162\u4e86\uff0c\u6570\u7ec4\u64cd\u4f5c\u9ebb\u70e6</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#312-implementation-2","title":"3.1.2 Implementation 2","text":"<ul> <li>\u6570\u7ec4\u8868\u793a <code>S[element] = the element's parent</code>\uff0c\u6bcf\u4e2a index \u5bf9\u5e94\u7684 value \u662f\u7236\u6bcd\u7684\u503c\uff0c\u6839\u8282\u70b9 value \u4e3a -1<ul> <li>\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u4e8e\u4ece 1 \u5230 N \u547d\u540d\u7684\u5143\u7d20\uff0c\u5143\u7d20\u5c31\u662f\u4e0b\u6807</li> </ul> </li> <li>\u5408\u5e76\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u5c06\u4e00\u4e2a\u96c6\u5408\u7684\u6839\u8282\u70b9\u7684\u503c\u5199\u6210\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u6839\u8282\u70b9</li> </ul> <pre><code>void SetUnion( DisjSet S, SetType Rt1, SetType Rt2)\n{\n    S[Rt2] = Rt1;    // \u8fd9\u4e2a\u5143\u7d20\u7684\u7ec4\u957f\u8bbe\u7f6e\u4e3aRt1\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#32-findi","title":"3.2 Find(i)","text":"<ul> <li><code>Find(i)</code>\uff0c\u627e\u5230\u5143\u7d20 i \u6240\u5728\u7684\u7b49\u4ef7\u7c7b</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#321-implementation-1","title":"3.2.1 Implementation 1","text":"<ul> <li>\u987a\u7740\u6811\u627e\u5230\u6839\u8282\u70b9\uff0c\u6839\u8282\u70b9\u627e\u5230 S \u4e0b\u6807</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#322-implementation-2","title":"3.2.2 Implementation 2","text":"<pre><code>int Find( int i , DisjSet S)\n{\n    while(S[i] != 0) i = S[i];\n    return i;\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#4-analysis","title":"4 Analysis","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#41-\u6bd4\u8f83\u96be\u5206\u6790\u65f6\u95f4\u590d\u6742\u5ea6","title":"4.1 \u6bd4\u8f83\u96be\u5206\u6790\u65f6\u95f4\u590d\u6742\u5ea6","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#42-worst-case","title":"4.2 Worst case","text":"<p>1=2 2=3 3=4 4=5......</p> <ul> <li>\u6bcf\u4e00\u6b21\u90fd\u8981 find(1)</li> <li>\u6784\u6210\u4e86\u4e00\u4e2a skewed tree</li> <li>\\(\\Theta(N^2)\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#5-smart-union-algorithms","title":"5 Smart Union Algorithms","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#51-union-by-size-always-change-the-smaller-tree","title":"5.1 Union by size - Always change the smaller tree","text":"<ul> <li>\u5982\u4f55\u6807\u8bb0\u4e00\u4e2a\u6811\u7684\u5927\u5c0f\uff1f<code>S[Root] = -size</code></li> <li>Let T be a tree created by union-by-size with N nodes, then<ul> <li>\\(height(T) \\le \\lfloor \\log_2N\\rfloor +1\\)</li> <li>proof: Each element can have its set name changed at most \\(\\log_2N\\) times</li> </ul> </li> <li>\\(O(N+M\\log_2N)\\)<ul> <li>N \u4e2a union</li> <li>M \u6b21\u67e5\u627e</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#52-union-by-height","title":"5.2 Union by height","text":"<ul> <li>\u603b\u662f\u628a\u77ee\u7684\u6811\u6307\u5411\u9ad8\u7684\u6811</li> <li>\u540c\u6837\u4f7f\u7528 <code>S[Root] = -height</code> \u6765\u8868\u793a\u9ad8\u5ea6</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#6-path-compression-\u8def\u5f84\u538b\u7f29","title":"6 Path Compression \u8def\u5f84\u538b\u7f29","text":"<ul> <li>\u6240\u6709\u7684 member \u90fd\u76f4\u63a5\u548c\u7ec4\u957f\u8054\u7cfb\uff0c\u53ea\u6709\u4e24\u5c42</li> <li>\u5728\u67e5\u627e\u7684\u540c\u65f6\u6307\u5411 root  </li> </ul> <pre><code>SetType Find (int X, int* S)\n{\n    if(S[X] &lt;= 0) return X;  // this is root\n    else return S[X] = Find(S[X], S);  // function \"Find\" will return the root, and set the parent of this element directly to root\n}\n</code></pre> <ul> <li>Path compression \u548c union-by-height \u4e0d\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528</li> <li>\u5982\u679c find \u591a\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 path compression\uff0c\u51cf\u5c11\u4e4b\u540e\u7684 find \u7684\u65f6\u95f4\u590d\u6742\u5ea6</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#7-worst-case-for-union-by-rank-and-path-compression","title":"7 Worst case for Union-by-Rank and Path Compression","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#71-lemmatarjan","title":"7.1 Lemma(Tarjan)","text":"<ul> <li>M find, N-1 unions</li> <li>\\(k_1M\\alpha(M,N)\\le T(M,N) \\le k_2M\\alpha (M,N)\\)</li> <li>\\(\\alpha\\) \u548c\u963f\u514b\u66fc\u51fd\u6570<ul> <li>\u963f\u514b\u66fc\u51fd\u6570\u7684\u589e\u957f\u901f\u5ea6\u5f88\u5feb</li> <li>\\(\\alpha(M,N) = min\\{i\\ge1|A(i,\\lfloor M/N\\rfloor)&gt;\\log N\\}\\le O(\\log^*N)\\le 4\\)</li> <li>\\(\\log^*N\\) = # of timse the logarithm is applied to N until the result \\(\\le 1\\)</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#8-exercises","title":"8 Exercises","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#81-hw-7","title":"8.1 HW 7","text":"<ul> <li>Let\u00a0T\u00a0be a tree created by union-by-size with\u00a0N\u00a0nodes, then the height of\u00a0T\u00a0can be .<ul> <li>\\(\\le \\log_2N+1\\)</li> <li>\u4e0d\u4f1a\u63a8\uff0c\u8bb0\u5fc6</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#82-midterm","title":"8.2 Midterm","text":"<ul> <li>If a tree is created by union-by-size with\u00a0n\u00a0nodes, then each element can have its set name changed at most\u00a0\\(\\log n\\)\u00a0times. T<ul> <li>\u8fd9\u91cc\u6ca1\u6709\u5e95\u6570\u4e5f\u8ba4\u4e3a\u662f\u6b63\u786e\u7684\uff0c\u4e0d\u662f\u5f88\u7406\u89e3</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.08%20Disjoint%20Set.html#821-review","title":"8.2.1 Review","text":"<ul> <li><ul> <li>\u6ce8\u610f path compression \u662f\u5728 find \u51fd\u6570\u4e2d\u6267\u884c\u7684\uff0c\u4e00\u4e2a find \u4f1a\u5c06\u672c\u6b21\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u90fd\u76f4\u63a5\u6307\u5411\u7ec4\u957f</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html","title":"Ch.09 Graph Algorithms","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#1-definitions","title":"1 Definitions","text":"<ul> <li>\\(G(V,E)\\) <ul> <li>G: graph</li> <li>V: Vertex</li> <li>E: Edge</li> </ul> </li> <li>Direction \u6709\u5411\u56fe (digraph) \u6216\u65e0\u5411\u56fe<ul> <li>\u6709\u5411\u56fe head-&gt;tail</li> </ul> </li> <li>Restrictions<ul> <li>Selfloop is illegal \u4e0d\u5b58\u5728\u81ea\u73af</li> <li>Multigraph is not considered \u4e0d\u5b58\u5728\u91cd\u5408\u7684\u8fb9</li> </ul> </li> <li>Complete graph\uff1a\u5b8c\u5168\u56fe\uff0c\u6240\u6709\u70b9\u4e4b\u95f4\u90fd\u6709\u8fb9<ul> <li>\u6709\u5411\u6216\u65e0\u5411\u4e0d\u540c\uff0c\u6709\u5411\u662f\u4e24\u500d</li> </ul> </li> <li>adjacent<ul> <li>digraph \u6709 adjacent to/from<ul> <li>v_i -&gt; v_j</li> <li>v_i is adjacent to v_j, to \u5c31\u662f\u5411\u53f3\u7684\u7bad\u5934</li> <li>v_j is adjacent from v_i, from \u5c31\u662f\u5411\u5de6\u7684\u7bad\u5934</li> </ul> </li> </ul> </li> <li>Subgraph<ul> <li>\u9876\u70b9\u548c\u8fb9\u90fd\u662f\u5b50\u96c6</li> </ul> </li> <li>Path<ul> <li>\\(v_p\\) \u5230 \\(v_q\\) \u7684\u4e00\u7cfb\u5217\u8fb9</li> <li>Length of path: number of edges on the path</li> <li>Simple path: \u7ecf\u8fc7\u7684\u8282\u70b9\u4e0d\u91cd\u590d</li> <li>Cycle: \\(v_p=v_q\\) \u7684 simple path\uff0c\u7ed5\u4e00\u5708</li> <li>Connectness: \\(v_p\\) \u548c \\(v_q\\) \u4e4b\u95f4\u5b58\u5728\u8def\u5f84</li> <li>Connected graph: \u4efb\u610f\u9876\u70b9\u4e4b\u95f4\u8fde\u901a<ul> <li>\u5bf9\u4e8e\u65e0\u5411\u56fe\uff0c\u53ea\u8981\u53ea\u6709\u4e00\u4e2a component\uff0c\u90a3\u4e48\u5c31\u8fde\u901a</li> <li>\u6216\u8868\u8ff0\u4e3a\uff0c\u53ea\u8981\u6bcf\u4e24\u4e2a\u4e0d\u540c\u7684\u9876\u70b9\u4e4b\u95f4\u662f\u8fde\u901a\u7684</li> </ul> </li> </ul> </li> <li>Component of an undirected G: \u6700\u5927\u7684\u8fde\u901a\u5b50\u56fe</li> <li>Tree: \u8fde\u901a\u7684\u6ca1\u6709\u73af\u7684\u56fe a graph that is connected and acyclic</li> <li>DAG: \u6709\u5411\u65e0\u73af\u56fe<ul> <li>\u6709\u5148\u540e\u987a\u5e8f\u7684\u795e\u7ecf\u7f51\u7edc\u7b97\u6cd5</li> </ul> </li> <li>Strongly Connected DG: \u5f3a\u8fde\u901a\u6709\u5411\u56fe<ul> <li>\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u90fd\u6709\u4e00\u6761\u6709\u5411\u8def\u5f84</li> <li>Weakly Connected DAG: \u4e0d\u662f\u5f3a\u8fde\u901a\uff08\u4e0d\u5168\u6709\u6709\u5411\u8def\u5f84\uff09\uff0c\u4f46\u662f\u5b58\u5728\u65e0\u5411\u8def\u5f84</li> <li>Strongly connected component: \u6700\u5927\u5f3a\u8fde\u901a\u5b50\u56fe</li> </ul> </li> <li>Degree(v): \u4e00\u4e2a\u9876\u70b9\uff0c\u5b58\u5728 Indegree and Outdegree<ul> <li>degree = indegree + outdegree</li> <li>\\(e = \\sum d_i / 2\\)</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#11-representation-of-graphs","title":"1.1 Representation of Graphs","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#111-adjacency-matrix-\u90bb\u63a5\u77e9\u9635","title":"1.1.1 Adjacency Matrix \u90bb\u63a5\u77e9\u9635","text":"<ul> <li><code>adj_mat[i][j] = exist(i,j)? 1:0</code><ul> <li>UDG: symmetric    <ul> <li>array: \\(adj\\_mat[n(n+1)/2]=\\{a_{11}, a_{12}, \\dots , a_{1n}, a_{22}, \\dots ,a_{2n}, \\dots, a_{nn}\\}\\)</li> </ul> </li> <li>DG: all needed<ul> <li>array: ...</li> </ul> </li> <li>degree<ul> <li>UDG:  \\(degree(i)=\\sum_{j=0}^{n-1}adj\\_mat[i][j]=\\sum_{j=0}^{n-1}adj\\_mat[j][i]\\)</li> <li>DG: \\(degree(i)=\\sum_{j=0}^{n-1}adj\\_mat[i][j]+\\sum_{j=0}^{n-1}adj\\_mat[j][i]\\)</li> </ul> </li> <li>con<ul> <li>\u5b58\u50a8\u5f00\u9500 \\(O(N^2)\\)\uff0c\u7279\u522b\u662f\u5bf9\u4e8e skewed graph</li> <li>\u5224\u522b\u662f\u5426\u8fde\u901a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(N^w)\\)</li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#112-adjacency-lists-replace-each-row-by-a-linked-list","title":"1.1.2 Adjacency Lists: Replace each row by a linked list","text":"<ul> <li>\u5bf9\u4e8e\u6bcf\u4e2a node\uff0c\u6784\u5efa\u4e00\u4e2a linear list\uff0c\u91cc\u9762\u653e\u672c\u8282\u70b9\u7684 adjacents<ul> <li>order does not matter</li> </ul> </li> <li>Space complexity<ul> <li>n nodes, e edges</li> <li>UDG: \\(S = (n+2e)(ptrs)+2e(ints)\\)</li> <li>DG: \\(S=(n+e)(ptrs)+e(ints)\\)</li> </ul> </li> <li>Degree(i) \u5c31\u662f\u5bf9\u5e94 list \u7684\u957f\u5ea6</li> <li>\\(T(N)=O(n+e)\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#1121-inverse-adjacency-lists","title":"1.1.2.1 Inverse adjacency lists","text":"<ul> <li>\u6784\u5efa inverse adjacency list \u8868\u793a\u54ea\u4e9b\u8282\u70b9\u6307\u5411\u4e86\u672c\u8282\u70b9 </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#1122-multilist-representation-for-adj_matij","title":"1.1.2.2 Multilist representation for <code>adj_mat[i][j]</code>","text":"<ul> <li>Multilists\u56de\u5fc6\u5341\u5b57\u94fe\u8868\uff0c\u4e0a\u8bfe\u95ee\u9898\uff0c\u591a\u5c11\u4eba\u4e0a\u8bfe\uff0c\u8fd9\u95e8\u8bfe\u6709\u591a\u5c11\u4eba\u9009\u4fee\u95ee\u9898 Ch.03 List#2.3.2 Multilists<ul> <li>\u6bcf\u4e2a\u8282\u70b9\u6709 <code>head list, tail list</code> </li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#113-adjacency-multilists","title":"1.1.3 Adjacency Multilists","text":"<ul> <li>\u4f7f\u7528 node \u8868\u793a\u4e00\u6761\u8fb9</li> <li>\\(\\{mark, v_1, v_2\\}\\)</li> <li>\u6784\u9020\u65b9\u6cd5<ul> <li>\u904d\u5386\u6240\u6709 nodes <code>graph[i]</code><ul> <li>\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u88ab\u5f15\u7528\u7684\u8fb9 <code>adj_mul[j]</code>\uff0c\u4ece\u8282\u70b9\u6307\u5411\u8fd9\u4e2a\u8fb9</li> </ul> </li> <li>\u5c06\u8fb9\u4ece\u524d\u5f80\u540e\u8fdb\u884c\u6307\u5411\u88ab\u5f15\u7528\u7684\u4f4d\u7f6e</li> </ul> </li> </ul> <ul> <li>\u7f3a\u70b9\uff1f<ul> <li>\u6784\u9020\u9ebb\u70e6</li> <li>\u5b58\u50a8\u5f00\u9500\u4e00\u6837\uff0c\u4e0d\u7b97 mark \u90fd\u6709 \\((n+2e)(ptrs)+2e(ints)\\)</li> </ul> </li> <li>\u4f18\u52bf<ul> <li>mark \u6807\u8bb0\u8282\u70b9\u7684 weight</li> <li>mark \u4e5f\u53ef\u4ee5\u8868\u793a\u8fb9\u662f\u5426\u88ab visit</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#114-weighted-edges","title":"1.1.4 Weighted Edges","text":"<ul> <li><code>adj_mat[i][j]=weight</code><ul> <li>\u7528\u7684\u66f4\u591a\uff0c\u56e0\u4e3a\u6709\u7a00\u758f\u4f18\u5316\uff0c\u5b9e\u9645\u4f7f\u7528\u77e9\u9635\u591a tensor</li> </ul> </li> <li><code>adj_lists/multilists</code> add a weight</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#2-topological-sort-\u62d3\u6251\u6392\u5e8f","title":"2 Topological Sort \u62d3\u6251\u6392\u5e8f","text":"<ul> <li>Example: \u5b66\u4e60\u8bfe\u7a0b\u7684\u5148\u4fee\u9650\u5236 prerequisites<ul> <li>\u8bfe\u7a0b\u4e3a\u7ed3\u70b9\uff0cDG</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#21-aov-network-activities-on-vertex","title":"2.1 AOV Network (Activities on vertex)","text":"<ul> <li>predecessor<ul> <li>immediate &amp; indirect</li> </ul> </li> <li>successor</li> <li>Partial order \u504f\u5e8f<ul> <li>\u5148\u4fee\u5173\u7cfb\u53ef\u4ee5\u4f20\u9012\uff0c\u4e0d\u53ef\u81ea\u53cd transitive but irreflexive</li> </ul> </li> <li>AOV must be a DAG no cycle</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#22-definition","title":"2.2 Definition","text":"<ul> <li>\u5982\u679c i \u4e3a j \u7684 predecessor\uff0c\u5219 i \u51fa\u73b0\u5728 j \u524d\u9762</li> <li>\u6bcf\u6b21\u9009\u62e9\u6ca1\u6709 predecessor\uff0c\u5373\u6ca1\u6709 indegree \u7684\u8282\u70b9\uff0c\u5e76\u5c06\u5b83\u7684\u540e\u7ee7\u7684 indegree \u51cf\u4e00\uff08\u5220\u53bb\u8fd9\u4e2a\u8282\u70b9\uff09</li> <li>\u53ef\u80fd\u4e0d\u662f\u552f\u4e00\u7684 not unique</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#23-solution","title":"2.3 Solution","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#231-solution-1","title":"2.3.1 Solution 1","text":"<ul> <li>\u4f7f\u7528\u4e00\u4e2a Counter \u8868\u793a visit \u7684\u8282\u70b9\u6570</li> </ul> <pre><code>void Topsort( Graph G )\n{\n    int Counter;\n    Vertex V,W;\n    for(Counter = 0; Counter &lt; NumVertex; Counter++){\n        V = FindNewVertexOfDegreeZero();\n        if(V == NotAVertex){    // a cycle means no indegree 0\n            Error(\"Graph has a cycle\"); break;\n        }\n        TopNum[V] = Counter; // out put in a array with value as the order\n        for(each W adjacent from V) indegree[W]--; // notice that \"from\"\n    }\n}\n</code></pre> <ul> <li>Time complexity \\(O(|V|^2)\\)</li> <li>Improvement<ul> <li>\u89e3\u51b3 findnewdegreezero \u592a\u6162\u4e86\uff0c\u53ef\u4ee5\u6bcf\u6b21\u627e\u5230\u5c31\u653e\u5728\u4e00\u4e2a queue or stack \u4e2d\uff0c\u76f4\u63a5\u53d6\u5c31\u884c\uff0c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#232-solution-2","title":"2.3.2 Solution 2","text":"<pre><code>void Topsort( Graph G )\n{\n    Queue Q;\n    int Counter = 0;\n    Vertex V, W;\n    Q = CreateQueue(NumVertex); MakeEmpty(Q);\n    for( each vertex V )\n        if(indegree[V] == 0) Enqueue(V, Q);\n    while(!isEmpty(Q)){\n        V = Dequeue(Q);\n        TopNum[V] = ++Counter; // assign next\n        for(each W adjacent from V)\n            if(--indegree[W] == 0) Enqueue(W,Q);\n    }\n    if(Counter != NumVertex)\n        Error(\"Graph has a cycle\");\n    disposeQueue(Q);\n}\n</code></pre> <ul> <li>Time Complexity: \\(O(|V|+|E|)\\)<ul> <li>worst case: \u9000\u5316\u6210 \\(O(|V|^2)\\)</li> </ul> </li> </ul> <p>Uniqueness of Topological Sequence</p> <p>\u5982\u679c DAG \u4e2d\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u90fd\u5b58\u5728\u4e00\u6761\u6709\u5411\u8def\u5f84\uff0cA \u5230 B \u6216\u8005 B \u5230 A\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u552f\u4e00\u7684</p>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#3-shortest-path-algorithms","title":"3 Shortest Path Algorithms","text":"<ul> <li>cost function \\(c(e)\\) for \\(e\\in E(G)\\), describing weighted path length</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#31-single-source-shortest-path-problem","title":"3.1 Single-Source Shortest-Path Problem","text":"<ul> <li>\u5bf9\u4e8e\u56fe\u4e2d\u7ed9\u5b9a\u7684\u4e00\u4e2a\u70b9\uff0c\u627e\u5230\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u5f84</li> <li>Negative Cost \u8fc7\u4e8e\u590d\u6742\uff0c\u53ef\u80fd\u5bfc\u81f4\u65e0\u89e3\uff0c\u6682\u65f6\u4e0d\u8003\u8651</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#311-unweighted-shortest-paths","title":"3.1.1 Unweighted Shortest Paths","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#3111-idea","title":"3.1.1.1 idea","text":"<ul> <li>\u4ece\u8d77\u70b9\u51fa\u53d1\uff0c\u627e\u5230\u80fd\u5230\u8fbe\u7684\u8282\u70b9\uff0c\u5c31\u662f\u8ddd\u79bb\u4e3a 1 \u7684\u8282\u70b9\uff0cvisit<ul> <li>Tree: Level-Order Traversal</li> <li>Breadth-first search(BFS) \u5e7f\u5ea6\u641c\u7d22</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#3112-implementation","title":"3.1.1.2 Implementation","text":"<ul> <li><code>Table[i].Dist ::= distance from s to v_i</code></li> <li><code>Table[i].Known[i] ::= 1 if visited, 0 if not</code></li> <li><code>Table[i].Path ::= for tracking the path</code> \u6307\u5411\u4e0a\u4e00\u4e2a\u9876\u70b9\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u9006\u5411\u627e\u51fa\u8def\u5f84</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#31121-imp-1","title":"3.1.1.2.1 imp 1","text":"<pre><code>void Unweighted ( Table T )\n{\n    int CurrDist;\n    Vertex B, W;\n    for(CurrDist = 0; CurrDist &lt; NumVertex; CurrDist++){\n        for(each vertex V) if(!T[V].Known &amp;&amp; T[V].Dist == CurrDist){  // add another |V|, too slow\n            T[V].Known = ture;\n            for(each W adjacent to V) if(T[W].Dist == Infinity){\n                T[W].Dist = CurrDist + 1;\n                T[W].Path = V;\n            }\n        }\n    }\n}\n</code></pre> <ul> <li>worst case, linear graph</li> <li>\\(T=O(|V|^2)\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#31122-imp-2","title":"3.1.1.2.2 imp 2","text":"<pre><code>void Unweighted( Teble T )\n{\n    Queue Q;\n    Vertex V, W;\n    Q = CreateQueue(NumVertex); MakeEmpty(Q);\n    Enqueue(S, Q);  // Enqueue the source vertex\n    while(!IsEmpty(Q)){\n        V = Dequeue(Q);\n        T[V].Known = true;  // not really necessary\n        for(each W adjacent to V) if(T[W].Dist == Infinity){  // infty means not searched yet\n            T[W].Dist = T.[V].Dist + 1;\n            T[W].Path = V;\n            Enqueue(W, Q);\n        }\n    }\n    DisposeQueue(Q);\n}\n</code></pre> <ul> <li>\u6240\u6709\u9876\u70b9\u90fd\u8fdb\u884c\u7684 queue \u64cd\u4f5c</li> <li>\u6240\u6709\u7684\u8fb9\u90fd\u8d70\u4e86\u4e00\u904d </li> <li>\\(T=O(|V|+|E|)\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#312-dijkstras-algorithmfor-weighted-shortest-paths","title":"3.1.2 Dijkstra's Algorithm(for weighted shortest paths)","text":"<ul> <li>\u4f7f\u7528\u96c6\u5408 S \u8868\u793a\u6240\u6709\u5df2\u7ecf\u627e\u5230\u4e86\u6700\u77ed\u8def\u5f84\u7684 vertex \u7684\u96c6\u5408</li> <li>\u5bf9\u4e8e\u4e0d\u5728 S \u5185\u7684 vertex\uff0c\u5b9a\u4e49\u8ddd\u79bb\u4e3a S \u4e2d\u7684 vertex \u5230\u5b83\u8ddd\u79bb\u7684\u6700\u5c0f\u503c</li> <li>If the paths are generated in non-decreasing order, then<ul> <li>the shortest path must go through ONLY \\(v_i\\in S\\)</li> <li>\u6bcf\u6b21\u627e\u5230 S \u8ddd\u79bb\u6700\u5c0f\u7684\u9876\u70b9\uff0c\u653e\u5165 S Greedy Method</li> <li>\u5982\u679c <code>distance[u_1]&lt;distance[u_2]</code>\uff0c\u628a <code>u_1</code> \u653e\u5165 S\uff0c\u968f\u540e\u7684 <code>distance[u_2]</code> \u53ef\u80fd\u4f1a\u53d8</li> </ul> </li> </ul> <pre><code>void Dijkstra( Table T )\n{\n    Vertex V, W;\n    for(;;){ // O(|V|)\n        V = smallest unknown distance vertex;\n        if(V == NotAVertex) break;  // search done\n        T[V].Known = ture;  // only visit the smallest dist vertex\n        for(each W adjacent to V)  // update W\n            if(!T[W].Known)\n                if(T[V].Dist + Cvw &lt; T[W].Dist){\n                    Decrease(T[W].Dist to T[V].Dist + Cvw);\n                    T[W].Path = V;\n                }\n    }\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#3121-implementation-1-\u76f4\u63a5\u904d\u5386-good-if-the-graph-is-dense","title":"3.1.2.1 Implementation 1 \u76f4\u63a5\u904d\u5386 Good if the graph is dense","text":"<ul> <li>V = smallest unknown distance vertex, traverse the table \\(O(|V|)\\)</li> <li>\\(T=O(|V|^2+|E|)\\) Good if the greph is dense</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#3122-implementation-2-minheap-good-if-the-graph-is-sparse","title":"3.1.2.2 Implementation 2 Minheap Good if the graph is sparse","text":"<ul> <li>V = smallest unknown distance vertex<ul> <li>Keep distances in a priority queue and call DeleteMin \\(O(\\log |V|)\\)</li> </ul> </li> <li><code>Decrease(T[W].Dist to T[V].Dist + Cvw)</code><ul> <li>Method 1: DecreaseKey \\(O(\\log |V|)\\)<ul> <li>\\(T=O(|V|\\log|V|+|E|\\log|V|)=O(|E|\\log|V|)\\)</li> </ul> </li> <li>Method 2: insert W with updated Dist into the priority queue<ul> <li>\\(T=O(|E|\\log |V|)\\)</li> <li>But require |E| DeleteMin with |E| space</li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#3123-other-improvements-pairing-heap-ch12-and-fibonacci-heap-ch11","title":"3.1.2.3 Other improvements: Pairing heap (Ch.12) and Fibonacci heap (Ch.11)","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#313-graphs-with-negative-edge-costs","title":"3.1.3 Graphs with Negative Edge Costs","text":"<pre><code>void\u00a0 WeightedNegative( Table T )\n{\u00a0\u00a0 /* T is initialized by Figure 9.30 on p.303 */\n\u00a0\u00a0\u00a0 Queue\u00a0 Q;\n\u00a0\u00a0\u00a0 Vertex\u00a0 V, W;\n\u00a0\u00a0\u00a0 Q = CreateQueue (NumVertex );\u00a0 MakeEmpty( Q );\n\u00a0\u00a0\u00a0 Enqueue( S, Q ); /* Enqueue the source vertex */\n\u00a0\u00a0\u00a0 while ( !IsEmpty( Q ) ) { /*each vertex can dequeue at most |V| times*/\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 V = Dequeue( Q );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for ( each W adjacent to V )\n\u00a0           if ( T[ V ].Dist + Cvw &lt; T[ W ].Dist ) { /* no longer once per edge */\n\u00a0 \u00a0\u00a0\u00a0           T[ W ].Dist = T[ V ].Dist + Cvw;\n\u00a0 \u00a0\u00a0\u00a0           T[ W ].Path = V;\n\u00a0 \u00a0\u00a0\u00a0           if ( W is not already in Q )\n\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0           Enqueue( W, Q );\n\u00a0 } /* end-if update */\n\u00a0\u00a0\u00a0 } /* end-while */\n\u00a0\u00a0\u00a0 DisposeQueue( Q ); /* free memory */\n}  /* negative-cost cycle will cause indefinite loop*/\n</code></pre> <ul> <li>\\(T=O(|V|*|E|)\\)</li> <li>\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a <code>treshold</code>\uff0c\u5982\u679c\u4e00\u6761\u8fb9\u5df2\u7ecf\u904d\u5386\u8d85\u8fc7\u8fd9\u4e48\u591a\u6b21\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u662f\u6b7b\u5faa\u73af\uff0c\u7a0b\u5e8f\u9000\u51fa</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#314-acyclic-graphs-\u65e0\u73af\u56fe","title":"3.1.4 Acyclic Graphs \u65e0\u73af\u56fe","text":"<ul> <li>\u56de\u5fc6 2 Topological Sort \u62d3\u6251\u6392\u5e8f \u91cc\u7684\u65e0\u73af\u56fe\uff0cAOV Network\uff0c\\(T=O(|E|+|V|)\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#3141-application-aoeactivity-on-edge-networks","title":"3.1.4.1 Application: AOE(Activity On Edge) Networks","text":"<ul> <li>edge: activity<ul> <li>weight: \u4efb\u52a1\u6301\u7eed\u7684\u65f6\u95f4</li> <li>dummy edge: \u4efb\u52a1\u5b58\u5728\u5148\u540e\u5173\u7cfb\uff0c\u4e00\u4e2a\u7531\u53e6\u4e00\u4e2a\u51b3\u5b9a</li> </ul> </li> <li>vertex: status<ul> <li>index of vertex</li> <li>EC: earlist completion time for this node</li> <li>LC: latest completion time for this node</li> </ul> </li> <li>CPM: Critical Path Method</li> </ul> <ul> <li>EC\uff1a\u4ece\u8d77\u70b9\u5f00\u59cb\u5f80\u540e\u8ba1\u7b97\uff0c\u6bcf\u6b21\u52a0\u4e0a\u8fb9\uff0c\u6bcf\u4e2a\u8282\u70b9\u8981\u53d6\u5165\u5ea6\u4e2d\u6700\u5927\u7684</li> <li>LC\uff1a\u4ece\u7ec8\u70b9\u5f80\u524d\u8ba1\u7b97\uff0c\u6bcf\u6b21\u51cf\u53bb\u8fb9\uff0c\u6bcf\u4e2a\u8282\u70b9\u8981\u53d6\u51fa\u5ea6\u4e2d\u6700\u5c0f\u7684</li> <li>Slack Time\uff1a\u677e\u5f1b\u65f6\u95f4\uff0c\u8fd9\u6761\u8fb9\u4e0a\u5b8c\u6210\u4efb\u52a1\u4e4b\u4f59\u53ef\u4ee5 idle \u7684\u65f6\u95f4</li> <li>Critical Path\uff1a\u6240\u6709\u7684 slack time \u90fd\u662f 0\uff0c\u5fc5\u987b\u76ef\u7262\u7684\u4efb\u52a1\u7ebf</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#32-all-pairs-shortest-path-problem","title":"3.2 All-Pairs Shortest Path Problem","text":"<p>For all pairs of \\(v_i\\) and \\(v_j\\) \\((i\\ne j)\\) , find the shortest path between.</p>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#321-method-1-use-single-source-algorithm-for-v-times","title":"3.2.1 Method 1 Use single-source algorithm for |V| times","text":"<ul> <li>\\(T=O(|V|^3)\\)</li> <li>works fast on sparse graph</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#322-method-2-in-ch10","title":"3.2.2 Method 2 in Ch.10","text":"<ul> <li>works faster on dense graphs</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#4-network-flow-problems-\u7f51\u7edc\u6d41\u95ee\u9898","title":"4 Network Flow Problems \u7f51\u7edc\u6d41\u95ee\u9898","text":"<ul> <li>\u6bcf\u6761\u8fb9\u90fd\u5b58\u5728\u6700\u5927\u6d41\u91cf\u9650\u5236\uff0c\u6709\u5411\u56fe</li> <li>\u4ece source \u5230 sind \u7684\u6700\u5927\u6d41\u91cf\u95ee\u9898</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#41-a-simple-algorithm","title":"4.1 A Simple Algorithm","text":"<ul> <li>\u6839\u636e\u539f\u59cb\u7684 graph\uff0c\u521b\u5efa\u4e24\u4e2a graph<ul> <li>Flow network \\(G_f\\)</li> <li>Residual network \\(G_r\\) \u6b8b\u5dee\u7f51\u7edc</li> </ul> </li> <li>Find any path from s to v in \\(G_r\\), called Augmenting path</li> <li>Take the minimum edge on this path as the amount of flow and add to \\(G_f\\) \u627e\u5230\u74f6\u9888\uff0c\u5728 flow \u91cc\u6574\u6761\u8def\u7ebf\u4e0a\u66f4\u65b0\u5230\u8fd9\u4e2a\u6d41\u91cf</li> <li>\u5e76\u66f4\u65b0 residual</li> <li>\u5982\u679c residual \u4e2d\u4ecd\u7136\u5b58\u5728 path\uff0c\u7ee7\u7eed step 1\uff1b\u5426\u5219\u7ed3\u675f</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#411-\u95ee\u9898-1","title":"4.1.1 \u95ee\u9898 1","text":"<ul> <li>\u5982\u679c\u4f7f\u7528 greedy method\uff0c\u53ef\u80fd\u63d0\u524d\u5bfc\u81f4\u8def\u5c01\u6b7b</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#42-a-solution-allow-the-algorithm-to-undo-its-decision","title":"4.2 A Solution - allow the algorithm to undo its decision","text":"<ul> <li>\u66f4\u65b0 residual \u65f6\uff0c\u52a0\u4e0a\u53cd\u5411\u7684\u8def\u5f84\uff0c\u6709\u4e00\u4e2a\u6539\u9519\u7684\u673a\u4f1a</li> <li>Proposition: \u5982\u679c\u8fb9\u662f\u6709\u7406\u6570\uff0c\u4e00\u5b9a\u4f1a\u627e\u5230\u6700\u5927\u7684\u6d41\u91cf</li> <li>Note: The algorithm works for G with cycles as well</li> <li></li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#43-analysis-if-the-capacities-are-all-integers","title":"4.3 Analysis ( If the capacities are all integers )","text":"<ul> <li>An augmenting path can be found by an unweighied shortest path algorithm<ul> <li>\\(T=O(f*|E|)\\), f is the maximum flow</li> </ul> </li> <li>Always choose the augmenting path that allows the largest increase in flow modify Dijkstra's algorithm<ul> <li> \\[T=T_{augmentation}*T_{find\\space a\\space path}=O(|E|\\log cap_{max})*O(|E|\\log |V|)=O(|E|^2\\log |V|)\\] </li> <li>if cap_max the maximum of capacity is a small integer</li> </ul> </li> <li>Always choose the augmenting path that has the least number of edges<ul> <li> \\[T=T_{augmentation}*T_{find\\,a\\,path}=O(|E|)*O(|E|*|V|)=O(|E|^2|V|)\\] </li> <li>Note </li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#5-minimum-spanning-tree","title":"5 Minimum Spanning Tree","text":"<p>Definition: A spanning tree of graph G is a tree which consists of V(G) and a subset of E(G)</p> <ul> <li>acyclic: the number of edges is |V|-1</li> <li>minimun: for the total cost of edges is minimized \u6240\u6709\u7684\u6743\u91cd\u548c\u6700\u5c0f</li> <li>spanning: it covers every vertex</li> <li>A minimum spanning tree exists iff G is connected</li> <li>Adding a non-tree edge to a spanning tree, we obtain a cycle</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#51-greedy-method","title":"5.1 Greedy Method","text":"<ol> <li>\u53ea\u4f7f\u7528 graph \u91cc\u6709\u7684\u8fb9</li> <li>\u4e00\u5b9a\u6070\u597d\u4f7f\u7528 |V|-1 \u6761\u8fb9</li> <li>\u4f7f\u7528\u7684\u8fb9\u4e0d\u80fd\u5f62\u6210\u5faa\u73af</li> </ol>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#511-prims-algorithm-grow-a-tree","title":"5.1.1 Prim's Algorithm - grow a tree","text":"<ul> <li>Similiar to Dijkstra</li> <li>\u6bcf\u6b21\u9009\u6700\u5c0f\u8ddd\u79bb\u7684</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#512-kruskals-algorithm-maintain-a-forest","title":"5.1.2 Kruskal's Algorithm - maintain a forest","text":"<ul> <li>\u6bcf\u6b21\u627e\u8ddd\u79bb\u6700\u5c0f\u7684\u8fb9</li> <li>\u5982\u679c\u4e0d\u5f62\u6210 cycle\uff0c\u90a3\u4e48\u5c06\u6811\u8fde\u63a5\uff0c\u5220\u9664\u8fd9\u6761\u8fb9</li> <li>\u5982\u679c\u5f62\u6210 cycle\uff0c\u90a3\u4e48\u653e\u5f03\u8fd9\u6761\u8fb9</li> </ul> <pre><code>void Kruskal ( Graph G )\n{\n    T = {};\n    while ( T contains less than |V|-1 edges &amp;&amp; E is not empty ) {\n        choose a least cost edge(V, w) from E;   // deleteMin\n        delete (v, w) from E;\n        if((v, w) does not create a cycle in T)\n            add (v, w) to T;   // union and find\n    }\n    if(T contains fewer than |V|-1 edges)\n        Error(\"No spanning tree\");\n}\n</code></pre> <p>Time Complexity</p> <ul> <li>\u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u7684\u8fb9\u96c6 \\(O(1)\\)</li> <li>\u5bf9\u8fb9\u7684\u6743\u91cd\u8fdb\u884c\u6392\u5e8f \\(O(|E|\\log |E|)\\)</li> <li>\u6309\u7167\u8fb9\u7684\u6743\u91cd\u4ece\u5c0f\u5230\u5927\uff0c\u8fdb\u884c\u5e76\u67e5\u96c6\u64cd\u4f5c \\(O(|E|\\log |V|)\\)<ul> <li>\u5982\u679c\u91c7\u7528 union-by-rank and path-compression\uff0c\u5e76\u67e5\u96c6\u80fd\u4f18\u5316\u6210 \\(O(|E|\\alpha(|E|, |V|))\\)</li> <li>\u8fd9\u91cc\u7684 \\(\\alpha\\) \u662f\u53cd\u963f\u514b\u66fc\u51fd\u6570\uff0c\u63a5\u8fd1\u4e8e\u5e38\u6570</li> </ul> </li> <li>\u6240\u4ee5\uff0c\u603b\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(|E|\\log |E|)\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#6-applications-of-depth-first-search","title":"6 Applications of Depth-First Search","text":"<p>a generalization of preorder traversal</p> <pre><code>void DFS ( Vertex V )\n{\n    visited[V] = true;\n    for(each W adjacent to V)\n        if(!visited[W])\n            DFS(W);\n}\n</code></pre> <ul> <li>\\(T=O(|E|+|V|)\\)</li> <li>BFS: \u6bcf\u6b21\u627e\u4e00\u5c42\u961f\u5217\uff0cwhile \u5faa\u73af VS DFS: \u6bcf\u6b21\u5148\u627e\u5230\u6240\u6709\u7684\u9012\u5f52</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#61-undirected-graphs","title":"6.1 Undirected Graphs","text":"<ul> <li>DFS \u80fd\u591f\u8bbf\u95ee\u7684\u6240\u6709\u8282\u70b9\uff0c\u6784\u6210\u4e00\u4e2a component</li> </ul> <pre><code>void ListComponents( Graph G )\n{\n    for(each V in G)\n        if(!visited[V]){\n            DFS(V);\n            printf(\"\\n\");   \n        }   // \u6bcf\u6b21\u8bbf\u95ee\u6253\u5370\u8282\u70b9index\uff0c\u6bcf\u4e24\u4e2acomponent\u4e4b\u95f4\u6362\u884c\n}\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#62-biconnectivity","title":"6.2 Biconnectivity","text":"<ul> <li>Articulation Point: v is an articulation point if G' = deleteVertex(G, v) has at least 2 connected components \u5982\u679c\u628a\u8fd9\u4e2a\u8282\u70b9\u5220\u6389\u4e4b\u540e\uff0c\u56fe\u88ab\u5206\u5f00\u4e86</li> <li>Biconnected graph: G is a biconnected graph if G is connected and has no articulation points</li> <li>A biconnected component is a maximal biconnected subgraph</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#621-finding-the-biconnected-components","title":"6.2.1 Finding the biconnected components","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#6211-use-dfs-to-obtain-a-spanning-tree-of-g","title":"6.2.1.1 Use DFS to obtain a spanning tree of G","text":"<ul> <li>spanning tree \u91cd\u65b0\u6309\u7167 visit \u987a\u5e8f\u7f16\u53f7\uff0c\u5f97\u5230 DFS number</li> <li>Back edges \u56fe\u4e2d\u6709\u4f46\u6811\u4e2d\u6ca1\u6709\u7684\u8fb9</li> <li>Note: if u is an ancestor of  v, then Num(u)&lt;Num(v)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#6212-find-the-articulation-points-in-g","title":"6.2.1.2 Find the articulation points in G","text":"<ul> <li>The root is an articulation point iff it has at least 2 children</li> <li>Any other vertex is an articulation point iff u has at least 1 child, and it is impossible to move down at least 1 step and then jump up to u's ancestor<ul> <li>\u81f3\u5c11\u6709\u4e00\u4e2a\u5b69\u5b50\uff0c\u800c\u4e14\u65e0\u6cd5\u4ece\u540e\u4ee3\u4e2d\u901a\u8fc7 back edge \u56de\u5230\u7956\u5148</li> <li></li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#6213-lowuminnumuminlowwwisachildofuminnumwuwisabackedge","title":"6.2.1.3 \\(Low(u)=min\\{Num(u),min\\{Low(w)|w\\,is\\,a\\,child\\,of\\,u\\},min\\{Num(w)|(u,w)is\\,a\\,back\\,edge\\}\\}\\)","text":"<ul> <li>\u662f \u81ea\u5df1\u7684 number\u3001children \u4e2d\u6700\u5c0f\u7684 low number\u3001\u81ea\u5df1 backedge \u53e6\u4e00\u5934\u4e2d\u6700\u5c0f\u7684 number \u4e2d\u6700\u5c0f\u7684</li> <li>\u8ba1\u7b97 Low number<ul> <li></li> <li>\u6839\u8282\u70b9 \u7684 low number \u662f 0</li> <li>\u5148\u627e\u6240\u6709 backedge \u5f71\u54cd\u7684 low number \u56e0\u4e3a backedge \u8981\u627e\u7684\u662f\u53e6\u4e00\u5934\u7684 number\uff0c \u5df2\u7ecf\u5168\u90e8\u5df2\u77e5</li> <li>DFS\uff0c\u6bcf\u6b21\u8fd4\u56de\u672c\u8282\u70b9\u7684 low number\uff0c\u6bcf\u6b21\u6bd4\u8f83\u81ea\u5df1\u7684 number \u548c\u6240\u6709\u8fd4\u56de\u503c\uff0c\u53d6\u6700\u5c0f\u7684</li> </ul> </li> </ul> <p>%%Pseudo-code on p.327 and p.329%%</p>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#6214-therefore-u-is-an-articulation-point-iff","title":"6.2.1.4 Therefore, u is an articulation point iff","text":"<ul> <li>u is the root and has at least 2 children; or</li> <li>u is not the root, and has at least 1 child such that \\(Low(child)\\ge Num(u)\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#63-euler-circuits","title":"6.3 Euler Circuits","text":"<ul> <li>Euler tour: draw each line exactly once without lifting your pen from the paper \u4e00\u7b14\u753b</li> <li>Euler curcuit: draw each line exactly once without lifting your pen from the paper, AND finish at the startgin point</li> <li>Propositions<ul> <li>An Euler circuit is possible iff the graph is connected and each vertex has an even degree.</li> <li>An Euler tour is possible if there are exactly two vertices having odd degree. One must start at one of the odd-degree vertices.</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#631-algorithm","title":"6.3.1 algorithm","text":"<ul> <li>the path should be maintained as a linked list</li> <li>for each adjacency list, maintain a pointer to the last edge scanned</li> <li>\\(T=O(|E|+|V|)\\)</li> <li>Other algorithm: Hamilton Cycle</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#7-hw","title":"7 HW","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#71-hw-8","title":"7.1 HW 8","text":"<ol> <li>If a directed graph G=(V, E) is weakly connected, then there must be at least |V| edges in G. F<ol> <li>weak / strong connection<ol> <li>\u5f31\u8fde\u63a5\u6307\u7684\u662f\u5b58\u5728\u4e00\u6761\u8def\u5f84\uff0c\u7ecf\u8fc7\u4e24\u70b9</li> <li>\u5f3a\u8fde\u63a5\u6307\u7684\u662f\uff0c\u4ece A \u51fa\u53d1\u53ef\u4ee5\u5230 B\uff0c\u4ece B \u51fa\u53d1\u4e5f\u53ef\u4ee5\u5230 A</li> </ol> </li> <li>\u5e94\u8be5\u662f |V|-1\uff0c\u53ea\u8981\u6709 undirected path \u5c31\u884c</li> </ol> </li> <li>Given the adjacency list of a directed graph as shown by the figure. There is(are) __ strongly connected component(s).<ol> <li>\u6ce8\u610f\u5355\u4e2a vertex \u4e5f\u7b97\u662f\u5b50\u56fe</li> <li>\u9996\u5148\u770b\u54ea\u4e9b\u8282\u70b9\u6ca1\u6709\u5165\u6216\u8005\u6ca1\u6709\u51fa\u7684\uff0c\u4e00\u5b9a\u662f\u5355\u8282\u70b9\u7684\u5b50\u56fe</li> </ol> </li> </ol>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#711-\u51fd\u6570\u9898is-topological-order","title":"7.1.1 \u51fd\u6570\u9898\uff1aIs Topological Order","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#7111-idea-1","title":"7.1.1.1 idea 1","text":"<ul> <li>\u904d\u5386\uff0c\u5efa\u7acb <code>cntIndegree[num]</code> \u4fdd\u5b58\u5165\u5ea6\uff0c\u8bb0\u5f97\u521d\u59cb\u5316\u4e3a</li> <li>\u904d\u5386\u8f93\u5165\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8f93\u5165\uff0c\u5982\u679c\u5bf9\u5e94 <code>cntIndegree</code> \u662f 0\uff0c\u5219\u6b63\u786e<ul> <li>\u5e76\u5c06 successor \u7684\u5165\u5ea6\u51cf\u4e00</li> </ul> </li> <li>\u5982\u679c\u5165\u5ea6\u8fd8\u4e0d\u662f 0 \u7684\u8282\u70b9\u88ab visit\uff0c\u5219\u4e0d\u6b63\u786e\uff0c\u9000\u51fa false</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#71111-test","title":"7.1.1.1.1 test","text":"<ul> <li>\u9519\u8bef\u4e86\uff0c\u56e0\u4e3aAdjV \u91cc\u7684\u8282\u70b9\u7f16\u53f7\u4e5f\u662f\u4ece 0 \u5f00\u59cb\u7684</li> <li>\u4fee\u6539\u4e4b\u540e\u5c31\u6b63\u786e\u4e86</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#712-\u7f16\u7a0b\u9898hamiltonian-cycle","title":"7.1.2 \u7f16\u7a0b\u9898\uff1aHamiltonian Cycle","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#7121-idea-1","title":"7.1.2.1 idea 1","text":"<ul> <li>\u5efa\u7acb\u56fe\uff0cadjmat/adjlist?<ul> <li>\u8fb9\u754c\u4e3a 200 vertices\uff0c40000 \u4e2a int\uff0c\u9884\u8ba1\u5360\u7528 2^18 byte\uff0c\u7a7a\u95f4\u8db3\u591f\uff0c\u4f7f\u7528\u5b8c\u5168 adjmat</li> </ul> </li> <li>\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8f93\u5165 query<ul> <li>\u9996\u5148\u6570\u91cf\u9700\u8981\u662f Nv+1 \u4ee5\u4e0a</li> <li>\u7136\u540e\u9996\u5c3e\u76f8\u540c</li> <li>\u5176\u6b21\u9700\u8981\u5305\u542b\u6240\u6709\u6570\u5b57</li> <li>\u518d\u6b21\u68c0\u67e5\u662f\u5426\u90fd\u53ef\u4ee5\u8fde\u901a</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#72-hw-9","title":"7.2 HW 9","text":"<ul> <li>In a weighted undirected graph, if the length of the shortest path from\u00a0<code>b</code>\u00a0to\u00a0<code>a</code>\u00a0is 12, and there exists an edge of weight 2 between\u00a0<code>c</code>\u00a0and\u00a0<code>b</code>, then the length of the shortest path from\u00a0<code>c</code>\u00a0to\u00a0<code>a</code>\u00a0must be no less than 10.<ul> <li>T</li> <li>\u5982\u679c less than 10 \u7684\u8bdd\uff0c<code>b</code> to <code>a</code> \u7684\u6700\u77ed\u5c31\u6bd4 12 \u8fd8\u5c0f\u4e86</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#73-hw-10","title":"7.3 HW 10","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#731-7-1-universal-travel-sites","title":"7.3.1 7-1 Universal Travel Sites","text":"<ul> <li>\u5c31\u662f\u6700\u5927\u7f51\u7edc\u6d41\u95ee\u9898\uff0c\u4f46\u662f\u52a0\u4e0a\u4e86\u5b57\u7b26\u4e32\uff0c\u6700\u597d\u6709\u5b57\u5178\uff0c\u6216\u8005\u4f7f\u7528 python</li> <li>\u601d\u8def<ul> <li>\u8bfb\u56fe<ul> <li>\u8fb9\u91cc\u76f4\u63a5\u5b58\u8282\u70b9\u540d\u79f0\uff0c\u5168\u90e8\u4f7f\u7528 strcmp\uff0c\u53ef\u4ee5\u907f\u514d\u5b57\u5178\uff0c\u8fd9\u91cc\u7528 python \u6765\u5b9e\u73b0</li> <li>\u6bcf\u4e2a\u8fb9\u540c\u65f6\u5b58\u50a8 \\(G_r, G_f\\)</li> </ul> </li> <li>unweighted \u8def\u5f84\u641c\u7d22\uff0c\u8fd4\u56de\u8def\u5f84 \u76f4\u5230\u641c\u4e0d\u5230 break</li> <li>\u6839\u636e\u8def\u5f84\u66f4\u65b0 \\(G_r, G_f\\)</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#732-uniqueness-of-mst","title":"7.3.2 Uniqueness of MST","text":"<ul> <li>\u5177\u6709\u76f8\u540c\u62d3\u6251\u7ed3\u6784\u7684 MST \u5c31\u662f\u76f8\u540c\u7684<ul> <li>\u4efb\u4f55\u4e00\u68f5\u6811\u90fd\u53ef\u4ee5 reroot\uff0c\u4f46\u662f\u8fb9\u96c6\u4e0d\u53d8</li> <li>\u53ea\u8981\u8fb9\u96c6\u76f8\u540c\uff0c\u5c31\u8ba4\u4e3a MST \u76f8\u540c</li> </ul> </li> </ul> <p>\u5982\u679c\u80fd\u591f\u5efa\u7acb\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5982\u4f55\u5224\u65ad\u662f\u5426\u552f\u4e00\uff1f</p> <p>\u5982\u679c\u51fa\u73b0\u4e86\u76f8\u540c\u6743\u91cd\u7684</p>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#7321-idea","title":"7.3.2.1 idea","text":"<ul> <li>\u5bf9 edge \u6309\u7167 weight \u5347\u5e8f\u6392\u5217</li> <li>\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u8def\u5f84\u538b\u7f29\uff0c\u904d\u5386 edge<ul> <li>\u5bf9\u4e8e\u8def\u5f84\u957f\u5ea6 d<ul> <li>\u9996\u5148\u5bf9\u6240\u6709\u7684\u957f\u5ea6\u4e3a d \u7684\u8def\u5f84\u8fdb\u884c\u5206\u6790\uff0c\u662f\u5426\u80fd\u591f\u52a0\u5165\u56fe\u4e2d \u662f\u5426\u6210\u73af\uff0c\u5e76\u8fdb\u884c\u8bb0\u5f55</li> <li>\u7136\u540e\u8fdb\u884c\u9010\u4e2a\u52a0\u5165</li> </ul> </li> </ul> </li> <li>\u6700\u540e\u770b\u770b\u5982\u679c\u5b58\u5728\u53ef\u80fd\u52a0\u5165 MST \u4f46\u662f\u5b9e\u9645\u4e0a\u6ca1\u6709\u52a0\u5165\u7684\u8def\u5f84\uff0c\u90a3\u4e48 MST \u4e0d\u552f\u4e00</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#73211-\u6ce8\u610f","title":"7.3.2.1.1 \u6ce8\u610f","text":"<ul> <li>\u9700\u8981\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\uff0c\u4e0d\u7136\u8d85\u65f6</li> <li>\u5b9e\u73b0\u8fc7\u4e8e\u9ebb\u70e6</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#74-hw-11","title":"7.4 HW 11","text":"<ul> <li>Apply DFS to a directed acyclic graph, and output the vertex before the end of each recursion. The output sequence will be: reversely topologically sorted<ul> <li>\u56e0\u4e3a\u662f\u5728\u8fd4\u56de\u7684\u65f6\u5019\u6253\u5370\u7684\uff0c\u800c DFS \u7684\u987a\u5e8f\u662f\u987a\u7740\u62d3\u6251\u6392\u5e8f\u6df1\u5165\u7684</li> <li>\u6ce8\u610f \u6709\u5411\u65e0\u73af\u56fe\u5c31\u662f\u6811\uff0c\u8fd9\u5c31\u662f\u6811\u7684 DFS</li> </ul> </li> <li>Use simple insertion sort to sort 10 numbers from non-decreasing to non-increasing, the possible numbers of comparisons and movements are:<ul> <li>\u4e00\u5171\u6709 45 \u4e2a\u9006\u5e8f\u5bf9\uff0c\u6240\u4ee5\u4ea4\u6362\u7684\u6b21\u6570\u4e0d\u4f1a\u5927\u4e8e 45</li> <li>\u9009 D. 45, 44</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#741-\u51fd\u6570\u9898strongly-connected-components","title":"7.4.1 \u51fd\u6570\u9898\uff1aStrongly Connected Components","text":"<ul> <li>\u6ce8\u610f\u4e0d\u662f\u8fde\u901a\u662f digraph \u5f3a\u8fde\u901a\uff0c\u6240\u4ee5\u4e0d\u662f\u7b80\u5355\u7684 Undirected Graphs</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Ch.09%20Graph%20Algorithms.html#7411-idea","title":"7.4.1.1 Idea","text":"<p>\u5982\u4f55\u627e\u5230\u67d0\u4e2a\u9876\u70b9\u6240\u5728\u7684 SCC ?</p> <ul> <li>\u9996\u5148\uff0c\u4e00\u4e2a SCC \u7684\u5b9a\u4e49\u662f\uff0c\u5185\u90e8\u6240\u6709\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u90fd\u5b58\u5728\u53cc\u5411\u8def\u5f84<ul> <li>\u90a3\u4e48 V \u53ef\u4ee5\u627e\u5230\u5176\u4ed6\u6240\u6709\u8282\u70b9\uff0c\u5176\u4ed6\u6240\u6709\u8282\u70b9\u4e5f\u53ef\u4ee5\u627e\u5230 V</li> <li>\u6ee1\u8db3\u4e0a\u9762\u8fd9\u4e2a\u6761\u4ef6\uff0c\u5176\u4ed6\u8282\u70b9\u5c31\u53ef\u4ee5\u76f8\u4e92\u627e\u5230\uff0c\u4f7f\u7528 V \u4f5c\u4e3a\u8df3\u677f</li> </ul> </li> <li>\u6240\u4ee5\u5f97\u5230\u4e86 SCC \u7684 \u5145\u8981\u6761\u4ef6</li> </ul> <ul> <li>for all V in G<ul> <li>if not visited<ul> <li>find the SCC it is in <code>getStronglyConnectedComponent()</code></li> <li>print(\\n)</li> </ul> </li> </ul> </li> <li><code>getSCC(Graph G, Vertex V)</code><ul> <li>V \u51fa\u53d1\u80fd\u627e\u5230\u7684\u8282\u70b9\u6784\u6210\u96c6\u5408 From</li> <li>\u80fd\u627e\u5230 V \u7684\u8282\u70b9\u6784\u6210\u96c6\u5408 To</li> <li>\u53d6\u4ea4\u96c6\uff0c\u52a0\u4e0a V \u672c\u8eab\uff0c\u5c31\u662f V \u6240\u5728\u7684\u6700\u5927 SCC</li> </ul> </li> <li>\u4f7f\u7528 <code>adj_mat</code> \u5229\u7528 Warshall \u7b97\u6cd5\u53ef\u4ee5\u66f4\u52a0\u65b9\u4fbf\u5730\u89e3\u51b3<ul> <li>\u5bf9\u4e8e <code>adj_mat</code> \u4f7f\u7528 Warshall \u7b97\u6cd5\uff0c\u5f97\u5230\u76ee\u6807\u77e9\u9635</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a unvisited \u7684\u9876\u70b9 V<ul> <li>\u53d6\u77e9\u9635\u91cc\u7b2c V \u884c\u548c\u7b2c V \u5217\u7684 AND<ul> <li>\u8fd9\u4e2a\u7ed3\u679c\u5c31\u662f V \u6240\u5728\u7684 SCC</li> </ul> </li> <li>visit SCC \u5185\u6240\u6709\u7684\u9876\u70b9 \u6253\u5370\uff0c\u6807\u8bb0</li> </ul> </li> <li>\\(O(N^3)\\)</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html","title":"Cheat Sheet","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#mistakes","title":"Mistakes","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#true-of-false","title":"True of False","text":"<ol> <li>If a queue is implemented by a circularly linked list, then the insertion and deletion opetations can be performed with one pointer rear insetad of rear and front T</li> </ol>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#cheat-sheet","title":"Cheat Sheet","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#tricky-points","title":"Tricky points","text":"<ul> <li>\u6811\u7684\u7c7b\u578b<ul> <li>full</li> <li>complete</li> <li>perfect</li> <li>balanced</li> </ul> </li> </ul> <p>\u5728\u4e8c\u53c9\u6811\u4e2d\uff0c\u6709\u51e0\u4e2a\u5e38\u89c1\u7684\u7c7b\u578b\u9700\u8981\u533a\u5206\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\uff08complete binary tree\uff09\u3001\u6ee1\u4e8c\u53c9\u6811\uff08full binary tree\uff09\u3001\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff08perfect binary tree\uff09\u548c\u5e73\u8861\u4e8c\u53c9\u6811\uff08balanced binary tree\uff09\u3002\u4e0b\u9762\u662f\u6bcf\u79cd\u7c7b\u578b\u7684\u8be6\u7ec6\u89e3\u91ca\uff1a</p> \u4e0d\u540c\u7684\u4e8c\u53c9\u6811 <ol> <li>\u5b8c\u5168\u4e8c\u53c9\u6811\uff08Complete Binary Tree\uff09\uff1a</li> <li>\u5b9a\u4e49\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5176\u4e2d\u6240\u6709\u5c42\uff08\u9664\u4e86\u53ef\u80fd\u7684\u6700\u540e\u4e00\u5c42\uff09\u90fd\u662f\u6ee1\u7684\uff0c\u4e14\u6240\u6709\u8282\u70b9\u5c3d\u53ef\u80fd\u5730\u9760\u5de6\u6392\u5217\u3002</li> <li>\u7279\u70b9\uff1a\u5728\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0c\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u662f\u4ece\u5de6\u5230\u53f3\u586b\u6ee1\u7684\uff0c\u4f46\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\u4e0d\u4e00\u5b9a\u586b\u6ee1\u3002</li> <li> <p>\u4f8b\u5b50\uff1a      <pre><code>      1\n    /   \\\n   2     3\n  / \\   /\n 4   5 6\n</code></pre></p> </li> <li> <p>\u6ee1\u4e8c\u53c9\u6811\uff08Full Binary Tree\uff09\uff1a</p> </li> <li>\u5b9a\u4e49\uff1a\u6ee1\u4e8c\u53c9\u6811\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u8981\u4e48\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u8981\u4e48\u6ca1\u6709\u5b50\u8282\u70b9\u3002</li> <li>\u7279\u70b9\uff1a\u6bcf\u4e2a\u8282\u70b9\u8981\u4e48\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u8981\u4e48\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u3002</li> <li> <p>\u4f8b\u5b50\uff1a      <pre><code>      1\n    /   \\\n   2     3\n  / \\   / \\\n 4   5 6   7\n</code></pre></p> </li> <li> <p>\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff08Perfect Binary Tree\uff09\uff1a</p> </li> <li>\u5b9a\u4e49\uff1a\u5b8c\u7f8e\u4e8c\u53c9\u6811\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5176\u4e2d\u6240\u6709\u5185\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u4e14\u6240\u6709\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u540c\u4e00\u5c42\u3002</li> <li>\u7279\u70b9\uff1a\u5b8c\u7f8e\u4e8c\u53c9\u6811\u65e2\u662f\u6ee1\u4e8c\u53c9\u6811\u53c8\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u3002\u5b83\u7684\u6240\u6709\u53f6\u5b50\u8282\u70b9\u5728\u540c\u4e00\u5c42\uff0c\u5e76\u4e14\u6240\u6709\u5185\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u3002</li> <li> <p>\u4f8b\u5b50\uff1a      <pre><code>      1\n    /   \\\n   2     3\n  / \\   / \\\n 4   5 6   7\n</code></pre></p> </li> <li> <p>\u5e73\u8861\u4e8c\u53c9\u6811\uff08Balanced Binary Tree\uff09\uff1a</p> </li> <li>\u5b9a\u4e49\uff1a\u5e73\u8861\u4e8c\u53c9\u6811\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5176\u4e2d\u4efb\u4f55\u8282\u70b9\u7684\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u4e0d\u8d85\u8fc7 1\u3002</li> <li>\u7279\u70b9\uff1a\u4e3a\u4e86\u4fdd\u8bc1\u67e5\u8be2\u64cd\u4f5c\u7684\u6548\u7387\uff0c\u6811\u7684\u9ad8\u5ea6\u5c3d\u91cf\u4fdd\u6301\u5728\u6700\u4f4e\u6c34\u5e73\u3002\u5e38\u89c1\u7684\u5e73\u8861\u4e8c\u53c9\u6811\u6709 AVL \u6811\u548c\u7ea2\u9ed1\u6811\u3002</li> <li>\u4f8b\u5b50\uff1a      <pre><code>      3\n    /   \\\n   2     4\n  /       \\\n 1         5\n</code></pre></li> </ol>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#\u603b\u7ed3","title":"\u603b\u7ed3","text":"<ul> <li>\u5b8c\u5168\u4e8c\u53c9\u6811\uff1a\u4ece\u5de6\u5230\u53f3\u9010\u5c42\u586b\u6ee1\uff0c\u53ef\u80fd\u6700\u540e\u4e00\u5c42\u4e0d\u5b8c\u5168\u3002</li> <li>\u6ee1\u4e8c\u53c9\u6811\uff1a\u6bcf\u4e2a\u8282\u70b9\u8981\u4e48\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u8981\u4e48\u6ca1\u6709\u5b50\u8282\u70b9\u3002</li> <li>\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff1a\u6240\u6709\u5185\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u6240\u6709\u53f6\u5b50\u8282\u70b9\u5728\u540c\u4e00\u5c42\u3002</li> <li>\u5e73\u8861\u4e8c\u53c9\u6811\uff1a\u4efb\u4f55\u8282\u70b9\u7684\u4e24\u4e2a\u5b50\u6811\u9ad8\u5ea6\u5dee\u4e0d\u8d85\u8fc7 1\u3002</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#ch02-algorithm-analysis","title":"Ch.02 Algorithm Analysis","text":"<ul> <li>\\(T(N)=O(f(N))\\) \u4e0a\u754c\uff0c\u5c0f\u4e8e\u7b49\u4e8e</li> <li>\\(T(N)=\\Omega(g(N))\\) \u4e0b\u754c\uff0c\u5927\u4e8e\u7b49\u4e8e</li> <li>\\(T(N)=\\Theta(h(N))\\) \u786e\u754c\uff0c\u8868\u793a\u4e0a\u4e0b\u754c\u540c\u9636</li> <li>\\(T(N)=o(p(N))\\) \u4e25\u683c\u6e10\u8fdb\u4e0a\u754c\uff0c\u4e25\u683c\u5c0f\u4e8e</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#ch03-list","title":"Ch.03 List","text":"<ul> <li>ADT \u7684\u6982\u5ff5</li> <li>Sequential List<ul> <li>Imp<ul> <li>Array</li> <li>Linked List</li> <li>Cursor Imp</li> </ul> </li> <li>App<ul> <li>\u591a\u9879\u5f0f\u8868\u793a</li> <li>Multilists \u77e9\u9635\u7a00\u758f\u8868\u793a</li> </ul> </li> </ul> </li> <li>Stack ADT<ul> <li>\u94fe\u8868\u5b9e\u73b0\u3001\u6570\u7ec4\u5b9e\u73b0\u3001dummy head node</li> <li>\u5e94\u7528<ul> <li>Balancing Symbols \u7b26\u53f7\u68c0\u67e5</li> <li>Postfix Evaluation \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c</li> <li>Infix to Postfix Conversion \u4f18\u5148\u7ea7&gt;=\u5f53\u524d\u5143\u7d20\uff0c\u51fa\u6808\uff0c\u6ce8\u610f\u62ec\u53f7</li> </ul> </li> </ul> </li> <li>Queue ADT*<ul> <li>\u5faa\u73af\u961f\u5217\u5b9e\u73b0</li> <li><code>rear</code> \u548c <code>front</code> \u5dee 2 \u662f\u6ee1\uff0c\u5dee 1 \u662f\u7a7a</li> <li>\u6700\u5927\u5bb9\u91cf\u662f <code>n-1</code></li> <li><code>Enqueue</code> \u5728 <code>++rear</code> \u653e\u5165\u5143\u7d20</li> <li><code>Dequeue</code> \u5728 <code>fornt++</code> \u5220\u9664\u5143\u7d20</li> <li>\u9700\u8981\u6267\u884c\u6ee1/\u7a7a\u68c0\u67e5</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#ch04-trees","title":"Ch.04 Trees","text":"<ul> <li>Preliminaries<ul> <li>Degree</li> <li>parent, children sibilings, leaf</li> <li>Path \u53ea\u80fd\u662f\u4ece\u4e0a\u5f80\u4e0b\u7684</li> <li>Depth, height(The length of the longest path from this node to a leaf) \u6df1\u5ea6\u5c31\u662f\u5f80\u6839\u627e\u7684\u957f\u5ea6\uff0c\u9ad8\u5ea6\u5c31\u662f\u4f5c\u4e3a\u6839\u5f80\u53f6\u5b50\u627e\u7684\u957f\u5ea6</li> <li>ancestors, descendants</li> </ul> </li> <li>Imp<ul> <li>\u53ef\u4ee5\u7528\u7ebf\u6027\u8868\u8868\u793a \u56e0\u4e3a\u5185\u5b58\u5c31\u662f\u7ebf\u6027\u7684\uff0c\u6ca1\u6709\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u4e0d\u80fd\u7ebf\u6027\u8868\u793a</li> <li>FirstChild-NextSibiling \u8868\u793a\uff0c\u6240\u6709\u7684\u6811\u90fd\u80fd\u7b49\u4ef7\u4e3a binary tree\uff0c\u4f46\u662f unordered tree \u8868\u8fbe\u53ef\u80fd\u4e0d\u552f\u4e00<ul> <li>preorder \u8fd8\u662f preorder\uff0c\u4f46\u662f postorder \u53d8\u6210\u4e86 inorder</li> </ul> </li> </ul> </li> <li>Binary Tree<ul> <li>App<ul> <li>Expression Tree (syntax trees)</li> </ul> </li> <li>Traversals<ul> <li>preorder postorder inorder levelorder (\u9700\u8981\u961f\u5217)<ul> <li><code>iter_inorder</code> \u4f7f\u7528\u4e00\u4e2a\u6808\u5b8c\u6210\u975e\u9012\u5f52\u904d\u5386</li> </ul> </li> <li>expression tree \u4e0d\u540c\u7684\u904d\u5386\u65b9\u5f0f\u5c31\u80fd\u5f97\u5230\u4e0d\u540c\u7684\u8868\u8fbe\u5f0f</li> <li>print directory \u4f7f\u7528 preorder\uff0c\u56e0\u4e3a\u5148\u6253\u5370\u7236\u76ee\u5f55</li> <li>\u8ba1\u7b97\u6587\u4ef6\u5939\u5927\u5c0f\uff0c\u4f7f\u7528 postorder\uff0c\u56e0\u4e3a\u8981\u5411\u7236\u8282\u70b9\u8fd4\u56de\u503c</li> </ul> </li> <li>\u7ebf\u7d22\u4e8c\u53c9\u6811\uff08\u51e0\u4e4e\u4e0d\u8003\uff09 \u5982\u679c <code>left</code> \u4e3a\u7a7a\uff0c\u6362\u6210\u4e2d\u5e8f\u904d\u5386\u7684\u524d\u9a71\uff0c\u5982\u679c <code>right</code> \u4e3a\u7a7a\uff0c\u6362\u6210\u4e2d\u5e8f\u904d\u5386\u7684\u540e\u7ee7\uff0c\u53ea\u662f\u65b9\u4fbf\u67e5\u627e\u800c\u5df2</li> <li>\u5176\u4ed6\u4e8c\u53c9\u6811<ul> <li>\u659c\u6811 skewed binary tree\uff0c\u9000\u5316\u6210\u7ebf\u6027\u7ed3\u6784</li> <li>\u5b8c\u5168 complete binary tree \u9664\u4e86\u6700\u540e\u4e00\u5c42\uff0c\u5168\u90e8\u586b\u6ee1 \u5f88\u50cf\u5806</li> </ul> </li> <li>properties<ul> <li>\u53f6\u5b50\u8282\u70b9\u6570\u6bd4\u4e8c\u5ea6\u8282\u70b9\u6570\u591a 1 \\(n_0=n_2+1\\)</li> </ul> </li> </ul> </li> <li>The Search Tree ADT<ul> <li>Imp<ul> <li><code>find</code> \u5c3e\u9012\u5f52\u4f18\u5316\u4e3a\u5faa\u73af\u7684\u4f8b\u5b50</li> <li><code>insert</code> \u7684\u9012\u5f52\u64cd\u4f5c\u9700\u8981\u8fd4\u56de </li> <li><code>Delete</code><ul> <li>\u5982\u679c\u662f\u4e8c\u5ea6\u8282\u70b9\uff0c\u66ff\u6362\u4e3a\u5de6\u5b50\u6811\u6700\u5927\u6216\u53f3\u5b50\u6811\u6700\u5c0f\uff0c\u5bf9\u88ab\u6362\u8fc7\u6765\u7684\u8282\u70b9\u9012\u5f52\u8fdb\u884c <code>delete</code></li> <li>lazy deletion</li> </ul> </li> </ul> </li> <li>\\(height(bst)\\in[h-1,\\lceil\\log_2(n+1)\\rceil-1]\\)</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#ch05-priority-queues-heaps","title":"Ch.05 Priority Queues (Heaps)","text":"<ul> <li>sentinel value \u662f\u4e0d\u53ef\u80fd\u51fa\u73b0\u7684\u6700\u5c0f/\u6700\u5927\u503c</li> <li><code>insert</code> \u653e\u5230\u672b\u5c3e\uff0c<code>PercolateUp</code></li> <li><code>DeleteMin</code> \u672b\u5c3e\u653e\u5230\u5f00\u5934\uff0c<code>PercolateDown</code></li> <li><code>DecreaseKey</code> \u76f4\u63a5 <code>PercolateUp</code></li> <li><code>IncreaseKey</code> \u76f4\u63a5 <code>PercolateDown</code></li> <li><code>Delete</code> \u5220\u9664\u67d0\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20\uff1a <code>DecreaseKey \\infty</code> \u7136\u540e\u8fdb\u884c <code>DeleteMin</code></li> <li><code>BuildHeap</code> \u76f4\u63a5\u653e\uff0c\u7136\u540e\u5806\u6bcf\u4e2a\u7236\u8282\u70b9 <code>PercolateDown</code><ul> <li>\u4e5f\u79f0\u4e3a Linear Algorithm \\(T(N)=O(N)\\)</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#ch06-sorting","title":"Ch.06 Sorting","text":"<ul> <li>Insertion Sort \u63d2\u5165\u6392\u5e8f stable<ul> <li>best case \\(O(N)\\)</li> </ul> </li> <li>Lower bound for simple sorting algorithm: Any sorting algirithm that sorts by exchanging adjacent elements requires \\(\\Omega(N^2)\\) on average</li> <li>Shellsort \u5e0c\u5c14\u6392\u5e8f Shellsort is unstable<ul> <li>Naive Shellsort: h \u6bcf\u6b21\u9664 2<ul> <li>worst case \\(\\Theta(N^2)\\)</li> </ul> </li> <li>Hibbard's increments<ul> <li>worst case \\(\\Theta(N^{3/2})\\)</li> <li>conjucture: avg \\(O(N^{5/4})\\)</li> </ul> </li> <li>Sedgewick's best sequence<ul> <li>conjucture: avg \\(O(N^{7/6})\\), worst \\(O(N^{4/3})\\)</li> </ul> </li> </ul> </li> <li>Heapsort \u5806\u6392\u5e8f unstable<ul> <li>\u5e73\u5747\u6bd4\u8f83\u6b21\u6570 \\(2N\\log N-O(N \\log \\log N)\\)</li> <li>\u4f7f\u7528\u4e0d\u7ecf\u6d4e\uff0c\u5e38\u6570\u6bd4\u8f83\u5927</li> </ul> </li> <li>Mergesort \u5f52\u5e76\u6392\u5e8f Mergesort is stable<ul> <li>\u9012\u5f52\u5916\u90e8\u5b9a\u4e49 <code>TmpArray</code><ul> <li>\u5982\u679c\u5185\u90e8\u5b9a\u4e49 \\(S=O(N\\log N)\\)</li> <li>\u5982\u679c\u5916\u90e8\u5b9a\u4e49 \\(S=O(N)\\)</li> </ul> </li> <li>\u8fdb\u884c\u5212\u5206</li> <li>\u6bcf\u4e00\u6b21\u5f52\u5e76\uff0c\u4ece <code>A</code> \u8bfb\u53d6\uff0c\u653e\u5230 <code>TmpArray</code> \u4e2d\uff0c\u7136\u540e\u518d\u590d\u5199\u5230 <code>A</code></li> </ul> </li> <li>Quicksort \u5feb\u901f\u6392\u5e8f unstable<ul> <li>\u590d\u6742\u5ea6<ul> <li>Time: best/average case \\(O(N\\log N)\\) worst case \\(O(N^2)\\)</li> <li>Space: best \\(O(\\log N)\\) worst \\(O(N)\\)</li> </ul> </li> <li>Strategy<ul> <li><code>pivot</code> \u4f7f\u7528 <code>Medium3</code> \u6765\u83b7\u53d6</li> <li>\u5728 partition \u4e2d\uff0c\u5982\u679c <code>key == pivot</code> \u90fd\u505c\u4e0b\u4fe9\u8fdb\u884c <code>swap</code>\uff0c\u8fd9\u6837\u80fd\u591f\u4fdd\u8bc1 partition \u5927\u5c0f\u76f8\u8fd1\uff0c\u65f6\u95f4\u8fd8\u662f \\(O(N\\log N)\\)</li> </ul> </li> <li>Quicksort is slower than insertion sort for small \\(N\\le 20\\)</li> </ul> </li> <li>Table Sort<ul> <li>\u521b\u5efa pointer \u6765\u5904\u7406\u5927\u578b\u7ed3\u6784\uff0cpointer \u5c31\u662f key\uff0c\u7136\u540e\u5806</li> <li>Every permutation is made up of disjoint cycles</li> <li>worst case, \\(\\lfloor N/2\\rfloor\\) cycles and \\(\\lfloor 3N/2\\rfloor\\) record moves</li> <li>\\(T=O(mN)\\) where \\(m\\) is the size of the structure</li> </ul> </li> <li>A general lower bound for sorting based on comparisons \\(O(N\\log N)\\)</li> <li>Bucket Sort stable<ul> <li>\u8bbe\u8ba1\u6240\u6709\u53ef\u80fd\u7684 <code>slot</code>\uff0c\u76f4\u63a5\u653e\u5165</li> </ul> </li> <li>Radix Sort stable<ul> <li>\u8fdb\u884c\u591a\u8f6e\u6392\u5e8f\uff0c\u6bcf\u6b21\u6392\u4e00\u4e2a\u6570\u4f4d\uff0cLeast Significant Digit First</li> <li>\\(T=O(P(N+B))\\)<ul> <li>\\(P\\) \u662f number of passes\uff0c\u4e5f\u5c31\u662f\u4f4d\u6570</li> <li>\\(B\\) \u662f number of buckets</li> </ul> </li> <li>MSD Approach: Parallel sort</li> <li>LSD Approach: serial sort</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#ch07-hashing","title":"Ch.07 Hashing","text":"<ul> <li>Identifier density \\(n/T\\)</li> <li>loading density \\(n/(sb)\\)</li> <li>collision: \\(f(key_1)=f(key_2),\\,key_1\\ne key_2\\)</li> <li>\\(f(x)=(\\sum x[N-i-1]*32^i)\\%TableSize\\)</li> <li>Separate Chaining: \u5934\u63d2\u6cd5</li> <li>Open Addressing \\(index=(hash(key) + f(i)) \\% TableSize\\) \u6ce8\u610f\u53ea\u6709 i \u5728\u589e\u52a0<ul> <li>Linear Probing</li> <li>Quadratic Probing<ul> <li>If quadratic probing is used, and the table size is prime, then a new element can always be inserted if the table is at least half empty.\u8868\u7684\u5927\u5c0f\u4e3a\u8d28\u6570\uff0c\u90a3\u4e48\u5982\u679c\u8868\u81f3\u5c11\u534a\u7a7a\u7684\u8bdd\uff0c\u4e00\u5b9a\u53ef\u4ee5\u63d2\u5165</li> <li>\u5982\u679c\u662f\u8d28\u6570\u800c\u4e14\u53ef\u4ee5\u5199\u6210 \\(4 k+3\\)\uff0c\u4e14\u91c7\u7528 \\(f(i)=\\pm i^2\\)\uff0c\u90a3\u4e48\u53ea\u8981\u6709\u7a7a\u4f4d\u5c31\u884c</li> </ul> </li> <li>Double Hashing \\(f(i)=i*hash_2(x)\\) \u7b2c\u4e8c\u4e2a\u54c8\u5e0c\u51fd\u6570</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#ch08-disjoint-set","title":"Ch.08 Disjoint Set","text":"<ul> <li>Basic worst case \\(\\Theta(N^2)\\), skewed tree, where 1 = 2, 2 = 3, 3 = 4, ...</li> <li>Smart Union Algorithm \u90fd\u53eb\u505a Union-by-rank<ul> <li>Union-by-size \u642d\u914d Path-Compression</li> <li>Union-by-height</li> </ul> </li> <li>\\(\\alpha\\) \u53cd Ackermann \u51fd\u6570\uff0c\u51e0\u4e4e\u7b49\u4e8e\u5e38\u6570</li> <li>\u5982\u679c\u6709 \\(M\\) \u4e2a find\uff0c\\(N-1\\) \u4e2a unions\uff0c\\(T=O(M\\alpha(M,N))\\)</li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#ch09-graph-algorithms","title":"Ch.09 Graph Algorithms","text":"<ul> <li>Definitions<ul> <li>complete</li> <li>path<ul> <li>simple path</li> <li>cycle</li> </ul> </li> <li>connected graph / component</li> <li>tree \u8fde\u901a\u65e0\u73af\u56fe</li> <li>DAG: \u6709\u5411\u65e0\u73af\u56fe</li> <li>Strongly/Weekly connected</li> </ul> </li> <li>Representation<ul> <li><code>adj_mat</code></li> <li><code>adj_lists</code></li> <li><code>adj_multilists</code>\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u662f\u4e00\u6761\u8fb9\uff0c\u5b58\u7740\u8d77\u70b9\u548c\u7ec8\u70b9\u4ee5\u53ca <code>mark</code>\uff0c\u4e24\u4e2a\u51fa\u6307\u9488\u6307\u5411\u5404\u81ea vertex \u8fde\u63a5\u7684\u4e0b\u4e00\u6761\u8fb9</li> </ul> </li> <li>Topological Sort \u62d3\u6251\u6392\u5e8f<ul> <li>\u4f7f\u7528\u4e00\u4e2a\u961f\u5217</li> <li>\\(T=O(|V|+|E|)\\)<ul> <li>\u56e0\u4e3a\u8981\u904d\u5386\u6240\u6709\u8fb9\uff0c\u7edf\u8ba1\u5165\u5ea6</li> <li>\u4e5f\u8981\u904d\u5386\u6240\u6709\u70b9\uff0c\u8fdb\u884c\u5220\u9664</li> </ul> </li> </ul> </li> <li>Shortest Path Algorithms Dijkstra Algorithm<ul> <li>unweighted: \u4f7f\u7528\u4e00\u4e2a queue \u6765\u8bb0\u5f55\u201c\u63a2\u7d22\u5916\u5ef6\u201d\u7684 vertex</li> <li>weighted Dijkstra<ul> <li>\u6bcf\u6b21\u90fd\u904d\u5386\uff0cbetter if graph is dense<ul> <li>\\(T=O(|E|\\log |V|)\\)</li> </ul> </li> <li>\u5efa\u7acb MinHeap\uff0cbetter if graph is sparse<ul> <li>\\(T=O(|E|\\log|V|)\\)</li> <li>\u4f46\u662f\u9700\u8981\u989d\u5916\u7684 \\(S=O(|E|)\\)\uff0c\u4ee5\u53ca\u9700\u8981\u6267\u884c <code>deleteMin</code></li> </ul> </li> </ul> </li> <li>graph with negative costs: \u53ef\u80fd\u5b58\u5728\u89e3\uff0c\u53ef\u80fd\u6b7b\u5faa\u73af</li> </ul> </li> <li>AOE Networks<ul> <li>EC: earliest completion \u4ece\u5934\u5230\u5c3e\u53d6\u6700\u5927</li> <li>LC: lastest completion \u4ece\u5c3e\u5230\u5934\u53d6\u6700\u5c0f</li> <li>Critical Path: \u6ca1\u6709\u677e\u5f1b\u65f6\u95f4\u7684\u8def\u5f84</li> </ul> </li> <li>Network Flow Problems \u7f51\u7edc\u6d41\u95ee\u9898<ul> <li>Flow Network \\(G_f\\)</li> <li>Residual Network \\(G_r\\)</li> <li>\u6bcf\u4e00\u6b21\uff0c\u5728 \\(G_r\\) \u4e2d\u627e\u5230\u4e00\u6761\u901a\u8def\uff0c\u90a3\u4e48\u66f4\u65b0\u8fd9\u6761\u901a\u8def\u4e0a\u74f6\u9888\u5904\u7684\u6d41\u91cf\u5230 \\(G_f\\)\uff0c\u5e76\u4e14\u5728 \\(G_r\\) \u4e2d\u66f4\u65b0\u5269\u4f59\u6d41\u91cf\u548c\u53cd\u5411\u6d41\u91cf</li> <li>analysis<ul> <li>\\(T=O(f*|E|)\\)</li> </ul> </li> </ul> </li> <li>Minimum Spanning Tree \u6700\u5c0f\u751f\u6210\u6811<ul> <li>Prim \u4ece\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u6536\u96c6\u8fb9<ul> <li>\\(O(|V|^2)\\) \u6216\u8005\u4f7f\u7528\u4e86\u66f4\u9ad8\u7ea7\u7684\u56fe\u8868\u793a\u7684\u8bdd \\(O(|E|\\log|V|)\\) or \\(O(|V|\\log|E|)\\) \u9002\u5408 Dense Graph</li> </ul> </li> <li>Kruskal \u4ece\u68ee\u6797\u5f00\u59cb\uff0c\u627e\u6700\u5c0f\u7684\u8fb9\u5c06\u5b83\u4eec\u8fde\u63a5\u8d77\u6765<ul> <li>\\(T=O(|E|\\log|E|)\\) \u9002\u5408\u5728 Sparse Graph</li> </ul> </li> </ul> </li> <li>DFS Use DFS to obtain a apanning tree of G<ul> <li>Biconnectivily \u4e0d\u5b58\u5728\u5272\u70b9\u7684\u56fe</li> <li>\u6c42\u89e3 biconnected components<ol> <li>\u4f7f\u7528 DFS \u83b7\u5f97\u4e00\u4e2a spanning tree<ol> <li>\u5176\u4e2d\u6709 DFS \u7f16\u53f7\uff0c\u4e5f\u5c31\u662f \\(Num(v_i)\\)</li> <li>\u5176\u4e2d\u5b58\u5728 back edge\uff0c\u4e5f\u5c31\u662f\u6811\u91cc\u6ca1\u6709\u4f46\u662f\u56fe\u91cc\u6709\u7684\u8fb9</li> </ol> </li> <li>\u627e\u5230\u6240\u6709\u7684\u5272\u70b9<ol> <li>\u4ec0\u4e48\u662f\u5272\u70b9<ol> <li>root\uff0c\u81f3\u5c11\u6709\u4e24\u4e2a\u5b69\u5b50</li> <li>\u5176\u4ed6\u70b9\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a\u5b69\u5b50\uff0c\u800c\u4e14\u4e0d\u80fd\u901a\u8fc7\u540e\u4ee3\u7684 back edge \u56de\u5230\u7956\u5148</li> </ol> </li> <li>\\(Low(u)\\) \u81ea\u5df1\u7684 Num\uff0c\u5b69\u5b50\u7684 Low\uff0cback edge \u53e6\u4e00\u8fb9\u7684 Num \u7684\u603b\u6700\u5c0f\u503c</li> </ol> </li> <li>\u5f97\u51fa\u7ed3\u679c<ol> <li>\u5982\u679c\u662f root\uff0c\u90a3\u4e48\u81f3\u5c11\u4e24\u4e2a\u5b69\u5b50</li> <li>\u6216\u8005\u5982\u679c\u662f\u5176\u4ed6\u70b9\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a\u5b69\u5b50\u7684 Low \u6bd4\u81ea\u5df1\u7684 Num \u5927\u5c31\u597d</li> </ol> </li> </ol> </li> <li>Euler Circuits \\(T=O(|E|+|V|)\\)</li> </ul> </li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#\u5386\u5e74\u5377","title":"\u5386\u5e74\u5377","text":""},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#15-16-\u79cb\u51ac\u671f\u672b\u6a21\u62df-\u4e8c\u53c9\u6811\u68c0\u67e5","title":"15-16 \u79cb\u51ac\u671f\u672b\u6a21\u62df \u4e8c\u53c9\u6811\u68c0\u67e5","text":"<ul> <li>binary search tree \u8981\u6c42\u6bcf\u4e00\u4e2a\u6839\u8282\u70b9\u5927\u4e8e\u5de6\u5b50\u6811\u6700\u5927\u7684\uff0c\u5c0f\u4e8e\u53f3\u5b50\u6811\u6700\u5c0f\u7684</li> <li>\u4f7f\u7528\u9012\u5f52\uff0c\u540c\u65f6\u8fdb\u884c\u5224\u65ad\u548c\u6df1\u5ea6\u8ba1\u7b97 <code>cbst(BinTree T, int height, int max, int min)</code></li> <li>\u4f7f\u7528\u5168\u5c40\u53d8\u91cf <code>int in_seq[1000] = {0}, top = -1, mheight = 0, valid = 1;</code></li> <li>\u4f7f\u7528 <code>stdlib.h</code> \u4e2d\u7684 <code>qsort</code>\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u627e\u5230 K \u5c0f\u7684\u5143\u7d20</li> </ul> <p><code>qsort</code> \u4f7f\u7528\u793a\u4f8b</p> <pre><code>int cmp(const void *a, const void *b){\n\u00a0 \u00a0 return *(int*)a - *(int*)b;\n}\n\nint main(void)\n{\n\u00a0 \u00a0 int seq[1000];\n\u00a0 \u00a0 for(int i = 0; i &lt; 1000; i++) seq[i] = rand();\n\u00a0 \u00a0 qsort(seq, 1000, sizeof(int), cmp);\n\u00a0 \u00a0 for(int i = 0; i &lt; 1000; i++) printf(\"%d\\n\", seq[i]);\n\u00a0 \u00a0 return 0;\n}\n</code></pre> <pre><code>int cmp(const void* a, const void* b)\n{\n    return *(int*)a - *(int*)b;\n}\n\nqsort(thisSeq, 1000, sizeof(int), cmp);\n</code></pre>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#16-17-\u79cb\u51ac\u671f\u672b\u6a21\u62df-\u6700\u5c0f\u5171\u540c\u7956\u5148\u95ee\u9898","title":"16-17 \u79cb\u51ac\u671f\u672b\u6a21\u62df \u6700\u5c0f\u5171\u540c\u7956\u5148\u95ee\u9898","text":"<ul> <li>\u5148\u786e\u5b9a\u6700\u5c0f\u7956\u5148\uff0c\u53ea\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u5206\u53c9\u70b9\u5373\u53ef\uff0c\u4e5f\u5c31\u662f\u4e0e\u5b50\u6811\u6839\u8282\u70b9\u6bd4\u8f83\u53d1\u73b0\u4e00\u4e2a\u5927\u4e00\u4e2a\u5c0f\uff0c\u6216\u8005\u51fa\u73b0\u4e00\u4e2a\u7b49\u4e8e\u7684\u65f6\u5019</li> <li>\u7136\u540e\u9a8c\u8bc1\u5408\u7406\u6027\uff0c\u4ece\u8fd9\u4e2a\u516c\u5171\u9876\u70b9\u5f00\u59cb\u641c\u4e24\u4e2a\u503c\uff0c\u5982\u679c\u90fd\u641c\u5230\u4e86\uff0c\u8bf4\u660e\u6709\u6548\uff0c\u8fd4\u56de\u516c\u5171\u7956\u5148\u7684 <code>key</code>\uff1b\u5982\u679c\u6709\u4e00\u4e2a\u6ca1\u641c\u5230\uff0c\u90fd\u8fd4\u56de <code>ERROR</code></li> </ul>"},{"location":"ZJU-Fundamentals%20of%20Data%20Structures/Cheat%20Sheet.html#19-20-\u79cb\u51ac\u671f\u672b\u6a21\u62df-complete-binary-search-tree","title":"19-20 \u79cb\u51ac\u671f\u672b\u6a21\u62df Complete Binary Search Tree","text":"<ul> <li>\u5efa\u7acb\u4e00\u4e2a BST</li> <li>\u5224\u65ad\u662f\u5426 Complete</li> <li>\u7ed9\u51fa preorder traversal sequence</li> </ul> <p>\u601d\u8def</p> <ul> <li>\u9996\u5148\uff0c\u5982\u4f55\u8868\u793a\u6811\u7684\u7ed3\u6784\uff1f<ul> <li>\u4f7f\u7528\u6570\u7ec4\u8fdb\u884c\u8868\u793a\uff0c\u6839\u7684\u4e0b\u6807\u53d6 0</li> <li>\u6ce8\u610f\u5c06\u6570\u7ec4\u521d\u59cb\u5316\u6210 <code>-1</code> \u8868\u793a\u672a\u5360\u7528</li> </ul> </li> <li>\u7136\u540e\uff0c\u8fdb\u884c <code>insert</code> \u9012\u5f52\u64cd\u4f5c</li> </ul>"},{"location":"ZJU-HPC101/index.html","title":"HPC101","text":""},{"location":"ZJU-HPC101/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>Lec.02 \u4f53\u7cfb\u7ed3\u6784\u4e0e\u9ad8\u6027\u80fd\u8ba1\u7b97\u57fa\u7840</li> <li>Lec.03 \u9ad8\u6027\u80fd\u8ba1\u7b97\u65b9\u6cd5\u5b66</li> <li>Lec.04 \u96c6\u7fa4\u8f6f\u786c\u4ef6\u53ca\u8fd0\u7ef4\u57fa\u7840</li> <li>Lec.05 \u5411\u91cf\u5316\u8ba1\u7b97</li> <li>Lec.06 CUDA C \u7f16\u7a0b\u57fa\u7840</li> <li>Lec.07 OpenMP, MPI \u5e76\u884c\u8ba1\u7b97\u57fa\u7840</li> <li>Lec.09 Introduction to Machine Learning</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html","title":"Lec.02 \u4f53\u7cfb\u7ed3\u6784\u4e0e\u9ad8\u6027\u80fd\u8ba1\u7b97\u57fa\u7840","text":""},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#intro","title":"Intro","text":"<ul> <li>\u80cc\u666f\uff1a\u6570\u636e\u79d1\u5b66\u3001\u8ba1\u7b97\u9700\u6c42</li> <li>\u65b9\u6cd5\uff1a\u589e\u52a0\u8282\u70b9\u6570</li> <li>\u6311\u6218<ul> <li>\u9ad8\u901f\u4e92\u8054</li> <li>\u5185\u8054\u67b6\u6784</li> <li>\u5927\u89c4\u6a21\u5904\u7406\u7684\u8f93\u5165\u548c\u8f93\u51fa\uff081M+cores\uff09</li> <li>\u50a8\u5b58\u67b6\u6784\u548c\u50a8\u5b58\u5bb9\u91cf</li> <li>\u7f16\u7a0b/\u8c03\u8bd5/\u5206\u6790</li> <li>\u8d44\u6e90\u7ba1\u7406\uff0c\u4efb\u52a1\u8c03\u5ea6</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#prerequisite-checklist","title":"Prerequisite Checklist","text":"<ul> <li>Coding</li> <li>Commpiling</li> <li>Debugging (gdb)</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#isa-and-x86-intructions","title":"ISA and x86 Intructions","text":""},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#c-\u7f16\u7a0b","title":"C \u7f16\u7a0b","text":"<ul> <li>\u9ed1\u76d2\u64cd\u4f5c<ul> <li>\u987a\u5e8f\u6267\u884c</li> <li>\u62bd\u8c61\u5185\u5b58</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#\u6307\u4ee4","title":"\u6307\u4ee4","text":"<ul> <li>\u6307\u4ee4\u96c6 (ISA)<ul> <li>x86, x86-64, ARM, MIPS, Risc-V</li> </ul> </li> <li>\u901a\u5e38\u662f\u9ad8\u7ea7\u8bed\u8a00\u7f16\u8bd1\u4ea7\u751f</li> <li>Code forms<ul> <li>Machine Code: Byte-level \u6307\u4ee4</li> <li>Assembly Code: \u673a\u5668\u7801\u7684\u6587\u672c\u8868\u8fbe</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#assemblymachine-code-view","title":"Assembly/Machine Code View","text":"<ul> <li>CPU<ul> <li>PC (Program counter)</li> <li>Register file</li> <li>Condition Code</li> </ul> </li> <li>Memory<ul> <li>address</li> <li>data</li> <li>instructions</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#assembly-operations","title":"Assembly Operations","text":"<ul> <li>Arithmetic and Logic operations (e.g. add, xor)</li> <li>Transferring data between memory and register (mov)</li> <li>Control Logic<ul> <li>Jumps to/from procedures (call, ret)</li> <li>Conditional branches (e.g. jle, jne)</li> <li>Indirect branches (e.g. jmp * .L1(,%rdi,8))</li> </ul> </li> <li>Miscellaneous</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#x86-64-registers","title":"x86-64 Registers","text":"<ul> <li>Integerd registers 64bits each</li> <li>SIMD registers 512bits each \u5355\u6307\u4ee4\u591a\u6570\u636e</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#modern-computer-systems","title":"Modern Computer Systems","text":"<ul> <li>Multicore, multi-socket</li> <li>Instruction-level parallelism<ul> <li>Pipelining, superscalar</li> <li>\u4e71\u5e8f\u6267\u884c</li> <li>\u6295\u673a\u6267\u884c</li> </ul> </li> <li>Complex memory hierarchy</li> <li>NOT sequential execution nor flat memory</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#processor-architecture","title":"Processor Architecture","text":""},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#isa-vs-microarchitecture","title":"ISA vs. Microarchitecture","text":"<ul> <li>ISA is specification</li> <li>Microarchitecture is implementation<ul> <li>\u4e0d\u540c\u7684\u5fae\u67b6\u6784\u662f\u9488\u5bf9\u4e0d\u540c\u76ee\u7684\u4f18\u5316\u7684\u5b9e\u73b0</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#what-does-a-core-do","title":"What does a core do?","text":"<ul> <li>OS assigns a (software) therad to it</li> <li>It then executes instructions in the order specified by the thread</li> <li>Stages<ul> <li>Fetch: \u4ece\u5185\u5b58\u8bfb\u53d6\u4e0b\u4e00\u6761\u6307\u4ee4</li> <li>Decode: \u89e3\u91ca\u9700\u8981\u6267\u884c\u7684\u64cd\u4f5c\uff0c\u5e76\u8bfb\u53d6\u8f93\u5165</li> <li>Execute: \u8fdb\u884c\u64cd\u4f5c</li> <li>Commit: \u5c06\u7ed3\u679c\u5199\u56de\u5bc4\u5b58\u5668\u6216\u5185\u5b58<ul> <li>\u4e71\u5e8f\u6267\u884c\uff0c\u987a\u5e8f\u63d0\u4ea4</li> </ul> </li> </ul> </li> <li>\u9010\u6761\u6267\u884c \u6bcf\u4e2a\u5468\u671f\u6267\u884c 0.25 \u4e2a\u6307\u4ee4 -&gt; \u6d41\u6c34\u7ebf \u6bcf\u4e2a\u5468\u671f\u6267\u884c\u4e00\u4e2a\u6307\u4ee4</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#pipeline-hazards","title":"Pipeline Hazards","text":"<ul> <li>\u65f6\u5e8f\u9519\u8bef<ul> <li>Data hazards: \u7b2c\u4e8c\u6761\u6307\u4ee4\u4f9d\u8d56\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c\uff0c\u90a3\u4e48\u8981\u5206\u5f00\u6267\u884c</li> <li>Control hazards: e.g. if \u8fd8\u672a\u5224\u65ad\u5c31\u6267\u884c\u5185\u90e8\u8bed\u53e5\uff0c\u4f46\u662f\u540e\u9762\u53d1\u73b0\u8981\u8df3\u8f6c\uff0c\u90a3\u4e48\u90e8\u5206\u6d41\u6c34\u7ebf\u65e0\u6548</li> <li>Structural hazards: \u786c\u4ef6\u4e0d\u80fd\u6ee1\u8db3 CPU \u7684\u8981\u6c42\uff0ce.g. \u5185\u5b58\u4e0d\u80fd\u6ee1\u8db3\u8bfb\u53d6\u901f\u7387</li> </ul> </li> <li>\u7b80\u5355\u6d41\u6c34\u7ebf CPU \u53ea\u80fd\u505c\u673a</li> <li>\u73b0\u4ee3\u5904\u7406\u5668\u7684\u89e3\u51b3\u65b9\u5f0f<ul> <li>\u5206\u652f\u9884\u6d4b</li> <li>\u6295\u673a\u6267\u884c</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#memory-hierarchy","title":"Memory Hierarchy","text":""},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#random-access-memory","title":"Random Access Memory","text":"<ul> <li>two varieties<ul> <li>SRAM: fast, costly</li> <li>DRAM: slow, cheap, needs refresh</li> </ul> </li> <li>DRAM \u901a\u5e38\u662f dual in-line memory modules</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#x86-64linux-memory-layout","title":"x86-64/Linux Memory Layout","text":"<ul> <li>Stack<ul> <li>Runtime stack (8MB limit)</li> <li>local variables</li> </ul> </li> <li>Heap<ul> <li>\u52a8\u6001\u5185\u5b58\u5206\u914d</li> <li>malloc</li> </ul> </li> <li>Data<ul> <li>\u9759\u6001\u5206\u914d\u6570\u636e</li> <li>e.g. global vars, static vars, string constants</li> </ul> </li> <li>Text/Shared Libraries<ul> <li>\u53ef\u6267\u884c\u673a\u5668\u7801</li> <li>\u53ea\u8bfb</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#virtual-memory","title":"Virtual Memory","text":"<ul> <li>OS \u4f7f\u7528\u865a\u62df\u5185\u5b58\u6765\u9694\u7edd\u4e0d\u540c\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u7ed9\u6bcf\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u7ebf\u6027\u7684\u5730\u5740\u7a7a\u95f4</li> <li>Address spaces are comparted into pages (typical size = 4kB)</li> <li>\u8bbf\u95ee\u865a\u62df\u5185\u5b58\u5730\u5740\uff0cOS \u548c\u786c\u4ef6\u4f1a\u5c06\u5176\u7ffb\u8bd1\u4e3a\u7269\u7406\u5730\u5740\uff0c\u5728\u4e3b\u5185\u5b58\u4e2d\u8bbf\u95ee</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#locality","title":"Locality","text":"<ul> <li>Principle: \u7a0b\u5e8f\u901a\u5e38\u5728\u76f8\u8fd1\u65f6\u95f4\u548c\u76f8\u8fd1\u7a7a\u95f4\u8bbf\u95ee\u5185\u5b58</li> <li>Temporal locality</li> <li>Spatial locality: \u53ef\u4ee5\u63d0\u524d\u5c06\u6570\u636e\u51c6\u5907\u5230\u79bb CPU \u66f4\u8fd1\u7684\u4f4d\u7f6e</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#cache","title":"Cache","text":"<ul> <li>A smaller, faster storage device that acts as a staging area for a subset of the data in a larger, slow device CPU \u4e2d\u7684\u5c0f\u5185\u5b58</li> <li>\u548c\u5185\u5b58\u7684\u94fe\u63a5\u5173\u7cfb<ul> <li>\u5168\u76f8\u8fde\uff1a\u6bcf\u6b21\u88ab\u8bbf\u95ee\u7684\u653e\u5728 cache</li> <li>\u76f4\u63a5\u76f8\u8fde</li> <li>\u7ec4\u76f8\u8fde</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#cache-organizaiton","title":"Cache Organizaiton","text":""},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#cache-usage","title":"Cache Usage","text":"<ul> <li>Read hit</li> <li>Read miss</li> <li>Write hit</li> <li>Write miss</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#data-and-instruction-caches","title":"Data and Instruction Caches","text":"<ul> <li>\u73b0\u4ee3\u8ba1\u7b97\u673a\u90fd\u662f\u5206\u5f00\u7684</li> <li>\u975e\u7eaf von Neumann \u7ed3\u6784</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#multicaore-cache-hierarchy","title":"Multicaore Cache Hierarchy","text":"<ul> <li>L1i, L1d cache</li> <li>L2 unified cache</li> <li>L3 unified cache</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#concurrency-basics","title":"Concurrency Basics","text":""},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#processes-vs-threads","title":"Processes vs. Threads","text":"<ul> <li>Similar<ul> <li>\u6bcf\u4e2a\u90fd\u6709\u903b\u8f91\u63a7\u5236\u6d41</li> <li>\u6bcf\u4e2a\u90fd\u80fd\u540c\u6b65\u8fd0\u884c</li> <li>Each is context switched</li> </ul> </li> <li>Different<ul> <li>\u4e00\u4e2a\u8fdb\u7a0b\u7684\u4e0d\u540c\u7ebf\u7a0b\u5171\u4eab\u6240\u6709\u7684\u4ee3\u7801\u548c\u6570\u636e\uff08\u9664\u4e86 local stack\uff09</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#critical-section","title":"Critical Section","text":""},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#x86-microarchitecture","title":"x86 Microarchitecture","text":""},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#pipelining","title":"Pipelining","text":"<ul> <li>Much more complicated: 10+-stage\uff0c\u4e71\u5e8f\u6267\u884c\uff0c\u591a\u6838\uff0c\u786c\u4ef6\u591a\u7ebf\u7a0b\uff0c\u8d85\u7ebf\u7a0b\u5904\u7406\u5668</li> <li>Multiple phases, each may have multiple pipeline stages<ul> <li>fetch</li> <li>decode</li> <li>allocation</li> <li>issue</li> <li>execution</li> <li>commit</li> </ul> </li> <li>\u76ee\u6807\uff1a\u589e\u52a0 instruction-level \u5e76\u884c\u5ea6</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#branch-prediction","title":"Branch Prediction","text":"<ul> <li>\u5bb9\u6613\u53d7\u5230\u65c1\u8def\u653b\u51fb</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#out-of-order-execution","title":"Out-of-order Execution","text":""},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#characteristics-of-x86-isa","title":"Characteristics of x86 ISA","text":"<ul> <li>x86 is a CISC architecture<ul> <li>RISC (Reduced Instruction Set Computer)</li> </ul> </li> <li>complex<ul> <li>\u53d8\u91cf\u957f\u5ea6\uff0c\u6bcf\u6761\u6307\u4ee4\u5f88\u957f</li> <li>\u8868\u8fbe\u590d\u6742\u64cd\u4f5c\uff0c\u4e0d\u80fd\u7b80\u5355\u7531\u786c\u4ef6\u652f\u6301</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#front-end","title":"Front End","text":"<ul> <li>\u4e3a\u4e86\u66f4\u7b80\u5355\uff0cx86 instructuons \u901a\u5e38\u88ab decompose \u6210 RISC-like \u5fae\u64cd\u4f5c<ul> <li>\u8fd9\u662f\u5904\u7406\u5668\u7684 front end \u8fdb\u884c\u7684</li> </ul> </li> <li>Front end \u4e5f\u5305\u542b\u5206\u652f\u9884\u6d4b\u5355\u5143\u548c\u6307\u4ee4\u8bfb\u53d6\u5355\u5143</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#execution-engine","title":"Execution Engine","text":""},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#simultaneous-multithreading","title":"Simultaneous Multithreading","text":"<ul> <li>\u4e00\u4e2a\u7269\u7406\u6838\u5fc3\u6267\u884c\u591a\u4e2a\u7269\u7406\u7ebf\u7a0b</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#single-instruction-multiple-data","title":"Single Instruction Multiple Data","text":""},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#multicore-and-multi-socket-memory","title":"Multicore and Multi-socket Memory","text":""},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#multicore-caching","title":"Multicore Caching","text":"<ul> <li>Cache coherence</li> <li>MSI Protocal</li> </ul>"},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#multi-socket-servers","title":"Multi-socket Servers","text":""},{"location":"ZJU-HPC101/Lec.02%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#non-uniform-memory-access","title":"Non-uniform Memory Access","text":""},{"location":"ZJU-HPC101/Lec.03%20%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95%E5%AD%A6.html","title":"Lec.03 \u9ad8\u6027\u80fd\u8ba1\u7b97\u65b9\u6cd5\u5b66","text":""},{"location":"ZJU-HPC101/Lec.03%20%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95%E5%AD%A6.html#hpc-skills","title":"HPC skills","text":"<p>3_HPCMethodology</p> <ul> <li>Linux</li> <li>\u96c6\u7fa4\u7ef4\u62a4\u548c\u7f51\u7edc\u914d\u7f6e</li> <li>git</li> <li>script</li> <li>data analysis &amp; processing</li> <li>\u7f16\u8bd1\u539f\u7406</li> <li>\u5e76\u884c\u7a0b\u5e8f\u8bbe\u8ba1</li> <li>power control \u8fd0\u884c\u53c2\u6570\u8c03\u4f18</li> </ul>"},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html","title":"Lec.04 \u96c6\u7fa4\u8f6f\u786c\u4ef6\u53ca\u8fd0\u7ef4\u57fa\u7840","text":""},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#\u96c6\u7fa4\u76f8\u5173","title":"\u96c6\u7fa4\u76f8\u5173","text":"<p>4_\u96c6\u7fa4\u8f6f\u786c\u4ef6\u53ca\u8fd0\u7ef4\u57fa\u7840</p>"},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#\u767b\u5f55\u8282\u70b9","title":"\u767b\u5f55\u8282\u70b9","text":"<p>\u76f4\u63a5\u4f7f\u7528\u5b66\u53f7\u767b\u5f55\u96c6\u7fa4\uff0c\u4e0b\u9762\u767b\u5f55 <code>m600</code> \u8282\u70b9\uff1a</p> <pre><code>ssh-keygen\ncat ~/.ssh/id_rsa.pub &gt; .ssh/authorized_keys\nssh m600\n</code></pre> <p>Attention</p> <p>\u53ef\u4ee5\u4f7f\u7528 VSCode \u8fdc\u7a0b\uff0c\u4f46\u9000\u51fa\u524d\u9700\u8981\u7528 <code>/river/scripts/kill_vscode.sh</code> \u6740\u6389 VSCode Server\u3002</p> \u5982\u679c\u8981\u8fdc\u7a0b\u767b\u5f55<pre><code>ssh clusters.zju.edu.cn -p 443\n</code></pre>"},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#\u4f7f\u7528\u96c6\u7fa4\u4ee3\u7406","title":"\u4f7f\u7528\u96c6\u7fa4\u4ee3\u7406","text":"<ul> <li>proxychains 4<ul> <li>hooks network-related libc functions</li> <li>redirects the connections through SOCKS 4 a/5 or HTTP proxies</li> <li>supports TCP only (no UDP/ICMP etc)</li> <li>quiet mode: -q</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#linux-\u5b9e\u8df5","title":"Linux \u5b9e\u8df5","text":""},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#\u83b7\u53d6\u5e2e\u52a9","title":"\u83b7\u53d6\u5e2e\u52a9","text":"<pre><code>man  # RTFM\ntldr  # too long, dont read\ncht.sh  # cheat sheet\uff0c\u597d\u7528\n</code></pre>"},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#linux-\u7528\u6237\u548c\u7528\u6237\u7ec4","title":"Linux \u7528\u6237\u548c\u7528\u6237\u7ec4","text":"<p>by ChatGPT</p> <ul> <li>\u7528\u6237\uff08User\uff09<ul> <li>\u5b9a\u4e49\uff1a\u7528\u6237\u662f\u4e00\u4e2a\u80fd\u591f\u767b\u5f55\u5230\u7cfb\u7edf\u7684\u5b9e\u4f53\uff0c\u53ef\u4ee5\u662f\u4e00\u4e2a\u4eba\u3001\u4e00\u4e2a\u670d\u52a1\u3001\u6216\u8005\u4e00\u4e2a\u8fdb\u7a0b\u3002</li> <li>\u7528\u6237\u6807\u8bc6\u7b26 (UID)\uff1a\u6bcf\u4e2a\u7528\u6237\u5728\u7cfb\u7edf\u4e2d\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u7528\u6237\u6807\u8bc6\u7b26\u3002</li> <li>\u7528\u6237\u6587\u4ef6\uff1a\u7528\u6237\u4fe1\u606f\u901a\u5e38\u5b58\u50a8\u5728 <code>/etc/passwd</code> \u6587\u4ef6\u4e2d\uff0c\u5305\u62ec\u7528\u6237\u540d\u3001\u7528\u6237 ID (UID)\u3001\u4e3b\u76ee\u5f55\u3001\u767b\u5f55 shell \u7b49\u3002</li> <li>\u5bb6\u76ee\u5f55\uff1a\u6bcf\u4e2a\u7528\u6237\u901a\u5e38\u6709\u81ea\u5df1\u7684\u5bb6\u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u50a8\u4e2a\u4eba\u6587\u4ef6\u548c\u8bbe\u7f6e\u3002</li> </ul> </li> <li>\u7528\u6237\u7ec4\uff08Group\uff09<ul> <li>\u5b9a\u4e49\uff1a\u7528\u6237\u7ec4\u662f\u4e00\u4e2a\u7528\u6237\u96c6\u5408\uff0c\u7528\u4e8e\u7b80\u5316\u548c\u7ba1\u7406\u5bf9\u6587\u4ef6\u548c\u76ee\u5f55\u7684\u8bbf\u95ee\u6743\u9650\u3002</li> <li>\u7ec4\u6807\u8bc6\u7b26 (GID)\uff1a\u6bcf\u4e2a\u7ec4\u5728\u7cfb\u7edf\u4e2d\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u7ec4\u6807\u8bc6\u7b26\u3002</li> <li>\u7ec4\u6587\u4ef6\uff1a\u7ec4\u4fe1\u606f\u901a\u5e38\u5b58\u50a8\u5728 <code>/etc/group</code> \u6587\u4ef6\u4e2d\uff0c\u5305\u62ec\u7ec4\u540d\u3001\u7ec4 ID (GID) \u548c\u7ec4\u6210\u5458\u3002</li> <li>\u4e3b\u8981\u7ec4\u548c\u9644\u52a0\u7ec4\uff1a\u6bcf\u4e2a\u7528\u6237\u6709\u4e00\u4e2a\u4e3b\u8981\u7ec4\uff08\u5728\u7528\u6237\u4fe1\u606f\u4e2d\u5b9a\u4e49\uff09\uff0c\u8fd8\u53ef\u4ee5\u5c5e\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u9644\u52a0\u7ec4\u3002</li> </ul> </li> <li>\u6743\u9650\u7ba1\u7406<ul> <li>\u6587\u4ef6\u6743\u9650\uff1aLinux \u4f7f\u7528\u7528\u6237\u548c\u7ec4\u6765\u7ba1\u7406\u6587\u4ef6\u548c\u76ee\u5f55\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u6bcf\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55\u90fd\u6709\u6240\u6709\u8005\uff08\u7528\u6237\uff09\u3001\u6240\u5c5e\u7ec4\u4ee5\u53ca\u5176\u4ed6\u7528\u6237\u7684\u6743\u9650\u8bbe\u7f6e\u3002</li> <li>\u4e09\u79cd\u6743\u9650\uff1a\u8bfb \u00ae\u3001\u5199 (w)\u3001\u6267\u884c (x)\u3002</li> </ul> </li> </ul> <p>Note</p> <p>\u96c6\u7fa4\u4f7f\u7528\u53bb\u4e2d\u5fc3\u5316\u7684\u7528\u6237\u8ba4\u8bc1\uff1aNIS, LDAP</p>"},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#root","title":"root","text":"<p>Attention</p> <ul> <li>\u4e0d\u8981\u6ee5\u7528 root \u8d26\u6237\uff0c\u53ef\u80fd\u4f1a\u8ba9\u67d0\u4e9b\u5b89\u5168\u7cfb\u7edf\u5931\u6548</li> <li><code>sudo</code> \u4e0d\u662f\u4e07\u80fd\u7684\uff0c\u591a RTFM</li> </ul>"},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#linux-\u4e00\u5207\u7686\u6587\u4ef6","title":"Linux \u4e00\u5207\u7686\u6587\u4ef6","text":""},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#linux-\u7684\u6587\u4ef6\u7cfb\u7edf\u5c42\u6b21","title":"Linux \u7684\u6587\u4ef6\u7cfb\u7edf\u5c42\u6b21","text":""},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#linux-\u6587\u4ef6\u6743\u9650","title":"Linux \u6587\u4ef6\u6743\u9650","text":"<pre><code>chmod [permission] [dir_name]\n</code></pre>"},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#linux-\u547d\u4ee4\u5927\u6742\u70e9","title":"Linux \u547d\u4ee4\u5927\u6742\u70e9","text":"\u5e38\u7528\u547d\u4ee4<pre><code>echo\ndate / timedatectl\nreboot / poweroff\nwget / curl\nps / pstree / top / htop / btop / nice / pidof / kill / killall\n</code></pre> \u7cfb\u7edf\u72b6\u6001<pre><code>ifconfig / ping / traceroute / netstat\nuname / uptime / free\nwho / last\nhistory\n</code></pre> \u6587\u4ef6<pre><code>pwd / cd / ls\nfind / locate / whereis / which\ncat / more / head / tail / tr / wc / stat / grep / cut / diff / sort\ntouch / mkdir / cp / mv / rm / dd / file / tar\n</code></pre> \u78c1\u76d8\u548c\u6587\u4ef6\u7cfb\u7edf\u7ba1\u7406<pre><code>mount / unmount\nlsblk\ndf\nparted\nfdisk\n</code></pre> \u7ba1\u9053\u4e0e\u91cd\u5b9a\u5411<pre><code>|  &gt;  &lt;\n&gt;&gt;\n2&amp;&gt;1\ntee\n</code></pre>"},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#linux-\u5185\u6838\u77e5\u8bc6","title":"Linux \u5185\u6838\u77e5\u8bc6","text":"<ul> <li>\u5185\u6838\uff1a\u5b9e\u73b0\u7528\u6237\u7a7a\u95f4\u548c\u7269\u7406\u786c\u4ef6\u7684\u4ea4\u4e92</li> <li>Why?<ul> <li>\u5371\u9669\u6307\u4ee4\u53ea\u6709 os \u624d\u80fd\u6267\u884c</li> <li>\u63d0\u9ad8\u7a33\u5b9a\u6027</li> </ul> </li> <li>\u7528\u6237\u6001\u4e0b\u6267\u884c\u547d\u4ee4\u53d7\u5230\u8bf8\u591a\u68c0\u67e5</li> <li>\u9700\u8981\u8bbf\u95ee\u7cfb\u7edf\u8d44\u6e90\u65f6\uff0c\u6267\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u5207\u6362\u5230\u5185\u6838\u6001</li> <li>\u5b8f\u5185\u6838\u4e0e\u5fae\u5185\u6838</li> <li>\u9a71\u52a8\u662f\u4e00\u79cd\u5185\u6838\u6a21\u5757</li> </ul>"},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#\u4f7f\u7528\u5185\u6838\u6a21\u5757","title":"\u4f7f\u7528\u5185\u6838\u6a21\u5757","text":"\u8def\u5f84<pre><code>/sys\n/usr/lib/modules/{kernel version}\n</code></pre> \u547d\u4ee4<pre><code>lsmod / modinfo / modprobe\nsysctl\n</code></pre>"},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#hpc-\u4e2d\u7684\u8f6f\u4ef6","title":"HPC \u4e2d\u7684\u8f6f\u4ef6","text":""},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#\u96c6\u7fa4\u7ba1\u7406","title":"\u96c6\u7fa4\u7ba1\u7406","text":"<ul> <li>RAM Disk \u548c\u955c\u50cf\u90e8\u7f72</li> <li>NFS \u6302\u8f7d\u5bb6\u76ee\u5f55\u548c\u8f6f\u4ef6</li> </ul>"},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#\u73af\u5883\u7ba1\u7406","title":"\u73af\u5883\u7ba1\u7406","text":"<ul> <li>Lmod</li> <li>\u5305\u7ba1\u7406\u5668 Spack</li> <li>Conda</li> <li>\u53c2\u8003\u4f7f\u7528\u6587\u6863</li> </ul>"},{"location":"ZJU-HPC101/Lec.04%20%E9%9B%86%E7%BE%A4%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80.html#nvcc-\u547d\u4ee4","title":"nvcc \u547d\u4ee4","text":"<pre><code>nvcc cuda_hello.cu -o exe\n./exe\n</code></pre>"},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html","title":"Lec.05 \u5411\u91cf\u5316\u8ba1\u7b97","text":""},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html#\u4ec0\u4e48\u662f\u5411\u91cf\u5316\u8ba1\u7b97","title":"\u4ec0\u4e48\u662f\u5411\u91cf\u5316\u8ba1\u7b97","text":"<p>5_\u5411\u91cf\u5316\u8ba1\u7b97</p> <ul> <li>Array Programming</li> <li>\u7f16\u8bd1\u5668\u7684\u4f18\u5316</li> </ul>"},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html#numpy","title":"NumPy","text":""},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html#\u4ec0\u4e48\u662f\u5411\u91cf\u5316","title":"\u4ec0\u4e48\u662f\u5411\u91cf\u5316","text":"<ul> <li>\u672a\u5411\u91cf\u5316\uff1a\u4e00\u5806 for \u5faa\u73af\uff0c\u6bcf\u6b21\u53ea\u6267\u884c\u4e00\u4e2a\u8fd0\u7b97</li> <li> <p>\u5411\u91cf\u5316\uff1a\u5f20\u91cf\u8fd0\u7b97\u3001\u5411\u91cf\u8fd0\u7b97\u8868\u793a\uff0c\u5e76\u884c\u6267\u884c</p> </li> <li> <p>\u5411\u91cf\u5316\u7684\u6838\u5fc3\u601d\u60f3</p> <ul> <li>\u540c\u65f6\u591a\u4e2a\u503c\u53c2\u4e0e\u8fd0\u7b97</li> <li>\u53ef\u4ee5\u65f6\u903b\u8f91\u4e0a\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u5b9e\u9645\u6267\u884c\u4e0a\u7684</li> <li>\u601d\u7ef4\u62bd\u8c61</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html#numpy-\u57fa\u7840","title":"NumPy \u57fa\u7840","text":"<pre><code>np.array([1, 2, 3])\n</code></pre> <p>\u521b\u5efa\u7684\u662f <code>ndarray</code> \u7c7b\u578b\u3002\u4e0d\u540c\u4e8e python <code>list</code> \u662f\u6811\u72b6\u7ed3\u6784\uff0c<code>ndarray</code> \u66f4\u50cf\u662f c \u4e2d\u7684\u8fde\u7eed\u5185\u5b58\u5730\u5740\uff0c\u7531\u4e8e CPU \u53ef\u80fd\u6709 precache \u64cd\u4f5c\uff0c\u6240\u4ee5\u8bbf\u95ee\u901f\u5ea6\u66f4\u5feb\u3002</p>"},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html#indexing","title":"Indexing","text":"<pre><code>array[2:4, -2:, 0]\narray[1, 3, 4](1, 3, 4.md)\n</code></pre> <p>Title</p> <p>\u5207\u7247\u83b7\u5f97\u7684\u6570\u7ec4\u662f\u4e00\u4e2a\u6307\u5411\u539f\u6570\u7ec4\u7684\u6307\u9488\uff0c\u64cd\u4f5c\u5207\u7247\u6570\u7ec4\u4f1a\u6539\u53d8\u539f\u6765\u6570\u7ec4\u7684\u503c</p> <pre><code>any(a &gt; 5 for a in array)\nall(a &gt; 5 for a in array)\n</code></pre>"},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html#axis","title":"Axis","text":"<pre><code>any(array, axis = 0)\n</code></pre> <p><code>axis = 0</code> \u6307\u7684\u662f most significant \u65b9\u5411\uff0c\u6bd4\u5982\u8bf4\u662f\u5217\u65b9\u5411\u3002</p>"},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html#\u8fd0\u7b97","title":"\u8fd0\u7b97","text":"<pre><code>A * B  # \u6309\u4f4d\u4e58\nA @ B  # \u77e9\u9635\u4e58\u6cd5\n</code></pre> <ul> <li>\u5e7f\u64ad\u673a\u5236\u7684\u6761\u4ef6<ul> <li>\u4e24\u4e2a\u5411\u91cf\u7ef4\u5ea6\u76f8\u540c</li> <li>\u67d0\u4e2a\u7ef4\u5ea6\u4e00\u4e2a\u5411\u91cf\u6709\uff0c\u4e00\u4e2a\u65e0</li> <li>\u67d0\u4e2a\u7ef4\u5ea6\u4e00\u4e2a\u5411\u91cf\u6709\uff0c\u4e00\u4e2a\u6709\u4f46\u4e3a 1</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html#\u5411\u91cf\u5316\u8ba1\u7b97","title":"\u5411\u91cf\u5316\u8ba1\u7b97","text":""},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html#q-1","title":"Q 1","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u77e9\u9635\uff0c\u65b0\u7684\u77e9\u9635\u662f\u539f\u6709\u77e9\u9635\u6bcf\u4e2a\u503c\u4e0e\u5b83\u53f3\u4e0a\u3001\u53f3\u4e0b\u7684\u503c\u7684\u548c\uff0c\u975e\u6cd5\u5730\u5740\u7684\u503c\u4e3a 0</p> <pre><code>def func(A):\n    a = A.reshape(3, 3)\n    b = np.pad(a[:-1, 1:], ((1, 0), (0, 1)))\n    c = np.pad(a[1:, 1:], ((0, 1), (0, 1)))\n    return a + b + c\n</code></pre>"},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html#\u624b\u5199-simd-\u5411\u91cf\u5316","title":"\u624b\u5199 SIMD \u5411\u91cf\u5316","text":""},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html#simd-\u662f\u4ec0\u4e48","title":"SIMD \u662f\u4ec0\u4e48","text":"<ul> <li>Single Instruction Multiple Data\uff0c\u5355\u6307\u4ee4\u591a\u6570\u636e\u6d41</li> <li>\u5728 x86 \u67b6\u6784\u4e0b\uff0cSIMD \u4e00\u822c\u548c SSE \u548c AVX \u7b49\u6307\u4ee4\u96c6\u8054\u7cfb\u5728\u4e00\u8d77</li> <li>SSE \u548c AVX \u6307\u4ee4\u96c6\u4e2d\u63d0\u4f9b\u4e86\u5927\u91cf\u53ef\u4ee5\u5355\u6307\u4ee4\u64cd\u4f5c\u591a\u4e2a\u6570\u636e\u5355\u5143\u7684\u6307\u4ee4</li> </ul>"},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html#\u6570\u636e\u4e2a\u6570\u52a0\u901f\u500d\u6570","title":"\u6570\u636e\u4e2a\u6570!=\u52a0\u901f\u500d\u6570","text":"<ul> <li>SIMD \u540c\u65f6\u64cd\u4f5c\u4e24\u4e2a\u6570\u636e\uff0c\u52a0\u901f\u6bd4\u4e0d\u4e00\u5b9a\u662f 2</li> <li>\u53d7\u5230\u5185\u5b58\u5e26\u5bbd\u4f7f\u7528\u3001\u89e3\u7801\u6d88\u8017\u51cf\u5c0f\u7b49\u56e0\u7d20\u5f71\u54cd</li> <li>\u5982\u679c\u662f\u6574\u4e2a\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\uff0c\u90a3\u5c31\u66f4\u590d\u6742\u4e86</li> </ul>"},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html#\u8d8a\u957f\u8d8a\u597d","title":"\u8d8a\u957f\u8d8a\u597d\uff1f","text":"<ul> <li>\u53ef\u80fd\u53d1\u70ed\u964d\u9891</li> <li>\u53ef\u80fd\u6210\u672c\u66f4\u9ad8</li> <li>AVX 512 \u751a\u81f3\u53ef\u80fd\u4e0d\u5982 AVX 2</li> </ul>"},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html#c-\u5411\u91cf\u5316-simd","title":"C \u5411\u91cf\u5316 SIMD","text":"<ul> <li>\u57fa\u672c\u6d41\u7a0b<ul> <li>Load \u5230\u5bc4\u5b58\u5668</li> <li>\u8fdb\u884c\u5411\u91cf\u5316\u8ba1\u7b97</li> <li>Store \u56de\u5185\u5b58</li> </ul> </li> </ul> <p>\u624b\u5199\u4e00\u4e2a\u5faa\u73af</p> <p><pre><code>for(int i = 0; i &lt; MAXN; i++){\n    c[i] += a[i] * b[i];\n}\n</code></pre> \u7136\u540e\u7528 SIMD \u624b\u5199\u4e00\u904d\uff1a <pre><code>#include &lt;immintrin.h&gt;\n\nfor(int i = 0; i &lt; MAXN; i += 16){  // \u56e0\u4e3a AVX512 \u4e00\u6b21\u5904\u740616\u4e2a\u6570\u636e\n    __m512 a_vec = _mm512_load_ps(&amp;a[i]);\n    __m512 b_vec = _mm512_load_ps(&amp;b[i]);\n    __m512 c_vec = _mm512_load_ps(&amp;c[i]);\n\n    __m512 mul_vec = _mm512_mul_ps(a_vec, b_vec);\n    __m512 c_vec_new = _mm512_add_ps(c_vec, mul_vec);\n\n    _mm512_store_ps(&amp;c[i], c_vec_new);\n}\n</code></pre></p>"},{"location":"ZJU-HPC101/Lec.05%20%E5%90%91%E9%87%8F%E5%8C%96%E8%AE%A1%E7%AE%97.html#\u5e38\u89c1\u95ee\u9898","title":"\u5e38\u89c1\u95ee\u9898","text":"<ul> <li>\u5185\u5b58\u5bf9\u9f50</li> <li>\u5faa\u73af\u8fb9\u754c\u4e0d\u786e\u5b9a</li> </ul> <p>\u591a\u6570\u65f6\u5019\u7f16\u8bd1\u5668\u81ea\u52a8\u5411\u91cf\u5316\u5c31\u591f\u4e86\uff0c\u6700\u540e\u518d\u6765\u8fdb\u884c\u624b\u5199 SIMD \u4f18\u5316</p>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html","title":"Lec.06 CUDA C \u7f16\u7a0b\u57fa\u7840","text":""},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#part-1-graphics-processing-units","title":"Part 1. Graphics Processing Units","text":"<p>6_gpus-architecture-2024</p>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#roadmap","title":"Roadmap","text":"<ul> <li>^ Many-core (GPU)</li> <li>^ Inter-core Parallelism</li> <li>^ Parallelism</li> <li>^ Pipeline CPU</li> <li>^ Multi-Cycle CPU</li> <li>^ Single-Cycle CPU</li> <li>^ Von Newmann Architecture</li> </ul>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#von-newmann-model","title":"Von Newmann Model","text":"<ul> <li>Stored program<ul> <li>\u6307\u4ee4\u548c\u6570\u636e\u5b58\u50a8\u5728\u7edf\u4e00\u7684\u5185\u5b58\u4e2d</li> </ul> </li> <li>Sequential instruction processing<ul> <li>\u5355\u7ebf\u7a0b</li> <li>Program counter (instruction pointer) \u51b3\u5b9a\u4e86\u5f53\u524d\u6267\u884c\u7684\u6307\u4ee4</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#single-cycle-microarchitecture","title":"Single-Cycle Microarchitecture","text":"<pre><code>flowchart TD\n    A[Combinational Logic] --&gt;|AS'| B[\"Sequential Logic (state)\"]\n    B --&gt;|AS| A</code></pre> <ul> <li>AS := Architectural state at the beginning of a clock cycle</li> <li>AS' := ~ at the end fo a clock cycle</li> </ul>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#multi-cycle-microarchitecture","title":"Multi-Cycle Microarchitecture","text":"<ul> <li>Idea<ul> <li>\u7f29\u77ed\u5468\u671f</li> <li>\u6bcf\u6761\u6307\u4ee4\u6267\u884c\u591a\u4e2a\u5468\u671f</li> </ul> </li> <li>ISA \u51b3\u5b9a\u4e86\u6b21\u6001\uff0c\u5bf9\u4e8e ISA \u6765\u8bf4\uff0c\u6ca1\u6709\u4e2d\u95f4\u72b6\u6001</li> <li>\u5fae\u67b6\u6784\u5b9e\u73b0\u4e86\u72b6\u6001\u8f6c\u6362<ul> <li>single-cycle: AS \u2192 AS'</li> <li>multi-cycle: AS \u2192 AS+MS1 \u2192 AS+MS2 \u2192 AS'</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#pipeline-cpu","title":"Pipeline CPU","text":"<ul> <li>Key idea: process other instructions on idle resources</li> <li>\u5c06\u6bcf\u4e2a\u6307\u4ee4\u5206\u6210\u591a\u4e2a stage\uff0c\u6bcf\u4e2a\u9636\u6bb5\u6267\u884c\u4e0d\u540c\u7684\u6307\u4ee4</li> </ul>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#why-gpu","title":"Why GPU?","text":""},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#programming-model-cpu-and-gpu","title":"Programming Model: CPU and GPU","text":"<pre><code>flowchart TD\n    A[\"Serial Code (CPU)\"] --&gt; B[\"Parallel Kernel (GPU)\"]\n    B --&gt; C[\"Serial Code (CPU)\"]\n    C --&gt; D[\"Parallel Kernal (GPU)\"]</code></pre>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#programming-model-vs-hardware-execution-model","title":"Programming Model vs. Hardware Execution Model","text":"<ul> <li>Programming Model: threads<ul> <li>sequential, SIMD, dataflow, MIMD, SPMD</li> </ul> </li> <li>Hardware Execution Model: cores<ul> <li>out-of-order execution, vector processor, array processor, dataflow processor, multithreaded processor</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#a-gpu-is-a-simd-simt-machine","title":"A GPU is a SIMD (SIMT) Machine","text":"<ul> <li>Except it is not programmed using SIMD instructions</li> <li>It is programmed using threads (SPMD programming model) <ul> <li>\u6bcf\u4e2a\u7ebf\u7a0b\u5bf9\u4e0d\u540c\u7684\u6570\u636e\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c</li> <li>\u6bcf\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u88ab\u72ec\u7acb\u6267\u884c\u63a7\u5236</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#programming-model","title":"Programming Model","text":""},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#sisd-vs-simd-vs-spmd","title":"SISD vs. SIMD vs. SPMD","text":""},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#sequential-sisd","title":"Sequential SISD","text":""},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#data-parallel-simd","title":"Data Parallel SIMD","text":"C = A + B<pre><code>VLD  A -&gt; V1\nVLD  B -&gt; V2\nVADD V1 + V2 -&gt; V3\nVST  V3 -&gt; C\n</code></pre>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#multithreaded-spmd-single-program-multiple-data","title":"Multithreaded SPMD (Single Program Multiple Data)","text":"<ul> <li>Each iteration is independent</li> <li>\u6bcf\u4e2a\u8fed\u4ee3\uff08\u5faa\u73af\uff09\u90fd\u751f\u6210\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u505a\u76f8\u540c\u7684\u64cd\u4f5c</li> </ul>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#gpu-programming-example","title":"GPU Programming Example","text":""},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#cudaopencl-programming-model","title":"CUDA/OpenCL Programming Model","text":"<ul> <li>SPMD, e.g. CUDA</li> <li>Hardware<ul> <li>Thread Grid: the whole set of threads</li> <li>Thread Block<ul> <li>\u662f\u4e00\u79cd\u7f16\u7a0b\u62bd\u8c61\uff0c\u8868\u793a\u4e00\u7ec4\u53ef\u4ee5\u5e76\u884c\u6267\u884c\u7684\u7ebf\u7a0b</li> <li>\u4e00\u4e2a block \u4e2d\u5171\u4eab\u5185\u5b58\uff0c\u4e14\u65f6\u5e8f\u540c\u6b65</li> </ul> </li> <li>Thread: corresponds to an iteration</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#cuda-programming-language","title":"CUDA Programming Language","text":"<pre><code>// Memory allocation\ncudaMalloc((void**)&amp;d_in, #bytes);\n\n// Memory copy\ncudaMemcpy(d_in, h_in, #bytes, cudaMemcpyHostToDevice);\n\n// Kernel launch\nkernel&lt;&lt;&lt; #blocks, #threads &gt;&gt;&gt;(args);\n\n// Memory deallocation\ncudaFree(d_in);\n\n// Explicit synchronizaiton\ncudaDeviceSynchronize();\n</code></pre>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#cuda-example-vector-addition","title":"CUDA example: vector addition","text":"Vector addition<pre><code>void vecadd(float* A, float* B, float* C, int N) {\n\n    // 1. allocate GPU memory\n    float* A_d, B_d, C_d;\n    cudaMalloc((void**) &amp;A_d, N*sizeof(float));\n    cudaMalloc((void**) &amp;B_d, N*sizeof(float));\n    cudaMalloc((void**) &amp;C_d, N*sizeof(float));\n\n    // 2. copy data to GPU memory\n    cudaMemcpy(A_d, A, N*sizeof(float), cudaMemcpyHostToDevice);\n    cudaMemcpy(B_d, B, N*sizeof(float), cudaMemcpyHostToDevice);\n\n    // 3. perform computation on GPU\n    const unsigned int numThreadsPerBlock = 512;\n    const unsigned int numBlocks = N/numThreadsPerBlock;\n    vecadd_kernel&lt;&lt;&lt;numBlocks, numThreadsPerBlock&gt;&gt;&gt;(A_d, B_d, C_d, N);\n\n    // 4. copy data from GPU memory\n    cudaMemcpy(C, C_d, N*sizeof(float), cudaMemcpyDeviceToHost)\n\n    // 5. Deallocate GPU memory\n    cudaFree(A_d);\n    cudaFree(B_d);\n    cudaFree(C_d);\n}\n</code></pre>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#kernel-code","title":"Kernel code","text":"vecadd_kernel<pre><code>__global__ void vecadd_kernel(float* A, float* B, float* C, int N) {\n    int i = blockDim.x * blockIdx.x + threadIdx.x;\n    if(i &lt; N){\n        c[i] = A[i] + B[i];\n    }\n}\n</code></pre>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#cuda-example-matrix-multiplication","title":"CUDA example: matrix multiplication","text":"CUDA matrix multiplication<pre><code>__globall__ add_matrix(float* a, float* b, float* c, int N){\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    int j = blockIdx * blockDim.y + threadIdx.y;\n    int index = i + j * N;\n    if(i &lt; N &amp;&amp; j &lt; N){\n        c[index] = a[index] + b[index];\n    }\n}\n\nint main(void){\n    dim3 dimBlock(blocksize, blocksize);\n    dim3 dimGrid(N / dimBlock.x, N / dimBlock.y);\n    add_matrix&lt;&lt;&lt;dimGrid, dimBlock&gt;&gt;&gt;(a, b, c, N);\n}\n</code></pre>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#simt-hardware-warp-software","title":"SIMT (Hardware) &amp; Warp (Software)","text":"<ul> <li>SIMT: Single Instruction Multiple Thread<ul> <li>16 CUDA cores in a SM are executed in a lock step</li> </ul> </li> <li>Warp:<ul> <li>A warp, a basic execution unit, consists of 32 consecutive threads</li> <li>A thread block is divided into warps for SIMT execution</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#part-2-cuda-c-\u7f16\u7a0b\u57fa\u7840","title":"Part 2. CUDA C \u7f16\u7a0b\u57fa\u7840","text":""},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u4f7f\u7528-cuda-cc-\u52a0\u901f\u5e94\u7528\u7a0b\u5e8f","title":"\u4f7f\u7528 CUDA C/C++ \u52a0\u901f\u5e94\u7528\u7a0b\u5e8f","text":""},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#intro","title":"Intro","text":"<p>\u83b7\u53d6\u7cfb\u7edf\u4e2d\u53ef\u7528\u7684 GPU \u8d44\u6e90\uff1a</p> <pre><code>nvidia-smi\n</code></pre> <p>\u4e00\u4e2a\u52a0\u901f\u7a0b\u5e8f <code>.cu</code> \u6837\u4f8b\uff1a</p> <pre><code>void CPUFunction()\n{\n  printf(\"This function is defined to run on the CPU.\\n\");\n}\n\n__global__ void GPUFunction()\n{\n  printf(\"This function is defined to run on the GPU.\\n\");\n}\n\nint main()\n{\n  CPUFunction();\n\n  GPUFunction&lt;&lt;&lt;1/* # of thread blocks */, 1/* # of threads per block*/&gt;&gt;&gt;();\n  cudaDeviceSynchronize();  // \u540c\u6b65 GPU \u548c CPU \u7684\u5de5\u4f5c\n}\n</code></pre> \u52a0\u901f\u8ba1\u7b97\u4e2d\u7684\u4e00\u4e9b\u672f\u8bed <p><code>__global__ void GPUFunction()</code></p> <ul> <li><code>__global__</code>\u00a0\u5173\u952e\u5b57\u8868\u660e\u4ee5\u4e0b\u51fd\u6570\u5c06\u5728 GPU \u4e0a\u8fd0\u884c\u5e76\u53ef\u5168\u5c40\u8c03\u7528\uff0c\u800c\u5728\u6b64\u79cd\u60c5\u51b5\u4e0b\uff0c\u5219\u6307\u7531 CPU \u6216 GPU \u8c03\u7528\u3002</li> <li>\u901a\u5e38\uff0c\u6211\u4eec\u5c06\u5728 CPU \u4e0a\u6267\u884c\u7684\u4ee3\u7801\u79f0\u4e3a\u4e3b\u673a\u4ee3\u7801\uff0c\u800c\u5c06\u5728 GPU \u4e0a\u8fd0\u884c\u7684\u4ee3\u7801\u79f0\u4e3a\u8bbe\u5907\u4ee3\u7801\u3002</li> <li>\u6ce8\u610f\u8fd4\u56de\u7c7b\u578b\u4e3a\u00a0<code>void</code>\u3002\u4f7f\u7528\u00a0<code>__global__</code>\u00a0\u5173\u952e\u5b57\u5b9a\u4e49\u7684\u51fd\u6570\u9700\u8981\u8fd4\u56de\u00a0<code>void</code>\u00a0\u7c7b\u578b\u3002</li> </ul> <p><code>GPUFunction&lt;&lt;&lt;1, 1&gt;&gt;&gt;();</code></p> <ul> <li>\u901a\u5e38\uff0c\u5f53\u8c03\u7528\u8981\u5728 GPU \u4e0a\u8fd0\u884c\u7684\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u5c06\u6b64\u79cd\u51fd\u6570\u79f0\u4e3a\u5df2\u542f\u52a8\u7684\u6838\u51fd\u6570\u3002</li> <li>\u542f\u52a8\u6838\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u63d0\u4f9b\u6267\u884c\u914d\u7f6e\uff0c\u5373\u5728\u5411\u6838\u51fd\u6570\u4f20\u9012\u4efb\u4f55\u9884\u671f\u53c2\u6570\u4e4b\u524d\u4f7f\u7528\u00a0<code>&lt;&lt;&lt; ... &gt;&gt;&gt;</code>\u00a0\u8bed\u6cd5\u5b8c\u6210\u7684\u914d\u7f6e\u3002</li> <li>\u5728\u5b8f\u89c2\u5c42\u9762\uff0c\u7a0b\u5e8f\u5458\u53ef\u901a\u8fc7\u6267\u884c\u914d\u7f6e\u4e3a\u6838\u51fd\u6570\u542f\u52a8\u6307\u5b9a\u7ebf\u7a0b\u5c42\u6b21\u7ed3\u6784\uff0c\u4ece\u800c\u5b9a\u4e49\u7ebf\u7a0b\u7ec4\uff08\u79f0\u4e3a\u7ebf\u7a0b\u5757\uff09\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u8981\u5728\u6bcf\u4e2a\u7ebf\u7a0b\u5757\u4e2d\u6267\u884c\u7684\u7ebf\u7a0b\u6570\u91cf\u3002\u7a0d\u540e\u5c06\u5728\u672c\u5b9e\u9a8c\u6df1\u5165\u63a2\u8ba8\u6267\u884c\u914d\u7f6e\uff0c\u4f46\u73b0\u5728\u8bf7\u6ce8\u610f\u6b63\u5728\u4f7f\u7528\u5305\u542b\u00a0<code>1</code>\u00a0\u7ebf\u7a0b\uff08\u7b2c\u4e8c\u4e2a\u914d\u7f6e\u53c2\u6570\uff09\u7684\u00a0<code>1</code>\u00a0\u7ebf\u7a0b\u5757\uff08\u7b2c\u4e00\u4e2a\u6267\u884c\u914d\u7f6e\u53c2\u6570\uff09\u542f\u52a8\u6838\u51fd\u6570\u3002</li> </ul> <p><code>cudaDeviceSynchronize();</code></p> <ul> <li>\u4e0e\u8bb8\u591a C/C++ \u4ee3\u7801\u4e0d\u540c\uff0c\u6838\u51fd\u6570\u542f\u52a8\u65b9\u5f0f\u4e3a\u5f02\u6b65\uff1aCPU \u4ee3\u7801\u5c06\u7ee7\u7eed\u6267\u884c _ \u800c\u65e0\u9700\u7b49\u5f85\u6838\u51fd\u6570\u5b8c\u6210\u542f\u52a8 _\u3002</li> <li>\u8c03\u7528 CUDA \u8fd0\u884c\u65f6\u63d0\u4f9b\u7684\u51fd\u6570\u00a0<code>cudaDeviceSynchronize</code>\u00a0\u5c06\u5bfc\u81f4\u4e3b\u673a (CPU) \u4ee3\u7801\u6682\u4f5c\u7b49\u5f85\uff0c\u76f4\u81f3\u8bbe\u5907 (GPU) \u4ee3\u7801\u6267\u884c\u5b8c\u6210\uff0c\u624d\u80fd\u5728 CPU \u4e0a\u6062\u590d\u6267\u884c\u3002</li> </ul> <p>\u7f16\u8bd1\u547d\u4ee4\uff1a</p> <pre><code>nvcc -arch=[\u67b6\u6784\u7c7b\u578b] -o out [some-CUDA.cu]\n</code></pre>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#cuda-\u7684\u7ebf\u7a0b\u5c42\u6b21\u7ed3\u6784","title":"CUDA \u7684\u7ebf\u7a0b\u5c42\u6b21\u7ed3\u6784","text":"<ul> <li>Grid\uff1a\u6838\u51fd\u6570\uff08GPU \u51fd\u6570\uff09\u542f\u52a8\u5173\u8054\u7684\u5757</li> <li>Block\uff1a\u7ebf\u7a0b\u5757</li> <li>Thread\uff1a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7f51\u683c\u4e2d\u6709\u76f8\u540c\u7684\u7ebf\u7a0b\u6570</li> </ul> <p>\u542f\u52a8\u5e76\u884c\u8fd0\u884c\u7684\u6838\u51fd\u6570</p> <p>\u7a0b\u5e8f\u5458\u53ef\u901a\u8fc7\u6267\u884c\u914d\u7f6e\u6307\u5b9a\u6709\u5173\u5982\u4f55\u542f\u52a8\u6838\u51fd\u6570\u4ee5\u5728\u591a\u4e2a GPU\u00a0\u7ebf\u7a0b\u4e2d\u5e76\u884c\u8fd0\u884c\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u7a0b\u5e8f\u5458\u53ef\u901a\u8fc7\u6267\u884c\u914d\u7f6e\u6307\u5b9a\u7ebf\u7a0b\u7ec4\uff08\u79f0\u4e3a\u7ebf\u7a0b\u5757\u6216\u7b80\u79f0\u4e3a\u5757\uff09\u6570\u91cf\u4ee5\u53ca\u5176\u5e0c\u671b\u6bcf\u4e2a\u7ebf\u7a0b\u5757\u6240\u5305\u542b\u7684\u7ebf\u7a0b\u6570\u91cf\u3002\u6267\u884c\u914d\u7f6e\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a</p> <p><code>&lt;&lt;&lt; NUMBER_OF_BLOCKS, NUMBER_OF_THREADS_PER_BLOCK&gt;&gt;&gt;</code></p> <p>\u542f\u52a8\u6838\u51fd\u6570\u65f6\uff0c\u6838\u51fd\u6570\u4ee3\u7801\u7531\u6bcf\u4e2a\u5df2\u914d\u7f6e\u7684\u7ebf\u7a0b\u5757\u4e2d\u7684\u6bcf\u4e2a\u7ebf\u7a0b\u6267\u884c\u3002</p> <p>\u56e0\u6b64\uff0c\u5982\u679c\u5047\u8bbe\u5df2\u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a\u00a0<code>someKernel</code>\u00a0\u7684\u6838\u51fd\u6570\uff0c\u5219\u4e0b\u5217\u60c5\u51b5\u4e3a\u771f\uff1a</p> <ul> <li><code>someKernel&lt;&lt;&lt;1, 1&gt;&gt;()</code>\u00a0\u914d\u7f6e\u4e3a\u5728\u5177\u6709\u5355\u7ebf\u7a0b\u7684\u5355\u4e2a\u7ebf\u7a0b\u5757\u4e2d\u8fd0\u884c\u540e\uff0c\u5c06\u53ea\u8fd0\u884c\u4e00\u6b21\u3002</li> <li><code>someKernel&lt;&lt;&lt;1, 10&gt;&gt;()</code>\u00a0\u914d\u7f6e\u4e3a\u5728\u5177\u6709 10 \u7ebf\u7a0b\u7684\u5355\u4e2a\u7ebf\u7a0b\u5757\u4e2d\u8fd0\u884c\u540e\uff0c\u5c06\u8fd0\u884c 10 \u6b21\u3002</li> <li><code>someKernel&lt;&lt;&lt;10, 1&gt;&gt;()</code>\u00a0\u914d\u7f6e\u4e3a\u5728 10 \u4e2a\u7ebf\u7a0b\u5757\uff08\u6bcf\u4e2a\u5747\u5177\u6709\u5355\u7ebf\u7a0b\uff09\u4e2d\u8fd0\u884c\u540e\uff0c\u5c06\u8fd0\u884c 10 \u6b21\u3002</li> <li><code>someKernel&lt;&lt;&lt;10, 10&gt;&gt;()</code>\u00a0\u914d\u7f6e\u4e3a\u5728 10 \u4e2a\u7ebf\u7a0b\u5757\uff08\u6bcf\u4e2a\u5747\u5177\u6709 10 \u7ebf\u7a0b\uff09\u4e2d\u8fd0\u884c\u540e\uff0c\u5c06\u8fd0\u884c 100 \u6b21\u3002</li> </ul> <p>\u7ebf\u7a0b\u548c\u5757\u7684\u7d22\u5f15</p> <p>\u6bcf\u4e2a\u7ebf\u7a0b\u5728\u5176\u7ebf\u7a0b\u5757\u5185\u90e8\u5747\u4f1a\u88ab\u5206\u914d\u4e00\u4e2a\u7d22\u5f15\uff0c\u4ece\u00a0<code>0</code>\u00a0\u5f00\u59cb\u3002\u6b64\u5916\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u5757\u4e5f\u4f1a\u88ab\u5206\u914d\u4e00\u4e2a\u7d22\u5f15\uff0c\u5e76\u4ece\u00a0<code>0</code>\u00a0\u5f00\u59cb\u3002\u6b63\u5982\u7ebf\u7a0b\u7ec4\u6210\u7ebf\u7a0b\u5757\uff0c\u7ebf\u7a0b\u5757\u53c8\u4f1a\u7ec4\u6210\u7f51\u683c\uff0c\u800c\u7f51\u683c\u662f CUDA \u7ebf\u7a0b\u5c42\u6b21\u7ed3\u6784\u4e2d\u7ea7\u522b\u6700\u9ad8\u7684\u5b9e\u4f53\u3002\u7b80\u8a00\u4e4b\uff0cCUDA \u6838\u51fd\u6570\u5728\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u7ebf\u7a0b\u5757\u7ec4\u6210\u7684\u7f51\u683c\u4e2d\u6267\u884c\uff0c\u4e14\u6bcf\u4e2a\u7ebf\u7a0b\u5757\u4e2d\u5747\u5305\u542b\u76f8\u540c\u6570\u91cf\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u7ebf\u7a0b\u3002</p> <p>CUDA \u6838\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u80fd\u591f\u8bc6\u522b\u5982\u4e0b\u4e24\u79cd\u7d22\u5f15\u7684\u7279\u6b8a\u53d8\u91cf\uff1a\u6b63\u5728\u6267\u884c\u6838\u51fd\u6570\u7684\u7ebf\u7a0b\uff08\u4f4d\u4e8e\u7ebf\u7a0b\u5757\u5185\uff09\u7d22\u5f15\u548c\u7ebf\u7a0b\u6240\u5728\u7684\u7ebf\u7a0b\u5757\uff08\u4f4d\u4e8e\u7f51\u683c\u5185\uff09\u7d22\u5f15\u3002\u8fd9\u4e24\u79cd\u53d8\u91cf\u5206\u522b\u4e3a\u00a0<code>threadIdx.x</code>\u00a0\u548c\u00a0<code>blockIdx.x</code>\u3002</p> <p>\u7ec3\u4e60\uff1a\u7ebf\u7a0b\u548c\u5757\u7684\u7d22\u5f15</p> thread and block index<pre><code>#include &lt;stdio.h&gt;\n\n__global__ void printSuccessForCorrectExecutionConfiguration()\n{\n  if(threadIdx.x == 1023 &amp;&amp; blockIdx.x == 255)\n  {\n    printf(\"Success!\\n\");\n  } else {\n    return;\n  }\n}\n\nint main()\n{\n  printSuccessForCorrectExecutionConfiguration&lt;&lt;&lt;256, 1024&gt;&gt;&gt;();\n  cudaDeviceSynchronize();\n}\n</code></pre>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u52a0\u901f-for-\u5faa\u73af","title":"\u52a0\u901f for \u5faa\u73af","text":""},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u5355\u4e2a-for-\u5faa\u73af\u7684\u52a0\u901f","title":"\u5355\u4e2a for \u5faa\u73af\u7684\u52a0\u901f","text":"<p>\u7ec3\u4e60\uff1a\u4f7f\u7528\u5355\u4e2a\u7ebf\u7a0b\u52a0\u901f for \u5faa\u73af</p> \u4f7f\u7528\u5355\u4e2a\u7ebf\u7a0b\u52a0\u901f for \u5faa\u73af<pre><code>#include &lt;stdio.h&gt;\n\n__global__ void loop()\n{\n    printf(\"This is iteration number %d\\n\", threadIdx.x);\n}\n\nint main()\n{\n  loop&lt;&lt;&lt;1, 10&gt;&gt;&gt;();\n  cudaDeviceSynchronize();\n}\n</code></pre> <p>\u987a\u5e8f\u95ee\u9898</p> <p>\u5f53 thread \u5f88\u5927\u65f6\uff0c\u5c31\u4f1a\u53d1\u73b0\u7ebf\u7a0b\u7684\u6267\u884c\u7ed3\u675f\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\u3002</p>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u534f\u8c03\u5e76\u884c\u7ebf\u7a0b","title":"\u534f\u8c03\u5e76\u884c\u7ebf\u7a0b","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 CUDA \u63d0\u4f9b\u7684\u7d22\u5f15\u53d8\u91cf\u8fdb\u884c\u6570\u636e\u7684\u5206\u5757\u3002</p> <p>\u8c03\u6574\u7ebf\u7a0b\u5757\u7684\u5927\u5c0f\u4ee5\u5b9e\u73b0\u66f4\u591a\u7684\u5e76\u884c\u5316</p> <p>\u7ebf\u7a0b\u5757\u5305\u542b\u7684\u7ebf\u7a0b\u5177\u6709\u6570\u91cf\u9650\u5236\uff1a\u786e\u5207\u5730\u8bf4\u662f 1024 \u4e2a\u3002\u4e3a\u589e\u52a0\u52a0\u901f\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u5e76\u884c\u91cf\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u80fd\u5728\u591a\u4e2a\u7ebf\u7a0b\u5757\u4e4b\u95f4\u8fdb\u884c\u534f\u8c03\u3002</p> <p>CUDA \u6838\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u7ed9\u51fa\u5757\u4e2d\u7ebf\u7a0b\u6570\u7684\u7279\u6b8a\u53d8\u91cf\uff1a<code>blockDim.x</code>\u3002\u901a\u8fc7\u5c06\u6b64\u53d8\u91cf\u4e0e\u00a0<code>blockIdx.x</code>\u00a0\u548c\u00a0<code>threadIdx.x</code>\u00a0\u53d8\u91cf\u7ed3\u5408\u4f7f\u7528\uff0c\u5e76\u501f\u52a9\u60ef\u7528\u8868\u8fbe\u5f0f\u00a0<code>threadIdx.x + blockIdx.x * blockDim.x</code>\u00a0\u5728\u5305\u542b\u591a\u4e2a\u7ebf\u7a0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u5757\u4e4b\u95f4\u7ec4\u7ec7\u5e76\u884c\u6267\u884c\uff0c\u5e76\u884c\u6027\u5c06\u5f97\u4ee5\u63d0\u5347\u3002\u4ee5\u4e0b\u662f\u8be6\u7ec6\u793a\u4f8b\u3002</p> <p>\u6267\u884c\u914d\u7f6e\u00a0<code>&lt;&lt;&lt;10, 10&gt;&gt;&gt;</code>\u00a0\u5c06\u542f\u52a8\u5171\u8ba1\u62e5\u6709 100 \u4e2a\u7ebf\u7a0b\u7684\u7f51\u683c\uff0c\u8fd9\u4e9b\u7ebf\u7a0b\u5747\u5305\u542b\u5728\u7531 10 \u4e2a\u7ebf\u7a0b\u7ec4\u6210\u7684 10 \u4e2a\u7ebf\u7a0b\u5757\u4e2d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5e0c\u671b\u6bcf\u4e2a\u7ebf\u7a0b\uff08<code>0</code>\u00a0\u81f3\u00a0<code>99</code>\u00a0\u4e4b\u95f4\uff09\u90fd\u80fd\u8ba1\u7b97\u8be5\u7ebf\u7a0b\u7684\u67d0\u4e2a\u552f\u4e00\u7d22\u5f15\u3002</p> <ul> <li>\u5982\u679c\u7ebf\u7a0b\u5757\u00a0<code>blockIdx.x</code>\u00a0\u7b49\u4e8e\u00a0<code>0</code>\uff0c\u5219\u00a0<code>blockIdx.x * blockDim.x</code>\u00a0\u4e3a\u00a0<code>0</code>\u3002\u5411\u00a0<code>0</code>\u00a0\u6dfb\u52a0\u53ef\u80fd\u7684\u00a0<code>threadIdx.x</code>\u00a0\u503c\uff08<code>0</code>\u00a0\u81f3\u00a0<code>9</code>\uff09\uff0c\u4e4b\u540e\u4fbf\u53ef\u5728\u5305\u542b 100 \u4e2a\u7ebf\u7a0b\u7684\u7f51\u683c\u5185\u751f\u6210\u7d22\u5f15\u00a0<code>0</code>\u00a0\u81f3\u00a0<code>9</code>\u3002</li> <li>\u5982\u679c\u7ebf\u7a0b\u5757\u00a0<code>blockIdx.x</code>\u00a0\u7b49\u4e8e\u00a0<code>1</code>\uff0c\u5219\u00a0<code>blockIdx.x * blockDim.x</code>\u00a0\u4e3a\u00a0<code>10</code>\u3002\u5411\u00a0<code>10</code>\u00a0\u6dfb\u52a0\u53ef\u80fd\u7684\u00a0<code>threadIdx.x</code>\u00a0\u503c\uff08<code>0</code>\u00a0\u81f3\u00a0<code>9</code>\uff09\uff0c\u4e4b\u540e\u4fbf\u53ef\u5728\u5305\u542b 100 \u4e2a\u7ebf\u7a0b\u7684\u7f51\u683c\u5185\u751f\u6210\u7d22\u5f15\u00a0<code>10</code>\u00a0\u81f3\u00a0<code>19</code>\u3002</li> <li>\u5982\u679c\u7ebf\u7a0b\u5757\u00a0<code>blockIdx.x</code>\u00a0\u7b49\u4e8e\u00a0<code>5</code>\uff0c\u5219\u00a0<code>blockIdx.x * blockDim.x</code>\u00a0\u4e3a\u00a0<code>50</code>\u3002\u5411\u00a0<code>50</code>\u00a0\u6dfb\u52a0\u53ef\u80fd\u7684\u00a0<code>threadIdx.x</code>\u00a0\u503c\uff08<code>0</code>\u00a0\u81f3\u00a0<code>9</code>\uff09\uff0c\u4e4b\u540e\u4fbf\u53ef\u5728\u5305\u542b 100 \u4e2a\u7ebf\u7a0b\u7684\u7f51\u683c\u5185\u751f\u6210\u7d22\u5f15\u00a0<code>50</code>\u00a0\u81f3\u00a0<code>59</code>\u3002</li> <li>\u5982\u679c\u7ebf\u7a0b\u5757\u00a0<code>blockIdx.x</code>\u00a0\u7b49\u4e8e\u00a0<code>9</code>\uff0c\u5219\u00a0<code>blockIdx.x * blockDim.x</code>\u00a0\u4e3a\u00a0<code>90</code>\u3002\u5411\u00a0<code>90</code>\u00a0\u6dfb\u52a0\u53ef\u80fd\u7684\u00a0<code>threadIdx.x</code>\u00a0\u503c\uff08<code>0</code>\u00a0\u81f3\u00a0<code>9</code>\uff09\uff0c\u4e4b\u540e\u4fbf\u53ef\u5728\u5305\u542b 100 \u4e2a\u7ebf\u7a0b\u7684\u7f51\u683c\u5185\u751f\u6210\u7d22\u5f15\u00a0<code>90</code>\u00a0\u81f3\u00a0<code>99</code>\u3002</li> </ul> <p>\u7ec3\u4e60\uff1a\u52a0\u901f\u5177\u6709\u591a\u4e2a\u7ebf\u7a0b\u5757\u7684 For \u5faa\u73af</p> <pre><code>#include &lt;stdio.h&gt;\n\n__global__ void loop(int N)\n{\n    int i = threadIdx.x + blockIdx.x * blockDim.x;\n    if(i &lt; N) printf(\"This is iteration number %d\\n\", i);  // \u89e3\u51b3\u4e86\u7f51\u683c\u5927\u5c0f\u548c\u9700\u6c42\u4e0d\u5339\u914d\u7684\u95ee\u9898\n}\n\nint main()\n{\n  int N = 10;\n  loop&lt;&lt;&lt;2, 10&gt;&gt;&gt;(N);\n  cudaDeviceSynchronize();\n}\n</code></pre>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#gpu-\u5185\u5b58\u5206\u914d","title":"GPU \u5185\u5b58\u5206\u914d","text":"<p>Attention</p> <p>GPU \u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee CPU \u5185\u5b58</p> <p>\u4ee5\u4e0b\u662f\u4f7f\u7528 CUDA \u5206\u914d\u5185\u5b58\u7684\u6837\u4f8b\uff1a</p> \u4f7f\u7528 CUDA api \u5206\u914d GPU \u53ef\u7528\u7684\u5185\u5b58\u7a7a\u95f4<pre><code>int N = 2&lt;&lt;20;\nsize_t size = N * sizeof(int);\n\nint *a;\n// Note the address of `a` is passed as first argument.\ncudaMallocManaged(&amp;a, size);\n\n// Use `a` on the CPU and/or on any GPU in the accelerated system.\n\ncudaFree(a);\n</code></pre> <p>\u7ec3\u4e60\uff1a\u4e3b\u673a\u548c\u8bbe\u5907\u4e0a\u7684\u6570\u7ec4\u64cd\u4f5c</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid init(int *a, int N)\n{\n  int i;\n  for (i = 0; i &lt; N; ++i)\n  {\n    a[i] = i;\n  }\n}\n\n__global__ void doubleElements(int *a, int N)\n{\n  int i;\n  i = blockIdx.x * blockDim.x + threadIdx.x;\n  if (i &lt; N)\n  {\n    a[i] *= 2;\n  }\n}\n\nbool checkElementsAreDoubled(int *a, int N)\n{\n  int i;\n  for (i = 0; i &lt; N; ++i)\n  {\n    if (a[i] != i*2) return false;\n  }\n  return true;\n}\n\nint main()\n{\n  int N = 100;\n  int *a;\n\n  size_t size = N * sizeof(int);\n\n  cudaMallocManaged(&amp;a, size);\n\n  init(a, N);\n\n  size_t threads_per_block = 10;\n  size_t number_of_blocks = 10;\n\n  doubleElements&lt;&lt;&lt;number_of_blocks, threads_per_block&gt;&gt;&gt;(a, N);\n  cudaDeviceSynchronize();\n\n  bool areDoubled = checkElementsAreDoubled(a, N);\n  printf(\"All elements were doubled? %s\\n\", areDoubled ? \"TRUE\" : \"FALSE\");\n\n  cudaFree(a);\n}\n</code></pre>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u89e3\u51b3\u4e0d\u5339\u914d\u95ee\u9898","title":"\u89e3\u51b3\u4e0d\u5339\u914d\u95ee\u9898","text":""},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u5982\u4f55\u5904\u7406\u5757\u914d\u7f6e\u4e0e\u6240\u9700\u7ebf\u7a0b\u6570\u4e0d\u5339\u914d","title":"\u5982\u4f55\u5904\u7406\u5757\u914d\u7f6e\u4e0e\u6240\u9700\u7ebf\u7a0b\u6570\u4e0d\u5339\u914d","text":"<p>\u7ec3\u4e60\uff1a\u4f7f\u7528\u4e0d\u5339\u914d\u7684\u6267\u884c\u914d\u7f6e\u6765\u52a0\u901f For \u5faa\u73af</p> <pre><code>#include &lt;stdio.h&gt;\n\n__global__ void initializeElementsTo(int initialValue, int *a, int N)\n{\n  int i = threadIdx.x + blockIdx.x * blockDim.x;\n  if(i &lt; N) a[i] = initialValue;  // Problem solver\n}\n\nint main()\n{\n  int N = 1000;\n\n  int *a;\n  size_t size = N * sizeof(int);\n\n  cudaMallocManaged(&amp;a, size);\n\n  size_t threads_per_block = 256;\n\n  size_t number_of_blocks = 4;\n\n  int initialValue = 6;\n\n  initializeElementsTo&lt;&lt;&lt;number_of_blocks, threads_per_block&gt;&gt;&gt;(initialValue, a, N);\n  cudaDeviceSynchronize();\n\n  for (int i = 0; i &lt; N; ++i)\n  {\n    if(a[i] != initialValue)\n    {\n      printf(\"FAILURE: target value: %d\\t a[%d]: %d\\n\", initialValue, i, a[i]);\n      exit(1);\n    }\n  }\n  printf(\"SUCCESS!\\n\");\n\n  cudaFree(a);\n}\n</code></pre>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u6570\u636e\u96c6\u6bd4\u7f51\u683c\u5927","title":"\u6570\u636e\u96c6\u6bd4\u7f51\u683c\u5927","text":"<p>\u4f7f\u7528 <code>gridDim.x</code> \u5b9e\u73b0\u8de8\u7f51\u683c\u5faa\u73af</p> <p>CUDA \u63d0\u4f9b\u4e00\u4e2a\u53ef\u7ed9\u51fa\u7f51\u683c\u4e2d\u7ebf\u7a0b\u5757\u6570\u7684\u7279\u6b8a\u53d8\u91cf\uff1a<code>gridDim.x</code>\u3002\u7136\u540e\u8ba1\u7b97\u7f51\u683c\u4e2d\u7684\u603b\u7ebf\u7a0b\u6570\uff0c\u5373\u7f51\u683c\u4e2d\u7684\u7ebf\u7a0b\u5757\u6570\u4e58\u4ee5\u6bcf\u4e2a\u7ebf\u7a0b\u5757\u4e2d\u7684\u7ebf\u7a0b\u6570\uff1a<code>gridDim.x * blockDim.x</code>\u3002\u5e26\u7740\u8fd9\u6837\u7684\u60f3\u6cd5\u6765\u770b\u770b\u4ee5\u4e0b\u6838\u51fd\u6570\u4e2d\u7f51\u683c\u8de8\u5ea6\u5faa\u73af\u7684\u8be6\u7ec6\u793a\u4f8b\uff1a</p> <pre><code>__global void kernel(int *a, int N)\n{\n  int indexWithinTheGrid = threadIdx.x + blockIdx.x * blockDim.x;\n  int gridStride = gridDim.x * blockDim.x;\n\n  for (int i = indexWithinTheGrid; i &lt; N; i += gridStride)\n  {\n    // do work on a[i];\n  }\n}\n</code></pre> <p>\u7ec3\u4e60\uff1a\u4f7f\u7528\u8de8\u7f51\u683c\u5faa\u73af\u6765\u5904\u7406\u6bd4\u7f51\u683c\u66f4\u5927\u7684\u6570\u7ec4</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid init(int *a, int N)\n{\n  int i;\n  for (i = 0; i &lt; N; ++i)\n  {\n    a[i] = i;\n  }\n}\n\n__global__\nvoid doubleElements(int *a, int N)\n{\n  int idx = blockIdx.x * blockDim.x + threadIdx.x;\n  int stride = gridDim.x * blockDim.x;\n\n  for (int i = idx; i &lt; N; i += stride)\n  {\n    a[i] *= 2;\n  }\n}\n\nbool checkElementsAreDoubled(int *a, int N)\n{\n  int i;\n  for (i = 0; i &lt; N; ++i)\n  {\n    if (a[i] != i*2) return false;\n  }\n  return true;\n}\n\nint main()\n{\n  int N = 10000;\n  int *a;\n\n  size_t size = N * sizeof(int);\n  cudaMallocManaged(&amp;a, size);\n\n  init(a, N);\n\n  size_t threads_per_block = 256;\n  size_t number_of_blocks = 32;\n\n  doubleElements&lt;&lt;&lt;number_of_blocks, threads_per_block&gt;&gt;&gt;(a, N);\n  cudaDeviceSynchronize();\n\n  bool areDoubled = checkElementsAreDoubled(a, N);\n  printf(\"All elements were doubled? %s\\n\", areDoubled ? \"TRUE\" : \"FALSE\");\n\n  cudaFree(a);\n}\n</code></pre>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u9519\u8bef\u5904\u7406","title":"\u9519\u8bef\u5904\u7406","text":"<p>\u57fa\u4e8e <code>cudaError_t</code> \u7c7b\u578b\u7684\u9519\u8bef\u5904\u7406</p> <p>\u4e0e\u5728\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4e00\u6837\uff0c\u52a0\u901f CUDA \u4ee3\u7801\u4e2d\u7684\u9519\u8bef\u5904\u7406\u540c\u6837\u81f3\u5173\u91cd\u8981\u3002\u5373\u4fbf\u4e0d\u662f\u5927\u591a\u6570\uff0c\u4e5f\u6709\u8bb8\u591a CUDA \u51fd\u6570\uff08\u4f8b\u5982\uff0c\u5185\u5b58\u7ba1\u7406\u51fd\u6570\uff09\u4f1a\u8fd4\u56de\u7c7b\u578b\u4e3a\u00a0<code>cudaError_t</code>\u00a0\u7684\u503c\uff0c\u8be5\u503c\u53ef\u7528\u4e8e\u68c0\u67e5\u8c03\u7528\u51fd\u6570\u65f6\u662f\u5426\u53d1\u751f\u9519\u8bef\u3002\u4ee5\u4e0b\u662f\u5bf9\u8c03\u7528\u00a0<code>cudaMallocManaged</code>\u00a0\u51fd\u6570\u6267\u884c\u9519\u8bef\u5904\u7406\u7684\u793a\u4f8b\uff1a</p> <pre><code>cudaError_t err;\nerr = cudaMallocManaged(&amp;a, N)                    // Assume the existence of `a` and `N`.\n\nif (err != cudaSuccess)                           // `cudaSuccess` is provided by CUDA.\n{\n  printf(\"Error: %s\\n\", cudaGetErrorString(err)); // `cudaGetErrorString` is provided by CUDA.\n}\n</code></pre> <p>\u542f\u52a8\u5b9a\u4e49\u4e3a\u8fd4\u56de\u00a0<code>void</code>\u00a0\u7684\u6838\u51fd\u6570\u540e\uff0c\u5c06\u4e0d\u4f1a\u8fd4\u56de\u7c7b\u578b\u4e3a\u00a0<code>cudaError_t</code>\u00a0\u7684\u503c\u3002\u4e3a\u68c0\u67e5\u542f\u52a8\u6838\u51fd\u6570\u65f6\u662f\u5426\u53d1\u751f\u9519\u8bef\uff08\u4f8b\u5982\uff0c\u5982\u679c\u542f\u52a8\u914d\u7f6e\u9519\u8bef\uff09\uff0cCUDA \u63d0\u4f9b\u00a0<code>cudaGetLastError</code>\u00a0\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u4f1a\u8fd4\u56de\u7c7b\u578b\u4e3a\u00a0<code>cudaError_t</code>\u00a0\u7684\u503c\u3002</p> <pre><code>/*\n\n * This launch should cause an error, but the kernel itself\n * cannot return it.\n */\n\nsomeKernel&lt;&lt;&lt;1, -1&gt;&gt;&gt;();  // -1 is not a valid number of threads.\n\ncudaError_t err;\nerr = cudaGetLastError(); // `cudaGetLastError` will return the error from above.\nif (err != cudaSuccess)\n{\n  printf(\"Error: %s\\n\", cudaGetErrorString(err));\n}\n</code></pre> <p>\u6700\u540e\uff0c\u4e3a\u6355\u6349\u5f02\u6b65\u9519\u8bef\uff08\u4f8b\u5982\uff0c\u5728\u5f02\u6b65\u6838\u51fd\u6570\u6267\u884c\u671f\u95f4\uff09\uff0c\u8bf7\u52a1\u5fc5\u68c0\u67e5\u540e\u7eed\u540c\u6b65 CUDA \u8fd0\u884c\u65f6 API \u8c03\u7528\u6240\u8fd4\u56de\u7684\u72b6\u6001\uff08\u4f8b\u5982\u00a0<code>cudaDeviceSynchronize</code>\uff09\uff1b\u5982\u679c\u4e4b\u524d\u542f\u52a8\u7684\u5176\u4e2d\u4e00\u4e2a\u6838\u51fd\u6570\u5931\u8d25\uff0c\u5219\u5c06\u8fd4\u56de\u9519\u8bef\u3002</p> <p>\u7ec3\u4e60\uff1a\u6dfb\u52a0\u9519\u8bef\u5904\u7406</p> <p><pre><code>#include &lt;stdio.h&gt;\n\nvoid init(int *a, int N)\n{\n  int i;\n  for (i = 0; i &lt; N; ++i)\n  {\n    a[i] = i;\n  }\n}\n\n__global__\nvoid doubleElements(int *a, int N)\n{\n\n  int idx = blockIdx.x * blockDim.x + threadIdx.x;\n  int stride = gridDim.x * blockDim.x;\n\n  for (int i = idx; i &lt; N + stride; i += stride)\n  {\n    a[i] *= 2;\n  }\n}\n\nbool checkElementsAreDoubled(int *a, int N)\n{\n  int i;\n  for (i = 0; i &lt; N; ++i)\n  {\n    if (a[i] != i*2) return false;\n  }\n  return true;\n}\n\nint main()\n{\n  /*\n\n   * Add error handling to this source code to learn what errors\n   * exist, and then correct them. Googling error messages may be\n   * of service if actions for resolving them are not clear to you.\n   */\n\n  int N = 10000;\n  int *a;\n\n  size_t size = N * sizeof(int);\n  cudaMallocManaged(&amp;a, size);\n\n  init(a, N);\n\n  size_t threads_per_block = 2048;\n  size_t number_of_blocks = 32;\n\n  cudaError_t syncErr, asyncErr; \n\n  doubleElements&lt;&lt;&lt;number_of_blocks, threads_per_block&gt;&gt;&gt;(a, N);\n  syncErr = cudaGetLastError();\n\n  asyncErr = cudaDeviceSynchronize();\n\n  if (syncErr != cudaSuccess) printf(\"Error: %s\\n\", cudaGetErrorString(syncErr));\n  if (asyncErr != cudaSuccess) printf(\"Error: %s\\n\", cudaGetErrorString(asyncErr)); \n\n  bool areDoubled = checkElementsAreDoubled(a, N);\n  printf(\"All elements were doubled? %s\\n\", areDoubled ? \"TRUE\" : \"FALSE\");\n\n  cudaFree(a);\n}\n</code></pre> \u5373\u8fdb\u884c\u5982\u4e0b\u6b65\u9aa4\uff1a</p> <ol> <li>\u521b\u5efa <code>cudaError_t</code> \u53d8\u91cf</li> <li>\u6536\u96c6\u9519\u8bef\u4fe1\u606f <code>syncErr = cudaGetLastError();  asyncErr = cudaDeviceSynchronize();</code></li> <li>\u6253\u5370\u9519\u8bef\u4fe1\u606f <code>if(syncErr != cudaSucess) printf(\"Error: %s\\n\", cudaGetErrorString(err));</code></li> </ol> <p>CUDA \u9519\u8bef\u5904\u7406\u529f\u80fd</p> <p>\u521b\u5efa\u4e00\u4e2a\u5305\u88c5 CUDA \u51fd\u6570\u8c03\u7528\u7684\u5b8f\u5bf9\u4e8e\u68c0\u67e5\u9519\u8bef\u5341\u5206\u6709\u7528\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b8f\u793a\u4f8b\uff0c\u60a8\u53ef\u4ee5\u5728\u4f59\u4e0b\u7ec3\u4e60\u4e2d\u968f\u65f6\u4f7f\u7528\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;assert.h&gt;\n\ninline cudaError_t checkCuda(cudaError_t result)\n{\n  if (result != cudaSuccess) {\n    fprintf(stderr, \"CUDA Runtime Error: %s\\n\", cudaGetErrorString(result));\n    assert(result == cudaSuccess);\n  }\n  return result;\n}\n\nint main()\n{\n\n/*\n\n * The macro can be wrapped around any function returning\n * a value of type `cudaError_t`.\n */\n\n  checkCuda( cudaDeviceSynchronize() )\n}\n</code></pre> <p>\u67e5\u770b\u5b98\u65b9\u6587\u6863\u8fdb\u4e00\u6b65\u5b66\u4e60\uff1aCUDA Toolkit Documentation 12.5 (nvidia.com)</p>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u5229\u7528\u57fa\u672c\u7684-cuda-\u5185\u5b58\u7ba1\u7406\u6280\u672f\u6765\u4f18\u5316\u52a0\u901f\u5e94\u7528\u7a0b\u5e8f","title":"\u5229\u7528\u57fa\u672c\u7684 CUDA \u5185\u5b58\u7ba1\u7406\u6280\u672f\u6765\u4f18\u5316\u52a0\u901f\u5e94\u7528\u7a0b\u5e8f","text":""},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u6027\u80fd\u5206\u6790","title":"\u6027\u80fd\u5206\u6790","text":"<p>\u4f7f\u7528 nsys \u5206\u6790\u5e94\u7528\u7a0b\u5e8f</p> <p><code>nsys profile</code> \u5c06\u751f\u6210\u4e00\u4e2a <code>qdrep</code> \u62a5\u544a\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u53ef\u4ee5\u4ee5\u591a\u79cd\u65b9\u5f0f\u4f7f\u7528\u3002 \u6211\u4eec\u5728\u8fd9\u91cc\u4f7f\u7528 <code>--stats = true</code> \u6807\u5fd7\u8868\u793a\u6211\u4eec\u5e0c\u671b\u6253\u5370\u8f93\u51fa\u6458\u8981\u7edf\u8ba1\u4fe1\u606f\u3002 \u8f93\u51fa\u7684\u4fe1\u606f\u6709\u5f88\u591a\uff0c\u5305\u62ec\uff1a</p> <ul> <li>\u914d\u7f6e\u6587\u4ef6\u914d\u7f6e\u8be6\u7ec6\u4fe1\u606f</li> <li>\u62a5\u544a\u6587\u4ef6\u7684\u751f\u6210\u8be6\u7ec6\u4fe1\u606f</li> <li>CUDA API \u7edf\u8ba1\u4fe1\u606f</li> <li>CUDA \u6838\u51fd\u6570\u7684\u7edf\u8ba1\u4fe1\u606f</li> <li>CUDA \u5185\u5b58\u64cd\u4f5c\u7edf\u8ba1\u4fe1\u606f\uff08\u65f6\u95f4\u548c\u5927\u5c0f\uff09</li> <li>\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u8c03\u7528\u63a5\u53e3\u7684\u7edf\u8ba1\u4fe1\u606f</li> </ul> <p>\u5728\u672c\u5b9e\u9a8c\u4e2d\uff0c\u60a8\u5c06\u4e3b\u8981\u4f7f\u7528\u4e0a\u9762\u9ed1\u4f53\u5b57\u7684 3 \u4e2a\u90e8\u5206\u3002 \u5728\u4e0b\u4e00\u4e2a\u5b9e\u9a8c\u4e2d\uff0c\u60a8\u5c06\u4f7f\u7528\u751f\u6210\u7684\u62a5\u544a\u6587\u4ef6\u5c06\u5176\u63d0\u4f9b\u7ed9 Nsight Systems \u8fdb\u884c\u53ef\u89c6\u5316\u5206\u6790\u3002</p> <p>\u5e94\u7528\u7a0b\u5e8f\u5206\u6790\u5b8c\u6bd5\u540e\uff0c\u8bf7\u4f7f\u7528\u5206\u6790\u8f93\u51fa\u4e2d\u663e\u793a\u7684\u4fe1\u606f\u56de\u7b54\u4e0b\u5217\u95ee\u9898\uff1a</p> <ul> <li>\u6b64\u5e94\u7528\u7a0b\u5e8f\u4e2d\u552f\u4e00\u8c03\u7528\u7684 CUDA \u6838\u51fd\u6570\u7684\u540d\u79f0\u662f\u4ec0\u4e48\uff1f</li> <li>\u6b64\u6838\u51fd\u6570\u8fd0\u884c\u4e86\u591a\u5c11\u6b21\uff1f</li> <li>\u6b64\u6838\u51fd\u6570\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a\u591a\u5c11\uff1f\u8bf7\u8bb0\u5f55\u4e0b\u6b64\u65f6\u95f4\uff1a\u60a8\u5c06\u7ee7\u7eed\u4f18\u5316\u6b64\u5e94\u7528\u7a0b\u5e8f\uff0c\u518d\u548c\u6b64\u65f6\u95f4\u505a\u5bf9\u6bd4\u3002 ``` CUDA Kernel Statistics (nanoseconds) Time(%)      Total Time   Instances         Average         Minimum         Maximum  Name                                                                            </li> </ul> <p>100.0      2330194366           1    2330194366.0      2330194366      2330194366  addVectorsInto  ```</p> <p>\u7ec3\u4e60\uff1a\u4f18\u5316\u5e76\u5206\u6790\u6027\u80fd</p> <ul> <li>\u5373\u901a\u8fc7 nsys \u8f93\u51fa\u6765\u8c03\u8282\u6838\u51fd\u6570\u7684\u542f\u52a8\u53c2\u6570</li> </ul>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u6d41\u5f0f\u591a\u5904\u7406\u5668-streaming-multiprocessors","title":"\u6d41\u5f0f\u591a\u5904\u7406\u5668 (Streaming Multiprocessors)","text":"<ul> <li>\u7ebf\u7a0b\u5757\u9700\u8981\u6620\u5c04\u5230 SM \u4e0a\uff0c\u4e00\u4e2a SM \u53ea\u80fd\u5904\u7406\u4e00\u4e2a\u7ebf\u7a0b\u5757</li> <li>\u7ebf\u7a0b\u5757\u4f1a\u88ab\u53d1\u5c04\u5230 SM \u4e0a\uff0c\u8fd9\u4e2a\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u5e76\u884c\u6267\u884c\u6697\u793a\u4e86\u6ca1\u6709\u987a\u5e8f</li> <li></li> </ul>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u67e5\u8be2\u8bbe\u5907\u4fe1\u606f","title":"\u67e5\u8be2\u8bbe\u5907\u4fe1\u606f","text":"<p>\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u67e5\u8be2 GPU \u8bbe\u5907\u5c5e\u6027</p> <p>\u7531\u4e8e GPU \u4e0a\u7684 SM \u6570\u91cf\u4f1a\u56e0\u6240\u7528\u7684\u7279\u5b9a GPU \u800c\u5f02\uff0c\u56e0\u6b64\u4e3a\u652f\u6301\u53ef\u79fb\u690d\u6027\uff0c\u60a8\u4e0d\u5f97\u5c06 SM \u6570\u91cf\u786c\u7f16\u7801\u5230\u4ee3\u7801\u5e93\u4e2d\u3002\u76f8\u53cd\uff0c\u5e94\u8be5\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u83b7\u53d6\u6b64\u4fe1\u606f\u3002</p> <p>\u4ee5\u4e0b\u6240\u793a\u4e3a\u5728 CUDA C/C++ \u4e2d\u83b7\u53d6 C \u7ed3\u6784\u7684\u65b9\u6cd5\uff0c\u8be5\u7ed3\u6784\u5305\u542b\u5f53\u524d\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u7684 GPU \u8bbe\u5907\u7684\u591a\u4e2a\u5c5e\u6027\uff0c\u5176\u4e2d\u5305\u62ec\u8bbe\u5907\u7684 SM \u6570\u91cf\uff1a</p> <pre><code>int deviceId;\ncudaGetDevice(&amp;deviceId);                  // `deviceId` now points to the id of the currently active GPU.\n\ncudaDeviceProp props;\ncudaGetDeviceProperties(&amp;props, deviceId); // `props` now has many useful properties about\n                                           // the active GPU device.\n</code></pre> <p>\u7ec3\u4e60\uff1a\u67e5\u8be2\u8bbe\u5907\u4fe1\u606f</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n  /*\n\n   * Device ID is required first to query the device.\n   */\n\n  int deviceId;\n  cudaGetDevice(&amp;deviceId);\n\n  cudaDeviceProp props;\n  cudaGetDeviceProperties(&amp;props, deviceId);\n\n  int computeCapabilityMajor = props.major;\n  int computeCapabilityMinor = props.minor;\n  int multiProcessorCount = props.multiProcessorCount;\n  int warpSize = props.warpSize;\n\n\n  printf(\"Device ID: %d\\nNumber of SMs: %d\\nCompute Capability Major: %d\\nCompute Capability Minor: %d\\nWarp Size: %d\\n\", deviceId, multiProcessorCount, computeCapabilityMajor, computeCapabilityMinor, warpSize);\n}\n</code></pre> <p>\u5f97\u5230\u7684\u8f93\u51fa\u4e3a\uff1a</p> <pre><code>Device ID: 0\nNumber of SMs: 40\nCompute Capability Major: 7\nCompute Capability Minor: 5\nWarp Size: 32\n</code></pre> <p>\u5c06\u7f51\u683c\u6570\u8c03\u6574\u4e3a SM \u6570\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\u77e2\u91cf\u52a0\u6cd5\u3002</p>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u88ab\u52a0\u901f\u7684-cc-\u5e94\u7528\u7a0b\u5e8f\u7684\u5f02\u6b65\u6d41\u548c\u53ef\u89c6\u5316\u5206\u6790","title":"\u88ab\u52a0\u901f\u7684 C/C++ \u5e94\u7528\u7a0b\u5e8f\u7684\u5f02\u6b65\u6d41\u548c\u53ef\u89c6\u5316\u5206\u6790","text":""},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u5e76\u53d1-cuda-\u6d41","title":"\u5e76\u53d1 CUDA \u6d41","text":"<p>\u521b\u5efa\uff0c\u4f7f\u7528\u548c\u9500\u6bc1\u975e\u9ed8\u8ba4 CUDA \u6d41</p> <p>\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u6f14\u793a\u4e86\u5982\u4f55\u521b\u5efa\uff0c\u5229\u7528\u548c\u9500\u6bc1\u975e\u9ed8\u8ba4 CUDA \u6d41\u3002\u60a8\u4f1a\u6ce8\u610f\u5230\uff0c\u8981\u5728\u975e\u9ed8\u8ba4 CUDA \u6d41\u4e2d\u542f\u52a8 CUDA \u6838\u51fd\u6570\uff0c\u5fc5\u987b\u5c06\u6d41\u4f5c\u4e3a\u6267\u884c\u914d\u7f6e\u7684\u7b2c 4 \u4e2a\u53ef\u9009\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u6838\u51fd\u6570\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u60a8\u4ec5\u5229\u7528\u4e86\u6267\u884c\u914d\u7f6e\u7684\u524d\u4e24\u4e2a\u53c2\u6570\uff1a</p> <pre><code>cudaStream_t stream;   // CUDA\u6d41\u7684\u7c7b\u578b\u4e3a `cudaStream_t`\ncudaStreamCreate(&amp;stream); // \u6ce8\u610f\uff0c\u5fc5\u987b\u5c06\u4e00\u4e2a\u6307\u9488\u4f20\u9012\u7ed9 `cudaCreateStream`\n\nsomeKernel&lt;&lt;&lt;number_of_blocks, threads_per_block, 0, stream&gt;&gt;&gt;();   // `stream` \u4f5c\u4e3a\u7b2c4\u4e2aEC\u53c2\u6570\u4f20\u9012\n\ncudaStreamDestroy(stream); // \u6ce8\u610f\uff0c\u5c06\u503c\uff08\u800c\u4e0d\u662f\u6307\u9488\uff09\u4f20\u9012\u7ed9 `cudaDestroyStream`\n</code></pre> <p>\u4f46\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u6267\u884c\u914d\u7f6e\u7684\u7b2c 3 \u4e2a\u53ef\u9009\u53c2\u6570\u8d85\u51fa\u4e86\u672c\u5b9e\u9a8c\u7684\u8303\u56f4\u3002\u6b64\u53c2\u6570\u5141\u8bb8\u7a0b\u5e8f\u5458\u63d0\u4f9b\u5171\u4eab\u5185\u5b58\uff08\u5f53\u524d\u5c06\u4e0d\u6d89\u53ca\u7684\u9ad8\u7ea7\u4e3b\u9898\uff09\u4e2d\u4e3a\u6bcf\u4e2a\u5185\u6838\u542f\u52a8\u52a8\u6001\u5206\u914d\u7684\u5b57\u8282\u6570\u3002\u6bcf\u4e2a\u5757\u5206\u914d\u7ed9\u5171\u4eab\u5185\u5b58\u7684\u9ed8\u8ba4\u5b57\u8282\u6570\u4e3a\u201c0\u201d\uff0c\u5728\u672c\u7ec3\u4e60\u7684\u5176\u4f59\u90e8\u5206\u4e2d\uff0c\u60a8\u5c06\u4f20\u9012\u201c 0\u201d\u4f5c\u4e3a\u8be5\u503c\uff0c\u4ee5\u4fbf\u5c55\u793a\u6211\u4eec\u611f\u5174\u8da3\u7684\u7b2c 4 \u4e2a\u53c2\u6570\u3002</p>"},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u5927\u4f5c\u4e1a\u4f18\u5316-n-\u4f53\u7cfb\u7edf\u6a21\u62df\u5668","title":"\u5927\u4f5c\u4e1a\uff1a\u4f18\u5316 n \u4f53\u7cfb\u7edf\u6a21\u62df\u5668","text":""},{"location":"ZJU-HPC101/Lec.06%20CUDA%20C%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80.html#\u601d\u8def","title":"\u601d\u8def","text":"<ol> <li>\u6539\u5199 <code>bodyForce</code> \u51fd\u6570\uff0c\u4f7f\u7528 GPU \u52a0\u901f\u8ba1\u7b97<ol> <li>\u4f7f\u7528 <code>__global__</code></li> <li>\u4f7f\u7528 <code>idx</code> \u6765\u6620\u5c04\u6570\u636e\u5757</li> </ol> </li> <li>\u5f97\u5230 SM \u6570\u91cf\uff0c\u4ee5\u6307\u5bfc blockNum \u8bbe\u7f6e<ol> <li>\u4f7f\u7528 <code>cudaGetDevice(&amp;deviceID)</code><code>cudaDeviceGetAttribute(&amp;numberOfSMs, cudaDevAttrMultiProcessorCount, deviceId)</code></li> </ol> </li> <li>\u8fdb\u884c GPU \u5185\u5b58\u5206\u914d <code>cudaMallocManaged(&amp;buf, bytes)</code></li> <li>\u9884\u53d6\u64cd\u4f5c <code>cudaMemPrefetchAsync(p, bytes, deviceId)</code></li> <li>\u4f7f\u7528\u975e\u9ed8\u8ba4\u6d41 <code>cudaCreateStream(&amp;stream)</code></li> </ol> Solution<pre><code>#include &lt;math.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include \"timer.h\"\n#include \"files.h\"\n\n#define SOFTENING 1e-9f\n\n/*\n * Each body contains x, y, and z coordinate positions,\n * as well as velocities in the x, y, and z directions.\n */\n\ntypedef struct { float x, y, z, vx, vy, vz; } Body;\n\n/*\n * Calculate the gravitational impact of all bodies in the system\n * on all others.\n */\n\n__global__ void bodyForce(Body *p, float dt, int n) {\n  int idx = threadIdx.x + blockIdx.x * blockDim.x;\n  int stride = blockDim.x * gridDim.x;\n  for (int i = idx; i &lt; n; i += stride) {\n    float Fx = 0.0f; float Fy = 0.0f; float Fz = 0.0f;\n\n    for (int j = 0; j &lt; n; j++) {\n      float dx = p[j].x - p[i].x;\n      float dy = p[j].y - p[i].y;\n      float dz = p[j].z - p[i].z;\n      float distSqr = dx*dx + dy*dy + dz*dz + SOFTENING;\n      float invDist = rsqrtf(distSqr);\n      float invDist3 = invDist * invDist * invDist;\n\n      Fx += dx * invDist3; Fy += dy * invDist3; Fz += dz * invDist3;\n    }\n\n    p[i].vx += dt*Fx; p[i].vy += dt*Fy; p[i].vz += dt*Fz;\n  }\n}\n\n\nint main(const int argc, const char** argv) {\n\n  int deviceId;\n  int numberOfSMs;\n\n  cudaGetDevice(&amp;deviceId);\n  cudaDeviceGetAttribute(&amp;numberOfSMs, cudaDevAttrMultiProcessorCount, deviceId);\n\n  // The assessment will test against both 2&lt;11 and 2&lt;15.\n  // Feel free to pass the command line argument 15 when you gernate ./nbody report files\n  int nBodies = 2&lt;&lt;11;\n  if (argc &gt; 1) nBodies = 2&lt;&lt;atoi(argv[1]);\n\n  // The assessment will pass hidden initialized values to check for correctness.\n  // You should not make changes to these files, or else the assessment will not work.\n  const char * initialized_values;\n  const char * solution_values;\n\n  if (nBodies == 2&lt;&lt;11) {\n    initialized_values = \"files/initialized_4096\";\n    solution_values = \"files/solution_4096\";\n  } else { // nBodies == 2&lt;&lt;15\n    initialized_values = \"files/initialized_65536\";\n    solution_values = \"files/solution_65536\";\n  }\n\n  if (argc &gt; 2) initialized_values = argv[2];\n  if (argc &gt; 3) solution_values = argv[3];\n\n  const float dt = 0.01f; // Time step\n  const int nIters = 10;  // Simulation iterations\n\n  int bytes = nBodies * sizeof(Body);\n  float *buf;\n\n  cudaMallocManaged(&amp;buf, bytes);\n\n  Body *p = (Body*)buf;\n\n  cudaMemPrefetchAsync(p, bytes, deviceId);\n\n  read_values_from_file(initialized_values, buf, bytes);\n\n  double totalTime = 0.0;\n\n  /*\n   * This simulation will run for 10 cycles of time, calculating gravitational\n   * interaction amongst bodies, and adjusting their positions to reflect.\n   */\n\n  for (int iter = 0; iter &lt; nIters; iter++) {\n    StartTimer();\n\n  /*\n   * You will likely wish to refactor the work being done in `bodyForce`,\n   * and potentially the work to integrate the positions.\n   */\n    cudaStream_t stream;\n    cudaStreamCreate(&amp;stream);\n\n    int blockNum = nBodies / 512;\n\n    bodyForce&lt;&lt;&lt;blockNum, 512, 0, stream&gt;&gt;&gt;(p, dt, nBodies); // compute interbody forces\n    cudaStreamDestroy(stream);\n  /*\n   * This position integration cannot occur until this round of `bodyForce` has completed.\n   * Also, the next round of `bodyForce` cannot begin until the integration is complete.\n   */\n    cudaDeviceSynchronize();\n    for (int i = 0 ; i &lt; nBodies; i++) { // integrate position\n      p[i].x += p[i].vx*dt;\n      p[i].y += p[i].vy*dt;\n      p[i].z += p[i].vz*dt;\n    }\n\n    const double tElapsed = GetTimer() / 1000.0;\n    totalTime += tElapsed;\n  }\n\n  double avgTime = totalTime / (double)(nIters);\n  float billionsOfOpsPerSecond = 1e-9 * nBodies * nBodies / avgTime;\n  write_values_to_file(solution_values, buf, bytes);\n\n  // You will likely enjoy watching this value grow as you accelerate the application,\n  // but beware that a failure to correctly synchronize the device might result in\n  // unrealistically high values.\n  printf(\"%0.3f Billion Interactions / second\", billionsOfOpsPerSecond);\n\n  cudaFree(buf);\n}\n</code></pre>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html","title":"Lec.07 OpenMP, MPI \u5e76\u884c\u8ba1\u7b97\u57fa\u7840","text":""},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#openmp","title":"OpenMP","text":""},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#introduction","title":"Introduction","text":"<p>7_HPC101_24_MPI</p>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#shared-memory-parallel-model","title":"Shared Memory Parallel Model","text":"<ul> <li>UMA (Uniform memory access)\uff1a\u6240\u6709\u6838\u5fc3\u8bbf\u95ee\u4e00\u5757\u5185\u5b58</li> <li>NUMA (Non-~)\uff1a\u5185\u5b58\u5206\u7ec4\uff0c\u8de8\u7ec4\u8bbf\u95ee\u7684\u901f\u5ea6\u8f83\u4f4e  MPI imp</li> </ul> <p>Hint</p> <ul> <li>OpenMP - thread - shared</li> <li>MPI - process - not shared</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#openmp_1","title":"OpenMP","text":"<p>About OpenMP</p> <ul> <li>3 language supported<ul> <li>C/C++</li> <li>Fortran (scientific computation)</li> </ul> </li> <li>provides us an easy way to transform serial programs into parallel</li> </ul> Hello OpenMP<pre><code>#include &lt;omp.h&gt;\n#include &lt;stdio.h&gt;\nint main() {\n    printf(\"Welcome to OpenMP program!\\n\");\n    #pragma omp parallel\n    {\n        int ID = omp_get_thread_num();\n        printf(\"hello (%d)\", ID);\n        printf(\"world (%d)\\n\", ID);\n    }\n    printf(\"Bye!\\n\");\n    return 0;\n}\n</code></pre> <ul> <li>Import omp header</li> <li>Preprocessing directive</li> <li>Parallel Region</li> </ul> \u7f16\u8bd1\u9009\u9879<pre><code>export OMP_NUM_THREADS=4  # \u8bbe\u7f6e\u7ebf\u7a0b\u6570\ngcc -o hello hello.c -fopenmp\n</code></pre> <p></p> <p>Thread ID: <code>omp_get_thread_num()</code> \u53ef\u4ee5\u83b7\u53d6\u7ebf\u7a0b\u7d22\u5f15</p>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#openmp-directives-and-constructs","title":"OpenMP directives and constructs","text":""},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#directives","title":"Directives","text":"<ul> <li>Official Cheat Sheet =&gt; OpenMP_reference.pdf (cheat-sheets.org)</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#work-distribution-constructs","title":"Work-distribution constructs","text":"Addition of two vectors<pre><code>#pragma omp parallel for\nfor (int i = 0; i &lt; N; i++){\n    c[i] = a[i] + b[i];\n}\n</code></pre> <p>Attention</p> <p>\u52a0\u901f\u500d\u6570!=\u7ebf\u7a0b\u6570 Overhead: any combination of excess or indirect computation time, memory, bandwidth, or other resources that are required to perform a specific task.</p> <p>\u53ea\u80fd\u4f7f\u7528\u7b49\u5dee\u6570\u5217\u5f62\u5f0f\u7684 for loop </p>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#loop-schedule","title":"Loop Schedule","text":"Unbalanced workload<pre><code>#pragma omp parallel for\nfor(int i = 0; i &lt; N; i++){\n    c[i] = f(i);  // what if f is not O(1), e.g. O(N)\n}\n</code></pre> <ul> <li>Chunks: \u5faa\u73af\u4e2d\u7684\u5b50\u5757\uff0c\u662f\u4efb\u52a1\u5206\u914d\u7684\u5355\u4f4d\uff0c\u53ef\u5927\u53ef\u5c0f</li> <li>Type: static, dynamic, guided, runtime, auto</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#static","title":"static","text":"<pre><code>#pragma omp parallel for schedule(static)\nfor(int i = 0; i &lt; N; i++){\n    c[i] = f(i);\n}\n</code></pre> <ul> <li>\u5c31\u662f\u76f4\u63a5\u6309\u987a\u5e8f\u5747\u5206</li> <li>pros: less overhead</li> <li>cons: unbalanced workload</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#dynamic","title":"dynamic","text":"<pre><code>#pragma omp parallel for schedule(dynamic, 2)\nfor(int i = 0; i &lt; N; i++){\n    c[i] = f(i);\n}\n</code></pre> <ul> <li>\u52a8\u6001\u5206\u914d</li> <li>pros: more flexible</li> <li>cons: more overhead in scheduling</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#guided","title":"guided","text":"<pre><code>#pragma omp parallel for schedule(guided, 2)\nfor(int i = 0; i &lt; N; i++){\nc[i] = f(i);\n}\n</code></pre> <ul> <li>\u76f8\u6bd4 static: \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u5f97\u5230\u66f4\u597d\u7684 workload balance</li> <li>\u76f8\u6bd4 dynamic: less overhead to dispatch tasks</li> <li>\u5b9e\u9645\u4e0a\u9700\u8981\u591a\u6b21\u5c1d\u8bd5\u54ea\u4e2a\u66f4\u597d</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#nested-for-loop","title":"Nested for loop","text":"Matrix addition<pre><code>#pragma omp parallel for collapse(2)\nfor(int i = 0; i &lt; N; i++){\n    for(int j = 0; j &lt; N; j++){\n        c[i][j] = a[i][j] + b[i][j];\n    }\n}\n</code></pre> <p>Attention</p> <p>It's not always a good idea to parallelize nested loops. Think anout locality and data dependency before you use collapse clause. \u603b\u4e4b\uff0c\u7531\u4e8e\u5c40\u90e8\u6027\uff0c\u4efb\u52a1\u5206\u914d\u8fc7\u4e8e\u7cbe\u7ec6\u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u6267\u884c\u987a\u5e8f\u4e71\u8df3\uff0c\u6548\u7387\u53cd\u800c\u4f4e</p>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#shared-data-and-data-hazards","title":"Shared Data and Data Hazards","text":"Example: Data Hazards in Summation<pre><code>#include &lt;omp.h&gt;\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a[100];\n    int sum = 0;\n    // initialize\n    for (int i = 0; i &lt; 100; i++) a[i] = i + 1;\n\n#pragma omp parallel for\n    for (int i = 0; i &lt;= 99; i++) {\n        sum += a[i];\n    }\n    printf(\"Sum = %d\\n\", sum);\n}\n</code></pre> <p>CPU \u6267\u884c\u52a0\u6cd5</p> <ul> <li>\u4ece\u5185\u5b58\u8bfb\u53d6\u5230</li> <li>\u6267\u884c\u52a0\u6cd5\u8ba1\u7b97</li> <li>\u5199\u56de\u5185\u5b58</li> <li>\u5982\u679c B \u5728 A \u5199\u4e4b\u524d\u8bfb\uff0c\u90a3\u4e48 A \u7684\u7ed3\u679c\u4f1a\u88ab B \u7684\u7ed3\u679c\u8986\u76d6</li> <li>\u5982\u679c A \u7684\u4efb\u52a1\u5f00\u59cb\u5f88\u65e9\uff0c\u4f46\u662f\u5199\u5165\u5f88\u665a\uff0c\u53ef\u80fd\u8986\u76d6\u5176\u4ed6\u6240\u6709\u4efb\u52a1</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#\u53d8\u91cf\u4f5c\u7528\u57df","title":"\u53d8\u91cf\u4f5c\u7528\u57df","text":"<ul> <li>Shared &amp; private data in default<ul> <li>directive \u5916\u9762\u5b9a\u4e49\u7684\u5c31\u662f\u5171\u4eab\u53d8\u91cf\uff0c\u91cc\u9762\u7684\u5c31\u662f\u79c1\u6709\u53d8\u91cf</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#explicit-scpoes-definition","title":"Explicit scpoes definition","text":"private(sum)<pre><code>#include &lt;omp.h&gt;\n#include &lt;stdio.h&gt;\nint main() {\n    int sum = 0;\n    int a[100];\n    // initialize\n    for (int i = 0; i &lt; 100; i++) {\n        a[i] = i + 1;\n    }\n#pragma omp parallel num_threads(4)\n    {\n#pragma omp for private(sum)\n        for (int i = 0; i &lt;= 99; i++) {\n            sum += a[i];\n        }\n        printf(\"Sum = %d\\n\", sum);\n    }\n    printf(\"Outside Sum: %d\\n\", sum);\n}\n</code></pre> output<pre><code>Sum = 325\nSum = 900\nSum = 2200\nSum = 1575\nOutside Sum: 0\n</code></pre> <ul> <li><code>firstprivate()</code> \u5728\u5f00\u59cb\u65f6\u4ece\u5171\u4eab\u4f5c\u7528\u57df\u8bfb\u53d6</li> <li><code>lastprivate()</code> \u5728\u6700\u540e\u4e00\u4e2a\u7ebf\u7a0b\u7ed3\u675f\u65f6\u5199\u56de\u540c\u540d\u5171\u4eab\u53d8\u91cf</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#resolve-data-hazard","title":"Resolve Data Hazard","text":""},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#critical-section-\u4e34\u754c\u533a","title":"Critical Section \u4e34\u754c\u533a","text":"critical section solution<pre><code>#pragma omp parallel for\nfor(int i = 0; i &lt;= 99; i++){\n    #pragma omp critical\n    { sum += a[i]; }\n}\nprintf(\"Sum = %d\\n\", sum);\n</code></pre> <ul> <li>\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u8bed\u53e5</li> <li>\u63a7\u5236\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u8fdb\u5165\u4e34\u754c\u533a\u4ee3\u7801\uff0c\u5373\u9501\u95e8\u6392\u961f</li> <li>\u4f46\u5728\u6c42\u548c\u7684\u95ee\u9898\uff0c\u5176\u5b9e\u9000\u5316\u6210\u4e86\u4e32\u884c\u7a0b\u5e8f</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#atomic-operation-\u539f\u5b50\u64cd\u4f5c","title":"Atomic Operation \u539f\u5b50\u64cd\u4f5c","text":"atomic operation solution<pre><code>#pragma omp parallel for\nfor(int i = 0; i &lt;= 99; i++){\n    #pragma omp atomic\n    sum += a[i];\n}\nprintf(\"Sum = %d\\n\", sum);\n</code></pre> <ul> <li>Atomic operation cannot be separated</li> <li>Only can be applied to one operation</li> <li>Limited set of operatiors supported</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#reduciton-\u5f52\u7ea6","title":"Reduciton \u5f52\u7ea6","text":"reduction solution<pre><code>#pragma omp parallel for reduction(+:sum)\nfor(int i = 0; i &lt;= 99; i++){\n    sum += a[i];\n}\nprintf(\"Sum = %d\\n\", sum);\n</code></pre> <ul> <li>\u5bf9\u6bcf\u4e2a\u7ebf\u7a0b\u521b\u5efa\u79c1\u6709\u53d8\u91cf</li> <li>\u6700\u7ec8\u5bf9\u6bcf\u4e2a\u79c1\u6709\u53d8\u91cf\u8fdb\u884c\u89c4\u7ea6</li> <li>\u89c4\u7ea6\u65b9\u5f0f\u6709\u9650</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#comparison","title":"Comparison","text":"<ul> <li>Critical Region: \u8f6f\u4ef6\u5c42\u9762\u4e0a\u7684\u9501\u673a\u5236 </li> <li>Atomic: CPU \u5c42\u9762\u4e0a\u7684\u539f\u5b50\u5316\u6307\u4ee4\u8c03\u7528\uff0c\u901a\u5e38\u5177\u6709\u66f4\u9ad8\u7684\u6027\u80fd</li> <li>Reduction: \u5728\u6700\u7ec8\u8fdb\u884c\u540c\u6b65</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#another-example-naive-gemm","title":"Another Example: Naive GEMM","text":"General Matrix Multiplication<pre><code>for(int i = 0; i &lt; N; i++){\n    for(int j = 0; j &lt; N; j++){\n        for(int k = 0; k &lt; N; k++){\n            c[i][j] = a[i][k] * b[k][j];\n        }\n    }\n}\n</code></pre> a solution<pre><code>#pragma omp parallel for collapse(2) reduction(+ : c)\n    for (int i = 0; i &lt; N; i++) {\n        for (int j = 0; j &lt; N; j++) {\n            c[i][j] = 0;\n            for (int k = 0; k &lt; N; k++) {\n                c[i][j] += a[i][k] * b[k][j];\n            }\n        }\n    }\n</code></pre>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#miscellaneous","title":"Miscellaneous","text":""},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#threads-synchronize","title":"Threads Synchronize","text":"<ul> <li>Locking: wait unitl obtain the lock</li> <li>Barrier: wait untill all thread reach here<ul> <li>MP \u90fd\u6709\u9690\u5f0f\u7684 barrier</li> <li><code>nowait</code> \u53ef\u4ee5\u624b\u52a8\u53bb\u6389\u6bcf\u4e2a\u5e76\u884c\u533a\u57df\u7684\u9690\u5f0f barrier</li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#nested-parallel-region","title":"Nested Parallel Region","text":"<pre><code>int f(int n, int* a, int* b, int* c){\n    #pragma omp parallel for\n    for(int i = 0; i &lt; n; i++) c[i] = a[i] + b[i];\n}\nint main(){\n    ...\n    #pragma omp parallel for\n    for(int i = 0; i &lt; n; i++) f(n[i], a[i], b[i], c[i]);\n}\n</code></pre> <ul> <li>OpenMP \u9ed8\u8ba4\u4e0d\u4f1a\u6267\u884c\u5d4c\u5957\u5e76\u884c\u533a\u57df</li> <li>\u53ef\u4ee5\u4f7f\u7528 <code>omp_set_nested</code> \u6765\u8c03\u6574\u9ed8\u8ba4\u5141\u8bb8</li> <li>\u5efa\u8bae\u91cd\u6784\u4ee3\u7801</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#false-sharing","title":"False Sharing","text":"<ul> <li>cache \u6709\u6700\u5c0f\u8bfb\u5199\u5355\u4f4d block\uff0c\u6bcf\u6b21 A \u5bf9\u81ea\u5df1\u64cd\u4f5c\u7684\u503c\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u7531\u4e8e\u6765\u81ea memory \u4e2d\u76f8\u540c\u7684 block\uff0cA \u4f1a\u901a\u8fc7\u4e00\u79cd\u5e7f\u64ad\u673a\u5236\u4f7f\u5f97 B \u4fee\u6539 cache\uff0c\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u5171\u4eab</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#summary-how-to-optimize-a-program-with-openmp","title":"Summary: How to Optimize a program with OpenMP","text":"<ol> <li>Where to parallelize: Profiling \u901a\u8fc7\u8f6f\u4ef6\u5206\u6790\u7a0b\u5e8f\u70ed\u70b9\uff0c\u9488\u5bf9\u70ed\u70b9\u8fdb\u884c\u5e76\u884c\u5316</li> <li>Whether to parallelize: Analyze data dependency \u8bbf\u5b58\u4f9d\u8d56\uff0c\u4e0d\u597d\u5e76\u884c</li> <li>How to parallelize: Analysis and Skills<ul> <li>Sub-task Distribution</li> <li>Scheduling Strategy</li> <li>Cache and Locality</li> <li>Hardware Env</li> <li>Sometimes: transform recursion to iteration</li> </ul> </li> <li>Get Down to Work: Testing</li> </ol>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#tips","title":"Tips","text":"<ol> <li>Ensure correctness while parallelizing</li> <li>Be aware of overhead</li> <li>Check more details in official documents<ul> <li>for example, OpenMP on GPU</li> </ul> </li> </ol>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#mpi","title":"MPI","text":""},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#introduction_1","title":"Introduction","text":"<p>7_HPC101_24_MPI</p> <p>MPI, Message Passing Interface - OpenMPI - Intel-MPI - MPICH</p> MPI Hello World<pre><code>#include &lt;mpi.h&gt;\n#include &lt;stdio.h&gt;\n</code></pre> Compile<pre><code>mpicc -o main main.c\n</code></pre> <p>Attention</p> <p>\u6267\u884c\u65f6\u7ec8\u7aef\u8f93\u51fa\u987a\u5e8f\u548c\u5b9e\u9645\u6267\u884c\u987a\u5e8f\u6ca1\u6709\u5173\u7cfb\u3002</p>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#basic-concepts","title":"Basic Concepts","text":""},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#communicator","title":"Communicator","text":"<ul> <li>A communicator defines a group of processes that have the ability to communicate with one another.</li> <li>\u6bcf\u4e2a\u8fdb\u7a0b\u6709\u4e00\u4e2a unique rank \u901a\u4fe1\u57df<ul> <li>\u9ed8\u8ba4\u662f <code>MPI_COMM_WORLD</code></li> </ul> </li> <li>\u4e0d\u4fdd\u8bc1\u516c\u5e73\u6027\uff1a\u53ef\u80fd\u603b\u662f\u65e0\u6cd5\u63a5\u6536\u5230\u67d0\u4e9b\u8282\u70b9\u7684\u4fe1\u606f</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#point-to-point-communication","title":"Point-to-Point Communication","text":""},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#blocking-send-and-receive","title":"Blocking Send and Receive","text":"<pre><code>int MPI_Send();\nint MPI_Recv();\n</code></pre>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#mpi_status","title":"MPI_Status","text":""},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#message-envelope","title":"Message Envelope","text":""},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#communication-mode","title":"Communication Mode","text":"<ul> <li>Buffer Mode</li> <li>Synchronous Mode</li> <li>Ready Mode</li> <li>Standard Mode</li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#example-deadlock","title":"Example: Deadlock","text":"<ul> <li>0 \u548c 1 \u53d1\u9001\u4e4b\u540e\u90fd\u4e00\u76f4\u7b49\u5f85\u5bf9\u65b9\u63a5\u53d7</li> <li>Solution<ul> <li>\u589e\u52a0 if \u8bed\u53e5</li> <li>\u4f7f\u7528 <code>MPI_Sendrecv</code></li> <li>\u4f7f\u7528\u975e\u963b\u585e\u901a\u4fe1 <code>MPR_Isend</code></li> </ul> </li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#collective-communication","title":"Collective Communication","text":"<ul> <li>Synchronizaiton <code>MPR_Barrier</code></li> <li>BroadCast (One to All) <code>MPPI_Bcast</code><ul> <li>Why not Send and Receive \u4f1a\u6bd4\u8f83\u6162\uff0c<code>MPI_Bcast</code> \u4f7f\u7528\u4e86\u6811\u5f62\u7ed3\u6784\u4f20\u9012\u6570\u636e</li> </ul> </li> <li>Scatter (One to All) <code>MPI_Scatter</code></li> <li>Gather (All to One) <code>MPI_Gather</code></li> <li>Allgather (All to All) <code>PI_Allgather</code></li> <li>Reduce <code>MPI_Reuce</code></li> </ul>"},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#example","title":"Example","text":""},{"location":"ZJU-HPC101/Lec.07%20OpenMP%2C%20MPI%20%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80.html#miscellaneous_1","title":"Miscellaneous","text":"<ul> <li>rookiehpc.org/mpi/docs/index.html</li> </ul>"},{"location":"ZJU-HPC101/Lec.09%20Introduction%20to%20Machine%20Learning.html","title":"Lec.09 Introduction to Machine Learning","text":""},{"location":"ZJU-HPC101/Lec.09%20Introduction%20to%20Machine%20Learning.html#introduction","title":"Introduction","text":"<p>9_Introduction to Machine Learning</p> <ul> <li>Basic ML &amp; DL</li> <li>MLSys</li> </ul>"},{"location":"ZJU-HPC101/Lec.09%20Introduction%20to%20Machine%20Learning.html#basic-of-machine-learning","title":"Basic of Machine Learning","text":""},{"location":"ZJU-HPC101/Lec.09%20Introduction%20to%20Machine%20Learning.html#typical-network-architectures","title":"Typical Network Architectures","text":""},{"location":"ZJU-HPC101/Lec.09%20Introduction%20to%20Machine%20Learning.html#cnn","title":"CNN","text":""},{"location":"ZJU-HPC101/Lec.09%20Introduction%20to%20Machine%20Learning.html#rnn","title":"RNN","text":""},{"location":"ZJU-HPC101/Lec.09%20Introduction%20to%20Machine%20Learning.html#attention","title":"Attention","text":""},{"location":"ZJU-HPC101/Lec.09%20Introduction%20to%20Machine%20Learning.html#dl-hardware-software","title":"DL Hardware &amp; Software","text":""},{"location":"ZJU-HPC101/Lec.09%20Introduction%20to%20Machine%20Learning.html#mlsys","title":"MLSys","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/index.html","title":"\u5fae\u89c2\u7ecf\u6d4e\u5b66\uff08\u7532\uff09","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>Chap.01 \u9700\u6c42\u3001\u4f9b\u7ed9\u548c\u5747\u8861\u4ef7\u683c</li> <li>Chap.02 \u6d88\u8d39\u8005\u9009\u62e9</li> <li>Chap.03 \u751f\u4ea7\u8005\u884c\u4e3a\u7406\u8bba</li> <li>Chap.04 \u5b8c\u5168\u7ade\u4e89\u4ea7\u54c1\u5e02\u573a</li> <li>Chap.05 \u5b8c\u5168\u5784\u65ad\u5e02\u573a</li> <li>Chap.06 \u5784\u65ad\u7ade\u4e89</li> <li>Final</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/index.html#info","title":"Info","text":"<p>\u5fae\u89c2\u7ecf\u6d4e\u5b66\uff08\u7532\uff09</p> <ul> <li>\u4ee3\u7801: ECON1001F (011A0041)</li> <li>\u5b66\u5206\uff1a3.0</li> <li>\u5b66\u671f\uff1a2024 \u6625\u590f</li> <li>\u6559\u5e08\uff1a\u6b66\u798f\u5170</li> <li>\u6559\u6750<ul> <li>\u897f\u65b9\u7ecf\u6d4e\u5b66 \u9a6c\u5de5\u7a0b\u7248</li> <li>\u5fae\u89c2\u7ecf\u6d4e\u5b66\u6559\u7a0b \u674e\u5efa\u7434\u3001\u53f2\u664b\u5ddd\u6d59\u6c5f\u5927\u5b66\u51fa\u7248\u793e</li> </ul> </li> </ul> Grading Policy <ul> <li>\u5e73\u65f6\u6210\u7ee9 40<ul> <li>\u4f5c\u4e1a 6 \u6b21 \u7ebf\u4e0a 2 \u6b21\u81ea\u6d4b\u9898</li> <li>\u8003\u52e4 5 \u6b21</li> </ul> </li> <li>\u671f\u672b\u6210\u7ee9 60<ul> <li>\u9009\u62e9 15*1</li> <li>\u7b80\u7b54\u9898 5*7</li> <li>\u8ba1\u7b97\u9898 3*10</li> <li>\u5206\u6790\u9898 2*10</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/index.html#tips","title":"Tips","text":"<p>\u8fd9\u4efd\u7b14\u8bb0\u5e76\u4e0d\u5b8c\u5584\uff01</p> <ul> <li>\u672c\u7b14\u8bb0\u53ea\u6709\u4ee5\u4e0b\u7ae0\u8282\u5185\u5bb9\u5b8c\u6574<ul> <li>Chap.01 \u9700\u6c42\u3001\u4f9b\u7ed9\u548c\u5747\u8861\u4ef7\u683c</li> <li>Chap.02 \u6d88\u8d39\u8005\u9009\u62e9</li> <li>Chap.03 \u751f\u4ea7\u8005\u884c\u4e3a\u7406\u8bba</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html","title":"Chap.01 \u9700\u6c42\u3001\u4f9b\u7ed9\u548c\u5747\u8861\u4ef7\u683c","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u7b2c\u4e00\u8282-\u9700\u6c42","title":"\u7b2c\u4e00\u8282 \u9700\u6c42","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e00\u9700\u6c42\u7684\u6982\u5ff5","title":"\u4e00\u3001\u9700\u6c42\u7684\u6982\u5ff5","text":"<ul> <li>\u9700\u6c42\u91cf<ul> <li>\u57fa\u672c\u7279\u5f81\uff1a\u8d2d\u4e70\u610f\u613f\u548c\u8d2d\u4e70\u80fd\u529b</li> <li>\u9700\u6c42\u91cf=\u5b9e\u9645\u7684\u8d2d\u4e70\u91cf\uff08\u82e5\u4f9b\u7ed9\u80fd\u591f\u6ee1\u8db3\uff09</li> <li>\u6ce8\u610f\uff1a\u9700\u6c42\u91cf\u662f\u9700\u6c42\u8005\u7684\u610f\u56fe\u4e4b\u91cf\uff0c\u65e0\u4ece\u89c2\u5bdf\uff0c\u4e0d\u540c\u4e8e\u8d2d\u4e70\u91cf</li> </ul> </li> <li>\u9700\u6c42\uff1a\u5728\u5176\u4ed6\u6761\u4ef6\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u6d88\u8d39\u8005\u5bf9\u4e00\u79cd\u5546\u54c1\u7684\u9700\u6c42\u4e3a\u67d0\u4e00\u7279\u5b9a\u65f6\u671f\u5185\u6d88\u8d39\u8005\u5728\u5404\u79cd\u53ef\u80fd\u7684\u4ef7\u683c\u4e0b\u613f\u610f\u5e76\u4e14\u80fd\u591f\u8d2d\u4e70\u7684\u8be5\u5546\u54c1\u7684\u6570\u91cf<ul> <li>\u4e0e\u9700\u6c42\u91cf\u7684\u533a\u522b\uff1a\u9700\u6c42\u662f\u4e00\u6761\u66f2\u7ebf\uff0c\u9700\u6c42\u91cf\u662f\u5177\u4f53\u7684\u6570\u91cf\uff08\u5750\u6807\uff09</li> <li>\u9700\u6c42\u7684\u8868\u793a<ul> <li>\u9700\u6c42\u8868</li> <li>\u9700\u6c42\u66f2\u7ebf\uff08\u56fe\u50cf\uff09\u4e00\u6761\u5411\u53f3\u4e0b\u7684\u66f2\u7ebf\uff0c\u4e00\u822c\u90fd\u4ee5\u4ef7\u683c\u4e3a\u7eb5\u5750\u6807</li> <li>\u9700\u6c42\u51fd\u6570 \\(Q^d=\\alpha -\\beta P\\) \u6ce8\u610f\uff1a\u8fd9\u662f\u53cd\u659c\u622a\u5f0f\uff0c\\(\\beta\\) \u4e0d\u662f\u9700\u6c42\u66f2\u7ebf\u7684\u659c\u7387</li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e8c\u9700\u6c42\u89c4\u5f8b","title":"\u4e8c\u3001\u9700\u6c42\u89c4\u5f8b","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e00\u9700\u6c42\u89c4\u5f8b\u7684\u542b\u4e49","title":"\uff08\u4e00\uff09\u9700\u6c42\u89c4\u5f8b\u7684\u542b\u4e49","text":"<ul> <li>\u9700\u6c42\u5b9a\u5f8b\uff1a\u5728\u5176\u4ed6\u6761\u4ef6\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u6c42\u91cf\u548c\u4ef7\u683c\u4e4b\u95f4\u5448\u53cd\u65b9\u5411\u53d8\u52a8\u7684\u5173\u7cfb</li> <li>\u5982\u679c\u6d88\u8d39\u8005\u5bf9\u4e00\u79cd\u5546\u54c1\u7684\u9700\u6c42\u6ee1\u8db3\u9700\u6c42\u89c4\u5f8b\uff0c\u5219<ul> <li>\u9700\u6c42\u66f2\u7ebf\u5411\u53f3\u4e0b\u65b9\u503e\u659c</li> <li>\u9700\u6c42\u66f2\u7ebf\u659c\u7387\u4e3a\u8d1f\u503c \\(Q^d(P)'&lt;0\\)</li> <li>\u9700\u6c42\u51fd\u6570\u4e2d \\(\\beta&gt;0\\)</li> </ul> </li> </ul> <p>\u4e3a\u4ec0\u4e48\u8981\u51fa\u53e3\u8d28\u91cf\u66f4\u597d\u7684\u5546\u54c1\uff1f</p> <p>\u51fa\u53e3\u9700\u8981\u4e00\u5b9a\u7684\u8fd0\u8d39\uff0c\u800c\u8d28\u91cf\u66f4\u597d\u7684\u5546\u54c1\u4ef7\u683c\u66f4\u9ad8\uff0c\u53e0\u52a0\u8fd0\u8d39\u4e4b\u540e\u7684\u4ef7\u683c\u589e\u52a0\u66f4\u4e0d\u660e\u663e \u5982\u540c\u5916\u5356\u8fd0\u8d39\u6da8\u4ef7\u4e4b\u540e\uff0c\u4eba\u4eec\u66f4\u613f\u610f\u70b9\u8d35\u7684\u4e1c\u897f</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e8c\u9700\u6c42\u66f2\u7ebf\u7684\u7279\u4f8b","title":"\uff08\u4e8c\uff09\u9700\u6c42\u66f2\u7ebf\u7684\u7279\u4f8b","text":"<ol> <li>\u5782\u76f4\u7684\u76f4\u7ebf\uff1a\u65e0\u8bba\u4ef7\u683c\u591a\u9ad8\uff0c\u9700\u6c42\u4fdd\u6301\u76f8\u5bf9\u4e0d\u53d8\uff0c\u5982\u4e00\u6237\u5bb6\u5ead\u7684\u6bcf\u6708\u98df\u76d0\u9700\u6c42\uff0c\u4f46\u662f\u5b8c\u5168\u521a\u6027\u7684\u9700\u6c42\u5e76\u4e0d\u5b58\u5728</li> <li>\u6c34\u5e73\u7684\u76f4\u7ebf\uff1a\u6d88\u8d39\u8005\u5bf9\u4e8e\u4ef7\u683c\u53d8\u52a8\u6781\u4e3a\u654f\u611f\uff0c\u4ef7\u683c\u7a0d\u5fae\u5347\u9ad8\u4e4b\u540e\u9700\u6c42\u4e3a 0\uff0c\u7a0d\u5fae\u4e0b\u964d\u4e4b\u540e\u4e3a\u65e0\u7a77\u5927</li> <li>\u5411\u53f3\u4e0a\u65b9\u503e\u659c\uff1a\u4ef7\u683c\u8d8a\u9ad8\uff0c\u9700\u6c42\u8d8a\u9ad8<ul> <li>\u53ef\u80fd\u662f\u51fa\u4e8e\u70ab\u8000\u7684\u76ee\u7684\uff0c\u53c8\u6bd4\u5982\u6d88\u8d39\u8005\u66f4\u4fe1\u4efb\u4ef7\u683c\u9ad8\u7684\u73e0\u5b9d</li> <li>\u88ab\u79f0\u4e3a\u5409\u82ac\u7269\u54c1\uff0c\u4e00\u822c\u90fd\u662f\u4f4e\u6863\u54c1<ul> <li>\u9965\u8352\u7684\u65f6\u5019\uff0c\u867d\u7136\u571f\u8c46\u4ef7\u683c\u4e0a\u6da8\uff0c\u4f46\u662f\u5176\u4ed6\u98df\u7269\u53ef\u80fd\u6da8\u5f97\u66f4\u9ad8\uff0c\u6240\u4ee5\u571f\u8c46\u7684\u9700\u6c42\u91cf\u589e\u52a0</li> </ul> </li> <li>\u8fd9\u5e76\u4e0d\u8fdd\u53cd\u9700\u6c42\u5b9a\u5f8b\uff0c\u56e0\u4e3a\u6d88\u8d39\u8005\u8ba4\u4e3a\u8d2d\u4e70\u7684\u884c\u4e3a\u66f4\u503c\u5f97</li> </ul> </li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e09\u5f71\u54cd\u9700\u6c42\u91cf\u7684\u5176\u4ed6\u56e0\u7d20","title":"\u4e09\u3001\u5f71\u54cd\u9700\u6c42\u91cf\u7684\u5176\u4ed6\u56e0\u7d20","text":"<ol> <li>\u6d88\u8d39\u8005\u7684\u504f\u597d<ul> <li>\u4e0d\u5438\u70df\u7684\u4eba\u548c\u5438\u70df\u7684\u4eba\u5bf9\u70df\u8349\u9700\u6c42\u5dee\u522b\u5f88\u5927</li> <li>\u5bf9\u9700\u6c42\u8fdb\u884c\u8ba8\u8bba\u65f6\uff0c\u901a\u5e38\u5047\u5b9a\u6d88\u8d39\u8005\u504f\u597d\u4fdd\u6301\u4e0d\u53d8</li> </ul> </li> <li>\u6d88\u8d39\u8005\u7684\u6536\u5165\u6c34\u5e73<ul> <li>\u4f4e\u6863\u54c1\u548c\u6b63\u5e38\u54c1<ul> <li>\u6b63\u5e38\u54c1\uff1a\u6536\u5165\u6c34\u5e73\u589e\u52a0\uff0c\u9700\u6c42\u91cf\u589e\u52a0</li> <li>\u4f4e\u6863\u54c1\uff1a\u6536\u5165\u6c34\u5e73\u589e\u52a0\uff0c\u9700\u6c42\u91cf\u51cf\u5c11</li> </ul> </li> <li>\u4f4e\u6863\u54c1\u548c\u6b63\u5e38\u54c1\u7684\u533a\u5206\u56e0\u4eba\u800c\u5f02\uff0c\u4f4e\u6863\u54c1\u4e0d\u7b49\u4e8e\u52a3\u7b49\u54c1</li> </ul> </li> <li>\u5176\u4ed6\u76f8\u5173\u5546\u54c1\u7684\u4ef7\u683c<ul> <li>\u66ff\u4ee3\u54c1\uff1a\u4e24\u79cd\u5546\u54c1\u6ee1\u8db3\u540c\u79cd\u6216\u76f8\u8fd1\u7684\u9700\u6c42\uff0c\u5b8c\u5168\u66ff\u4ee3\u54c1\u66ff\u4ee3\u6bd4\u4f8b\u56fa\u5b9a<ul> <li>\u66ff\u4ee3\u54c1\u4ef7\u683c\u4e0a\u5347\u4f1a\u5bfc\u81f4\u6d88\u8d39\u8005\u5bf9\u539f\u5546\u54c1\u9700\u6c42\u91cf\u4e0a\u5347</li> </ul> </li> <li>\u4e92\u8865\u54c1\uff1a\u4e24\u79cd\u5546\u54c1\u642d\u914d\u4f7f\u7528\u6ee1\u8db3\u67d0\u79cd\u9700\u6c42\uff0c\u5b8c\u5168\u4e92\u8865\u54c1\u642d\u914d\u6bd4\u4f8b\u56fa\u5b9a<ul> <li>\u4e92\u8865\u54c1\u4ef7\u683c\u4e0b\u964d\u4f1a\u5bfc\u81f4\u6d88\u8d39\u8005\u5bf9\u539f\u5546\u54c1\u9700\u6c42\u91cf\u4e0b\u964d</li> </ul> </li> </ul> </li> <li>\u6d88\u8d39\u8005\u9884\u671f\uff1a\u5bf9\u4e8e\u672a\u6765\u7684\u4ef7\u683c\u9884\u671f\u3001\u6536\u5165\u9884\u671f</li> <li>\u653f\u7b56\u53ca\u5176\u4ed6\u56e0\u7d20\uff1a\u653f\u5e9c\u7684\u653f\u7b56\u53ef\u4ee5\u901a\u8fc7\u5f71\u54cd\u504f\u597d\u3001\u6536\u5165\u3001\u76f8\u5173\u54c1\u4ef7\u683c\u548c\u9884\u671f\u6765\u5f71\u54cd\u6d88\u8d39\u8005\u7684\u9700\u6c42\u91cf<ul> <li>\u53e6\u5916\u8fd8\u6709\u5e7f\u544a\u548c\u76f4\u64ad\u5e26\u8d27\u3001\u65b0\u95fb\u3001\u81ea\u7136\u6761\u4ef6\u7b49</li> </ul> </li> </ol> \\[ Q^d=D(P;P^r;P_1\uff0cP_2,...P_n;P^e;P^o;m) \\]"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u56db\u9700\u6c42\u91cf\u7684\u53d8\u52a8\u548c\u9700\u6c42\u7684\u53d8\u52a8","title":"\u56db\u3001\u9700\u6c42\u91cf\u7684\u53d8\u52a8\u548c\u9700\u6c42\u7684\u53d8\u52a8","text":"<ul> <li>\u9700\u6c42\u91cf\u7684\u53d8\u52a8\u662f\u5546\u54c1\u81ea\u8eab\u4ef7\u683c\u7684\u53d8\u52a8\u9020\u6210\u7684\u6d88\u8d39\u8005\u613f\u610f\u5e76\u80fd\u8d2d\u4e70\u7684\u5546\u54c1\u6570\u91cf\u7684\u53d8\u52a8\uff0c\u66f2\u7ebf\u4e0a\u70b9\u7684\u79fb\u52a8</li> <li>\u9700\u6c42\u7684\u53d8\u52a8\u662f\u5176\u4ed6\u56e0\u7d20\u53d8\u5316\u65f6\uff0c\u9700\u6c42\uff08\u9700\u6c42\u66f2\u7ebf\u3001\u4ef7\u683c\u548c\u9700\u6c42\u91cf\u7ec4\u5408\uff09\u7684\u53d8\u52a8\uff0c\u66f2\u7ebf\u7684\u5de6\u53f3\u79fb\u52a8\uff0c\u4e0d\u662f\u4e0a\u4e0b</li> <li>\u9700\u6c42\u91cf\u53d8\u52a8\u4e0d\u80fd\u5f71\u54cd\u4ef7\u683c\uff0c\u9700\u6c42\u53d8\u52a8\u624d\u80fd\u5f71\u54cd\u4ef7\u683c\u9700\u6c42 -&gt;\u4ef7\u683c -&gt;\u9700\u6c42\u91cf</li> </ul> <p>\u9700\u6c42\u8fd8\u662f\u9700\u6c42\u91cf\uff1f</p> <p>\u5ba3\u4f20\u7981\u70df\uff0c\u9700\u6c42\u53d8\u52a8\u9999\u70df\u52a0\u7a0e\uff0c\u9700\u6c42\u91cf\u53d8\u52a8</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e94\u4ece\u5355\u4e2a\u6d88\u8d39\u8005\u9700\u6c42\u5230\u5e02\u573a\u9700\u6c42","title":"\u4e94\u3001\u4ece\u5355\u4e2a\u6d88\u8d39\u8005\u9700\u6c42\u5230\u5e02\u573a\u9700\u6c42","text":"\\[ \\begin{equation} \\begin{aligned} Q^d_i&amp;=D_i(P),i=1,2,3,\\cdots,n \\\\\\\\ Q^d&amp;=D(P)=\\sum_{i=1}^nQ^d_i=\\sum_{i=1}^nD_i(P) \\end{aligned} \\end{equation} \\] <ul> <li>\u79c1\u4eba\u7269\u54c1\uff0c\u5e02\u573a\u9700\u6c42\u66f2\u7ebf\u662f\u5355\u4e2a\u6d88\u8d39\u8005\u6d88\u8d39\u66f2\u7ebf\u7684\u6c34\u5e73\u52a0\u603b</li> <li>\u516c\u5171\u7269\u54c1\uff0c\u5e02\u573a\u9700\u6c42\u66f2\u7ebf\u662f\u5355\u4e2a\u6d88\u8d39\u8005\u6d88\u8d39\u66f2\u7ebf\u7684\u7ad6\u76f4\u52a0\u603b<ul> <li>\u5982\u4e00\u573a\u8868\u6f14\uff0c\u6bcf\u4e2a\u4eba\u95e8\u7968\u7684\u4ef7\u683c\u52a0\u8d77\u6765\u662f\u5e02\u573a\u652f\u4ed8\u7684\u4ef7\u683c\uff0c\u4f46\u4ecd\u7136\u662f\u4e00\u573a\u6f14\u51fa</li> <li>\u4e5f\u5c31\u662f\uff0c\u591a\u4e2a\u6d88\u8d39\u8005\u4e00\u8d77\u6d88\u8d39\uff0c\u4f46\u6240\u9700\u7684\u603b\u91cf\u4ecd\u7136\u4e0d\u53d8</li> </ul> </li> <li>\u5e02\u573a\u9700\u6c42\u4e5f\u4e00\u5b9a\u6ee1\u8db3\u9700\u6c42\u89c4\u5f8b\uff0c\u9700\u6c42\u66f2\u7ebf\u4e5f\u5411\u53f3\u4e0b\u65b9\u503e\u659c</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u7b2c\u4e8c\u8282-\u4f9b\u7ed9","title":"\u7b2c\u4e8c\u8282 \u4f9b\u7ed9","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e00\u4f9b\u7ed9\u7684\u6982\u5ff5","title":"\u4e00\u3001\u4f9b\u7ed9\u7684\u6982\u5ff5","text":"<ul> <li>\u4f9b\u7ed9\u91cf\u662f\u6307\u7279\u5b9a\u4ef7\u683c\u4e0b\u751f\u4ea7\u8005\u613f\u610f\u4e14\u80fd\u591f\u63d0\u4f9b\u7684\u67d0\u79cd\u7269\u54c1\u7684\u6570\u91cf<ul> <li>\u5f3a\u8c03\u4f9b\u7ed9\u610f\u613f\u548c\u4f9b\u7ed9\u80fd\u529b<ul> <li>\u4f9b\u7ed9\u610f\u613f\uff1a\u5bf9\u4ef7\u683c\u6ee1\u610f</li> <li>\u4f9b\u7ed9\u80fd\u529b\uff1a\u5df2\u7ecf\u751f\u4ea7\u51fa\u6765\uff0c\u6216\u8005\u80fd\u7acb\u5373\u5f00\u59cb\u751f\u4ea7</li> </ul> </li> <li>\u4f9b\u7ed9\u91cf=\u5b9e\u9645\u7684\u6d88\u8d39\u91cf</li> </ul> </li> <li>\u4f9b\u7ed9\uff1a\u5728\u5176\u4ed6\u6761\u4ef6\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u751f\u4ea7\u8005\u5728\u67d0\u4e00\u7279\u5b9a\u65f6\u95f4\u5185\u5728\u5404\u79cd\u53ef\u80fd\u4ef7\u683c\u4e0b\u613f\u610f\u5e76\u4e14\u80fd\u591f\u4f9b\u7ed9\u7684\u67d0\u5546\u54c1\u7684\u6570\u91cf</li> <li>\u4f9b\u7ed9\u7684\u8868\u793a<ul> <li>\u4f9b\u7ed9\u8868</li> <li>\u4f9b\u7ed9\u66f2\u7ebf \u5411\u53f3\u4e0a\u65b9\u7684\u66f2\u7ebf</li> <li>\u4f9b\u7ed9\u51fd\u6570 \\(Q^s=\\gamma+\\delta P\\,\\,(\\delta&gt;0)\\)</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e8c\u4f9b\u7ed9\u89c4\u5f8b","title":"\u4e8c\u3001\u4f9b\u7ed9\u89c4\u5f8b","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e00\u4f9b\u7ed9\u89c4\u5f8b\u7684\u542b\u4e49","title":"\uff08\u4e00\uff09\u4f9b\u7ed9\u89c4\u5f8b\u7684\u542b\u4e49","text":"<ul> <li>\u4f9b\u7ed9\u89c4\u5f8b\uff1a\u5728\u5176\u4ed6\u6761\u4ef6\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u67d0\u79cd\u5546\u54c1\u4ef7\u683c\u8d8a\u9ad8\uff0c\u751f\u4ea7\u8005\u7684\u4f9b\u7ed9\u91cf\u8d8a\u9ad8<ul> <li>\u4ef7\u683c\u5347\u9ad8\uff0c\u4f01\u4e1a\u6269\u5927\u751f\u4ea7\uff08\u4f01\u4e1a\u89c4\u6a21\uff09</li> <li>\u4ef7\u683c\u5347\u9ad8\uff0c\u5e02\u573a\u6709\u524d\u666f\uff0c\u66f4\u591a\u4f01\u4e1a\u5165\u5c40\uff08\u4f01\u4e1a\u6570\u91cf\uff09</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e8c\u4f9b\u7ed9\u66f2\u7ebf\u7684\u7279\u4f8b","title":"\uff08\u4e8c\uff09\u4f9b\u7ed9\u66f2\u7ebf\u7684\u7279\u4f8b","text":"<ol> <li>\u5782\u76f4\u7684\u76f4\u7ebf\uff1a\u4ef7\u683c\u6d6e\u52a8\u4f46\u4f9b\u7ed9\u91cf\u4e0d\u53d8\uff0c\u5982\u5bb9\u6613\u70c2\u7684\u65b0\u9c9c\u83dc\u8089\uff0c\u603b\u8981\u5356\u5b8c</li> <li>\u6c34\u5e73\u7684\u76f4\u7ebf\uff1a\u4f9b\u7ed9\u91cf\u6539\u53d8\u4ef7\u683c\u4e0d\u53d8\uff0c\u6bd4\u5982\u666f\u533a\u91cc\u7684\u5c0f\u5546\u54c1\u5e97\uff0c\u6216\u5177\u6709\u65e2\u6709\u751f\u4ea7\u80fd\u529b\u4e14\u5355\u4f4d\u6210\u672c\u7a33\u5b9a\u7684\u516c\u53f8\uff08\u53c2\u8003\u8bfe\u672c P 54\uff09</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e09\u5f71\u54cd\u4f9b\u7ed9\u91cf\u7684\u5176\u4ed6\u56e0\u7d20","title":"\u4e09\u3001\u5f71\u54cd\u4f9b\u7ed9\u91cf\u7684\u5176\u4ed6\u56e0\u7d20","text":"<ol> <li>\u751f\u4ea7\u6210\u672c\uff0c\u751f\u4ea7\u6210\u672c\u589e\u52a0\uff0c\u5229\u6da6\u76f8\u5e94\u51cf\u5c11\uff0c\u82e5\u5546\u54c1\u4ef7\u683c\u4e0d\u53d8\uff0c\u751f\u4ea7\u8005\u4f1a\u51cf\u5c11\u4f9b\u7ed9\u91cf\uff0c\u6bd4\u5982\u5de5\u5382\u751f\u4ea7\u8981\u8003\u8651\u80fd\u6e90\u4ef7\u683c</li> <li>\u751f\u4ea7\u8005\u7684\u76ee\u6807 \u6bd4\u5982\u63a8\u51fa\u6027\u4ef7\u6bd4\u4ea7\u54c1\u6765\u83b7\u5f97\u4f01\u4e1a\u58f0\u8a89</li> <li>\u751f\u4ea7\u6280\u672f\u6c34\u5e73\uff1a\u6280\u672f\u6c34\u5e73\u8d8a\u9ad8\uff0c\u4ea7\u91cf\u8d8a\u5927\uff0c\u76f8\u5e94\u4f9b\u7ed9\u8d8a\u9ad8\uff0c\u5982\u667a\u80fd\u624b\u673a\u5341\u51e0\u5e74\u7684\u53d1\u5c55</li> <li>\u751f\u4ea7\u8005\u53ef\u751f\u4ea7\u7684\u5176\u4ed6\u76f8\u5173\u5546\u54c1\u7684\u4ef7\u683c<ol> <li>\u8d44\u6e90\u7ade\u4e89\uff1aA \u6da8\u4ef7\uff0cB \u4ef7\u683c\u4e0d\u53d8\uff0c\u5219\u751f\u4ea7\u8981\u7d20\u8f6c\u5411 A\uff0cB \u4f9b\u7ed9\u51cf\u5c11\uff1b\u5982\u7389\u7c73\u548c\u5927\u8c46</li> <li>\u8d44\u6e90\u5171\u4eab\uff1aA \u6da8\u4ef7\uff0cB \u4ef7\u683c\u4e0d\u53d8\uff0c\u751f\u4ea7\u8981\u7d20\u8f6c\u5411\u8fd9\u4e00\u4ea7\u7ebf\uff0cB \u4f9b\u7ed9\u4e5f\u589e\u52a0\uff1b\u5982\u6c7d\u6cb9\u548c\u7164\u6cb9</li> </ol> </li> <li>\u751f\u4ea7\u8005\u5bf9\u672a\u6765\u7684\u9884\u671f\uff1a\u5982\u9884\u671f\u672a\u6765\u4ef7\u683c\u4e0a\u6da8\uff0c\u5219\u51cf\u5c11\u5f53\u4e0b\u4f9b\u7ed9\u6765\u56e4\u79ef\u5546\u54c1</li> <li>\u653f\u5e9c\u7684\u653f\u7b56\uff1a\u5982\u7a0e\u6536\u3001\u4f18\u60e0\u3001\u8865\u8d34</li> <li>\u81ea\u7136\u6761\u4ef6\uff1a\u5982\u6c34\u679c\u852c\u83dc</li> </ol> \\[ Q^s=S(P;A;P_1,P_2,\\cdots,P_n;r_1,r_2,\\cdots,r_n;P^e;P^o) \\] <p>\u9884\u671f\u4ea7\u54c1\u4ef7\u683c\u4f1a\u4e0b\u964d\u5bf9\u4f9b\u7ed9\u7684\u5f71\u54cd</p> <p>\u4e00\u65b9\u9762\uff0c\u672a\u6765\u4ef7\u683c\u8981\u4e0b\u964d\uff0c\u73b0\u5728\u80af\u5b9a\u9700\u8981\u629b\u552e\uff0c\u77ed\u65f6\u95f4\u4f9b\u7ed9\u589e\u52a0 \u53e6\u4e00\u65b9\u9762\uff0c\u672a\u6765\u4ef7\u683c\u4e0b\u964d\uff0c\u4f1a\u964d\u4f4e\u4ea7\u91cf\uff0c\u957f\u65f6\u95f4\u6765\u770b\u4f9b\u7ed9\u53ef\u80fd\u51cf\u5c11</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u56db\u4f9b\u7ed9\u91cf\u7684\u53d8\u52a8\u548c\u4f9b\u7ed9\u7684\u53d8\u52a8","title":"\u56db\u3001\u4f9b\u7ed9\u91cf\u7684\u53d8\u52a8\u548c\u4f9b\u7ed9\u7684\u53d8\u52a8","text":"<p>\u540c \u9700\u6c42\u91cf\u7684\u53d8\u52a8\u548c\u9700\u6c42\u7684\u53d8\u52a8\uff0c\u4f9b\u7ed9\u91cf\u7684\u53d8\u52a8\u662f\u66f2\u7ebf\u4e0a\u70b9\u7684\u79fb\u52a8\uff0c\u4f9b\u7ed9\u7684\u53d8\u52a8\u662f\u66f2\u7ebf\u7684\u6574\u4f53\u79fb\u52a8</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e94\u4ece\u5355\u4e2a\u751f\u4ea7\u8005\u7684\u4f9b\u7ed9\u5230\u5e02\u573a\u4f9b\u7ed9","title":"\u4e94\u3001\u4ece\u5355\u4e2a\u751f\u4ea7\u8005\u7684\u4f9b\u7ed9\u5230\u5e02\u573a\u4f9b\u7ed9","text":"\\[ \\begin{equation} \\begin{aligned} Q^s_j&amp;=S_j(P),j=1,2,\\cdots,m\\\\\\\\ Q^s&amp;=S(P)=\\sum_{j=1}^mQ_j^s=\\sum_{j=1}^mS_j(P) \\end{aligned} \\end{equation} \\] <p>\u540c \u4ece\u5355\u4e2a\u6d88\u8d39\u8005\u9700\u6c42\u5230\u5e02\u573a\u9700\u6c42\uff0c\u6c34\u5e73\u52a0\u603b</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u7b2c\u4e09\u8282-\u5e02\u573a\u5747\u8861","title":"\u7b2c\u4e09\u8282 \u5e02\u573a\u5747\u8861","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e00\u5747\u8861\u4ef7\u683c\u548c\u5747\u8861\u6570\u91cf","title":"\u4e00\u3001\u5747\u8861\u4ef7\u683c\u548c\u5747\u8861\u6570\u91cf","text":"<ul> <li>\u5e02\u573a\u5747\u8861\uff1a\u5e02\u573a\u9700\u6c42\u7b49\u4e8e\u5e02\u573a\u4f9b\u7ed9\u7684\u72b6\u6001</li> <li>\u9700\u6c42\u4ef7\u683c\u3001\u4f9b\u7ed9\u4ef7\u683c\u53ca\u5747\u8861\u4ef7\u683c\u548c\u6570\u91cf<ul> <li>\u9700\u6c42\u4ef7\u683c\\(P_d\\)\uff1a\u6d88\u8d39\u8005\u8d2d\u4e70\u4e00\u5b9a\u5546\u54c1\u613f\u610f\u652f\u4ed8\u7684\u6700\u9ad8\u4ef7\u683c</li> <li>\u4f9b\u7ed9\u4ef7\u683c\\(P_s\\)\uff1a\u4f9b\u7ed9\u8005\u9500\u552e\u4e00\u5b9a\u5546\u54c1\u613f\u610f\u63a5\u53d7\u7684\u6700\u4f4e\u4ef7\u683c</li> <li>\u5747\u8861\u4ef7\u683c\\(P_e\\)\uff1a\u5e02\u573a\u51fa\u6e05 \\(Q_e=Q_d=Q_s\\) \u7684\u4ef7\u683c\uff0c\u6b64\u65f6 \\(P_e=P_d=P_s\\)</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u5e02\u573a\u5747\u8861\u4e0b\u4ef7\u683c\u7684\u53d8\u52a8","title":"\u5e02\u573a\u5747\u8861\u4e0b\u4ef7\u683c\u7684\u53d8\u52a8","text":"<ul> <li>\u8fc7\u5269\u6216\u8d85\u989d\u4f9b\u7ed9\uff1a\u53ea\u8981\u6709 surplus\uff0c\u4f9b\u7ed9\u8005\u4f1a\u4e0b\u8c03\u4ef7\u683c\uff0c\u9700\u6c42\u7f3a\u53e3\u51cf\u5c0f\uff0c\u76f4\u5230\u4ef7\u683c\u9ad8\u5ea6\u56de\u5230\u5e73\u8861\u70b9</li> <li>\u77ed\u7f3a\u6216\u8d85\u989d\u9700\u6c42\uff1a\u53ea\u8981\u6709 shortage\uff0c\u4f9b\u7ed9\u8005\u4f1a\u589e\u957f\u4ef7\u683c\uff0c\u4f9b\u7ed9\u7f3a\u53e3\u51cf\u5c0f\uff0c\u76f4\u5230\u4ef7\u683c\u9ad8\u5ea6\u56de\u5230\u5e73\u8861\u70b9 \u77ed\u7f3a\u4e0d\u662f\u7a00\u7f3a\uff0c\u4e0d\u662f\u7269\u4ee5\u7a00\u4e3a\u8d35</li> <li>\u4f7f\u7528\u76f4\u7ebf\u89e3\u6790\u5f0f\u6c42\u89e3\u4ea4\u70b9\uff0c\u5c31\u80fd\u627e\u5230\u5747\u8861\u4ef7\u683c\u548c\u6570\u91cf</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e8c\u5e02\u573a\u5747\u8861\u7684\u53d8\u52a8-\u6bd4\u8f83\u9759\u6001\u5206\u6790","title":"\u4e8c\u3001\u5e02\u573a\u5747\u8861\u7684\u53d8\u52a8 - \u6bd4\u8f83\u9759\u6001\u5206\u6790","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u5206\u6790\u6b65\u9aa4","title":"\u5206\u6790\u6b65\u9aa4","text":"<ol> <li>\u786e\u5b9a\u4e8b\u4ef6\u5bfc\u81f4\u4f9b\u7ed9\u8fd8\u662f\u9700\u6c42\u7684\u79fb\u52a8</li> <li>\u786e\u5b9a\u79fb\u52a8\u7684\u65b9\u5411</li> <li>\u8bf4\u660e\u5982\u4f55\u6539\u53d8\u5747\u8861\u4ef7\u683c\u548c\u6570\u91cf</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u51e0\u4e2a\u7b80\u5355\u89c4\u5f8b","title":"\u51e0\u4e2a\u7b80\u5355\u89c4\u5f8b","text":"<ul> <li>\u4f9b\u7ed9\u4e0d\u53d8\uff0c\u9700\u6c42\u589e\u52a0\uff0c\u5747\u8861\u4ef7\u683c\u548c\u6570\u91cf\u90fd\u4e0a\u5347\uff0cvice versa</li> <li>\u9700\u6c42\u4e0d\u53d8\uff0c\u4f9b\u7ed9\u589e\u52a0\uff0c\u5747\u8861\u4ef7\u683c\u4e0b\u964d\uff0c\u6570\u91cf\u4e0a\u5347\uff0cvice versa</li> <li>\u4f9b\u7ed9\u548c\u9700\u6c42\u540c\u65f6\u589e\u52a0<ul> <li>\u5747\u8861\u6570\u91cf\u589e\u52a0</li> <li>\u5982\u679c\u9700\u6c42\u589e\u52a0\u66f4\u5feb\uff0c\u5747\u8861\u4ef7\u683c\u4e0a\u6da8\uff0c\u5982\u7535\u5b50\u4ea7\u54c1\uff1b\u53cd\u4e4b\uff0c\u5747\u8861\u4ef7\u683c\u4e0b\u964d\uff0c\u5982\u7cae\u98df\u548c\u8863\u670d</li> <li>vice versa</li> </ul> </li> </ul> <p>\u4f7f\u7528\u56fe\u50cf\u8fdb\u884c\u6848\u4f8b\u5206\u6790</p> <p>\u8fdb\u53e3\u5173\u7a0e\u63d0\u9ad8\u8fdb\u53e3\u5546\u54c1\u6210\u672c\uff0c\u5bfc\u81f4\u5176\u4ef7\u683c\u4e0a\u5347\uff1b\u4ef7\u683c\u4e0a\u5347\u540e\u6d88\u8d39\u8005\u9700\u6c42\u51cf\u5c11\uff0c\u4e8e\u662f\u4ef7\u683c\u4e0b\u964d\uff1f \u4ef7\u683c\u4e0a\u5347\u4e4b\u540e\u6539\u53d8\u4e86\u4f9b\u7ed9\uff0c\u6d88\u8d39\u8005\u9700\u6c42\u51cf\u5c11\u5230\u5e02\u573a\u5747\u8861\u70b9\uff0c\u4e4b\u540e\u4ef7\u683c\u4e0d\u4f1a\u4e0b\u964d</p> <p>\u5206\u6790\u5409\u82ac\u5546\u54c1\uff1a\u4ee5\u9965\u8352\u65f6\u671f\u7684\u571f\u8c46\u4e3a\u4f8b</p> <p>\u4e00\u65b9\u9762\uff0c\u9965\u8352\u571f\u8c46\u4f9b\u7ed9\u51cf\u5c11\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u5176\u4ed6\u5546\u54c1\u4f9b\u7ed9\u51cf\u5c11\u5e45\u5ea6\u66f4\u5927\uff0c\u6216\u6da8\u4ef7\u5e45\u5ea6\u66f4\u5927\uff0c\u4eba\u4eec\u5bf9\u571f\u8c46\u7684\u9700\u6c42\u589e\u957f\u3002 \u6700\u540e\uff0c\u4f9b\u7ed9\u66f2\u7ebf\u5de6\u79fb\uff0c\u9700\u6c42\u66f2\u7ebf\u53f3\u79fb\uff0c\u9700\u6c42\u91cf\u51cf\u5c11\u4e14\u4ef7\u683c\u4e0a\u6da8\u3002</p> <p>\u5fae\u89c202 1-\u4f9b\u6c42\u7406\u8bba</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u7b2c\u56db\u8282-\u5f39\u6027","title":"\u7b2c\u56db\u8282 \u5f39\u6027","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e00\u5f39\u6027\u7684\u6982\u5ff5","title":"\u4e00\u3001\u5f39\u6027\u7684\u6982\u5ff5","text":"<ul> <li>\u5f39\u6027\uff1a\u8861\u91cf\u4e70\u8005\u6216\u5356\u8005\u5bf9\u5e02\u573a\u6761\u4ef6\u53d8\u5316\uff08\u5982\u4ef7\u683c\uff09\u7684\u53cd\u5e94\u7a0b\u5ea6</li> <li>\u5f39\u6027\u7cfb\u6570\uff1a(\\(\u5f39\u6027\u7cfb\u6570=\u56e0\u53d8\u91cf\u7684\u53d8\u52a8\u767e\u5206\u6bd4/\u81ea\u53d8\u91cf\u7684\u53d8\u52a8\u767e\u5206\u6bd4=\\frac{\\Delta y}{y}/\\frac{\\Delta x}{x}\\)\\)<ul> <li>\u4e3a\u4ec0\u4e48\u7528\u767e\u5206\u6bd4\uff1f* \u56e0\u4e3a\u5355\u4f4d\u53ef\u4ee5\u6d88\u6389\uff0c\u800c\u4e14\u5f52\u4e00\u5316</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e8c\u9700\u6c42\u4ef7\u683c\u5f39\u6027","title":"\u4e8c\u3001\u9700\u6c42\u4ef7\u683c\u5f39\u6027","text":"<p>$$ E_d=\\frac{\\Delta Q/Q}{\\Delta P/P}\\,\\,\\,\\,\u9700\u6c42\u91cf\u6bd4\u4e0a\u4ef7\u683c $$ - \\(E_d\\) \u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u4e00\u822c\u53d6\u7edd\u5bf9\u503c - \\(E_d\\) \u8d8a\u5927\uff0c\u9700\u6c42\u7684\u5f39\u6027\u8d8a\u5927\uff0c\u9700\u6c42\u5bf9\u4ef7\u683c\u66f4\u654f\u611f</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u9700\u6c42\u5f39\u6027\u7684\u8ba1\u7b97","title":"\u9700\u6c42\u5f39\u6027\u7684\u8ba1\u7b97","text":"<ul> <li>\u4e24\u79cd\u5f39\u6027\u8ba1\u7b97\u65b9\u5f0f<ul> <li>\u70b9\u5f39\u6027\uff1a\u9009\u5b9a\u8d77\u59cb\u70b9\u5f88\u91cd\u8981\uff0c\u5728\u4e0d\u540c\u70b9\u8ba1\u7b97\u4e00\u822c\u4f1a\u83b7\u5f97\u4e0d\u4e00\u6837\u7684\u5f39\u6027 \u4e00\u822c\u7528\u4e8e\u5bf9\u67d0\u4e2a\u70b9\u5206\u6790</li> <li>\u5f27\u5f39\u6027\uff1a\u6307\u9700\u6c42\u66f2\u7ebf\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u5f39\u6027\uff0c\u53d6\u4e24\u70b9\u4e4b\u95f4\u7684\u4e2d\u70b9\u4e3a\u5355\u4f4d\u4e00\uff0c\u4ece\u4e24\u4fa7\u5f00\u59cb\u8ba1\u7b97\u7ed3\u679c\u76f8\u540c \u4e00\u822c\u7528\u4e8e\u5bf9\u4e00\u6bb5\u8fc7\u7a0b\u5206\u6790</li> </ul> </li> <li>\\(E_d=\u70b9\u4e0e\u539f\u70b9\u8fde\u7ebf\u7684\u659c\u7387/\u9700\u6c42\u7684\u659c\u7387=\u70b9\u5230Q\u8f74\u957f\u5ea6/\u70b9\u5230P\u8f74\u957f\u5ea6\\)<ul> <li>\u5bf9\u4e8e\u7ebf\u6027\u9700\u6c42\uff0c\u70b9\u4e0e\u539f\u70b9\u8fde\u7ebf\u7684\u659c\u7387\u8d8a\u5927\uff0c\u5f39\u6027\u8d8a\u5927\uff1b\u9700\u6c42\u66f2\u7ebf\u8d8a\u5e73\u7f13\uff0c\u5f39\u6027\u8d8a\u5927</li> <li>\u7ebf\u6027\u9700\u6c42\u66f2\u7ebf\u4e0a\u6bcf\u4e00\u70b9\u7684\u659c\u7387\u76f8\u540c\uff0c\u4f46\u662f\u5f39\u6027\u4e0d\u540c\uff0c\u540c\u79cd\u5546\u54c1\u4ef7\u683c\u4e0d\u540c\u5f39\u6027\u4e0d\u540c<ul> <li>\u4e0e P \u8f74\u4ea4\u70b9\uff0c\u5f39\u6027\u8d8b\u4e8e\u65e0\u7a77\uff0c\u4ef7\u683c\u8d8a\u9ad8\uff0c\u5f39\u6027\u8d8a\u5927</li> <li>\u4e0e Q \u8f74\u4ea4\u70b9\uff0c\u5f39\u6027\u8d8b\u4e8e 0\uff0c\u4ef7\u683c\u8d8a\u4f4e\uff0c\u5f39\u6027\u8d8a\u5c0f</li> <li>\u66f2\u7ebf\u4e2d\u70b9\u5904\u5f39\u6027\u4e3a 1</li> </ul> </li> <li>\u975e\u7ebf\u6027\u9700\u6c42\u53d6\u5207\u7ebf\u6765\u8ba1\u7b97</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u9700\u6c42\u5f39\u6027\u7684\u5f71\u54cd\u56e0\u7d20","title":"\u9700\u6c42\u5f39\u6027\u7684\u5f71\u54cd\u56e0\u7d20","text":"<ul> <li>\u5927\u7c7b\u5546\u54c1\u7684\u5f39\u6027\u5c0f \u5982\u8863\u670d\u5f39\u6027\u6bd4\u725b\u4ed4\u88e4\u5f39\u6027\u5c0f</li> <li>\u66ff\u4ee3\u54c1\u591a\u7684\u5546\u54c1\u5f39\u6027\u5c0f \u5982\u7259\u818f\u6bd4\u65e9\u9910\u9762\u5305\u5f39\u6027\u5c0f</li> <li>\u5fc5\u9700\u54c1\u7684\u5f39\u6027\u5c0f \u5982\u836f\u54c1\u5f39\u6027\u5c0f\uff0c\u6e38\u8247\u5f39\u6027\u5927</li> <li>\u4e00\u822c\u8ba4\u4e3a\u957f\u671f\u9700\u6c42\u5f39\u6027\u66f4\u5927 \u5982\u957f\u671f\u6c7d\u6cb9\uff0c\u77ed\u671f\u53ef\u80fd\u627e\u4e0d\u5230\u66ff\u4ee3</li> <li>\u4e00\u822c\u5360\u6d88\u8d39\u652f\u51fa\u5c11\u7684\u5546\u54c1\u5f39\u6027\u5c0f \u6bd4\u5982\u7b14\u6da8\u4ef7\u611f\u89c9\u6ca1\u4ec0\u4e48\u5f71\u54cd\uff0c\u7b14\u8bb0\u672c\u7535\u8111\u6da8\u4ef7\u611f\u89c9\u6709\u8f83\u5927\u5f71\u54cd</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e0d\u540c\u5f39\u6027\u7684\u9700\u6c42\u66f2\u7ebf\u5168\u90fd\u7528\u5f27\u5f39\u6027\u8ba1\u7b97","title":"\u4e0d\u540c\u5f39\u6027\u7684\u9700\u6c42\u66f2\u7ebf\uff08\u5168\u90fd\u7528\u5f27\u5f39\u6027\u8ba1\u7b97\uff09","text":"<ul> <li>\\(E_d=0\\) \u7406\u60f3\u521a\u6027\u9700\u6c42\uff0c\u5782\u76f4\u7ebf</li> <li>\\(0&lt;E_d&lt;1\\) \u7f3a\u4e4f\u5f39\u6027\uff0c\u9700\u6c42\u91cf\u53d8\u52a8\u5e45\u5ea6\u5c0f\u4e8e\u4ef7\u683c\u53d8\u52a8\u5e45\u5ea6\uff0c\u6bd4\u8f83\u9661\u5ced\u7684\u76f4\u7ebf</li> <li>\\(E_d=1\\) \u5355\u4f4d\u5f39\u6027\uff0c\u9700\u6c42\u91cf\u53d8\u52a8\u5e45\u5ea6\u7b49\u4e8e\u4ef7\u683c\u53d8\u52a8\u5e45\u5ea6\uff0c\u6bd4\u5982\u53cd\u6bd4\u4f8b\u51fd\u6570</li> <li>\\(E_d&gt;1\\) \u5bcc\u6709\u5f39\u6027\uff0c\u9700\u6c42\u91cf\u53d8\u52a8\u5e45\u5ea6\u5927\u4e8e\u4ef7\u683c\u53d8\u52a8\u5e45\u5ea6\uff0c\u5e73\u7f13\u7684\u66f2\u7ebf\uff0c\u6bd4\u5982\u6d77\u9c9c</li> <li>\\(E_d\\rightarrow\\infty\\) \u5b8c\u5168\u5f39\u6027\uff0c\u6c34\u5e73\u76f4\u7ebf</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u603b\u6536\u76ca\u4e0e\u4ef7\u683c\u9700\u6c42\u5f39\u6027","title":"\u603b\u6536\u76ca\u4e0e\u4ef7\u683c\u9700\u6c42\u5f39\u6027","text":"<p>\u603b\u6536\u76ca\uff1a\u4ef7\u683c* \u6570\u91cf \u76f8\u5f53\u4e8e\u77e9\u5f62\u9762\u79ef</p> <ul> <li>\u9700\u6c42\u7f3a\u4e4f\u5f39\u6027\uff1a\u4ef7\u683c\u4e0a\u5347\u5c06\u5bfc\u81f4\u603b\u6536\u76ca\u589e\u52a0\uff0c\u589e\u52a0\u5230\u9700\u6c42\u66f2\u7ebf\u4e2d\u70b9\u65f6\u6536\u5165\u6700\u5927</li> <li>\u9700\u6c42\u5bcc\u6709\u5f39\u6027\uff1a\u4ef7\u683c\u4e0a\u5347\u5c06\u5bfc\u81f4\u603b\u6536\u76ca\u51cf\u5c11\uff0c\u964d\u4f4e\u5230\u9700\u6c42\u66f2\u7ebf\u4e2d\u70b9\u65f6\u6536\u5165\u6700\u5927\uff0c\u6bd4\u5982\u6253\u6298\u51fa\u552e\u7684\u5f39\u6027\u5546\u54c1</li> </ul> <p>\u8584\u5229\u591a\u9500\uff0c\u8c37\u8d31\u4f24\u519c</p> <p>\u4e00\u4e9b\u5546\u54c1\u5bcc\u6709\u5f39\u6027\uff0c\u9002\u5f53\u964d\u4ef7\u53ef\u4ee5\u589e\u52a0\u603b\u6536\u76ca\uff1b \u4e00\u4e9b\u5546\u54c1\u7f3a\u4e4f\u5f39\u6027\uff0c\u4ea7\u91cf\u589e\u5927\u5e73\u8861\u4ef7\u683c\u964d\u4f4e\u65f6\uff0c\u603b\u6536\u76ca\u53cd\u800c\u51cf\u5c11 \u5982\u80f0\u5c9b\u7d20\u6da8\u4ef7\uff0c\u6536\u76ca\u589e\u52a0\uff1b\u6e38\u8f6e\u964d\u4ef7\uff0c\u6536\u76ca\u4e5f\u589e\u52a0</p> <p>\u6bd2\u54c1\u72af\u7f6a\u95ee\u9898</p> <p>\u7981\u6bd2\uff0c\u7531\u4e8e\u672c\u8eab\u6bd2\u54c1\u9700\u6c42\u5f39\u6027\u8f83\u5c0f\uff0c\u7981\u6bd2\u5bfc\u81f4\u6bd2\u54c1\u4ef7\u683c\u4e0a\u5347\uff0c\u6bd2\u54c1\u72af\u7f6a\u6536\u76ca\u4f1a\u66f4\u5927\uff0c\u77ed\u671f\u5185\u53ef\u80fd\u65e0\u6548\uff1b\u4f46\u662f\u957f\u671f\u6765\u770b\u4ef7\u683c\u4e0a\u6da8\u51cf\u5c11\u4e86\u65b0\u5438\u6bd2\u8005\uff0c\u662f\u6709\u6548\u7684 \u7981\u6bd2\u6559\u80b2\uff0c\u964d\u4f4e\u4e86\u9700\u6c42\uff0c\u66f4\u52a0\u6709\u6548</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e09\u9700\u6c42\u6536\u5165\u5f39\u6027","title":"\u4e09\u3001\u9700\u6c42\u6536\u5165\u5f39\u6027","text":"\\[ E_m=\\frac{\\Delta Q/Q}{\\Delta M/M} \\] <ul> <li>\\(E_m&gt;0\\) \u6b63\u5e38\u54c1<ul> <li>\\(E_m&gt;1\\) \u5962\u4f88\u54c1</li> <li>\\(0&lt;E_m&lt;1\\) \u5fc5\u9700\u54c1</li> </ul> </li> <li>\\(E_m&lt;0\\) \u4f4e\u6863\u54c1</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u9700\u6c42\u6536\u5165\u5f39\u6027\u7684\u8ba1\u7b97","title":"\u9700\u6c42\u6536\u5165\u5f39\u6027\u7684\u8ba1\u7b97","text":"<ul> <li>\u8fc7\u539f\u70b9\u7684\u7ebf\u5f39\u6027\u4e3a 1\uff0c\u8d8a\u5e73\u7f13\u5f39\u6027\u8d8a\u5927\uff0c\u7ecf\u8fc7\u6bd4\u8f83\u5c31\u53ef\u77e5\u9053\u5f39\u6027\u662f\u591a\u5927</li> </ul> <p>eg</p> <p>Qs=c+dP, c&gt;0, d&gt;0 \u5219 P \u4e3a 0 \u65f6\uff0cQ \u5927\u4e8e 0\uff0c\u5f39\u6027\u5728 0 \u5230 1 \u4e4b\u95f4</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u56db\u9700\u6c42\u4ea4\u53c9\u4ef7\u683c\u5f39\u6027","title":"\u56db\u3001\u9700\u6c42\u4ea4\u53c9\u4ef7\u683c\u5f39\u6027","text":"\\[ \\begin{aligned} \u9700\u6c42\u4ea4\u53c9\u4ef7\u683c\u5f39\u6027&amp;=A\u7684\u9700\u6c42\u91cf\u53d8\u52a8\u767e\u5206\u6bd4/B\u7684\u9700\u6c42\u91cf\u53d8\u52a8\u767e\u5206\u6bd4\\\\\\\\ E_c&amp;=\\frac{dQ_A}{dP_B}\\frac{P_B}{Q_A} \\end{aligned} \\] <ul> <li>\u66ff\u4ee3\u54c1\uff0c\u5927\u4e8e\u96f6 \u7a00\u996d\u7684\u4ef7\u683c\u4e0a\u5347\uff0c\u8c46\u6d46\u7684\u9700\u6c42\u589e\u52a0</li> <li>\u4e92\u8865\u54c1\uff0c\u5c0f\u4e8e\u96f6 \u5982\uff0c\u4e00\u79cd\u5546\u54c1\u4ef7\u683c\u53d8\u5316\u65f6\uff0c\u548c\u53e6\u4e00\u79cd\u5546\u54c1\u7684\u9700\u6c42\u91cf\u540c\u589e\u540c\u51cf</li> <li>\u65e0\u5173\u54c1\uff0c\u7b49\u4e8e\u96f6</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e94\u4f9b\u7ed9\u5f39\u6027","title":"\u4e94\u3001\u4f9b\u7ed9\u5f39\u6027","text":"\\[ \\begin{aligned} \u4f9b\u7ed9\u4ef7\u683c\u5f39\u6027&amp;=\u4f9b\u7ed9\u91cf\u53d8\u52a8\u767e\u5206\u6bd4/\u4ef7\u683c\u53d8\u52a8\u767e\u5206\u6bd4\\\\\\\\ E_S&amp;=\\frac{dQ/Q}{dP/P} \\end{aligned} \\] <ul> <li>\u7528\u4e8e\u8861\u91cf\u4f9b\u7ed9\u8005\u7684\u4f9b\u7ed9\u91cf\u5bf9\u4ef7\u683c\u7684\u654f\u611f\u5ea6</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u5f71\u54cd\u56e0\u7d20","title":"\u5f71\u54cd\u56e0\u7d20","text":"<ul> <li>\u53d6\u51b3\u4e8e\u5356\u8005\u6539\u53d8\u4ed6\u4eec\u751f\u4ea7\u7684\u7269\u54c1\u91cf\u7684\u7075\u6d3b\u6027<ul> <li>\u53e3\u7f69\u7684\u77ed\u671f\u4e0e\u957f\u671f\u4f9b\u7ed9 \u65f6\u95f4\u2014\u2014\u4f01\u4e1a\u89c4\u6a21\u548c\u4f01\u4e1a\u6570\u91cf</li> <li>\u5e03\u6d1b\u82ac\u548c\u82af\u7247 \u6280\u672f\u7c7b\u578b\u4e0e\u751f\u4ea7\u5468\u671f<ul> <li>\u5e03\u6d1b\u82ac\u589e\u4ea7\u5f88\u5feb\uff0c\u82af\u7247\u5219\u4e0d\u7136</li> </ul> </li> <li>\u70bc\u6cb9\u5382\u4f9b\u7ed9\u91cf\u7684\u591a\u5c11 \u95f2\u7f6e\u751f\u4ea7\u529b\uff0c\u8fdb\u5165\u58c1\u5792</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e0d\u540c\u5f39\u6027\u7684\u4f9b\u7ed9\u66f2\u7ebf","title":"\u4e0d\u540c\u5f39\u6027\u7684\u4f9b\u7ed9\u66f2\u7ebf","text":"<ul> <li>\u5b8c\u5168\u65e0\u5f39\u6027 \u6d77\u6ee8\u8d44\u4ea7</li> <li>\u7f3a\u4e4f\u5f39\u6027 \u77ed\u671f\u98df\u54c1</li> <li>\u5355\u4f4d\u5f39\u6027</li> <li>\u5355\u4f4d\u5f39\u6027</li> <li>\u5bcc\u6709\u5f39\u6027</li> <li>\u5b8c\u5168\u5f39\u6027 \u5b8c\u5168\u7ade\u4e89\u5e02\u573a\uff0c\u6240\u6709\u5382\u5bb6\u4e00\u8d77\u5b9a\u4ef7\u7684\u60c5\u51b5</li> </ul> <p>\u8c37\u8d31\u4f24\u519c</p> <p>\u4f9b\u7ed9\u589e\u52a0\uff0c\u9700\u6c42\u4e0d\u53d8\uff0c\u5747\u8861\u70b9\u6765\u5230\u5355\u4f4d\u9700\u6c42\u5f39\u6027\u4ee5\u4e0b \u6b64\u65f6\uff0c\u5982\u679c\u4f9b\u7ed9\u5f39\u6027\u66f4\u5c0f\uff0c\u5373\u4f9b\u7ed9\u66f2\u7ebf\u66f4\u9661\u5ced\uff0c\u5bf9\u519c\u6c11\u7684\u635f\u5931\u8d8a\u5927 ppt\u7684\u56fe\u7247\u89e3\u91ca</p> <p>\u4e3a\u4ec0\u4e48 OPEC \u4e0d\u80fd\u4fdd\u6301\u77f3\u6cb9\u7684\u9ad8\u4ef7\u683c\uff1f</p> <p>\u77f3\u6cb9\u7684\u4ef7\u683c\u77ed\u671f\u80fd\u591f\u4e0a\u5347\u5f88\u5feb\uff0c\u957f\u671f\u5219\u4e0d\u80fd\uff1f \u77ed\u671f\u7684\u77f3\u6cb9\u9700\u6c42\u548c\u4f9b\u7ed9\u7f3a\u4e4f\u5f39\u6027\uff0c\u957f\u671f\u9700\u6c42\u4e0e\u4f9b\u7ed9\u5bcc\u6709\u5f39\u6027 \u957f\u671f\u6765\u770b\uff0c\u7531\u4e8e\u9700\u6c42\u5bcc\u6709\u5f39\u6027\uff0c\u6709\u7684\u56fd\u5bb6\u6709\u964d\u4ef7\u7684\u610f\u613f\uff0c\u96be\u4ee5\u7ef4\u6301\u5408\u4f5c\u5173\u7cfb \u8fd9\u4e5f\u662f\u4e00\u822c\u7684\u89c4\u5f8b \u5fae\u89c202 2-\u5f39\u6027\u7406\u8bba, page 44</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u516d\u86db\u7f51\u6a21\u578b\u5e02\u573a\u5747\u8861\u53d8\u52a8\u7684\u52a8\u6001\u5206\u6790","title":"\u516d\u3001\u86db\u7f51\u6a21\u578b\u2014\u2014\u5e02\u573a\u5747\u8861\u53d8\u52a8\u7684\u52a8\u6001\u5206\u6790","text":"<ul> <li>\u86db\u7f51\u6a21\u578b\uff1a\u6709\u4e00\u5b9a\u751f\u4ea7\u5468\u671f\u7684\u4ea7\u54c1\u7684\u4ef7\u683c\u548c\u4ea7\u91cf\u5931\u53bb\u5747\u8861\u65f6\u7684\u5e02\u573a\u6ce2\u52a8</li> <li>\u57fa\u672c\u5047\u8bbe<ul> <li>\u5e02\u573a\u4e0a\u6709\u4f17\u591a\u7684\u751f\u4ea7\u8005\uff0c\u5355\u4e2a\u751f\u4ea7\u8005\u4ea7\u91cf\u7684\u4efb\u4f55\u6539\u53d8\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5e02\u573a\u4ef7\u683c</li> <li>\u672c\u671f\u7684\u9700\u6c42\u53d6\u51b3\u4e8e\u540c\u671f\u7684\u4ef7\u683c \\(Q^d_t=f(p_t)\\)</li> <li>\u672c\u671f\u7684\u4ea7\u91cf\u53d6\u51b3\u4e8e\u4e0a\u671f\u7684\u4ef7\u683c \\(Q^s_t=f(p_{t-1})\\)</li> <li>\u5747\u8861\u6761\u4ef6\uff1a\u6240\u6709\u7684\u91cf\u90fd\u76f8\u7b49\u65f6\u8fbe\u5230\u5747\u8861</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u86db\u7f51\u6a21\u578b\u6c42\u89e3","title":"\u86db\u7f51\u6a21\u578b\u6c42\u89e3","text":"<ul> <li>\u6c42\u89e3\u5747\u8861\u6761\u4ef6</li> <li>\u6c42\u89e3\u52a8\u6001\u5747\u8861\u8c03\u6574</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u86db\u7f51\u6a21\u578b\u7684\u7c7b\u578b","title":"\u86db\u7f51\u6a21\u578b\u7684\u7c7b\u578b","text":"<p>\u5fae\u89c202 2-\u5f39\u6027\u7406\u8bba, page 51</p> <ul> <li>\u6536\u655b\u86db\u7f51\u6a21\u578b<ul> <li>\u9700\u6c42\u66f2\u7ebf\u7684\u659c\u7387&lt;\u4f9b\u7ed9\u66f2\u7ebf\u7684\u659c\u7387</li> <li>\u9700\u6c42\u66f2\u7ebf\u7684\u5f39\u6027&gt;\u4f9b\u7ed9\u66f2\u7ebf\u7684\u5f39\u6027</li> </ul> </li> <li>\u7b49\u5e45\u6ce2\u52a8\u86db\u7f51\u6a21\u578b<ul> <li>\u9700\u6c42\u66f2\u7ebf\u7684\u659c\u7387=\u4f9b\u7ed9\u66f2\u7ebf\u7684\u659c\u7387</li> </ul> </li> <li>\u53d1\u6563\u86db\u7f51\u6a21\u578b<ul> <li>\u9700\u6c42\u66f2\u7ebf\u7684\u659c\u7387&gt;\u4f9b\u7ed9\u66f2\u7ebf\u7684\u659c\u7387</li> <li>\u9700\u6c42\u66f2\u7ebf\u7684\u5f39\u6027&lt;\u4f9b\u7ed9\u66f2\u7ebf\u7684\u5f39\u6027</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u7b2c\u4e94\u8282-\u4f9b\u6c42\u5206\u6790\u7684\u5e94\u7528\u4e8b\u4f8b","title":"\u7b2c\u4e94\u8282 \u4f9b\u6c42\u5206\u6790\u7684\u5e94\u7528\u4e8b\u4f8b","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e00\u653f\u5e9c\u4ef7\u683c\u5e72\u9884","title":"\u4e00\u3001\u653f\u5e9c\u4ef7\u683c\u5e72\u9884","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u652f\u6301\u4ef7\u683c","title":"\u652f\u6301\u4ef7\u683c","text":"<p>\u5fae\u89c202 2-\u5f39\u6027\u7406\u8bba, page 54</p> <p>\u653f\u5e9c\u4e3a\u4e86\u652f\u6301\u67d0\u4e9b\u884c\u4e1a\u53d1\u5c55\u800c\u89c4\u5b9a\u7684\uff0c\u9ad8\u4e8e\u5747\u8861\u4ef7\u683c\u7684\u6700\u4f4e\u9650\u4ef7\uff0c\u653f\u5e9c\u53ef\u80fd\u6536\u8d2d\u8fc7\u5269\u4f9b\u7ed9</p> <p>\u6700\u4f4e\u5de5\u8d44\u6cd5\u7684\u5f71\u54cd</p> <p>\u4f1a\u5bfc\u81f4\u4f9b\u8fc7\u4e8e\u6c42\uff0c\u5bfc\u81f4\u4e00\u90e8\u5206\u4f4e\u6536\u5165\u4eba\u7fa4\u5931\u4e1a \u5fae\u89c202 2-\u5f39\u6027\u7406\u8bba, page 56</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u9650\u5236\u4ef7\u683c","title":"\u9650\u5236\u4ef7\u683c","text":"<p>\u5fae\u89c202 2-\u5f39\u6027\u7406\u8bba, page 58</p> <ul> <li>\u653f\u5e9c\u4e3a\u4e86\u9650\u5236\u67d0\u4e9b\u4ea7\u54c1\u7684\u4ef7\u683c\u4e0a\u6da8\u800c\u5bf9\u8be5\u4ea7\u54c1\u89c4\u5b9a\u7684\u4f4e\u4e8e\u5747\u8861\u4ef7\u683c\u7684\u6700\u4f4e\u4ef7\u683c</li> <li>\u4ef7\u683c\u9650\u5236\u540e\uff0c\u957f\u671f\u7684\u7f3a\u53e3\u6bd4\u77ed\u671f\u66f4\u5927</li> </ul> <p>\u4e3a\u4ec0\u4e48\u7968\u8d29\u5b50\u5c61\u7981\u4e0d\u6b62</p> <p>\u9650\u5236\u4ef7\u683c\u4f7f\u5f97\u9700\u6c42\u5927\u4e8e\u4f9b\u7ed9 \u800c\u5728\u8fd9\u4e2a\u4f9b\u7ed9\u91cf\u4e0b\uff0c\u6d88\u8d39\u8005\u5b9e\u9645\u6709\u66f4\u9ad8\u4ef7\u8d2d\u4e70\u7684\u610f\u613f\uff0c\u6240\u4ee5\u7968\u8d29\u5b50\u6709\u6536\u5165\u7a7a\u95f4</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u4e8c\u7a0e\u6536\u6548\u5e94\u5206\u6790","title":"\u4e8c\u3001\u7a0e\u6536\u6548\u5e94\u5206\u6790","text":"<ul> <li>\u7a0e\u6536\u8f6c\u5ac1\uff1a\u7eb3\u7a0e\u4eba\u5728\u7f34\u7eb3\u7a0e\u6536\u540e\uff0c\u901a\u8fc7\u63d0\u4ef7\u6216\u538b\u4ef7\u65b9\u5f0f\uff0c\u5c06\u90e8\u5206\u6216\u5168\u90e8\u7a0e\u6536 \u8f6c\u79fb\u7ed9\u522b\u4eba\u8d1f\u62c5\u7684\u8fc7\u7a0b</li> <li>\u7a0e\u6536\u5f52\u5bbf\uff1a\u7a0e\u6536\u8f6c\u5ac1\u540e\u6240\u5f62\u6210\u7684\u8d1f\u62c5\u5206\u914d\u7ed3\u679c</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u5411\u6d88\u8d39\u8005\u5f81\u7a0e","title":"\u5411\u6d88\u8d39\u8005\u5f81\u7a0e","text":"<ul> <li>\u5fae\u89c202 2-\u5f39\u6027\u7406\u8bba, page 61</li> <li>\u9700\u6c42\u66f2\u7ebf\u4e0b\u79fb</li> <li>\u5b9e\u9645\u4e0a\u662f\u6d88\u8d39\u8005\u548c\u751f\u4ea7\u8005\u5171\u540c\u627f\u62c5\u7684\u7a0e\u8d4b</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u5411\u751f\u4ea7\u8005\u5f81\u7a0e","title":"\u5411\u751f\u4ea7\u8005\u5f81\u7a0e","text":"<ul> <li>\u5fae\u89c202 2-\u5f39\u6027\u7406\u8bba, page 64</li> <li>\u4f9b\u7ed9\u66f2\u7ebf\u4e0a\u79fb</li> <li>\u4e70\u5356\u53cc\u65b9\u5171\u540c\u627f\u62c5</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u7ed3\u8bba","title":"\u7ed3\u8bba","text":"<ul> <li>\u65e0\u8bba\u662f\u5bf9\u4e70\u8005\u5f81\u7a0e\u8fd8\u662f\u5bf9\u5356\u8005\u5f81\u7a0e\uff0c\u7a0e\u6536\u5f52\u5bbf\u662f\u4e00\u6837\u7684</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u7a0e\u6536\u5f52\u5bbf\u7684\u5f71\u54cd\u6761\u4ef6","title":"\u7a0e\u6536\u5f52\u5bbf\u7684\u5f71\u54cd\u6761\u4ef6","text":"<ul> <li>\u7a0e\u6536\u5f52\u5bbf\u548c\u5411\u8c01\u5f81\u7a0e\u65e0\u5173\uff0c\u548c\u5f39\u6027\u5927\u5c0f\u6709\u5173<ul> <li>\u5fae\u89c202 2-\u5f39\u6027\u7406\u8bba, page 68</li> <li>\u9700\u6c42\u5f39\u6027\u6bd4\u8f83\u5c0f\uff0c\u4e70\u8005\u627f\u62c5\u591a</li> <li>\u4f9b\u7ed9\u5f39\u6027\u6bd4\u8f83\u5c0f\uff0c\u4e70\u8005\u627f\u62c5\u591a</li> </ul> </li> <li>\u5f39\u6027\u5927\u7684\u4e00\u65b9\uff0c\u635f\u5931\u5c31\u6bd4\u8f83\u5c0f\uff0cvice versa</li> </ul> <p>\u5962\u4f88\u54c1\u7a0e\u7684\u95ee\u9898 \u5fae\u89c202 2-\u5f39\u6027\u7406\u8bba, page 71</p> <p>\u5962\u4f88\u54c1\u7684\u9700\u6c42\u4ef7\u683c\u5f39\u6027\u5f88\u9ad8 \u6e38\u8247\u4f9b\u7ed9\u77ed\u671f\u7f3a\u4e4f\u5f39\u6027 \u6240\u4ee5\u4f9b\u5e94\u5546\u627f\u62c5\u5927\u90e8\u5206\u7684\u7a0e\u8d1f</p> <p>\u8865\u8d34\u6548\u5e94\u5206\u6790 \u5fae\u89c202 2-\u5f39\u6027\u7406\u8bba, page 73</p> <p>\u540c\u6837\uff0c\u4e0e\u8865\u8d34\u8c01\u6ca1\u6709\u5173\u7cfb \u540c\u6837\uff0c\u5f39\u6027\u5c0f\u7684\u8865\u8d34\u591a</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u672c\u7ae0\u603b\u7ed3","title":"\u672c\u7ae0\u603b\u7ed3","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u7b2c\u4e00\u5c0f\u8282","title":"\u7b2c\u4e00\u5c0f\u8282","text":"<ul> <li>\u9700\u6c42\u4e0e\u9700\u6c42\u91cf\uff0c\u9700\u6c42\u51fd\u6570\u4e0e\u9700\u6c42\u66f2\u7ebf\uff0c\u9700\u6c42\u89c4\u5f8b\uff0c\u5f71\u54cd\u9700\u6c42\u7684\u5176\u4ed6\u56e0\u7d20</li> <li>\u6b63\u5e38\u54c1\u4e0e\u4f4e\u6863\u54c1</li> <li>\u66ff\u4ee3\u54c1\u4e0e\u4e92\u8865\u54c1\u4ef7\u683c\u5bf9\u9700\u6c42\u7684\u5f71\u54cd</li> <li>\u4f9b\u7ed9\u4e0e\u4f9b\u7ed9\u91cf\uff0c\u4f9b\u7ed9\u89c4\u5f8b\uff0c\u4f9b\u7ed9\u51fd\u6570\u4e0e\u4f9b\u7ed9\u66f2\u7ebf\uff0c\u5f71\u54cd\u4f9b\u7ed9\u7684\u5176\u4ed6\u56e0\u7d20</li> <li>\u5982\u4f55\u4ece\u4e2a\u4eba\u9700\u6c42\u4e0e\u4f9b\u7ed9\u63a8\u5bfc\u5e02\u573a\u9700\u6c42\u4e0e\u4f9b\u7ed9\uff08\u65b9\u7a0b\u5f0f\uff09\uff0c\u53ca\u5e02\u573a\u5747\u8861\u7684\u6c42\u89e3</li> <li>\u9700\u6c42\uff08\u4f9b\u7ed9\uff09\u51fd\u6570\u7684\u659c\u7387\u4e0e\u9700\u6c42\uff08\u4f9b\u7ed9\uff09\u66f2\u7ebf\u7684\u659c\u7387</li> <li>\u9700\u6c42\uff08\u91cf\uff09\u4e0e\u4f9b\u7ed9\uff08\u91cf\uff09\u53d8\u52a8\uff0c\u5e02\u573a\u5747\u8861\u7684\u53d8\u52a8</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.01%20%E9%9C%80%E6%B1%82%E3%80%81%E4%BE%9B%E7%BB%99%E5%92%8C%E5%9D%87%E8%A1%A1%E4%BB%B7%E6%A0%BC.html#\u7b2c\u4e8c\u5c0f\u8282","title":"\u7b2c\u4e8c\u5c0f\u8282","text":"<ul> <li>\u5f39\u6027\u4e0e\u9700\u6c42\u66f2\u7ebf\u7684\u659c\u7387</li> <li>\u9700\u6c42\u5f39\u6027\u4e0e\u6536\u5165</li> <li>\u6b63\u5e38\u54c1\u4e0e\u4f4e\u6863\u54c1\u7684\u9700\u6c42\u6536\u5165\u5f39\u6027\uff0c\u66ff\u4ee3\u54c1\u4e0e\u4e92\u8865\u54c1\u7684\u9700\u6c42\u4ea4\u53c9\u4ef7\u683c\u5f39\u6027</li> <li>\u4f9b\u7ed9\u5f39\u6027</li> <li>\u8c37\u8d31\u4f24\u519c\u7684\u7ecf\u6d4e\u5b66\u5206\u6790\uff0c\u5224\u65ad\u86db\u7f51\u6a21\u578b\u662f\u5426\u6536\u655b\u548c\u53d1\u6563</li> <li>\u652f\u6301\u4ef7\u683c\u548c\u9650\u5236\u4ef7\u683c</li> <li>\u4f9b\u6c42\u5f39\u6027\u4e0e\u7a0e\u6536\u5f52\u5bbf</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html","title":"Chap.02 \u6d88\u8d39\u8005\u9009\u62e9","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u7b2c\u4e00\u8282-\u6548\u7528\u7406\u8bba\u6982\u8ff0","title":"\u7b2c\u4e00\u8282 \u6548\u7528\u7406\u8bba\u6982\u8ff0","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u4e00\u6b32\u671b\u548c\u6548\u7528","title":"\u4e00\u3001\u6b32\u671b\u548c\u6548\u7528","text":"<ul> <li>\u6b32\u671b\u7684\u65e0\u9650\u6027\u548c\u6709\u9650\u6027<ul> <li>\u65e0\u9650\u6027\uff1a\u4e00\u4e2a\u6b32\u671b\u6ee1\u8db3\u4e86\u8fd8\u6709\u5176\u4ed6\u6b32\u671b\u4ea7\u751f</li> <li>\u6709\u9650\u6027\uff1a\u6bcf\u4e2a\u6b32\u671b\u662f\u6709\u9650\u7684</li> </ul> </li> <li>\u6548\u7528\uff1a\u6d88\u8d39\u8005\u62e5\u6709\u6216\u6d88\u8d39\u67d0\u79cd\u5546\u54c1\u6216\u670d\u52a1\u5bf9\u6b32\u671b\u7684\u6ee1\u8db3\u7a0b\u5ea6<ul> <li>\u6d88\u8d39\u8005\u5bf9\u8be5\u5546\u54c1\u6709\u6b32\u671b</li> <li>\u8be5\u5546\u54c1\u6709\u6ee1\u8db3\u6b32\u671b\u7684\u80fd\u529b</li> <li>\u6548\u7528\u7684\u5927\u5c0f\u53d6\u51b3\u4e8e\u6d88\u8d39\u8005\u7684\u4e3b\u89c2\u5fc3\u7406\u8bc4\u4ef7\uff0c\u7531\u6d88\u8d39\u8005\u6b32\u671b\u7684\u5f3a\u5ea6\u6240\u51b3\u5b9a</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u6548\u7528\u7684\u5ea6\u91cf\u57fa\u6570\u6548\u7528\u4e0e\u5e8f\u6570\u6548\u7528","title":"\u6548\u7528\u7684\u5ea6\u91cf\u2014\u2014\u57fa\u6570\u6548\u7528\u4e0e\u5e8f\u6570\u6548\u7528","text":"<ul> <li>\u57fa\u6570\u6548\u7528\u7406\u8bba\u8ba4\u4e3a\u6d88\u8d39\u8005\u6d88\u8d39\u4e00\u5b9a\u6570\u91cf\u7684\u5546\u54c1\u6216\u670d\u52a1\u83b7\u5f97\u7684\u6548\u7528\uff0c\u53ef\u7528\u57fa\u6570\u4e2a\u5355\u4f4d\u8868\u793a\u51fa\u6765\uff0c\u5e76\u52a0\u603b\u6c42\u548c</li> <li>\u5e8f\u6570\u6548\u7528\u7406\u8bba\u8ba4\u4e3a\u6d88\u8d39\u8005\u5bf9\u6d88\u8d39\u5546\u54c1\u83b7\u5f97\u7684\u6548\u7528\u6ee1\u8db3\u7a0b\u5ea6\u662f\u4e3b\u89c2\u611f\u53d7\uff0c\u4e0d\u80fd\u5177\u4f53\u6d4b\u5ea6\uff0c\u66f4\u4e0d\u80fd\u52a0\u603b\u6c42\u548c\uff08\u66ff\u4ee3\u54c1\u4e0e\u4e92\u8865\u54c1\uff09\uff0c\u53ea\u80fd\u6392\u5e8f</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u4e8c\u603b\u6548\u7528\u548c\u8fb9\u9645\u6548\u7528\u9012\u51cf","title":"\u4e8c\u3001\u603b\u6548\u7528\u548c\u8fb9\u9645\u6548\u7528\u9012\u51cf","text":"<ul> <li>\u603b\u6548\u7528\uff08TU\uff09</li> <li>\u8fb9\u9645\u6548\u7528\uff08MU\uff09\uff1a\u6bcf\u589e\u52a0\u4e00\u5355\u4f4d\u5546\u54c1\u6216\u670d\u52a1\u7684\u6d88\u8d39\u4e2d\u6240\u83b7\u5f97\u7684\u6548\u7528\u589e\u52a0\u91cf<ul> <li>\\(MU_X=\\frac{\\partial U(X, Y)}{\\partial X}\\)</li> </ul> </li> <li>\\(TU=\\sum MU\\)</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u8fb9\u9645\u6548\u7528\u9012\u51cf\u89c4\u5f8b","title":"\u8fb9\u9645\u6548\u7528\u9012\u51cf\u89c4\u5f8b","text":"<ul> <li>\u5728\u4e00\u5b9a\u65f6\u671f\u5185\uff0c\u968f\u7740\u6d88\u8d39\u8005\u4e0d\u65ad\u589e\u52a0\u67d0\u79cd\u5546\u54c1\u6216\u670d\u52a1\u7684\u6d88\u8d39\u91cf\uff0c\u5728\u5176\u4ed6\u5546\u54c1\u6216\u670d\u52a1\u6d88\u8d39\u91cf\u4e0d\u53d8\u7684\u6761\u4ef6\u4e0b\uff0c\u6d88\u8d39\u8005\u4ece\u6bcf\u589e\u52a0\u4e00\u5355\u4f4d\u8be5\u5546\u54c1\u6216\u670d\u52a1\u7684\u6d88\u8d39\u4e2d\u6240\u83b7\u5f97\u7684\u6548\u7528\u589e\u52a0\u91cf\u9010\u6e10\u9012\u51cf</li> <li>\u8fb9\u9645\u6548\u7528\u9012\u51cf\u5bfc\u81f4\u603b\u6548\u7528\u4ee5\u9012\u51cf\u7684\u901f\u5ea6\u800c\u589e\u52a0</li> </ul> <p>\u5fae\u89c203 1-\u57fa\u6570\u6548\u7528\u7406\u8bba(1), page 11</p> <p>\u56e0\u4e3a\u56db\u4e2a\u8f6e\u5b50\u624d\u80fd\u53d1\u6325\u529f\u80fd\uff0c\u8981\u5c06\u56db\u4e2a\u8f6e\u5b50\u5f53\u6210\u4e00\u4e2a\u6574\u4f53</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u7b2c\u56db\u8282-\u6d88\u8d39\u8005\u5747\u8861","title":"\u7b2c\u56db\u8282 \u6d88\u8d39\u8005\u5747\u8861","text":"<ul> <li>\u6d88\u8d39\u8005\u5747\u8861\uff1a\u5728\u6536\u5165\u548c\u5546\u54c1\u4ef7\u683c\u65e2\u5b9a\u7684\u6761\u4ef6\u4e0b\uff0c\u9009\u62e9\u8d2d\u4e70\u4e00\u5b9a\u91cf\u7684\u5546\u54c1\u7ec4\u5408\uff0c\u4ece\u800c\u83b7\u5f97\u6700\u5927\u7684\u603b\u6548\u7528</li> <li>\u6700\u5927\u6548\u7528\u7684\u5747\u8861\u6761\u4ef6<ul> <li>\u53ea\u6d88\u8d39\u4e00\u79cd\u5546\u54c1</li> <li>\u6d88\u8d39\u4e24\u79cd\u5546\u54c1</li> <li>\u6d88\u8d39 n \u79cd\u5546\u54c1</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u4e00\u79cd\u5546\u54c1\u60c5\u51b5\u4e0b\u7684\u6548\u7528\u6700\u5927\u5316","title":"\u4e00\u79cd\u5546\u54c1\u60c5\u51b5\u4e0b\u7684\u6548\u7528\u6700\u5927\u5316","text":"<ul> <li>\u5fae\u89c203 1-\u57fa\u6570\u6548\u7528\u7406\u8bba(1), page 13</li> <li>\u53ea\u8981\u8d2d\u4e70\u5546\u54c1\u7684\u8fb9\u9645\u6548\u7528\u5927\u4e8e\u7b49\u4e8e\u82b1\u8d39\u8d27\u5e01\u7684\u8fb9\u9645\u6548\u7528\uff0c\u5c31\u4f1a\u8d2d\u4e70</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u4e24\u79cd\u5546\u54c1\u60c5\u51b5\u4e0b\u7684\u6548\u7528\u6700\u5927\u5316","title":"\u4e24\u79cd\u5546\u54c1\u60c5\u51b5\u4e0b\u7684\u6548\u7528\u6700\u5927\u5316","text":"<ul> <li>\u5fae\u89c203 1-\u57fa\u6570\u6548\u7528\u7406\u8bba(1), page 15</li> <li>\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u8ba1\u7b97</li> <li>\u6d88\u8d39\u8005\u82b1\u8d39\u5728\u5404\u79cd\u5546\u54c1\u4e0a\u7684\u6700\u540e\u4e00\u5143\u94b1\u7684\u8fb9\u9645\u6548\u7528\u76f8\u7b49\uff08\u7b49\u4e8e\u8d27\u5e01\u7684\u8fb9\u9645\u6548\u7528\uff09</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u62c9\u683c\u6717\u65e5\u4e58\u6570\u6cd5","title":"\u62c9\u683c\u6717\u65e5\u4e58\u6570\u6cd5","text":"\\[ \\begin{aligned} L&amp;=U(Q_1,Q_2)+\\lambda(m-P_1Q_1-P_2Q_2)\\\\ \\partial &amp;L/\\partial Q_1=\\partial U/\\partial Q_1-\\lambda P_1\\\\ \\partial &amp;L/\\partial Q_2=\\partial U/\\partial Q_2-\\lambda P_2 \\end{aligned} \\] <ul> <li>\u5176\u5b9e\u5c31\u662f\u6784\u9020\u51fd\u6570\u7136\u540e\u6c42\u5bfc\uff0c\u5176\u4e2d\u7684 \\(\\lambda\\) \u662f\u5355\u4f4d\u8d27\u5e01\u7684\u6548\u7528</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u591a\u79cd\u5546\u54c1\u60c5\u51b5\u4e0b\u7684\u6548\u7528\u6700\u5927\u5316","title":"\u591a\u79cd\u5546\u54c1\u60c5\u51b5\u4e0b\u7684\u6548\u7528\u6700\u5927\u5316","text":"<ul> <li>\u6d88\u8d39\u8005\u6bcf\u5355\u4f4d\u8d27\u5e01\u652f\u51fa\u8d2d\u4e70\u7684\u4efb\u4f55\u4e00\u79cd\u5546\u54c1\u6240\u5f97\u5230\u7684\u8fb9\u9645\u6548\u7528\u76f8\u7b49\uff0c\u4e14\u7b49\u4e8e\u8d27\u5e01\u7684\u8fb9\u9645\u6548\u7528</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u9700\u6c42\u66f2\u7ebf\u7684\u63a8\u5bfc","title":"\u9700\u6c42\u66f2\u7ebf\u7684\u63a8\u5bfc","text":"<p>\u94bb\u77f3\u548c\u6c34\u7684\u4ef7\u503c\u6096\u8bba \u5fae\u89c203 1-\u57fa\u6570\u6548\u7528\u7406\u8bba(1), page 26</p> <p>\u4f7f\u7528\u4ef7\u503c\u548c\u4ea4\u6362\u4ef7\u503c \u6c34\u7684\u6548\u7528\u5f88\u5927\uff0c\u4f46\u662f\u6c34\u5f88\u591a\uff0c\u6700\u540e\u4e00\u5355\u4f4d\u5e26\u6765\u7684\u8fb9\u9645\u6548\u7528\u5f88\u5c0f\uff0c\u6240\u4ee5\u4ea4\u6362\u4ef7\u503c\u4f4e\uff0c\u5728\u6c99\u6f20\u5c31\u4e0d\u4e00\u6837\u3002 \u94bb\u77f3\u7684\u6548\u7528\u5f88\u5c0f\uff0c\u4f46\u662f\u94bb\u77f3\u5c11\uff0c\u5b9e\u9645\u9700\u6c42\u5927</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u6d88\u8d39\u8005\u5269\u4f59","title":"\u6d88\u8d39\u8005\u5269\u4f59","text":"<ul> <li>\u9700\u6c42\u4ef7\u683c\uff0c\u5373\u613f\u610f\u652f\u4ed8\u7684\u6700\u9ad8\u4ef7\u683c\uff0c\u53d6\u51b3\u4e8e\u8fd9\u4e00\u5355\u4f4d\u5546\u54c1\u7684\u8fb9\u9645\u6548\u7528<ul> <li>\u9700\u6c42\u4ef7\u683c\u968f\u7740\u8d2d\u4e70\u6570\u91cf\u7684\u589e\u52a0\u800c\u4e0b\u964d</li> </ul> </li> <li>\u6d88\u8d39\u8005\u8d2d\u4e70\u4efb\u4f55\u6570\u91cf\u7684\u67d0\u79cd\u5546\u54c1\uff0c\u5b9e\u9645\u652f\u4ed8\u4ef7\u683c\uff08\u5e02\u573a\u4ef7\u683c\uff09\u76f8\u540c</li> <li>\u6d88\u8d39\u8005\u5269\u4f59\uff08CS\uff09\uff1a\u6d88\u8d39\u8005\u5728\u8d2d\u4e70\u4e00\u5b9a\u6570\u91cf\u7684\u67d0\u5546\u54c1\u65f6\uff0c\u613f\u610f\u652f\u4ed8\u7684\u6700\u9ad8\u4ef7\u683c\u603b\u989d\u4e0e\u5b9e\u9645\u652f\u4ed8\u603b\u4ef7\u683c\u4e4b\u95f4\u7684\u5dee\u989d \uff08\u611f\u89c9\u81ea\u5df1\u8d5a\u4e86\u591a\u5c11\uff09</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u6d88\u8d39\u8005\u5269\u4f59\u7684\u53d8\u52a8","title":"\u6d88\u8d39\u8005\u5269\u4f59\u7684\u53d8\u52a8","text":"<ul> <li>\u5269\u4f59\u5c31\u662f\u66f2\u7ebf\u4e4b\u95f4\u56f4\u6210\u7684\u9762\u79ef<ul> <li>\u9700\u6c42\u66f2\u7ebf</li> <li>\u8d2d\u4e70\u4ef7\u683c\u6700\u7ec8\u66f2\u7ebf</li> </ul> </li> <li>\u4ef7\u683c\u4e0a\u8c03\uff0c\u6700\u7ec8\u4ea4\u6613\u4ef7\u683c\u5347\u9ad8\uff0c\u8d2d\u4e70\u6570\u91cf\u51cf\u5c11\uff0c\u6d88\u8d39\u8005\u5269\u4f59\u51cf\u5c11</li> <li>\u5bf9\u751f\u4ea7\u8005\u5f81\u7a0e\uff0c\u7b49\u4ef7\u4e8e\u6da8\u4ef7\uff0c\u6d88\u8d39\u8005\u5269\u4f59\u51cf\u5c11</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u7b2c\u4e8c\u8282-\u65e0\u5dee\u5f02\u66f2\u7ebf","title":"\u7b2c\u4e8c\u8282 \u65e0\u5dee\u5f02\u66f2\u7ebf","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u6d88\u8d39\u8005\u504f\u597d","title":"\u6d88\u8d39\u8005\u504f\u597d","text":"<ul> <li>\u6d88\u8d39\u8005\u504f\u597d\uff1a\u6d88\u8d39\u8005\u5bf9\u4e8e\u5546\u54c1\u6216\u5546\u54c1\u7ec4\u5408\u7684\u559c\u7231\u7a0b\u5ea6<ul> <li>X&gt;Y\uff0c\u5219\u57fa\u672c\u7b49\u4e8e U(X)&gt;U(Y)</li> </ul> </li> <li>\u504f\u597d\u7684\u5047\u8bbe<ul> <li>\u7ecf\u6d4e\u5546\u54c1\uff08\u6709\u7528\u7684\u5546\u54c1\uff09</li> <li>\u65e0\u9650\u6027\uff1a\u8d8a\u591a\u8d8a\u597d</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u65e0\u5dee\u5f02\u66f2\u7ebf-indifference-curves","title":"\u65e0\u5dee\u5f02\u66f2\u7ebf Indifference curves","text":"<ul> <li>\u7ed9\u6d88\u8d39\u8005\u5e26\u6765\u76f8\u540c\u6ee1\u8db3\u7a0b\u5ea6\u7684\u6d88\u8d39\u7ec4\u5408\u7684\u8fde\u7ebf</li> <li>\u5047\u8bbe\u6d88\u8d39\u8005\u53ea\u6d88\u8d39\u4e24\u79cd\u5546\u54c1</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u7279\u5f81","title":"\u7279\u5f81","text":"<ul> <li>\u5411\u53f3\u4e0b\u65b9\u503e\u659c\uff0c\u659c\u7387\u4e3a\u8d1f</li> <li>\u540c\u4e00\u5e73\u9762\u4e0a\u6709\u65e0\u6570\u6761\u65e0\u5dee\u5f02\u66f2\u7ebf\uff0c\u6d88\u8d39\u8005\u5bf9\u4e8e\u8f83\u5916\u9762\u7684\u66f2\u7ebf\u504f\u597d\u8f83\u5927\uff08\u603b\u6548\u7528\u8d8a\u9ad8\u8d8a\u597d\uff09</li> <li>\u4efb\u4f55\u4e24\u6761\u65e0\u5dee\u5f02\u66f2\u7ebf\u4e0d\u76f8\u4ea4</li> <li>\u65e0\u5dee\u5f02\u66f2\u7ebf\u51f8\u5411\u539f\u70b9\uff0c\u659c\u7387\u7edd\u5bf9\u503c\u9012\u51cf<ul> <li>\u56e0\u4e3a\u8fb9\u9645\u6548\u7528\u9012\u51cf\uff0c\u6570\u91cf\u591a\u7684\u53d8\u5316\u6162</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u5546\u54c1\u7684\u8fb9\u9645\u66ff\u4ee3\u7387","title":"\u5546\u54c1\u7684\u8fb9\u9645\u66ff\u4ee3\u7387","text":"<ul> <li>MRS\uff1a\u5728\u4fdd\u6301\u603b\u6548\u7528\u6c34\u5e73\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u6d88\u8d39\u8005\u4e3a\u4e86\u589e\u52a0\u4e00\u4e2a\u5355\u4f4d\u67d0\u4e00\u5546\u54c1\u800c\u5fc5\u987b\u51cf\u5c11\u7684\u53e6\u4e00\u79cd\u5546\u54c1\u7684\u6d88\u8d39\u6570\u91cf</li> <li>\\(MRS_{1,2}=-dQ_2/dQ_1\\)</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u8fb9\u9645\u66ff\u4ee3\u7387\u9012\u51cf\u89c4\u5f8b","title":"\u8fb9\u9645\u66ff\u4ee3\u7387\u9012\u51cf\u89c4\u5f8b","text":"<ul> <li>\u5728\u4fdd\u6301\u6548\u7528\u6c34\u5e73\u4e0d\u53d8\u7684\u6761\u4ef6\u4e0b\uff0c\u968f\u7740\u4e00\u76f4\u54e6\u7ed9\u4f60\u5546\u54c1\u6d88\u8d39\u6570\u91cf\u7684\u589e\u52a0\uff0c\u6d88\u8d39\u8005\u589e\u52a0\u4e00\u5355\u4f4d\u8be5\u5546\u54c1\u7684\u6d88\u8d39\u800c\u613f\u610f\u653e\u5f03\u53e6\u4e00\u5546\u54c1\u6d88\u8d39\u7684\u6570\u91cf\u9010\u6e10\u51cf\u5c11</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u65e0\u5dee\u5f02\u66f2\u7ebf\u7279\u4f8b","title":"\u65e0\u5dee\u5f02\u66f2\u7ebf\u7279\u4f8b","text":"<ul> <li>\u5b8c\u5168\u66ff\u4ee3\u54c1\uff0c\u8fb9\u9645\u66ff\u4ee3\u7387\u4e3a\u5e38\u6570\uff0c\u662f\u76f4\u7ebf<ul> <li>\u5fae\u89c203 2-\u5e8f\u6570\u6548\u7528\u7406\u8bba(1), page 12</li> </ul> </li> <li>\u5b8c\u5168\u4e92\u8865\u54c1\uff0c\u8fb9\u9645\u66ff\u4ee3\u7387\u4e3a\u65e0\u7a77\u5927\u6216 0\uff0c\u662f\u76f4\u89d2\u5f62<ul> <li>\u5fae\u89c203 2-\u5e8f\u6570\u6548\u7528\u7406\u8bba(1), page 13</li> </ul> </li> <li>\u5982\u4f55\u753b\u56fe<ul> <li>\u8fd1\u4f3c\u66ff\u4ee3\u54c1\uff0c\u53ef\u4ee5\u753b\u6210\u63a5\u8fd1\u76f4\u7ebf</li> <li>\u8fd1\u4f3c\u4e92\u8865\u54c1\uff0c\u53ef\u4ee5\u753b\u7684\u63a5\u8fd1\u76f4\u89d2</li> <li>\u5fae\u89c203 2-\u5e8f\u6570\u6548\u7528\u7406\u8bba(1), page 14</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u7b2c\u4e09\u8282-\u9884\u7b97\u7ea6\u675f\u7ebf","title":"\u7b2c\u4e09\u8282 \u9884\u7b97\u7ea6\u675f\u7ebf","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u6d88\u8d39\u8005\u9884\u7b97\u7ebf","title":"\u6d88\u8d39\u8005\u9884\u7b97\u7ebf","text":"<ul> <li>\u9884\u7b97\u7ea6\u675f\u7ebf\uff1a\u5728\u6536\u5165\u548c\u5546\u54c1\u4ef7\u683c\u65e2\u5b9a\u7684\u6761\u4ef6\u4e0b\uff0c\u6d88\u8d39\u8005\u7528\u5168\u90e8\u6536\u5165\u6240\u80fd\u8d2d\u4e70\u5230\u7684\u5404\u79cd\u5546\u54c1\u7684\u6700\u5927\u6570\u91cf\u7ec4\u5408 \uff08\u6d88\u8d39\u53ef\u80fd\u6027\u8fb9\u754c\uff09</li> <li>\u66f2\u7ebf\u8868\u8fbe\u5f0f \\(P_XX+P_YY=M\\)</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u6536\u5165\u53d8\u52a8\u5bf9\u9884\u7b97\u7ea6\u675f\u7684\u5f71\u54cd","title":"\u6536\u5165\u53d8\u52a8\u5bf9\u9884\u7b97\u7ea6\u675f\u7684\u5f71\u54cd","text":"<p>\u4ef7\u683c\u4e0d\u53d8\u7684\u6761\u4ef6\u4e0b\uff0c\u6536\u5165\u589e\u52a0\uff0c\u9884\u7b97\u7ea6\u675f\u7ebf\u5411\u5916\u5e73\u79fb</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u4ef7\u683c\u53d8\u52a8\u5bf9\u9884\u7b97\u7ea6\u675f\u7684\u5f71\u54cd","title":"\u4ef7\u683c\u53d8\u52a8\u5bf9\u9884\u7b97\u7ea6\u675f\u7684\u5f71\u54cd","text":"<p>\u6536\u5165\u4e0d\u53d8\uff0c\u4e00\u79cd\u5546\u54c1\u4ef7\u683c\u53d8\u5316\u5c06\u4f1a\u4f7f\u9884\u7b97\u7ebf\u7ed5\u7740\u53e6\u4e00\u7269\u54c1\u8f74\u4e0a\u4ea4\u70b9\u65cb\u8f6c</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u6d88\u8d39\u8005\u5747\u8861\u7684\u51b3\u5b9a","title":"\u6d88\u8d39\u8005\u5747\u8861\u7684\u51b3\u5b9a","text":"<ul> <li>\u6d88\u8d39\u8005\u5747\u8861\uff08\u6700\u4f18\u9009\u62e9\uff09\uff1a\u65e0\u5dee\u5f02\u66f2\u7ebf\u4e0e\u9884\u7b97\u7ea6\u675f\u7ebf\u7684\u5207\u70b9<ul> <li>\u5fae\u89c203 2-\u5e8f\u6570\u6548\u7528\u7406\u8bba(1), page 21</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u6d88\u8d39\u8005\u5747\u8861\u7684\u6761\u4ef6","title":"\u6d88\u8d39\u8005\u5747\u8861\u7684\u6761\u4ef6","text":"<ul> <li>\u5fae\u89c203 2-\u5e8f\u6570\u6548\u7528\u7406\u8bba(1), page 22</li> <li> \\[\\begin{aligned}MU_1/P_1=MU_2/P_2\\\\P_1Q_1+P_2Q_2=M\\end{aligned}\\] </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u6536\u5165\u6d88\u8d39\u66f2\u7ebf","title":"\u6536\u5165\u6d88\u8d39\u66f2\u7ebf","text":"<ul> <li>\u6536\u5165\u6d88\u8d39\u66f2\u7ebf (ICC)\uff1a\u6536\u5165\u53d8\u5316\u5f15\u8d77\u7684\u6d88\u8d39\u8005\u5747\u8861\u53d8\u5316\u7684\u8f68\u8ff9</li> <li>\u6069\u683c\u5c14\u66f2\u7ebf (EC)\uff1a\u67d0\u79cd\u5546\u54c1\u7684\u6d88\u8d39\u6570\u91cf\u968f\u7740\u6536\u5165\u53d8\u52a8\u800c\u53d8\u52a8\u7684\u8f68\u8ff9</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u6069\u683c\u5c14\u66f2\u7ebf\u7684\u4e0d\u540c\u7c7b\u578b","title":"\u6069\u683c\u5c14\u66f2\u7ebf\u7684\u4e0d\u540c\u7c7b\u578b","text":"<ul> <li>\u5fc5\u9700\u54c1\uff0c\u63a5\u8fd1\u76f4\u7ebf</li> <li>\u6b63\u5e38\u54c1\uff0c\u6307\u6570\u51fd\u6570</li> <li>\u5962\u4f88\u54c1\uff0c\u5bf9\u6570\u51fd\u6570</li> <li>\u4f4e\u6863\u54c1\uff0c\u5411\u5de6\u9760\u8fd1 M \u8f74<ul> <li>\u5fae\u89c203 2-\u5e8f\u6570\u6548\u7528\u7406\u8bba(1), page 26</li> </ul> </li> <li>\u76f8\u5bf9\u4f4e\u6863\u54c1\uff0c\u5148\u5f80\u53f3\u518d\u5f80\u5de6<ul> <li>\u5fae\u89c203 2-\u5e8f\u6570\u6548\u7528\u7406\u8bba(1), page 27</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u6069\u683c\u5c14\u7cfb\u6570\u4e0e\u6069\u683c\u5c14\u5b9a\u5f8b","title":"\u6069\u683c\u5c14\u7cfb\u6570\u4e0e\u6069\u683c\u5c14\u5b9a\u5f8b","text":"<ul> <li>\u6069\u683c\u5c14\u7cfb\u6570\uff1a\u98df\u54c1\u6d88\u8d39\u5360\u5bb6\u5ead\u603b\u652f\u51fa\u7684\u6bd4\u4f8b</li> <li>\u6069\u683c\u5c14\u5b9a\u5f8b\uff1a\u5bb6\u5ead\u7684\u6069\u683c\u5c14\u7cfb\u6570\u968f\u7740\u6536\u5165\u7684\u589e\u52a0\u800c\u9012\u51cf</li> <li>\u6069\u683c\u5c14\u7cfb\u6570\u8d8a\u5c0f\uff0c\u8868\u793a\u751f\u6d3b\u8d8a\u5bcc\u88d5</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u4ef7\u683c\u53d8\u52a8\u5982\u4f55\u5f71\u54cd\u6d88\u8d39\u8005\u7684\u9009\u62e9","title":"\u4ef7\u683c\u53d8\u52a8\u5982\u4f55\u5f71\u54cd\u6d88\u8d39\u8005\u7684\u9009\u62e9","text":"<ul> <li>\u5047\u8bbe\u6d88\u8d39\u8005\u6536\u5165\u4e0d\u53d8\uff0c\u4e24\u79cd\u7269\u54c1\u7684\u76f8\u5bf9\u4ef7\u683c\u53d1\u751f\u53d8\u5316\uff0c\u753b\u56fe\u5206\u6790</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u4ef7\u683c\u6269\u5c55\u7ebf","title":"\u4ef7\u683c\u6269\u5c55\u7ebf","text":"<ul> <li>\u4ef7\u683c\u6269\u5c55\u7ebf\uff1a\u5728\u6d88\u8d39\u8005\u6536\u5165\u548c\u5176\u4ed6\u5546\u54c1\u4ef7\u683c\u4e0d\u53d8\u7684\u6761\u4ef6\u4e0b\uff0c\u968f\u7740\u4e00\u79cd\u5546\u54c1\u4ef7\u683c\u7684\u53d8\u52a8\uff0c\u6d88\u8d39\u8005\u5747\u8861\u70b9\u53d8\u52a8\u7684\u8f68\u8ff9<ul> <li>\u5fae\u89c203 2-\u5e8f\u6570\u6548\u7528\u7406\u8bba(1), page 33</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u4ef7\u683c\u53d8\u52a8\u7684\u603b\u6548\u5e94","title":"\u4ef7\u683c\u53d8\u52a8\u7684\u603b\u6548\u5e94","text":"<ul> <li>\u4ef7\u683c\u53d8\u52a8\u7684\u603b\u6548\u5e94\uff08\u4ef7\u683c\u6548\u5e94\uff09\uff1a\u5728\u6d88\u8d39\u8005\u6536\u5165\u548c\u5176\u4ed6\u5546\u54c1\u4ef7\u683c\u4e0d\u53d8\u7684\u6761\u4ef6\u4e0b\uff0c\u67d0\u79cd\u5546\u54c1\u4ef7\u683c\u53d8\u5316\u800c\u4ea7\u751f\u7684\u9700\u6c42\u91cf\u7684\u53d8\u5316</li> <li>\u4ef7\u683c\u6548\u5e94=\u6536\u5165\u6548\u5e94 + \u66ff\u4ee3\u6548\u5e94<ul> <li>\u6536\u5165\u6548\u5e94\uff1a\u4e00\u79cd\u5546\u54c1\u4ef7\u683c\u7684\u53d8\u52a8\u5f15\u8d77\u6d88\u8d39\u8005\u7684\u5b9e\u9645\u6536\u5165\u53d8\u52a8\uff08\u5b9e\u9645\u6536\u5165\u6307\u7684\u662f\u6536\u5165\u7684\u8d2d\u4e70\u529b\uff09\uff0c\u4ece\u800c\u5bfc\u81f4\u6d88\u8d39\u8005\u5728\u4fdd\u6301\uff08\u76f8\u5bf9\uff09\u4ef7\u683c\u4e0d\u53d8\u7684\u6761\u4ef6\u4e0b\u5bf9\u5546\u54c1\u7684\u9700\u6c42\u91cf\u505a\u51fa\u7684\u8c03\u6574</li> <li>\u66ff\u4ee3\u6548\u5e94\uff1a\u4e00\u79cd\u5546\u54c1\u4ef7\u683c\u53d8\u52a8\u5f15\u8d77\u5546\u54c1\u7684\u76f8\u5bf9\u4ef7\u683c\u53d8\u52a8\uff0c\u4ece\u800c\u5bfc\u81f4\u6d88\u8d39\u8005\u5728\u7ef4\u6301\u539f\u6709\u6548\u7528\u6c34\u5e73\u4e0d\u53d8\u7684\u6761\u4ef6\u4e0b\u5bf9\u5546\u54c1\u9700\u6c42\u91cf\u505a\u51fa\u7684\u8c03\u6574</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.02%20%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%89%E6%8B%A9.html#\u672c\u7ae0\u91cd\u70b9","title":"\u672c\u7ae0\u91cd\u70b9","text":"<ul> <li>\u603b\u6548\u7528\u548c\u8fb9\u9645\u6548\u7528</li> <li>\u8fb9\u9645\u6548\u7528\u9012\u51cf\u89c4\u5f8b</li> <li>\u6d88\u8d39\u8005\u5747\u8861\u7684\u6761\u4ef6</li> <li>\u9700\u6c42\u66f2\u7ebf\u7684\u63a8\u5bfc</li> <li>\u6d88\u8d39\u8005\u5269\u4f59</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html","title":"Chap.03 \u751f\u4ea7\u8005\u884c\u4e3a\u7406\u8bba","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u4f01\u4e1a\u4e0e\u4f01\u4e1a\u7684\u672c\u8d28","title":"\u4f01\u4e1a\u4e0e\u4f01\u4e1a\u7684\u672c\u8d28","text":"<ul> <li>\u4f7f\u7528\u751f\u4ea7\u8981\u7d20\u5e76\u5c06\u5176\u7ec4\u7ec7\u8d77\u6765\u751f\u4ea7\u5e76\u9500\u552e\u4ea7\u54c1\u6216\u63d0\u4f9b\u52b3\u52a1\u7684\u673a\u6784</li> <li>\u4ea4\u6613\u6210\u672c\uff1a\u4ea4\u6613\u65f6\u7684\u9009\u8d2d\uff0c\u914d\u9001\uff0c\u552e\u540e\u7b49<ul> <li>\u4f01\u4e1a\u53ef\u4ee5\u964d\u4f4e\u4ea4\u6613\u6210\u672c</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u751f\u4ea7\u5206\u6790","title":"\u751f\u4ea7\u5206\u6790","text":"<ul> <li>\u751f\u4ea7\uff1a\u5c06\u6295\u5165\u8f6c\u6362\u4e3a\u4ea7\u51fa\u7684\u8fc7\u7a0b</li> <li>\u4ea7\u54c1\uff1a\u6709\u5f62\u6216\u65e0\u5f62\u63d0\u4f9b\u6548\u7528</li> <li>\u6295\u5165\uff1a\u8d44\u672c\u3001\u52b3\u52a8\u3001\u571f\u5730\u3001\u4f01\u4e1a\u5bb6\u624d\u80fd<ul> <li>\u52b3\u52a8\uff1a\u751f\u4ea7\u4e2d\u4e00\u5207\u4f53\u529b\u548c\u8111\u529b\u7684\u6d88\u8017</li> <li>\u8d44\u672c/\u8d44\u672c\u54c1\uff1a\u5382\u623f\u3001\u673a\u5668\u8bbe\u5907\u7b49</li> <li>\u571f\u5730\uff1a\u571f\u5730\u672c\u8eab\u548c\u4e00\u5207\u76f8\u5173\u7684\u81ea\u7136\u8d44\u6e90</li> <li>\u4f01\u4e1a\u5bb6\u624d\u80fd\uff1a\u4f01\u4e1a\u5bb6\u7ecf\u8425\u4f01\u4e1a\u7684\u7ec4\u7ec7\u3001\u7ba1\u7406\u548c\u521b\u65b0\u80fd\u529b</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u751f\u4ea7\u51fd\u6570","title":"\u751f\u4ea7\u51fd\u6570","text":"<ul> <li>\u4e00\u5b9a\u65f6\u671f\u5185\uff0c\u6280\u672f\u6c34\u5e73\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u5927\u4ea7\u51fa\u968f\u7740\u6295\u5165\u7684\u53d8\u5316\u800c\u53d8\u5316</li> <li>\u4e00\u822c\u8868\u793a \\(Q=F(X_1,X_2, \\dots,X_n)\\)</li> <li>\u5982\u679c\u53ea\u8003\u8651\u4e24\u79cd\u8981\u7d20\uff0c\u52b3\u52a8\u548c\u8d44\u672c\u6295\u5165 \\(Q=F(L,K)\\)</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u56fa\u5b9a\u6bd4\u4f8b\u751f\u4ea7\u51fd\u6570","title":"\u56fa\u5b9a\u6bd4\u4f8b\u751f\u4ea7\u51fd\u6570","text":"<ul> <li>\u91cc\u6602\u60d5\u592b\u751f\u4ea7\u51fd\u6570\uff0c\u751f\u4ea7\u8981\u7d20\u9700\u8981\u6309\u7167\u6bd4\u4f8b\u642d\u914d</li> <li>\\(Q=min\\{\\frac{L}{a},\\frac{K}{b}\\}\\)</li> <li>\u4ea7\u91cf\u53d6\u51b3\u4e8e\u8f83\u5c11\u7684\u751f\u4ea7\u8981\u7d20</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u53ef\u53d8\u6bd4\u4f8b\u751f\u4ea7\u51fd\u6570","title":"\u53ef\u53d8\u6bd4\u4f8b\u751f\u4ea7\u51fd\u6570","text":"<ul> <li>\u53ef\u4ee5\u91c7\u7528\u4e0d\u540c\u7684\u8d44\u672c\u548c\u52b3\u52a8\u7ec4\u5408\u7684\u6bd4\u4f8b<ul> <li>\u8d44\u672c\u5bc6\u96c6\u578b</li> <li>\u52b3\u52a8\u5bc6\u96c6\u578b</li> <li>\u519c\u4e1a\u751f\u4ea7\uff0c\u725b\u5976\u751f\u4ea7</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u67ef\u5e03\u9053\u683c\u62c9\u65af\u751f\u4ea7\u51fd\u6570","title":"\u67ef\u5e03\u2014\u9053\u683c\u62c9\u65af\u751f\u4ea7\u51fd\u6570","text":"<ul> <li>C-D \u751f\u4ea7\u51fd\u6570\uff0c\\(Q=AL^\\alpha K^\\beta\\)<ul> <li>\\(A&gt;0, 0&lt;\\alpha&lt;1, 0&lt;\\beta&lt;1\\)</li> <li>A\uff1a\u6280\u672f\u6c34\u5e73</li> <li>\\(\\alpha,\\beta\\)\uff1a\u52b3\u52a8\u548c\u8d44\u672c\u6295\u5165\u7684\u8d21\u732e\u7387\u4ea7\u51fa\u5f39\u6027<ul> <li>\u8ba1\u7b97\u5f39\u6027\u521a\u597d\u7b49\u4e8e \\(\\alpha, \\beta\\)</li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u957f\u671f\u548c\u77ed\u671f","title":"\u957f\u671f\u548c\u77ed\u671f","text":"<ul> <li>\u77ed\u671f\uff1a\u4f01\u4e1a\u6765\u4e0d\u53ca\u8c03\u6574\u5168\u90e8\u751f\u4ea7\u8981\u7d20\u7684\u6570\u91cf\uff0c\u81f3\u5c11\u6709\u4e00\u79cd\u751f\u4ea7\u8981\u7d20\u56fa\u5b9a\u4e0d\u53d8\u7684\u65f6\u671f</li> <li>\u957f\u671f\uff1a\u4f01\u4e1a\u80fd\u591f\u8c03\u6574\u6240\u6709\u751f\u4ea7\u8981\u7d20\u7684\u65f6\u671f<ul> <li>\u5bf9\u4e8e\u4e00\u4e2a\u590d\u5370\u5e97\uff0c\u4e70\u8bbe\u5907\u53ea\u9700\u8981\u4e00\u5468\uff0c\u62db\u5de5\u4eba\u7b7e\u4e09\u4e2a\u6708\uff0c\u5e97\u9762\u7b7e\u4e00\u5e74\uff0c\u5219\u5bf9\u4e8e\u8fd9\u5bb6\u590d\u5370\u5e97\uff0c\u957f\u671f\u662f\u4e00\u5e74\u53ca\u4ee5\u4e0a</li> </ul> </li> <li>\u53ef\u53d8\u4e0e\u4e0d\u53d8\u6216\u56fa\u5b9a\u751f\u4ea7\u8981\u7d20\u9488\u5bf9\u77ed\u671f\u8003\u8651<ul> <li>\u53ef\u53d8\u6295\u5165\uff1a\u53ef\u8c03\u6574\u7684\u751f\u4ea7\u8981\u7d20</li> <li>\u56fa\u5b9a\u6295\u5165\uff1a\u4e0d\u80fd\u6216\u6765\u4e0d\u53ca\u8c03\u6574\u7684\u751f\u4ea7\u8981\u7d20</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u77ed\u671f\u603b\u4ea7\u91cf\u5e73\u5747\u4ea7\u91cf\u548c\u8fb9\u9645\u4ea7\u91cf","title":"\u77ed\u671f\u603b\u4ea7\u91cf\u3001\u5e73\u5747\u4ea7\u91cf\u548c\u8fb9\u9645\u4ea7\u91cf","text":"<ul> <li>\u77ed\u671f\u751f\u4ea7\u51fd\u6570 \u8d44\u672c\u4e0d\u53d8 \\(Q=F(L,\\bar K)\\)<ul> <li>\u52b3\u52a8\u603b\u4ea7\u91cf \\(TP_L=Q=F(L,\\bar K)\\)</li> <li>\u52b3\u52a8\u5e73\u5747\u4ea7\u91cf \\(AP_L=\\frac{TP_L}{L}=\\frac{Q}{L}\\)</li> <li>\u52b3\u52a8\u7684\u8fb9\u9645\u4ea7\u91cf \\(MP_L=\\frac{\\Delta TP_L}{\\Delta L}=\\frac{\\Delta Q}{\\Delta L}\\)</li> </ul> </li> </ul> <p>\u6709\u8fd9\u6837\u4e00\u5bb6\u5496\u5561\u5e97</p> <p>\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u5e97\u5458\uff0c\u6bcf\u4e2a\u5c0f\u65f6\u53ea\u80fd\u751f\u4ea7 5 \u676f\u5496\u5561\uff0c\u5982\u679c\u589e\u52a0\u5e97\u5458\uff0c\u7985\u7406\u90a3\u4e2a\u4f1a\u51fa\u73b0\u4ec0\u4e48\u60c5\u51b5\uff1f \u589e\u52a0\u51e0\u4e2a\u5e97\u5458\uff0c\u53ef\u4ee5\u5206\u5de5\u6536\u94f6\u3001\u6e05\u6d01\u3001\u5496\u5561\u5236\u4f5c\uff0c\u4ea7\u91cf\u589e\u52a0 \u5982\u679c\u7ee7\u7eed\u589e\u52a0\uff0c\u53ef\u80fd\u5bfc\u81f4\u4ea7\u91cf\u51cf\u5c11</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u8fb9\u9645\u4ea7\u91cf\u9012\u51cf\u89c4\u5f8b","title":"\u8fb9\u9645\u4ea7\u91cf\u9012\u51cf\u89c4\u5f8b","text":"<ul> <li>\u751f\u4ea7\u8981\u7d20\u53ef\u53d8\u6bd4\u4f8b\u89c4\u5f8b\uff1a\u5b58\u5728\u4e00\u4e2a\u751f\u4ea7\u8981\u7d20\u6700\u4f18\u6bd4\u4f8b\uff0c\u5728\u8fbe\u5230\u8fd9\u4e2a\u6bd4\u4f8b\u4e4b\u524d\uff0c\u589e\u52a0\u4e00\u79cd\u6295\u5165\u91cf\uff0c\u4ea7\u91cf\u4f1a\u589e\u52a0\uff1b\u8d85\u8fc7\u6bd4\u4f8b\u540e\u7ee7\u7eed\u6295\u5165\uff0c\u4ea7\u91cf\u4f1a\u51cf\u5c11<ul> <li>\u4f8b\u5982\u4e00\u4ea9\u5730\u4e0d\u65ad\u52a0\u5927\u6295\u5165\uff0c\u4e5f\u4e0d\u53ef\u80fd\u517b\u6d3b\u6574\u4e2a\u4e16\u754c</li> <li>\u751f\u4ea7\u53ef\u80fd\u6027\u66f2\u7ebf\u662f\u8fdc\u79bb\u539f\u70b9\u7684\uff08\u51f8\u51fd\u6570)</li> </ul> </li> <li>\u524d\u63d0\uff1a\u53ea\u6709\u4e00\u79cd\u8981\u7d20\u5728\u53d8</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u603b\u4ea7\u91cf\u5e73\u5747\u4ea7\u91cf\u548c\u8fb9\u9645\u4ea7\u91cf\u4e4b\u95f4\u7684\u5173\u7cfb","title":"\u603b\u4ea7\u91cf\u3001\u5e73\u5747\u4ea7\u91cf\u548c\u8fb9\u9645\u4ea7\u91cf\u4e4b\u95f4\u7684\u5173\u7cfb","text":"<ul> <li>\u5fae\u89c204 1-\u4f01\u4e1a\u7684\u751f\u4ea7(1), page 13</li> <li>\u8fb9\u9645\u4ea7\u91cf\u548c\u5e73\u5747\u4ea7\u91cf<ul> <li>\u8fb9\u9645\u4ea7\u91cf\u5927\u4e8e\u5e73\u5747\u4ea7\u91cf\u65f6\uff0c\u5e73\u5747\u4ea7\u91cf\u4f1a\u589e\u52a0</li> <li>\u8fb9\u9645\u4ea7\u91cf\u7b49\u4e8e\u5e73\u5747\u4ea7\u91cf\u65f6\uff0c\u5e73\u5747\u4ea7\u91cf\u6700\u5927<ul> <li>\u8fb9\u9645\u4ea7\u91cf\u66f2\u7ebf\u4e0e\u5e73\u5747\u4ea7\u91cf\u66f2\u7ebf\u76f8\u4ea4\u4e8e\u5e73\u5747\u4ea7\u91cf\u66f2\u7ebf\u6700\u5927\u503c\u70b9\uff08GPA\uff09</li> </ul> </li> <li>\u8fb9\u9645\u4ea7\u91cf\u7684\u53d8\u52a8\u6c38\u8fdc\u5feb\u4e8e\u5e73\u5747\u4ea7\u91cf</li> </ul> </li> <li>\u8fb9\u9645\u4ea7\u91cf\u548c\u603b\u4ea7\u91cf<ul> <li>\u8fb9\u9645\u4ea7\u91cf\u5927\u4e8e 0\uff0c \u603b\u4ea7\u91cf\u589e\u52a0</li> <li>\u8fb9\u9645\u4ea7\u91cf\u7b49\u4e8e 0\uff0c\u603b\u4ea7\u91cf\u6700\u5927</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u751f\u4ea7\u8981\u7d20\u6295\u5165\u7684\u5408\u7406\u533a\u95f4","title":"\u751f\u4ea7\u8981\u7d20\u6295\u5165\u7684\u5408\u7406\u533a\u95f4","text":"<ul> <li>\u5bf9\u4e8e\u4e00\u4e2a\u8ffd\u6c42\u5229\u6da6\u6700\u5927\u5316\u7684\u4f01\u4e1a\u6765\u8bf4\uff0c\u751f\u4ea7\u8981\u7d20\u7684\u5408\u7406\u6295\u5165\u533a\u4e3a\u7b2c\u4e8c\u9636\u6bb5</li> <li>\u5373\u5e73\u5747\u4ea7\u91cf\u6700\u5927\uff0c\u5230\u603b\u4ea7\u91cf\u6700\u5927</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u957f\u671f\u751f\u4ea7\u51fd\u6570","title":"\u957f\u671f\u751f\u4ea7\u51fd\u6570","text":"<ul> <li>\\(Q=F(L,K)\\)</li> <li>\u7814\u7a76\u7684\u95ee\u9898<ul> <li>\u6700\u9002\u5408\u751f\u4ea7\u8981\u7d20\u7ec4\u5408\u7684\u786e\u5b9a</li> <li>\u89c4\u6a21\u6536\u76ca\u5206\u6790\uff08\u4e24\u79cd\u8981\u7d20\u540c\u65f6\u540c\u6bd4\u4f8b\u53d8\u5316\uff09</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u6700\u9002\u8981\u7d20\u7ec4\u5408","title":"\u6700\u9002\u8981\u7d20\u7ec4\u5408","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u7b49\u4ea7\u91cf\u7ebf\u751f\u4ea7\u65e0\u5dee\u5f02\u66f2\u7ebf","title":"\u7b49\u4ea7\u91cf\u7ebf\u751f\u4ea7\u65e0\u5dee\u5f02\u66f2\u7ebf","text":"<ul> <li>\u5fae\u89c204 1-\u4f01\u4e1a\u7684\u751f\u4ea7(1), page 22</li> <li>\u4e24\u79cd\u6295\u5165\uff0c\u8fbe\u5230\u76f8\u540c\u7684\u67d0\u4e2a\u4ea7\u91cf\u7684\u6240\u6709\u70b9\u5bf9</li> <li>\u6027\u8d28<ul> <li>\u5e73\u9762\u5185\u6709\u65e0\u6570\u6761\u7b49\u4ea7\u91cf\u7ebf\uff0c\u79bb\u539f\u70b9\u8d8a\u8fdc\u4ea7\u91cf\u8d8a\u9ad8</li> <li>\u4e0d\u80fd\u76f8\u4ea4</li> <li>\u659c\u7387\u4e3a\u8d1f\uff08\u53ef\u66ff\u4ee3\u6027\uff09</li> <li>\u51f8\u5411\u539f\u70b9\uff0c\u659c\u7387\u7edd\u5bf9\u503c\u9012\u51cf\uff08\u8fb9\u9645\u4ea7\u91cf\u9012\u51cf\uff09</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387","title":"\u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387","text":"<ul> <li>\u4fdd\u6301\u4ea7\u91cf\u6c34\u5e73\u4e0d\u53d8\u65f6\uff0c\u589e\u52a0\u4e00\u5355\u4f4d\u6280\u672f\u6295\u5165\uff0c\u80fd\u591f\u51cf\u5c11\u5176\u4ed6\u52b3\u52a8\u6295\u5165\u7684\u91cf\u3002</li> <li>\\(MRTS_{L,K}=-\\frac{\\Delta K}{\\Delta L}|_{Q\u4e0d\u53d8}\\) \u5c31\u662f\u659c\u7387\u7684\u7edd\u5bf9\u503c<ul> <li>\u5fae\u89c204 1-\u4f01\u4e1a\u7684\u751f\u4ea7(1), page 29 \u6ce8\u610f\u4e0b\u6807\u548c\u6bd4\u503c\u7684\u5bf9\u5e94\u5173\u7cfb</li> </ul> </li> <li>\u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387\u6709\u9012\u51cf\u89c4\u5f8b</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u7b49\u4ea7\u91cf\u66f2\u7ebf\u7279\u4f8b","title":"\u7b49\u4ea7\u91cf\u66f2\u7ebf\u7279\u4f8b","text":"<ul> <li>\u76f4\u7ebf\u7b49\u4ea7\u91cf\u66f2\u7ebf\uff1a\u4e24\u79cd\u8981\u7d20\u5b8c\u5168\u66ff\u4ee3<ul> <li>\u56fa\u5b9a\u66ff\u4ee3\u6bd4\u4f8b\u751f\u4ea7\u51fd\u6570 \\(Q=aL+bK\\)</li> <li>\u719f\u7ec3\u5de5\u4eba\u548c\u4e0d\u719f\u7ec3\u5de5\u4eba\uff0c\u719f\u7ec3\u5de5\u4eba\u4ea7\u91cf\u662f\u4e24\u500d<ul> <li>\\(Q=2aL_1+aL_2\\)</li> </ul> </li> </ul> </li> <li>\u76f4\u89d2\u6298\u7ebf\u7b49\u4ea7\u91cf\u66f2\u7ebf\uff1a\u56fa\u5b9a\u6bd4\u4f8b\u7684\u751f\u4ea7\u51fd\u6570<ul> <li>\u56fa\u5b9a\u6bd4\u4f8b\u7684\u751f\u4ea7\u51fd\u6570 \\(Q=min\\{aK, bL\\}\\) \u6ce8\u610f\u548c\u56fa\u5b9a\u66ff\u4ee3\u6bd4\u4f8b\u4e0d\u540c\uff0c\u4e0d\u53ef\u66ff\u4ee3</li> <li>\u4f8b\u5982\u4e00\u4eba\u53ea\u80fd\u64cd\u63a7\u4e00\u53f0\u673a\u5668</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u7b49\u6210\u672c\u7ebf","title":"\u7b49\u6210\u672c\u7ebf","text":"<ul> <li>\u4f01\u4e1a\u6295\u5165\u7684\u603b\u6210\u672c\u53ca\u751f\u4ea7\u8981\u7d20\u4ef7\u683c\u65e2\u5b9a\uff0c\u6240\u80fd\u8d2d\u4e70\u5230\u7684\u8d44\u672c\u548c\u52b3\u52a8\u6700\u5927\u6570\u91cf\u5404\u79cd\u7ec4\u5408\u7684\u8fde\u7ebf</li> <li>\\(C=wL+rK\\)</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u6700\u9002\u751f\u4ea7\u8981\u7d20\u7ec4\u5408\u7684\u786e\u5b9a","title":"\u6700\u9002\u751f\u4ea7\u8981\u7d20\u7ec4\u5408\u7684\u786e\u5b9a","text":"<ul> <li>\u6210\u672c\u65e2\u5b9a\u7684\u60c5\u51b5\u4e0b\u4ea7\u91cf\u6700\u5927<ul> <li>\u627e\u5230\u4e00\u6761\u7b49\u4ea7\u91cf\u7ebf\uff0c\u4e0e\u65e2\u5b9a\u7b49\u6210\u672c\u7ebf\u76f8\u5207\u5fae\u89c204 1-\u4f01\u4e1a\u7684\u751f\u4ea7(1), page 34</li> <li>\u53d8\u5316\u7684\u89c6\u89d2<ul> <li>\u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387\u5927\u4e8e\u7b49\u6210\u672c\u66f2\u7ebf\u659c\u7387\u65f6\uff0c\u8981\u589e\u5927\u52b3\u52a8\u6295\u5165</li> <li>\u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387\u5c0f\u4e8e\u7b49\u6210\u672c\u66f2\u7ebf\u659c\u7387\u65f6\uff0c\u8981\u589e\u5927\u8d44\u672c\u6295\u5165</li> </ul> </li> <li>\u65b9\u7a0b\u548c\u6700\u4f18\u89e3<ul> <li>\u5747\u8861\u6761\u4ef6\uff1a\u6700\u540e\u4e00\u5757\u94b1\u7528\u6765\u6295\u5165\u8d44\u672c\u6216\u6295\u5165\u52b3\u52a8\u7684\u4ea7\u91cf\u589e\u52a0\u76f8\u540c\u4e8c\u8005\u7684\u8fb9\u9645\u4ea7\u91cf\u76f8\u540c</li> <li>\u6210\u672c\u4e4b\u548c\u4e3a\u603b\u6210\u672c</li> </ul> </li> </ul> </li> <li>\u4ea7\u91cf\u65e2\u5b9a\u6761\u4ef6\u4e0b\u7684\u6210\u672c\u6700\u5c0f<ul> <li>\u627e\u5230\u4e00\u6761\u7b49\u6210\u672c\u7ebf\uff0c\u4e0e\u65e2\u5b9a\u7b49\u4ea7\u91cf\u66f2\u7ebf\u76f8\u5207\u5fae\u89c204 1-\u4f01\u4e1a\u7684\u751f\u4ea7(1), page 35</li> </ul> </li> <li>\u5173\u952e\u65b9\u7a0b<ul> <li>\u751f\u4ea7\u8005\u5747\u8861\u7684\u4e00\u822c\u6761\u4ef6\uff1a\u6700\u540e\u4e00\u5355\u4f4d\u8d27\u5e01\u5f97\u5230\u7684\u8fb9\u9645\u4ea7\u91cf\u76f8\u7b49</li> <li>\\(\\frac{MP_L}{P_L}=\\frac{MP_K}{P_K}\\) \u5e76\u6dfb\u52a0\u6761\u4ef6\uff1a<ul> <li>\\(C=wL+rK\\) \u65e2\u5b9a\u6210\u672c\uff0c\u6c42\u4ea7\u91cf\u6700\u5927</li> <li>\\(Q_0=f(L,K)\\) \u65e2\u5b9a\u4ea7\u91cf\uff0c\u6c42\u6210\u672c\u6700\u5c0f</li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u751f\u4ea7\u6269\u5c55\u66f2\u7ebf","title":"\u751f\u4ea7\u6269\u5c55\u66f2\u7ebf","text":"<ul> <li>\u751f\u4ea7\u8981\u7d20\u4ef7\u683c\u548c\u6280\u672f\u6c34\u5e73\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u6210\u672c\u6216\u4ea7\u91cf\u589e\u52a0\uff08\u4f01\u4e1a\u89c4\u6a21\u589e\u52a0\uff09\uff0c\u6700\u4f18\u8981\u7d20\u7ec4\u5408\u70b9\u7684\u96c6\u5408</li> <li>\\(MRTS_{L,K}=\\frac{MP_L}{MP_K}=\\frac{w}{r}\\)</li> <li>\u5f62\u72b6 \u5fae\u89c204 1-\u4f01\u4e1a\u7684\u751f\u4ea7(1), page 41<ul> <li>\u8d44\u672c\u591a\u5c31\u662f\u8d44\u672c\u5bc6\u96c6\u578b</li> <li>\u52b3\u52a8\u591a\u5c31\u662f\u52b3\u52a8\u5bc6\u96c6\u578b</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u89c4\u6a21\u6536\u76ca","title":"\u89c4\u6a21\u6536\u76ca","text":"<ul> <li>\u5728\u4e00\u5b9a\u7684\u6280\u672f\u6761\u4ef6\u4e0b\uff0c\u6240\u6709\u751f\u4ea7\u8981\u7d20\u6295\u5165\u91cf\u540c\u65f6\u540c\u6bd4\u4f8b\u589e\u52a0\u5e26\u6765\u7684\u4ea7\u91cf\u589e\u52a0<ul> <li>\u89c4\u6a21\u6536\u76ca\u4e0d\u53d8\uff1a\u4ea7\u91cf\u589e\u52a0\u6bd4\u4f8b = \u5404\u79cd\u6295\u5165\u91cf\u589e\u52a0\u6bd4\u4f8b</li> <li>\u89c4\u6a21\u6536\u76ca\u9012\u589e\uff1a\u4ea7\u91cf\u589e\u52a0\u6bd4\u4f8b &gt; \u5404\u79cd\u6295\u5165\u91cf\u589e\u52a0\u6bd4\u4f8b</li> <li>\u89c4\u6a21\u6536\u76ca\u9012\u51cf\uff1a\u4ea7\u91cf\u589e\u52a0\u6bd4\u4f8b &lt; \u5404\u79cd\u6295\u5165\u91cf\u589e\u52a0\u6bd4\u4f8b</li> </ul> </li> <li><ul> <li>\u76f4\u7ebf\uff1a\u6295\u5165\u6bd4\u4f8b\u4e0d\u53d8</li> <li>100 \u5230 200\uff0c\u89c4\u6a21\u6536\u76ca\u9012\u589e</li> <li>200 \u5230 300\uff0c\u89c4\u6a21\u6536\u76ca\u4e0d\u53d8</li> <li>300 \u5230 400\uff0c\u89c4\u6a21\u6536\u76ca\u9012\u51cf</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u51fd\u6570\u8868\u8fbe","title":"\u51fd\u6570\u8868\u8fbe","text":"<ul> <li>\\(Q=F(L,K)\\)<ul> <li>\\(F(\\lambda K,\\lambda L)=\\mu F(K,L)=\\mu Q\\)</li> <li>CRS (\\(\\lambda = \\mu\\)); IRS (\\(\\lambda&lt;\\mu\\)); DRS (\\(\\lambda &gt; \\mu\\)).</li> </ul> </li> <li>\u67ef\u5e03\u9053\u683c\u62c9\u65af\u51fd\u6570\uff1a\\(Q=AL^\\alpha K^\\beta\\)<ul> <li>\\(F(\\lambda K,\\lambda L)=\\lambda^{\\alpha+\\beta}Q\\)</li> <li>\\(\\alpha+\\beta&gt;1\\) \u5219\u89c4\u6a21\u6536\u76ca\u4e00\u76f4\u9012\u589e\uff0c\u5176\u4ed6\u540c\u7406</li> </ul> </li> </ul> <p>\u89c4\u6a21\u6536\u76ca\u9012\u589e\u4e0e\u8fb9\u9645\u6536\u76ca\u9012\u51cf\u662f\u5426\u77db\u76fe\uff1f</p> <p>\u6c42\u5bfc\u53ef\u4ee5\u8bc1\u660e\u8fb9\u9645\u6536\u76ca\u9012\u51cf\uff0c\u4f8b\u5982 \\(Q=L^{0.5}K^{0.6}\\)</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u751f\u4ea7\u5206\u6790\u603b\u7ed3","title":"\u751f\u4ea7\u5206\u6790\u603b\u7ed3","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u6210\u672c\u5206\u6790","title":"\u6210\u672c\u5206\u6790","text":"<ul> <li>\u4f01\u4e1a\u7684\u76ee\u6807\uff1a\u5229\u6da6\u6700\u5927\u5316</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u7ecf\u6d4e\u6210\u672c","title":"\u7ecf\u6d4e\u6210\u672c","text":"<ul> <li>\u7ecf\u6d4e\u6210\u672c\uff1a\u4e3a\u4e86\u5f97\u5230\u67d0\u79cd\u4e1c\u897f\u5fc5\u987b\u653e\u5f03\u7684\u4e1c\u897f \u6700\u9ad8\u4ef7\u503c\u7684\u653e\u5f03\uff0c\u8fd9\u91cc\u662f\u4f01\u4e1a\u751f\u4ea7\u4e2d\u6240\u4f7f\u7528\u8d44\u6e90\u7684\u673a\u4f1a\u6210\u672c\uff08\u7ecf\u6d4e\u6210\u672c\uff09</li> <li>\\(\u7ecf\u6d4e\u6210\u672c=\u663e\u6027\u6210\u672c(\u4f1a\u8ba1\u6210\u672c)+\u9690\u6027\u6210\u672c\\)<ul> <li>\u663e\u6027\u6210\u672c \u4f1a\u8ba1\u6210\u672c\uff1a\u8d2d\u4e70\u751f\u4ea7\u8981\u7d20\u6240\u82b1\u8d39\u7684\u8d27\u5e01</li> <li>\u9690\u6027\u6210\u672c\uff1a\u4f01\u4e1a\u4f7f\u7528\u81ea\u5df1\u6240\u62e5\u6709\u7684\u751f\u4ea7\u8981\u7d20\u7684\u673a\u4f1a\u6210\u672c<ul> <li>\u4f8b\u5982\u5f00\u5e97\u7684\u592b\u59bb\u4e0d\u4f1a\u8ba1\u7b97\u81ea\u5df1\u7684\u5de5\u8d44\u6210\u672c\uff0c\u4f46\u5b9e\u9645\u4e0a\u4ed6\u4eec\u53ef\u4ee5\u53bb\u5e72\u522b\u7684\u5de5\u4f5c\uff0c\u5b58\u5728\u673a\u4f1a\u6210\u672c</li> </ul> </li> </ul> </li> <li>\u6c89\u6ca1\u6210\u672c\uff08Sunk Cost\uff09\uff1a\u4e00\u65e6\u53d1\u751f\u5c31\u65e0\u6cd5\u6536\u56de\u7684\u6210\u672c\uff0c\u662f\u4efb\u4f55\u51b3\u7b56\u90fd\u65e0\u6cd5\u907f\u514d\u7684\u6210\u672c\uff0c\u4e0d\u662f\u73b0\u6709\u51b3\u7b56\u7684\u76f8\u5173\u6210\u672c\uff0c\u51b3\u7b56\u7684\u65f6\u5019\u4e0d\u9700\u8981\u8003\u8651 \u4f8b\u5982\u897f\u74dc\u3001\u5171\u4eab\u5355\u8f66\u548c\u7535\u5f71\u7968</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u6848\u4f8b\u5206\u6790","title":"\u6848\u4f8b\u5206\u6790","text":"<ul> <li>\u5fae\u89c204 2-\u4f01\u4e1a\u7684\u6210\u672c(1), page 4<ul> <li>\u7b2c\u4e00\u9898<ul> <li>\u4f1a\u8ba1\u6210\u672c\uff1a30</li> <li>\u7ecf\u6d4e\u6210\u672c\uff1a30(1 + 5%) + 20 = 51.5</li> </ul> </li> <li>\u7b2c\u4e8c\u9898<ul> <li>\u4f1a\u8ba1\u6210\u672c\uff1a10 + 20(1 + 5%) = 31</li> <li>\u7ecf\u6d4e\u6210\u672c\uff1a10(1 + 5%) + 20(1 + 5%) + 20 = 51.5</li> </ul> </li> <li>\u53ef\u4ee5\u53d1\u73b0\uff0c\u7ecf\u6d4e\u6210\u672c\u662f\u4e00\u6837\u7684\uff0c\u4f1a\u8ba1\u6210\u672c\u4f1a\u53d8\u5316</li> </ul> </li> <li>\u5982\u679c\u9a91\u5171\u4eab\u5355\u8f66\u6536\u76ca\u4e3a 2.5\uff0c\u626b\u5230\u4e00\u8f86\u6545\u969c\u8f66\u82b1\u8d39 1.5\uff0c\u662f\u5426\u6362\u4e00\u8f86\uff1f<ul> <li>\u5982\u679c\u4e0d\u626b\uff0c\u635f\u5931 4</li> <li>\u5982\u679c\u626b\uff0c\u635f\u5931 0.5</li> </ul> </li> <li>\u9493\u9c7c\u5de5\u7a0b<ul> <li>\u5982\u679c\u4e00\u4e2a\u9879\u76ee\u6536\u76ca 18 \u4ebf\uff0c\u6210\u672c 20 \u4ebf</li> <li>\u65bd\u5de5\u65b9\u53ef\u4ee5\u62a5\u6210\u672c\u4e3a 15 \u4ebf\uff0c\u8fd9\u6837\u56fd\u5bb6\u4f1a\u6295</li> <li>\u65bd\u5de5\u5230\u4e00\u534a\u518d\u62a5\u53e6\u5916 5 \u4ebf\uff0c\u8003\u8651\u6c89\u6ca1\u6210\u672c\uff0c\u56fd\u5bb6\u8fd8\u662f\u4f1a\u7ee7\u7eed\u6295</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u7ecf\u6d4e\u5229\u6da6","title":"\u7ecf\u6d4e\u5229\u6da6","text":"<ul> <li>\u4f1a\u8ba1\u5229\u6da6\uff1a\\(\u9500\u552e\u6536\u5165-\u4f1a\u8ba1\u6210\u672c\uff08\u663e\u6027\u6210\u672c\uff09\\)</li> <li>\u7ecf\u6d4e\u5229\u6da6\uff1a\\(\u9500\u552e\u6536\u5165-\u7ecf\u6d4e\u6210\u672c=\u9500\u552e\u6536\u5165-\u663e\u6027\u6210\u672c-\u9690\u6027\u6210\u672c\\)</li> <li>\u6b63\u5e38\u5229\u6da6\uff1a\\(\u7ecf\u6d4e\u5229\u6da6=0\\)\uff1b\u8d85\u989d\u5229\u6da6\uff1a\\(\u7ecf\u6d4e\u5229\u6da6&gt;0\\)</li> <li>\u5fae\u89c204 2-\u4f01\u4e1a\u7684\u6210\u672c(1), page 5<ul> <li>\u5982\u679c\u4e0d\u81ea\u5df1\u7528\uff0c\u79df\u51fa\u53bb\uff0c\u83b7\u76ca\u589e\u52a0 500\uff0c\u6240\u4ee5\u7ecf\u6d4e\u6210\u672c\u589e\u52a0 500</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u77ed\u671f\u6210\u672c","title":"\u77ed\u671f\u6210\u672c","text":"<ul> <li>\u77ed\u671f\u603b\u6210\u672c\uff08TC\uff09\uff1a\u4f01\u4e1a\u4e3a\u751f\u4ea7\u65e2\u5b9a\u4ea7\u91cf\u6240\u9700\u8981\u751f\u4ea7\u8981\u7d20\u6295\u5165\u7684\u8d39\u7528<ul> <li>\\(\u77ed\u671f\u603b\u6210\u672c\uff08TC\uff09=\u53ef\u53d8\u6210\u672c\uff08VC\uff09+\u4e0d\u53d8\u6210\u672c\uff08FC\uff09\\)</li> <li>\u53ef\u53d8\u6210\u672c\uff1a\u968f\u7740\u4ea7\u91cf\u800c\u53d8\u52a8\u7684\u6210\u672c</li> <li>\u4e0d\u53d8\u6210\u672c\uff08\u56fa\u5b9a\u6210\u672c\uff09\uff1a\u4e0d\u968f\u4ea7\u91cf\u53d8\u5316\u800c\u53d8\u5316\u7684\u6210\u672c</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u77ed\u671f\u603b\u4ea7\u91cf\u66f2\u7ebf\u4e0e\u603b\u6210\u672c\u66f2\u7ebf","title":"\u77ed\u671f\u603b\u4ea7\u91cf\u66f2\u7ebf\u4e0e\u603b\u6210\u672c\u66f2\u7ebf","text":"<ul> <li>\u603b\u6210\u672c\u66f2\u7ebf \\(TC(Q)\\) \u56fe\u50cf<ul> <li>\u589e\u957f\u901f\u5ea6\u5148\u51cf\u540e\u589e\uff0c\u5411\u53f3\u4e0a\u65b9\u503e\u659c \u8fb9\u9645\u6210\u672c\u5148\u51cf\u540e\u589e</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u77ed\u671f\u5e73\u5747\u6210\u672c\u548c\u8fb9\u9645\u6210\u672c","title":"\u77ed\u671f\u5e73\u5747\u6210\u672c\u548c\u8fb9\u9645\u6210\u672c","text":"<ul> <li>\u5e73\u5747\u603b\u6210\u672c \\(AC(Q)=\\frac{TC}{Q}\\)</li> <li>\u5e73\u5747\u4e0d\u53d8\u6210\u672c \\(AFC(Q)=\\frac{FC}{Q}\\)</li> <li>\u5e73\u5747\u53ef\u53d8\u6210\u672c \\(AVC(Q)=\\frac{VC}{Q}\\)</li> <li>\u8fb9\u9645\u6210\u672c \\(MC(Q)=\\frac{\\Delta TC}{\\Delta Q}=\\frac{\\Delta VC}{\\Delta Q}\\)</li> </ul> <p>\u6c42\u6210\u672c\u51fd\u6570</p> <p>\u9700\u8981\u5199\u51fa \\(C(Q)\\) \u7684\u5173\u7cfb</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u56fe\u50cf\u5206\u6790","title":"\u56fe\u50cf\u5206\u6790","text":"<ul> <li>\u9664\u4e86 AFC\uff0c\u90fd\u662f\u5148\u51cf\u540e\u589e\u7684 U \u5f62\u66f2\u7ebf<ul> <li>\u603b\u6210\u672c\u5148\u4ee5\u9012\u51cf\u7684\u901f\u5ea6\u589e\u52a0\uff0c\u518d\u4ee5\u9012\u589e\u7684\u901f\u5ea6\u589e\u52a0 \u4e0e\u77ed\u671f\u4ea7\u91cf\u66f2\u7ebf\u76f8\u53cd</li> </ul> </li> <li>AC \u903c\u8fd1 AVC\uff0c\u8fd9\u662f\u56e0\u4e3a AFC \u4e0d\u65ad\u51cf\u5c0f</li> <li>MC \u66f2\u7ebf\u7a7f\u8fc7\u4e86 ATC \u548c AVC \u66f2\u7ebf\u7684\u6700\u4f4e\u70b9</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u5e73\u5747\u6210\u672c\u4e0e\u4ea7\u91cf\u53ca\u8fb9\u9645\u6210\u672c\u4e0e\u4ea7\u91cf","title":"\u5e73\u5747\u6210\u672c\u4e0e\u4ea7\u91cf\u53ca\u8fb9\u9645\u6210\u672c\u4e0e\u4ea7\u91cf","text":"<ul> <li>\u5e73\u5747\u53ef\u53d8\u6210\u672c\u4e0e\u5e73\u5747\u4ea7\u91cf \\(AVC=wL/Q=w/AP\\) \u52b3\u52a8\u7684\u5e73\u5747\u4ea7\u91cf</li> <li>\u8fb9\u9645\u6210\u672c\u4e0e\u8fb9\u9645\u4ea7\u91cf \\(MC=w\\Delta L/\\Delta Q=w/MP\\) \u52b3\u52a8\u7684\u8fb9\u9645\u4ea7\u91cf</li> <li>\u8fb9\u9645\u6210\u672c\u9012\u51cf\u89c4\u5f8b\uff1a\u4e0d\u65ad\u589e\u52a0\u53ef\u53d8\u8981\u7d20\u7684\u6295\u5165\uff0c\u8fb9\u9645\u6210\u672c\u5f00\u59cb\u65f6\u9012\u51cf\u89c4\u6a21\u6548\u5e94\uff0c\u8981\u7d20\u6295\u5165\u4e0a\u5347\u5230\u4e00\u5b9a\u7a0b\u5ea6\u65f6\u9012\u589e \u8fb9\u9645\u4ea7\u91cf\u9012\u51cf\u6548\u5e94</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u957f\u671f\u6210\u672c","title":"\u957f\u671f\u6210\u672c","text":"<ul> <li>\u957f\u671f\u603b\u6210\u672c\uff08LTC\uff09\uff1a\u957f\u671f\u8c03\u6574\u4e0b\uff0c\u5bf9\u4e8e\u4e00\u5b9a\u7684\u4ea7\u91cf\uff0c\u8fbe\u5230\u7684\u6700\u4f4e\u6210\u672c \u751f\u4ea7\u6269\u5c55\u7ebf</li> <li>\u957f\u671f\u5e73\u5747\u6210\u672c\uff08LAC\uff09\uff1a\\(LAC=LTC/Q\\)</li> <li>\u957f\u671f\u8fb9\u9645\u6210\u672c\uff1a\\(LMC=\\Delta LTC/\\Delta Q\\)</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u957f\u671f\u603b\u6210\u672cltc\u66f2\u7ebf","title":"\u957f\u671f\u603b\u6210\u672c\uff08LTC\uff09\u66f2\u7ebf","text":"<ul> <li>\u5728\u6240\u6709\u77ed\u671f\u603b\u6210\u672c\u66f2\u7ebf\u4e0b\u65b9\uff0c\u6bcf\u4e00\u70b9\u90fd\u548c\u4e00\u6761\u77ed\u671f\u603b\u6210\u672c\u66f2\u7ebf\u76f8\u5207\uff0c\u662f\u5305\u7edc\u7ebf \\(LTC=\\min\\{TC_i\\}\\)</li> <li>\u7531\u4e8e\u6ca1\u6709\u56fa\u5b9a\u6210\u672c\uff0c\u7ecf\u8fc7\u539f\u70b9</li> <li>\u6bd4\u77ed\u671f\u603b\u6210\u672c\u66f2\u7ebf\u90fd\u5e73\u7f13</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u957f\u671f\u5e73\u5747\u6210\u672clac\u66f2\u7ebf","title":"\u957f\u671f\u5e73\u5747\u6210\u672c\uff08LAC\uff09\u66f2\u7ebf","text":"<ul> <li>\u6bcf\u4e00\u4ea7\u91cf\u7684\u6240\u6709\u77ed\u671f\u5e73\u5747\u6210\u672c\u4e2d\u6700\u4f4e\u7684\u6210\u672c\uff0c\\(LATC=min\\{SAC\\}\\)</li> <li>\u662f\u5305\u7edc\u7ebf\uff0c\u4f46\u4e0d\u662f\u6240\u6709\u6700\u4f4e\u70b9\u7684\u8fde\u7ebf<ul> <li>\u4e3a\u4ec0\u4e48\u4e0d\u662f\u6700\u4f4e\u70b9\uff1f\u6700\u4f4e\u70b9\u7684\u8fde\u7ebf\u5176\u5b9e\u4e0d\u662f\u6700\u4f18\u89e3</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u957f\u671f\u8fb9\u9645\u6210\u672clmc\u66f2\u7ebf","title":"\u957f\u671f\u8fb9\u9645\u6210\u672c\uff08LMC\uff09\u66f2\u7ebf","text":"<ul> <li>\u540c\u6837\u6709\u8fb9\u9645\u7ecf\u8fc7\u5e73\u5747\u7684\u6700\u4f4e\u70b9</li> <li>\u4e0d\u662f\u77ed\u671f\u8fb9\u9645\u6210\u672c\u66f2\u7ebf\u7684\u5305\u7edc\u7ebf<ul> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u88ab\u9009\u62e9\u7684\u77ed\u671f\u5e73\u5747\u66f2\u7ebf\uff0c\u627e\u5230\u8fd9\u4e00\u5207\u70b9\u5bf9\u5e94\u7684\u8fb9\u9645\u6210\u672c\u70b9\u4f5c\u5782\u7ebf\uff0c\u7136\u540e\u518d\u6269\u5c55</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u89c4\u6a21\u7ecf\u6d4e\u89c4\u6a21\u4e0d\u7ecf\u6d4e\u548c\u6700\u9002\u89c4\u6a21","title":"\u89c4\u6a21\u7ecf\u6d4e\u3001\u89c4\u6a21\u4e0d\u7ecf\u6d4e\u548c\u6700\u9002\u89c4\u6a21","text":"<ul> <li>\u89c4\u6a21\u7ecf\u6d4e\uff1aATC\uff08\u5e73\u5747\u6210\u672c\uff09 \u4e0b\u964d</li> <li>\u89c4\u6a21\u4e0d\u7ecf\u6d4e\uff1aATC\uff08\u5e73\u5747\u6210\u672c\uff09 \u4e0a\u5347</li> <li>\u6700\u9002\u89c4\u6a21\uff1a\u4f01\u4e1a\u5904\u4e8e\u957f\u671f\u5e73\u5747\u6210\u672c\u6700\u5c0f\u65f6\u7684\u89c4\u6a21</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u89c4\u6a21\u6536\u76ca\u9012\u589e\u548c\u89c4\u6a21\u7ecf\u6d4e","title":"\u89c4\u6a21\u6536\u76ca\u9012\u589e\u548c\u89c4\u6a21\u7ecf\u6d4e","text":"<ul> <li>\u89c4\u6a21\u6536\u76ca\u9012\u589e\uff1a\u751f\u4ea7\u8981\u7d20\u5fc5\u987b\u540c\u65f6\u540c\u6bd4\u4f8b\u589e\u52a0</li> <li>\u89c4\u6a21\u7ecf\u6d4e\uff1a\u751f\u4ea7\u8981\u7d20\u4e0d\u4e00\u5b9a\u540c\u6bd4\u4f8b\u589e\u52a0</li> <li>\\(\u89c4\u6a21\u6536\u76ca\u9012\u589e\\subset \u89c4\u6a21\u7ecf\u6d4e\\)\uff0c\u89c4\u6a21\u7ecf\u6d4e\u4e0e\u89c4\u6a21\u6536\u76ca\u9012\u589e\u4e0d\u5b8c\u5168\u5bf9\u5e94 \u5fae\u89c204 2-\u4f01\u4e1a\u7684\u6210\u672c(1), page 28<ul> <li>\u8868\u4e2d 2\uff0c\u65e2\u662f\u89c4\u6a21\u7ecf\u6d4e\uff0c\u4e5f\u662f\u89c4\u6a21\u6536\u76ca\u9012\u589e</li> <li>\u8868\u4e2d 3\uff0c\u662f\u89c4\u6a21\u7ecf\u6d4e\uff0c\u4f46\u4e0d\u662f\u89c4\u6a21\u6536\u76ca\u9012\u589e</li> </ul> </li> <li>\u5fae\u89c204 2-\u4f01\u4e1a\u7684\u6210\u672c(1), page 29 \u89c4\u6a21\u7ecf\u6d4e\u7684\u6269\u5c55\u8303\u56f4\u66f4\u5e7f\uff0c\u4f46\u662f\u89c4\u6a21\u6536\u76ca\u9012\u589e\u53ea\u80fd\u6cbf\u76f4\u7ebf</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u89c4\u6a21\u7ecf\u6d4e\u5206\u6790\u7406\u7531\u7b26\u5408\u903b\u8f91\u5373\u53ef","title":"\u89c4\u6a21\u7ecf\u6d4e\u5206\u6790\uff08\u7406\u7531\u7b26\u5408\u903b\u8f91\u5373\u53ef\uff09","text":"<ul> <li>\u89c4\u6a21\u7ecf\u6d4e\u7684\u539f\u56e0\uff1a\u751f\u4ea7\u4e13\u95e8\u5316\u3001\u7ba1\u7406\u4e13\u95e8\u5316\u3001\u8bbe\u5907\u7684\u5145\u5206\u5229\u7528\u3001\u6280\u672f\u8fdb\u6b65\u3001\u884c\u4e1a\u7279\u5f81\u3001\u89c4\u6a21\u4fbf\u5229\u3001\u8303\u56f4\u7ecf\u6d4e\u751f\u4ea7\u591a\u79cd\u76f8\u5173\u7684\u4ea7\u54c1</li> <li>\u89c4\u6a21\u4e0d\u53d8\uff1a\u4efb\u4f55\u8981\u7d20\u7684\u6f5c\u80fd\u53d1\u6325\u6781\u81f4\u5404\u884c\u5404\u4e1a\u6709\u6700\u9002\u89c4\u6a21</li> <li>\u89c4\u6a21\u4e0d\u7ecf\u6d4e\u7684\u539f\u56e0\uff1a\u7ba1\u7406\u548c\u534f\u8c03\u4e0d\u7075\u6d3b\u3001\u751f\u4ea7\u51b3\u7b56\u4fe1\u606f\u4f20\u9012\u6162\u4e14\u5931\u771f\u3001\u5e94\u53d8\u80fd\u529b\u5f31</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u4f01\u4e1a\u6536\u76ca","title":"\u4f01\u4e1a\u6536\u76ca","text":"<ul> <li>\u603b\u6536\u76ca \\(R(Q)=P*Q=P(Q)*Q\\)</li> <li>\u5e73\u5747\u6536\u76ca \\(AR(Q)=R/Q=P(Q)*Q/Q=P(Q)\\)</li> <li>\u8fb9\u9645\u6536\u76ca \\(MR(Q)=\\frac{dR}{dQ}=\\frac{dP(Q)}{dQ}Q+P(Q)\\)</li> <li>\u90fd\u662f\u4ea7\u91cf\u7684\u51fd\u6570</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u6536\u76ca\u66f2\u7ebf","title":"\u6536\u76ca\u66f2\u7ebf","text":"<ul> <li>\u4ef7\u683c\u4e0d\u53d8\u65f6 <ul> <li>\\(AR=MR=\\bar P\\)</li> <li>\\(R=\\bar P*Q\\)</li> </ul> </li> <li>\u4ef7\u683c\u9012\u51cf <ul> <li>\\(AR=P(Q)\\)</li> <li>\\(MR=P(Q)+\\frac{dP(Q)}{dQ}Q=P(Q)(1+\\frac{dP(Q)}{dQ}\\frac{Q}{P(Q)})=P(Q)(1+\\frac{1}{E_d})\\)<ul> <li>\u671f\u4e2d \\(E_d\\) \u662f\u9700\u6c42\u4ef7\u683c\u5f39\u6027\uff0c\u662f\u8d1f\u7684</li> <li>\u590d\u4e60\uff1a\u4e0a\u534a\u6bb5\u5bcc\u6709\u5f39\u6027\uff0c\u5f39\u6027\u5927\u4e8e 1\uff1b\u4e0b\u534a\u6bb5\u7f3a\u4e4f\u5f39\u6027\uff0c\u5f39\u6027\u5c0f\u4e8e 1</li> <li>\u7528\u6765\u5728 MR, P(Q), E_d \u4e4b\u95f4\u77e5\u4e8c\u6c42\u4e09</li> </ul> </li> <li>\\(R=P(Q)*Q\\)</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.03%20%E7%94%9F%E4%BA%A7%E8%80%85%E8%A1%8C%E4%B8%BA%E7%90%86%E8%AE%BA.html#\u4f01\u4e1a\u5229\u6da6\u6700\u5927\u5316\u539f\u5219","title":"\u4f01\u4e1a\u5229\u6da6\u6700\u5927\u5316\u539f\u5219","text":"<ul> <li>\u5229\u6da6=\u603b\u6536\u76ca - \u603b\u6210\u672c\uff1a\\(\\pi(Q)=R(Q)-C(Q)\\)</li> <li>\u5229\u6da6\u6700\u5927\u5316\u6761\u4ef6\uff1a<ul> <li>\\(MR(Q)=MC(Q)\\)</li> <li>MC \u5904\u4e8e\u9012\u589e\u9636\u6bb5\uff0c\u4f46\u662f\u4e00\u822c\u4e0d\u9700\u8981\u8003\u8651</li> </ul> </li> <li>\u5bf9\u4e8e\u5b8c\u5168\u7ade\u4e89\u7684\u5382\u5546\uff0c\\(P=MR=MC\\)</li> <li></li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html","title":"Chap.04 \u5b8c\u5168\u7ade\u4e89\u4ea7\u54c1\u5e02\u573a","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#\u4f01\u4e1a\u6536\u76ca\u4e0e\u5e02\u573a\u7ed3\u6784","title":"\u4f01\u4e1a\u6536\u76ca\u4e0e\u5e02\u573a\u7ed3\u6784","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#\u9700\u6c42\u7c7b\u578b","title":"\u9700\u6c42\u7c7b\u578b","text":"<ul> <li>\u5e02\u573a\u9700\u6c42\uff1a\u5bf9\u67d0\u4e2a\u5e02\u573a\u4e0a\u5168\u90e8\u4ea7\u54c1\uff0c\u6240\u6709\u4f01\u4e1a\u7684\u540c\u79cd\u4ea7\u54c1\u7684\u9700\u6c42</li> <li>\u5382\u5546\u9700\u6c42\uff08\u4f01\u4e1a\u9762\u4e34\u7684\u9700\u6c42\uff09\uff1a\u5bf9\u5e02\u573a\u4e0a\u67d0\u4e2a\u4f01\u4e1a\u4ea7\u54c1\u7684\u9700\u6c42</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#\u4f01\u4e1a\u6536\u76ca\u4e0e\u5e02\u573a\u7ed3\u6784_1","title":"\u4f01\u4e1a\u6536\u76ca\u4e0e\u5e02\u573a\u7ed3\u6784","text":"<ul> <li>\u5e02\u573a\u9700\u6c42\u53d6\u51b3\u4e8e\u6d88\u8d39\u8005\u7684\u884c\u4e3a\uff08\u4e2a\u4eba\u9700\u6c42\uff09</li> <li>\u4f01\u4e1a\u9762\u4e34\u7684\u9700\u6c42\u53d6\u51b3\u4e8e\u6d88\u8d39\u8005\u884c\u4e3a\uff0c\u4ee5\u53ca\u540c\u4e00\u5e02\u573a\u4e2d\u5176\u4ed6\u4f01\u4e1a\u7684\u884c\u4e3a\uff08\u6bd4\u4e9a\u8fea\u4e0e\u7279\u65af\u62c9\uff09<ul> <li>\u5382\u5546\u9700\u6c42\u51fd\u6570 \\(P(Q)\\) \u4f9d\u8d56\u4e8e\u5e02\u573a\u7ed3\u6784\u6216\u5e02\u573a\u7ade\u4e89\u7a0b\u5ea6</li> </ul> </li> <li>\u4f01\u4e1a\u7684\u6536\u76ca \\(R(Q)=P(Q)Q\\) \u4e0e\u4f01\u4e1a\u6240\u5904\u7684\u5e02\u573a\u7ed3\u6784\u5bc6\u5207\u76f8\u5173</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#\u5e02\u573a\u7ed3\u6784\u5212\u5206\u4f9d\u636e\u4e0e\u7c7b\u578b","title":"\u5e02\u573a\u7ed3\u6784\u5212\u5206\u4f9d\u636e\u4e0e\u7c7b\u578b","text":"<ul> <li>\u4f9d\u636e\uff1a\u5382\u5546\u6570\u91cf\u3001\u4ea7\u54c1\u5dee\u5f02\u3001\u5e02\u573a\u4efd\u989d\u3001\u4ef7\u683c\u63a7\u5236\u7a0b\u5ea6\u3001\u8fdb\u51fa\u96be\u5ea6</li> <li>\u7c7b\u578b <ul> <li>\u5b8c\u5168\u7ade\u4e89\uff1a\u4f01\u4e1a\u4e0d\u80fd\u51b3\u5b9a\u6216\u5f71\u54cd\u4ef7\u683c (price taker, price taking)</li> <li>\u4e0d\u5b8c\u5168\u7ade\u4e89\uff1a\u4f01\u4e1a\u6709\u5b9a\u4ef7\u6743 (price maker, price searching)</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#\u5b8c\u5168\u7ade\u4e89\u5e02\u573a","title":"\u5b8c\u5168\u7ade\u4e89\u5e02\u573a","text":"<ul> <li>\u975e\u5e38\u591a\u7684\u4e70\u8005\u548c\u5356\u8005</li> <li>\u4ea7\u54c1\u540c\u8d28</li> <li>\u81ea\u7531\u8fdb\u51fa\u5e02\u573a</li> <li>\u5b8c\u5168\u4fe1\u606f</li> <li>\u5355\u4e2a\u5382\u5546\u662f\u5e02\u573a\u4ef7\u683c\u7684\u63a5\u53d7\u8005</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#\u5b8c\u5168\u7ade\u4e89\u4f01\u4e1a\u9762\u4e34\u7684\u9700\u6c42\u66f2\u7ebf\u548c\u6536\u76ca\u66f2\u7ebf","title":"\u5b8c\u5168\u7ade\u4e89\u4f01\u4e1a\u9762\u4e34\u7684\u9700\u6c42\u66f2\u7ebf\u548c\u6536\u76ca\u66f2\u7ebf","text":"<ul> <li>\u5e02\u573a\u9700\u6c42\u66f2\u7ebf\u5411\u53f3\u4e0b\u65b9\u503e\u659c\uff0c\u56e0\u4e3a\u5e02\u573a\u9700\u6c42\u662f\u6d88\u8d39\u8005\u884c\u4e3a\u51b3\u5b9a\u7684</li> <li>\u5355\u4e2a\u5382\u5546\u7684\u4efd\u989d\u5f88\u5c0f\uff0c\u6240\u4ee5\u9700\u6c42\u51fd\u6570\u662f\u6c34\u5e73\u7684\uff0c\u76f8\u5bf9\u4e8e\u5e02\u573a\u6765\u8bf4\u65e0\u8bba\u591a\u5c11\u90fd\u80fd\u5356\u51fa\u53bb</li> <li>\u6536\u76ca\u51fd\u6570<ul> <li>\\(R=PQ=P_0Q\\)</li> <li>\\(AR=P_0\\)</li> <li>\\(MR=\\frac{dR}{dQ}=P_0\\)</li> <li>\u53ea\u6709 R \u662f\u659c\u76f4\u7ebf\uff0c\u5176\u4ed6\u90fd\u662f\u6c34\u5e73\u76f4\u7ebf</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#\u5b8c\u5168\u7ade\u4e89\u4f01\u4e1a\u7684\u77ed\u671f\u5747\u8861","title":"\u5b8c\u5168\u7ade\u4e89\u4f01\u4e1a\u7684\u77ed\u671f\u5747\u8861","text":"<ul> <li>\u77ed\u671f\uff0c\u8fb9\u9645\u6536\u76ca=\u8fb9\u9645\u6210\u672c</li> <li>\u5b8c\u5168\u7ade\u4e89\u5229\u6da6\u6700\u5927\uff1a\\(MR=P=MC\\)</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#\u77ed\u671f\u5229\u6da6\u6700\u5927\u5316\u548c\u76c8\u4e8f","title":"\u77ed\u671f\u5229\u6da6\u6700\u5927\u5316\u548c\u76c8\u4e8f","text":"<ul> <li>\\(P&gt;ATC\\) \u76c8\u5229\uff0c\u83b7\u5f97\u8d85\u989d\u5229\u6da6</li> <li>\\(P&lt;ATC\\) \u4e8f\u635f\uff0c\u7ecf\u6d4e\u5229\u6da6\u4e3a\u8d1f</li> <li>\\(P=ATC\\) \u4e0d\u4e8f\u4e0d\u76c8\uff0c\u7ecf\u6d4e\u5229\u6da6\u4e3a 0</li> <li>\u4f01\u4e1a\u5229\u6da6\u6700\u5927\u5316\u65f6\uff0c\u4e09\u79cd\u7ed3\u679c\u90fd\u6709\u53ef\u80fd</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#\u77ed\u671f\u4e8f\u635f\u7684\u51b3\u7b56","title":"\u77ed\u671f\u4e8f\u635f\u7684\u51b3\u7b56","text":"<ul> <li>\u635f\u5931\u5206\u6790<ul> <li>\u505c\u4ea7\u635f\u5931\uff1a\u5168\u90e8\u4e0d\u53d8\u6210\u672c \\(FC\\)</li> <li>\u7ee7\u7eed\u751f\u4ea7\uff1a\\(TR-VC-FC\\,\\,(TR, VC &gt; 0)\\)</li> </ul> </li> <li>\u4f01\u4e1a\u51b3\u7b56<ul> <li>\\(AVC &lt; P = MC &lt; ACT\\) \u7ee7\u7eed\u751f\u4ea7<ul> <li>\u4ef7\u683c\u9ad8\u4e8e\u5e73\u5747\u53ef\u53d8\u6210\u672c\uff0c\u5219\u7ee7\u7eed\u751f\u4ea7</li> </ul> </li> <li>\\(AVC=P=MC&lt;ATC\\) \u4f01\u4e1a\u505c\u6b62\u8425\u4e1a\u70b9<ul> <li>\u53ef\u4ee5\u7ee7\u7eed\u751f\u4ea7\uff0c\u4e5f\u53ef\u4ee5\u505c\u4ea7</li> <li>AVC \u7684\u6700\u4f4e\u70b9\uff0c\u5c31\u662f\u505c\u4e1a\u70b9</li> </ul> </li> <li>\\(P=MC&lt;AVC&lt;AC\\) \u505c\u4ea7</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#\u5b8c\u5168\u7ade\u4e89\u4f01\u4e1a\u7684\u77ed\u671f\u4f9b\u7ed9\u66f2\u7ebf","title":"\u5b8c\u5168\u7ade\u4e89\u4f01\u4e1a\u7684\u77ed\u671f\u4f9b\u7ed9\u66f2\u7ebf","text":"<ul> <li>\\(P&gt;AVC_{min}\\) \u65f6\uff0c\u4e0e MC \u66f2\u7ebf\u91cd\u5408</li> <li>\\(P&lt;AVC_{min}\\) \u65f6\uff0c\u505c\u4ea7\uff0c\u4ea7\u91cf\u5230 0</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#\u5e02\u573a\u7684\u77ed\u671f\u4f9b\u7ed9\u66f2\u7ebf","title":"\u5e02\u573a\u7684\u77ed\u671f\u4f9b\u7ed9\u66f2\u7ebf","text":"<ul> <li>\u5e02\u573a\u4ef7\u683c\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u5e02\u573a\u4e2d\u6240\u6709\u7684\u5b8c\u5168\u7ade\u4e89\u4f01\u4e1a\u90fd\u4f1a\u6839\u636e\u4ef7\u683c\u53d8\u5316\u6765\u8c03\u6574\u81ea\u5df1\u7684\u5229\u6da6\u6700\u5927\u5316\u4ea7\u91cf\uff0c\u4ece\u800c\u6539\u53d8\u5bf9\u8981\u7d20\u7684\u9700\u6c42</li> <li>==\u8981\u7d20\u5e02\u573a==\u53d8\u5316\u7684\u4e24\u79cd\u60c5\u51b5<ul> <li>\u5982\u679c\u6240\u6709\u8fd9\u4e9b\u4f01\u4e1a\u5bf9\u8981\u7d20\u7684\u9700\u6c42\u5728\u6574\u4e2a\u8981\u7d20\u5e02\u573a\u4e0a\u5fae\u4e0d\u8db3\u9053\uff0c\u6539\u53d8\u8981\u7d20\u9700\u6c42\u7684\u884c\u4e3a\u4e0d\u5f71\u54cd\u8981\u7d20\u5e02\u573a\u7684\u4ef7\u683c\uff08\u53e3\u7f69\u4e0e\u65e0\u7eba\u5e03\uff0c\u53e3\u7f69\u751f\u4ea7\u53ea\u662f\u65e0\u7eba\u5e03\u7528\u9014\u7684\u5f88\u5c0f\u4e00\u90e8\u5206\uff0c\u4e0d\u4f1a\u5bfc\u81f4\u65e0\u7eba\u5e03\u4ef7\u683c\u4e0a\u5347\uff09</li> <li>\u5982\u679c\u5728\u8981\u7d20\u5e02\u573a\u4e0a\u6784\u6210\u4e00\u4e2a\u4e3e\u8db3\u8f7b\u91cd\u7684\u90e8\u5206\uff0c\u90a3\u4e48\u4f1a\u6539\u53d8\u8981\u7d20\u4ef7\u683c\uff0c\u4ece\u800c\u5bfc\u81f4\u6bcf\u4e2a\u4f01\u4e1a\u7684\u8fb9\u9645\u6210\u672c\u548c\u5e73\u5747\u6210\u672c\u66f2\u7ebf\u6ce2\u52a8\uff08\u53e3\u7f69\u4e0e\u7194\u55b7\u5e03\uff09</li> </ul> </li> </ul> <ul> <li>\u5982\u679c\u4ef7\u683c\u53d8\u5316\u5f71\u54cd\u8981\u7d20\u5e02\u573a\u4ef7\u683c\uff0c\u90a3\u4e48\u4ef7\u683c\u7684\u53d8\u5316\u4f1a\u4ea7\u751f\u65b0\u7684 \\(MC\\) \u8fb9\u9645\u6210\u672c\u7ebf\uff0c\u53d6\u5230\u4e00\u4e2a\u65b0\u7684\u70b9</li> <li>\u6240\u6709\u70b9\u7684\u8fde\u7ebf\u624d\u662f\u6240\u6709\u4f01\u4e1a\u771f\u6b63\u77ed\u671f\u4f9b\u7ed9\u66f2\u7ebf\uff0c\u4e5f\u662f\u4e00\u79cd\u6269\u5c55\u7ebf</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#\u5b8c\u5168\u7ade\u4e89\u4f01\u4e1a\u7684\u957f\u671f\u5747\u8861","title":"\u5b8c\u5168\u7ade\u4e89\u4f01\u4e1a\u7684\u957f\u671f\u5747\u8861","text":"<ul> <li>\u77ed\u671f\u4f01\u4e1a\u89c4\u6a21\u56fa\u5b9a<ul> <li>\u5229\u6da6\u6700\u5927\u5316\u4ea7\u91cf \\(P=SMC\\)</li> <li>\u4e0d\u540c\u89c4\u6a21\u7684\u7ecf\u6d4e\u5229\u6da6\u4e0d\u540c</li> </ul> </li> <li>\u957f\u671f\u4f01\u4e1a\u89c4\u6a21\u53ef\u53d8\uff08\u6240\u6709\u8981\u7d20\u90fd\u53ef\u4ee5\u8c03\u6574\uff09<ul> <li>\u5229\u6da6\u6700\u5927\u5316\u4ea7\u91cf \\(P=LMC\\) \uff08\u957f\u671f\u8fb9\u9645\u6536\u76ca=\u957f\u671f\u8fb9\u9645\u6210\u672c\uff09</li> <li>\u6700\u4f18\u89c4\u6a21\uff1a\u5728\u6240\u6709\u77ed\u671f\u5747\u8861\u4e2d\u9009\u62e9\u4e00\u4e2a\u6700\u4f18\u7684\u77ed\u671f\u5747\u8861</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#\u4f01\u4e1a\u7684\u89c4\u6a21\u8c03\u6574","title":"\u4f01\u4e1a\u7684\u89c4\u6a21\u8c03\u6574","text":"<ul> <li>\u627e\u5230 \\(LMC=P=MR\\) \u5bf9\u5e94\u7684\u4ea7\u91cf</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#\u884c\u4e1a\u89c4\u6a21\u8c03\u6574","title":"\u884c\u4e1a\u89c4\u6a21\u8c03\u6574","text":"<ul> <li>\u4f01\u4e1a\u8fdb\u51fa\u7684\u5e73\u8861\u70b9 \\(\\pi=0, TR=TC\\,(P=ATC)\\)<ul> <li>\\(\\pi&gt;0,P&gt;ATC\\) \u76c8\u5229\uff0c\u8fdb\u5165\u5e02\u573a</li> <li>\\(\\pi&lt;0,P&gt;ATC\\) \u4e8f\u635f\uff0c\u9000\u51fa\u5e02\u573a</li> <li>\\(\\pi=0,P=ATC\\) \u6ca1\u6709\u8fdb\u5165\u548c\u9000\u51fa</li> </ul> </li> <li>\u957f\u671f\u9000\u51fa vs. \u77ed\u671f\u505c\u4ea7<ul> <li>\u77ed\u671f\u505c\u6b62\u8425\u4e1a\u70b9\uff1a\\(TR=VC\\,(P=AVC)\\)</li> </ul> </li> <li>\u884c\u4e1a\u7684\u89c4\u6a21\uff1a\u4f01\u4e1a\u8fdb\u51fa\u8c03\u6574\u884c\u4e1a\u7684\u89c4\u6a21\uff0c\u5f53\u8be5\u884c\u4e1a\u4e2d\u6240\u6709\u5b8c\u5168\u7ade\u4e89\u4f01\u4e1a\u90fd\u8fbe\u5230\u96f6\u7ecf\u6d4e\u5229\u6da6\uff08\u4e0d\u662f\u4f1a\u8ba1\u5229\u6da6\uff09\u65f6\uff0c\u8fbe\u5230\u5747\u8861 \\(P=LMC=LAC\\)</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#\u957f\u671f\u5747\u8861","title":"\u957f\u671f\u5747\u8861","text":"<ul> <li>\u4f01\u4e1a\u957f\u671f\u5229\u6da6\u6700\u5927\u5316 \\(P=AR=MR=LMC=LAC\\)</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.04%20%E5%AE%8C%E5%85%A8%E7%AB%9E%E4%BA%89%E4%BA%A7%E5%93%81%E5%B8%82%E5%9C%BA.html#-\u5b8c\u5168\u7ade\u4e89\u6761\u4ef6\u4e0bparmr","title":"- \u5b8c\u5168\u7ade\u4e89\u6761\u4ef6\u4e0b\uff1a\\(P=AR=MR\\)","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.05%20%E5%AE%8C%E5%85%A8%E5%9E%84%E6%96%AD%E5%B8%82%E5%9C%BA.html","title":"Chap.05 \u5b8c\u5168\u5784\u65ad\u5e02\u573a","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.05%20%E5%AE%8C%E5%85%A8%E5%9E%84%E6%96%AD%E5%B8%82%E5%9C%BA.html#\u5784\u65ad","title":"\u5784\u65ad","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.05%20%E5%AE%8C%E5%85%A8%E5%9E%84%E6%96%AD%E5%B8%82%E5%9C%BA.html#\u4ef7\u683c\u6b67\u89c6\u7406\u8bba","title":"\u4ef7\u683c\u6b67\u89c6\u7406\u8bba","text":"<ul> <li>\u4ef7\u683c\u6b67\u89c6\uff08\u5dee\u522b\u5b9a\u4ef7\uff09\uff1a\u5784\u65ad\u8005\u5bf9\u540c\u4e00\u79cd\u7269\u54c1\u5411\u67d0\u4e9b\u6d88\u8d39\u8005\u6536\u53d6\u7684\u4ef7\u683c\u9ad8\u4e8e\u53e6\u4e00\u4e9b\u6d88\u8d39\u8005\uff0c\u6216\u5bf9\u540c\u4e00\u6d88\u8d39\u8005\u8d2d\u4e70\u4e0d\u540c\u6570\u91cf\u7684\u7269\u54c1\u6536\u53d6\u4e0d\u540c\u7684\u4ef7\u683c<ul> <li>\u4e3b\u8981\u4f53\u73b0\u4e3a\u76f8\u540c\u6210\u672c\u7684\u4e00\u79cd\u4ea7\u54c1\u4ee5\u4e0d\u540c\u7684\u4ef7\u683c\u51fa\u552e</li> <li>\u6216\u5728\u4ea7\u54c1\u5e76\u4e0d\u5b8c\u5168\u76f8\u540c\u7684\u573a\u5408\uff0c\u4e0d\u540c\u4ea7\u54c1\u7684\u4ef7\u683c\u5dee\u5f02\u663e\u8457\u4e0d\u540c\u4e8e\u5b83\u4eec\u7684\u6210\u672c\u5dee\u5f02 \u7ecf\u6d4e\u8231\u4e8e\u5546\u52a1\u8231</li> </ul> </li> <li>\u4ef7\u683c\u6b67\u89c6\u7684\u4e09\u4e2a\u57fa\u672c\u6761\u4ef6<ol> <li>\u5382\u5546\u6709\u5b9a\u4ef7\u6743</li> <li>\u5382\u5546\u9700\u8981\u80fd\u591f\u63a8\u77e5\u6d88\u8d39\u8005\u5bf9\u6bcf\u4e2a\u5355\u4f4d\u7684\u8d2d\u4e70\u610f\u613f\uff0c\u4e14\u8fd9\u4e9b\u610f\u613f\u5728\u4e0d\u540c\u6d88\u8d39\u8005\u4e4b\u95f4\u4e0d\u540c</li> <li>\u5382\u5546\u8981\u80fd\u591f\u9632\u6b62\u4ea7\u54c1\u5012\u5356</li> </ol> </li> <li>\u4ef7\u683c\u6b67\u89c6\u7684\u7c7b\u578b<ul> <li>\u4e00\u7ea7\u4ef7\u683c\u6b67\u89c6\uff08\u5b8c\u5168\u4ef7\u683c\u6b67\u89c6\uff0cperfect  price discrimination\uff09\u5411\u6bcf\u4e2a\u6d88\u8d39\u8005\u6536\u53d6\u4ed6\u613f\u610f\u652f\u4ed8\u7684\u6700\u9ad8\u4ef7\u683c\uff0c\u770b\u4eba\u5b9a\u4ef7</li> <li>\u4e8c\u7ea7\u4ef7\u683c\u6b67\u89c6\uff08quantity discounts\uff09\u5bf9\u540c\u4e00\u6d88\u8d39\u8005\uff0c\u6309\u7167\u8d2d\u4e70\u6570\u91cf\u7684\u4e0d\u540c\u5236\u5b9a\u68af\u5ea6\u7684\u4ef7\u683c</li> <li>\u4e09\u7ea7\u4ef7\u683c\u6b67\u89c6\uff1a\u4ee5\u4e0d\u540c\u7684\u4ef7\u683c\u5411\u4e0d\u540c\u7c7b\u578b\u7684\u6d88\u8d39\u8005\u6216\u8005\u4e0d\u540c\u7684\u5e02\u573a\u51fa\u552e\u540c\u4e00\u4ea7\u54c1</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.05%20%E5%AE%8C%E5%85%A8%E5%9E%84%E6%96%AD%E5%B8%82%E5%9C%BA.html#\u4e00\u7ea7\u4ef7\u683c\u6b67\u89c6","title":"\u4e00\u7ea7\u4ef7\u683c\u6b67\u89c6","text":"<ul> <li>\u5784\u65ad\u4f01\u4e1a\u80fd\u591f\u63a0\u593a\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u4e2d\u6240\u6709\u7684\u6d88\u8d39\u8005\u5269\u4f59</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.05%20%E5%AE%8C%E5%85%A8%E5%9E%84%E6%96%AD%E5%B8%82%E5%9C%BA.html#\u4e8c\u7ea7\u4ef7\u683c\u6b67\u89c6","title":"\u4e8c\u7ea7\u4ef7\u683c\u6b67\u89c6","text":"<ul> <li>\u9636\u68af\u5b9a\u4ef7\uff0c\u53ef\u4ee5\u63a0\u593a\u90e8\u5206\u6d88\u8d39\u8005\u5269\u4f59</li> <li></li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.05%20%E5%AE%8C%E5%85%A8%E5%9E%84%E6%96%AD%E5%B8%82%E5%9C%BA.html#\u4e09\u7ea7\u4ef7\u683c\u6b67\u89c6","title":"\u4e09\u7ea7\u4ef7\u683c\u6b67\u89c6","text":"<ul> <li>\u4e0d\u540c\u5e02\u573a/\u6d88\u8d39\u8005\u4e0d\u540c\u5b9a\u4ef7</li> <li>\\(\\pi=P_1Q_1+P_2Q_2-m(Q_1+Q_2)\\)<ul> <li>\u5176\u4e2d \\(m=MC=AC\\)\uff0c\u5047\u8bbe\u8fb9\u9645\u6210\u672c\u548c\u5e73\u5747\u6210\u672c\u4e0d\u53d8\u4e14\u76f8\u7b49</li> </ul> </li> <li>\u5229\u6da6\u6700\u5927\u5316\u4ea7\u91cf \\(MR_1=MR_2=m\\)<ul> <li>\u9700\u8981\u6c42\u504f\u5bfc\u6765\u8ba1\u7b97</li> </ul> </li> <li>\u4e0e\u9700\u6c42\u5f39\u6027\u7684\u5173\u7cfb<ul> <li>\\(MR_1=MR_2\\Rightarrow P_1(1+/E_1)=P_2(1+1/E_2)\\Rightarrow P_1(1-1/|E_1|)=P_2(1-1/|E_2|)\\)</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.06%20%E5%9E%84%E6%96%AD%E7%AB%9E%E4%BA%89.html","title":"Chap.06 \u5784\u65ad\u7ade\u4e89","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.06%20%E5%9E%84%E6%96%AD%E7%AB%9E%E4%BA%89.html#\u5784\u65ad\u7ade\u4e89\u5e02\u573a","title":"\u5784\u65ad\u7ade\u4e89\u5e02\u573a","text":"<ul> <li>\u5784\u65ad\u7ade\u4e89\uff1a\u7531\u5927\u91cf\u751f\u4ea7\u76f8\u4f3c\u800c\u7565\u6709\u5dee\u522b\u7684\u4ea7\u54c1\u7684\u76f8\u4e92\u7ade\u4e89\u7684\u4f01\u4e1a\u7ec4\u6210<ul> <li>\u8bb8\u591a\u5382\u5546\uff0c\u6bcf\u4e2a\u5728\u5e02\u573a\u4efd\u989d\u4e2d\u7684\u4efd\u989d\u90fd\u5fae\u4e0d\u8db3\u9053</li> <li>\u6709\u5dee\u522b\u7684\u540c\u79cd\u4ea7\u54c1</li> <li>\u81ea\u7531\u8fdb\u51fa\u5e02\u573a\uff08\u957f\u671f\u7ecf\u6d4e\u5229\u6da6\u4e3a 0\uff09</li> <li>e.g. \u5976\u8336\uff0c\u5c0f\u8bf4</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.06%20%E5%9E%84%E6%96%AD%E7%AB%9E%E4%BA%89.html#\u5784\u65ad\u7ade\u4e89\u4f01\u4e1a\u7684\u9700\u6c42\u66f2\u7ebf","title":"\u5784\u65ad\u7ade\u4e89\u4f01\u4e1a\u7684\u9700\u6c42\u66f2\u7ebf","text":"<ul> <li>\u9700\u6c42\u66f2\u7ebf dd \u5411\u53f3\u4e0b\u65b9\u503e\u659c\uff0c\u6bd4\u5b8c\u5168\u7ade\u4e89\u66f4\u9661\uff0c\u6bd4\u5784\u65ad\u5e73\u7f13<ul> <li></li> </ul> </li> <li>\u4e3b\u89c2\u9700\u6c42\u66f2\u7ebf (dd) \u4e0e\u5b9e\u9645\u9700\u6c42\u66f2\u7ebf (DD)<ul> <li>dd: \u5047\u8bbe\u5355\u4e2a\u5784\u65ad\u7ade\u4e89\u4f01\u4e1a\u6539\u53d8\u4ef7\u683c\u7684\u884c\u4e3a\u4e0d\u4f1a\u5bfc\u81f4\u5176\u4ed6\u4f01\u4e1a\u8c03\u4ef7</li> <li>DD \u66f4\u9661\uff0c\u56e0\u4e3a\u5b58\u5728\u8ddf\u98ce\u8c03\u4ef7\uff0c\u6574\u4f53\u7684\u8868\u73b0\u66f4\u8d8b\u8fd1\u4e8e\u5784\u65ad</li> <li>\u5f53\u884c\u4e1a\u5185\u6240\u6709\u7684\u4f01\u4e1a\u90fd\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u6539\u53d8\u4ef7\u683c\u65f6\uff0c\u5e02\u573a\u4ef7\u683c\u53d8\u5316\uff0c\u4f7f\u5f97dd \u6cbf\u7740 DD \u4e0a\u4e0b\u5e73\u79fb</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.06%20%E5%9E%84%E6%96%AD%E7%AB%9E%E4%BA%89.html#\u5784\u65ad\u7ade\u4e89\u4f01\u4e1a\u7684\u6536\u76ca\u66f2\u7ebf","title":"\u5784\u65ad\u7ade\u4e89\u4f01\u4e1a\u7684\u6536\u76ca\u66f2\u7ebf","text":"<ul> <li>dd \u51b3\u5b9a\u5784\u65ad\u7ade\u4e89\u4f01\u4e1a\u7684 MR\uff0cAR \u4e0e dd \u91cd\u5408<ul> <li></li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.06%20%E5%9E%84%E6%96%AD%E7%AB%9E%E4%BA%89.html#\u5784\u65ad\u7ade\u4e89\u4f01\u4e1a\u7684\u77ed\u671f\u5747\u8861","title":"\u5784\u65ad\u7ade\u4e89\u4f01\u4e1a\u7684\u77ed\u671f\u5747\u8861","text":"<ul> <li>\u77ed\u671f\u5747\u8861\u6761\u4ef6 \\(MR(Q)=SMC(Q)\\)<ul> <li></li> <li>\u4e5f\u5c31\u662f\u6700\u540e\u751f\u4ea7\u7684\u4e00\u5355\u4f4d\u521a\u597d\u6ca1\u6709\u6536\u5165</li> </ul> </li> <li>\u77ed\u671f\u5747\u8861\u65f6 \\(P=d(Q)=D(Q)\\)<ul> <li></li> </ul> </li> <li>\u77ed\u671f\u5747\u8861\u7684\u52a8\u6001\u8c03\u6574\u8fc7\u7a0b<ul> <li>\u5f53\u4e00\u4e2a\u5178\u578b\u5784\u65ad\u7ade\u4e89\u4f01\u4e1a\u964d\u4f4e\u4e86\u4ef7\u683c</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.06%20%E5%9E%84%E6%96%AD%E7%AB%9E%E4%BA%89.html#\u5784\u65ad\u7ade\u4e89\u4f01\u4e1a\u7684\u957f\u671f\u5747\u8861","title":"\u5784\u65ad\u7ade\u4e89\u4f01\u4e1a\u7684\u957f\u671f\u5747\u8861","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.06%20%E5%9E%84%E6%96%AD%E7%AB%9E%E4%BA%89.html#\u5784\u65ad\u7ade\u4e89\u548c\u5b8c\u5168\u7ade\u4e89\u7684\u6bd4\u8f83","title":"\u5784\u65ad\u7ade\u4e89\u548c\u5b8c\u5168\u7ade\u4e89\u7684\u6bd4\u8f83","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.06%20%E5%9E%84%E6%96%AD%E7%AB%9E%E4%BA%89.html#\u5784\u65ad\u7ade\u4e89\u4e0e\u5b8c\u5168\u5784\u65ad\u6bd4\u8f83","title":"\u5784\u65ad\u7ade\u4e89\u4e0e\u5b8c\u5168\u5784\u65ad\u6bd4\u8f83","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.06%20%E5%9E%84%E6%96%AD%E7%AB%9E%E4%BA%89.html#\u5be1\u5934\u5784\u65ad","title":"\u5be1\u5934\u5784\u65ad","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.06%20%E5%9E%84%E6%96%AD%E7%AB%9E%E4%BA%89.html#\u5be1\u5934\u7684\u542b\u4e49\u53ca\u5176\u7279\u5f81","title":"\u5be1\u5934\u7684\u542b\u4e49\u53ca\u5176\u7279\u5f81","text":"<ul> <li>\u5be1\u5934\u5784\u65ad\u5e02\u573a\uff1a\u5c11\u6570\u51e0\u4e2a\u5927\u4f01\u4e1a\u63a7\u5236\u7740\u5168\u90e8\u6216\u5927\u90e8\u5206\u7684\u67d0\u79cd\u4ea7\u54c1\u7684\u751f\u4ea7\u548c\u9500\u552e<ul> <li>\u5be1\u5934\u4e4b\u5916\u53ef\u80fd\u5b58\u5728\u5c0f\u5382\u5546\uff0c\u4f46\u662f\u5be1\u5934\u4e00\u5b9a\u63a7\u5236\u5927\u90e8\u5206\u5e02\u573a</li> <li>\u5be1\u5934\u51b3\u7b56\u76f8\u4e92\u4f9d\u8d56</li> <li>\u8f83\u9ad8\u7684\u8fdb\u5165\u58c1\u5792\uff08\u89c4\u6a21\u7ecf\u6d4e\u3001\u8d44\u6e90\u63a7\u5236\u3001\u4e13\u5229\u3001\u653f\u5e9c\u7279\u8bb8\uff09</li> </ul> </li> <li>\u5206\u7c7b\uff1a<ul> <li>\u7eaf\u7cb9\u5be1\u5934\uff1a\u4ea7\u54c1\u5b8c\u5168\u540c\u8d28\u901a\u4fe1\u5e02\u573a</li> <li>\u975e\u7eaf\u7cb9/\u5dee\u522b\u5be1\u5934\uff1a\u4ea7\u54c1\u5f02\u8d28\u624b\u673a\u5e02\u573a</li> </ul> </li> <li>\u5be1\u5934\u4f01\u4e1a\u4e0e\u5b8c\u5168\u7ade\u4e89\u3001\u5784\u65ad\u7ade\u4e89\u548c\u5784\u65ad\u7684\u533a\u522b<ul> <li>\u5b8c\u5168\u7ade\u4e89\u4e0e\u5784\u65ad\u7ade\u4e89\u4f01\u4e1a\u89c4\u6a21\u5c0f\uff0c\u4e0d\u5fc5\u8003\u8651\u884c\u52a8\u5bf9\u5176\u4ed6\u4f01\u4e1a\u7684\u5f71\u54cd</li> <li>\u5784\u65ad\u53ea\u6709\u4e00\u5bb6\uff0c\u4e5f\u4e0d\u7528\u8003\u8651\u884c\u52a8\u961f\u5bf9\u5176\u4ed6\u4f01\u4e1a\u7684\u5f71\u54cd</li> <li>\u5be1\u5934\u4f01\u4e1a\u7684\u884c\u4e3a\u4f1a\u5728\u8f83\u5927\u7a0b\u5ea6\u4e0a\u5f71\u54cd\u540c\u4e00\u5e02\u573a\u4e2d\u7684\u5176\u4ed6\u4f01\u4e1a\uff0c\u88ab\u5f71\u54cd\u7684\u4f01\u4e1a\u5fc5\u7136\u4f1a\u505a\u51fa\u53cd\u5e94\uff0c\u4ece\u800c\u6539\u53d8\u6700\u521d\u884c\u52a8\u7684\u6548\u679c</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Chap.06%20%E5%9E%84%E6%96%AD%E7%AB%9E%E4%BA%89.html#\u53e4\u8bfa\u6a21\u578b","title":"\u53e4\u8bfa\u6a21\u578b","text":"<ul> <li>\u5047\u8bbe<ul> <li>\u5e02\u573a\u4e0a\u53ea\u6709\u4e24\u4e2a\u5be1\u5934\u5728\u751f\u4ea7\u548c\u9500\u552e\u540c\u8d28\u7684\u4ea7\u54c1\uff0c\u4e14\u751f\u4ea7\u6210\u672c\u4e3a 0</li> <li>\u5e02\u573a\u9700\u6c42\u66f2\u7ebf\u662f\u4e00\u6761\u76f4\u7ebf\uff0c\u4e24\u8005\u90fd\u5df2\u77e5</li> <li>A \u548c B \u65e0\u52fe\u7ed3\u884c\u4e3a\uff0c\u5e76\u5047\u5b9a\u5bf9\u65b9\u4ea7\u91cf\u4e0d\u53d8\u6765\u786e\u5b9a\u5404\u81ea\u5229\u6da6\u6700\u5927\u5316\u4ea7\u91cf</li> </ul> </li> <li>\u6c42\u89e3<ul> <li>\u9996\u5148\u5f97\u5230\u5e02\u573a\u9700\u6c42\u66f2\u7ebf\uff0c\u548c\u5382\u5546\u6536\u76ca\u66f2\u7ebf</li> <li>\u5bf9 A \u5047\u8bbe \\(Q_2\\) \u4e0d\u53d8\uff0c\u627e\u5747\u8861\u70b9\uff0c\u4e0e \\(Q_2\\) \u6709\u5173\uff1b\u540c\u7406\uff0c\u6c42\u89e3 B \u7684\u5747\u8861\u70b9</li> <li></li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html","title":"Final","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u601d\u7ef4\u5bfc\u56fe\u7b80","title":"\u601d\u7ef4\u5bfc\u56fe\uff08\u7b80\uff09","text":"<ul> <li>\u4f9b\u6c42\u7406\u8bba<ul> <li>\u66f2\u7ebf</li> <li>\u66f2\u7ebf\u53d8\u52a8\uff0c\u52a0\u603b</li> <li>\u5747\u8861</li> <li>\u7a0e\u6536</li> <li>\u5546\u54c1\u7c7b\u578b jf dd sc</li> </ul> </li> <li>\u5f39\u6027\u7406\u8bba<ul> <li>\u9700\u6c42\u4ef7\u683c\u5f39\u6027\u516c\u5f0f\u53ca\u63a8\u5bfc\u7ed3\u8bba</li> <li>\u4ef7\u683c\u4ea4\u53c9\u5f39\u6027</li> </ul> </li> <li>\u57fa\u6570\u6548\u7528\u7406\u8bba<ul> <li>\u5747\u8861\u6761\u4ef6\uff0c\u8fb9\u9645\u6548\u7528\uff0c\u6700\u540e\u4e00\u5757\u94b1</li> <li>\u4e00\u5b9a\u9884\u7b97\u7684\u6548\u7528\u6700\u5927\u5316</li> </ul> </li> <li>\u5e8f\u6570\u6548\u7528\u7406\u8bba<ul> <li>\u65e0\u5dee\u5f02\u66f2\u7ebf\uff0c\u9884\u7b97\u7ebf</li> <li>\u5747\u8861\u6761\u4ef6\uff0c\u76f8\u5207</li> </ul> </li> <li>\u4f01\u4e1a\u7684\u751f\u4ea7<ul> <li>\u77ed\u671f\u957f\u671f\u95ee\u9898</li> <li>\u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387\uff0c\u8fb9\u9645\u66ff\u4ee3\u7387\u9012\u51cf</li> <li>\u4e00\u5b9a\u6210\u672c\u7684\u4ea7\u91cf\u6700\u5927\u5316</li> </ul> </li> <li>\u4f01\u4e1a\u7684\u6210\u672c<ul> <li>\u4e00\u5b9a\u4ea7\u91cf\u7684\u6210\u672c\u6700\u5c0f\u5316<ul> <li>MC AC TC</li> <li>SFC SVC AVC ATC </li> </ul> </li> <li>\u751f\u4ea7\u5747\u8861\uff0c\u5229\u6da6\u6700\u5927\u5316 \\(MR=MC\\)</li> </ul> </li> <li>\u5b8c\u5168\u7ade\u4e89\u5e02\u573a<ul> <li>\u81ea\u7531\u8fdb\u51fa\uff0c\u4fe1\u606f\u5bf9\u79f0\uff0c\u4ea7\u54c1\u540c\u8d28\uff0c\u4efd\u989d\u5fae\u4e0d\u8db3\u9053</li> <li>\u5747\u8861\u6761\u4ef6 \\(P=SMC,\\; P=LMC=LAC\\)</li> <li>\u77ed\u671f<ul> <li>\u662f\u5426\u505c\u5de5\u7684\u95ee\u9898 \\(AVC_{min}\\)</li> </ul> </li> <li>\u957f\u671f<ul> <li>\u7ecf\u6d4e\u6210\u672c\u4e3a 0\uff0c\u6ca1\u6709\u8d85\u989d\u5229\u6da6\uff0c\u6548\u7387\u6700\u9ad8</li> </ul> </li> </ul> </li> <li>\u5784\u65ad\u5e02\u573a<ul> <li>\u95e8\u69db\u9ad8\uff0c\u4fe1\u606f\u4e0d\u5bf9\u79f0\uff0c\u5355\u4e2a\u5382\u5546</li> <li>\u5229\u6da6\u6700\u5927\u5316 \\(P&gt;MR=SMC,\\;P&gt;MR=LMC\\,and\\,P&gt;LAC\\)</li> <li>\u6d88\u8d39\u8005\u5269\u4f59\u88ab\u63a0\u593a</li> <li>Dead Weight Loss \u793e\u4f1a\u51c0\u798f\u5229\u635f\u5931</li> <li>\u6548\u7387\u6700\u4f4e\uff1a\u9ad8\u4ef7\u4f4e\u4ea7</li> </ul> </li> <li>\u5784\u65ad\u7ade\u4e89\u548c\u5be1\u5934\u5784\u65ad<ul> <li>\u5784\u65ad\u7ade\u4e89<ul> <li>\u81ea\u7531\u8fdb\u51fa\u3001\u4ea7\u54c1\u6709\u5dee\u5f02\u3001\u4fe1\u606f\u5bf9\u79f0\u3001\u4efd\u989d\u5fae\u4e0d\u8db3\u9053</li> <li>\u957f\u671f\u6ca1\u6709\u8d85\u989d\u5229\u6da6 \u8d85\u989d\u5229\u6da6\u5c31\u662f\u7ecf\u6d4e\u5229\u6da6</li> <li>\u5747\u8861\u6761\u4ef6 \\(P&gt;MR=SMC,\\;P&gt;MR=LMC\\,and\\,P=LAC\\)</li> <li>\u4e3b\u89c2\u9700\u6c42\u66f2\u7ebf</li> </ul> </li> <li>\u5be1\u5934\u5784\u65ad<ul> <li>\u6709\u95e8\u69db\uff0c\u4fe1\u606f\u4e0d\u786e\u5b9a\uff0c\u4efd\u989d\u5de8\u5927</li> <li>\u535a\u5f08\u8bba<ul> <li>\u7eb3\u4ec0\u5747\u8861\uff1a\u7ed9\u5b9a\u522b\u4eba\u7684\u9009\u62e9\uff0c\u80fd\u6700\u5927\u5316\u81ea\u5df1\u6536\u76ca\u7684\u9009\u62e9</li> <li>\u652f\u914d\u5747\u8861\uff08\u6700\u4f18\u5747\u8861\uff09\uff1a\u4e0d\u8bba\u522b\u4eba\u7684\u9009\u62e9\uff0c\u603b\u662f\u80fd\u6700\u5927\u5316\u81ea\u5df1\u6536\u76ca\u7684\u9009\u62e9</li> <li>\u652f\u914d\u5747\u8861\u5fc5\u7136\u662f\u7eb3\u4ec0\u5747\u8861\uff0c\u7eb3\u4ec0\u5747\u8861\u4e0d\u4e00\u5b9a\u662f\u652f\u914d\u5747\u8861</li> </ul> </li> <li>\u5be1\u5934\u7ade\u4e89\u6a21\u578b<ul> <li>\u4ea7\u91cf\u7ade\u4e89\u6a21\u578b<ul> <li>\u53e4\u8bfa\u6a21\u578b\uff1a\u65e0\u52fe\u7ed3\uff0c\u5e02\u573a\u9700\u6c42\u662f\u90fd\u5df2\u77e5\u7684\u76f4\u7ebf\uff0c\u5047\u5b9a\u5bf9\u65b9\u4ea7\u91cf\u4e0d\u53d8\uff0c\u5404\u81ea\u8ba1\u7b97\u5229\u6da6\u6700\u5927\u5316 \u53cd\u5e94\u51fd\u6570</li> <li>\u65af\u5766\u514b\u8d1d\u6a21\u578b\uff1a\u8001\u7ec3\u5be1\u5934\u6839\u636e\u5929\u771f\u5be1\u5934\u7684\u53cd\u5e94\u51fd\u6570\u8fdb\u884c\u81ea\u5df1\u7684\u5229\u6da6\u6700\u5927\u5316</li> </ul> </li> <li>\u4ef7\u683c\u7ade\u4e89\u6a21\u578b<ul> <li>\u8d1d\u5c14\u7279\u5170\u6a21\u578b\uff1a\u9000\u5316\u5230\u5b8c\u5168\u7ade\u4e89\u6a21\u5f0f\uff0c\u53cc\u65b9\u5404\u81ea\u964d\u4ef7\u76f4\u5230 \\(P=MC\\)</li> <li>\u65af\u5a01\u9f50\u6a21\u578b\uff1a\u4ef7\u683c\u521a\u6027\uff1a\u5be1\u5934\u5784\u65ad\u5e02\u573a\u7684\u4ef7\u683c\u6bd4\u8f83\u7a33\u5b9a<ul> <li>\u5047\u8bbe\uff1a\u5be1\u5934\u964d\u4ef7\uff0c\u5176\u4ed6\u4f01\u4e1a\u4e5f\u964d\u4ef7\uff1b\u5be1\u5934\u6da8\u4ef7\uff0c\u5176\u4ed6\u4f01\u4e1a\u4e0d\u6da8\u4ef7\uff0c\u53d8\u6210\u521d\u59cb\u4ef7\u683c\u5904\u5206\u6bb5\u7684\u51fd\u6570</li> </ul> </li> </ul> </li> </ul> </li> <li>\u52fe\u7ed3<ul> <li>\u4ef7\u683c\u9886\u5bfc\u5236\uff0c\u6697\u4e2d\u52fe\u7ed3<ul> <li>\u6674\u96e8\u8868\u5382\u5546\uff1a\u51c6\u786e\u7684\u5224\u65ad\u529b</li> <li>\u652f\u914d\u6027\u5382\u5546\uff1a\u89c4\u6a21\u8f83\u5927</li> <li>\u6700\u4f4e\u6210\u672c\u5382\u5546\uff1a\u6700\u4f4e\u6210\u672c</li> </ul> </li> <li>\u5361\u7279\u5c14 \u6574\u5408\u6210\u4e00\u5bb6\u5927\u578b\u5382\u5546\uff0c\u9000\u5316\u6210\u5b8c\u5168\u5784\u65ad<ul> <li>\u5185\u90e8\u5206\u914d\u5229\u76ca\u95ee\u9898</li> <li>\u5361\u7279\u5c14\u4e0d\u7a33\u5b9a</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li>\u8981\u7d20\u5e02\u573a<ul> <li>\u95f4\u63a5\u7684\u9700\u6c42\uff0c\u5382\u5546\u5bf9\u751f\u4ea7\u8981\u7d20\u7684\u9700\u6c42\u662f\u56e0\u6d88\u8d39\u8005\u5bf9\u4ea7\u54c1\u7684\u9700\u6c42\u800c\u5f15\u7533\u51fa\u6765\u7684</li> </ul> </li> <li>\u4e00\u822c\u5747\u8861\u4e0e\u798f\u5229\u7ecf\u6d4e\u5b66<ul> <li>\u5c40\u90e8\u5747\u8861\uff1a\u67d0\u4e00\u4ea7\u54c1\u6216\u8981\u7d20\u5e02\u573a\u7684\u5747\u8861</li> <li>\u4e00\u822c\u5747\u8861\uff08\u74e6\u5c14\u62c9\u65af\uff09\uff1a\u6240\u6709\u5e02\u573a\u540c\u65f6\u8fbe\u5230\u5747\u8861</li> <li>\u5e15\u7d2f\u6258\u6700\u4f18</li> <li>\u4ea4\u6362\u7684\u4e00\u822c\u5747\u8861\u3001\u751f\u4ea7\u7684\u4e00\u822c\u5747\u8861\uff0c\u751f\u4ea7\u548c\u4ea4\u6362\u7684\u5951\u7ea6\u7ebf<ul> <li>\\(MRS^A_{XY}=MRS^B_{XY}\\)</li> <li>\\(MU_X^A/MU_Y^A=MU_X^B/MU_Y^B\\)</li> </ul> </li> </ul> </li> <li>\u5e02\u573a\u5931\u7075<ul> <li>\u539f\u56e0<ul> <li>\u5916\u90e8\u6027</li> <li>\u5784\u65ad</li> <li>\u516c\u5171\u4ea7\u54c1</li> <li>\u4e0d\u5b8c\u5168\u4fe1\u606f\u4e0e\u4fe1\u606f\u4e0d\u5bf9\u79f0</li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u6613\u9519\u70b9","title":"\u6613\u9519\u70b9","text":"<ul> <li>basic<ul> <li> <p>\u5f39\u6027</p> <ul> <li> <p>\u9700\u6c42\u4ef7\u683c\u5f39\u6027 \\(\\(E_d=\\frac{dQ_d/Q_d}{dP/P}\\)\\)</p> </li> <li> <p>\u9700\u6c42\u6536\u5165\u5f39\u6027 \\(\\(E_m=\\frac{dQ/Q}{dM/M}\\)\\)</p> </li> <li> <p>\uff08\u9700\u6c42\uff09\u4ea4\u53c9\u4ef7\u683c\u5f39\u6027 \\(\\(E_c=\\frac{dQ_X/Q_X}{dP_Y/P_Y}\\)\\)</p> </li> <li> <p>\u4f9b\u7ed9\u5f39\u6027 \\(\\(E_s=\\frac{dQ_s/Q_s}{dP/P}\\)\\)</p> </li> <li> <p>\uff08\u5546\u54c1\u7684\uff09\u66ff\u4ee3\u7387\u6ce8\u610f\u4e0a\u4e0b\u5206\u522b\u662f\u4ec0\u4e48\uff0c\u524d\u4e0b\u540e\u4e0a \\(\\(MRS_{1,2}=-\\frac{dQ_2}{dQ_1}=-\\frac{MU_1}{MU_2}\\)\\)</p> </li> <li> <p>\u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387 \\(\\(MRTS_{L, K}=-\\frac{dK}{dL}|_{Q\u4e0d\u53d8}\\)\\)</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u6559\u6750\u7b80\u7b54\u9898\u7b14\u8bb0","title":"\u6559\u6750\u7b80\u7b54\u9898\u7b14\u8bb0","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7b2c\u4e8c\u7ae0-\u4ef7\u683c\u673a\u5236","title":"\u7b2c\u4e8c\u7ae0 \u4ef7\u683c\u673a\u5236","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u8c37\u8d31\u4f24\u519c\u548c\u8584\u5229\u591a\u9500","title":"\u8c37\u8d31\u4f24\u519c\u548c\u8584\u5229\u591a\u9500","text":"<p>\u8c37\u8d31\u4f24\u519c\uff0c\u56e0\u4e3a\u7cae\u98df\u5c5e\u4e8e\u6b63\u5e38\u54c1\u4e2d\u7684\u5fc5\u9700\u54c1\uff0c\u65e0\u8bba\u5b83\u7684\u4ef7\u683c\u5982\u4f55\u53d8\u52a8\uff0c\u5b83\u7684\u9700\u6c42\u91cf\u662f\u4e00\u5b9a\u7684,\u6240\u4ee5\u5b83\u7684\u4ef7\u683c\u5f39\u6027\u5c0f.\u5f53\u7cae\u98df\u4e30\u6536\uff0c\u7cae\u98df\u7684\u4ef7\u683c\u4f1a\u4e0b\u964d\uff0c\u4f46\u76f8\u5e94\u7684\u7cae\u98df\u7684\u9700\u6c42\u91cf\u53d8\u5316\u4e0d\u5927,\u6240\u4ee5\u519c\u6c11\u7684\u6536\u5165\u53cd\u800c\u5c11\u4e86\u3002</p> <p>\u8584\u5229\u591a\u9500\uff0c\u6307\u9488\u5bf9\u4e00\u4e9b\u4ef7\u683c\u5f39\u6027\u8f83\u5927\u7684\u5546\u54c1\uff0c\u5546\u5bb6\u4ee5\u51cf\u5c11\u5229\u6da6\u7684\u65b9\u5f0f\u8fdb\u884c\u4fc3\u9500\u3002\u5f53\u5382\u5bb6\u964d\u4ef7\u65f6\u65e0\u7591\u964d\u4f4e\u4e86\u5546\u54c1\u7684\u4ef7\u683c\uff0c\u56e0\u4e3a\u5546\u54c1\u7684\u4ef7\u683c\u5f39\u6027\u5927\uff0c\u6240\u4ee5\u6d88\u8d39\u8005\u5fc5\u5c06\u589e\u52a0\u5bf9\u5176\u7684\u8d2d\u4e70.\u4ece\u800c\u8fce\u5408\u4e86\u5546\u5bb6\u591a\u9500\u7684\u76ee\u7684\u3002</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5927\u5b66\u5165\u5b66\u9700\u6c42\u662f\u5426\u7f3a\u4e4f\u5f39\u6027","title":"\u5927\u5b66\u5165\u5b66\u9700\u6c42\u662f\u5426\u7f3a\u4e4f\u5f39\u6027","text":"<p>\u5982\u679c\u9700\u6c42\u662f\u786e\u5b9a\u7684\uff0c\u6bcf\u4e00\u4e2a\u4f53 (\u4e00\u6240\u5927\u5b66) \u53ef\u4ee5\u6839\u636e\u63d0\u9ad8\u4ef7\u683c\u4e0e\u5173\u6ce8\u9500\u552e\u6570\u91cf\u53d8\u52a8\u6765\u81ea\u884c\u786e\u5b9a\u9700\u6c42\u66f2\u7ebf\u3002\u5927\u5b66\u5b98\u5458\u6ca1\u6709\u89c2\u5bdf\u6574\u4f53\u7684\u9700\u6c42\u66f2\u7ebf,\u800c\u662f\u6ce8\u91cd\u770b 15 \u5e74\u6765\u7684\u5747\u8861\u4ef7\u683c\u548c\u6570\u91cf\u3002\u5047\u5b9a\u9700\u6c42\u66f2\u7ebf\u662f\u5411\u4e0a\u503e\u659c\uff0c\u4f9b\u7ed9\u66f2\u7ebf\u5411\u4e0b\u503e\u659c\uff0c\u9700\u6c42\u5f39\u6027\u53ef\u4ee5\u662f\u4efb\u4f55\u4e00\u4e2a\u503c.\u9700\u6c42\u66f2\u7ebf\u53ef\u80fd\u5411\u4e0a\u79fb\u52a8\uff0c\u56e0\u4e3a\u5927\u5b66\u6559\u80b2\u7684\u4ef7\u503c\u589e\u957f\u4e86\u5e76\u4e14\u5b66\u751f\u613f\u610f\u4e3a\u6bcf\u4e00\u4e2a\u673a\u4f1a (\u6216\u8005\u4ea4\u6613\uff09\u652f\u4ed8\u66f4\u9ad8\u7684\u4ef7\u683c\u3002\u66f4\u591a\u7684\u5e02\u573a\u7814\u7a76\u5c06\u4f1a\u652f\u6301\u9700\u6c42\u5bf9\u4ef7\u683c\u5b8c\u5168\u65e0\u5f39\u6027\u7684\u7ed3\u679c.</p> <p>\u63a5\u53d7\u89c2\u70b9\uff0c\u4f46\u662f\u6307\u51fa\u8bc1\u636e\u4e0d\u591f\u5145\u5206\u53ef\u80fd\u662f\u66f4\u597d\u7684\u7b54\u6848</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5f27\u5f39\u6027\u8ba1\u7b97\u8981\u7528\u4e2d\u70b9\u6709\u65f6\u5019\u8981\u4f7f\u7528\u5f27\u5f39\u6027\u8ba1\u7b97\u53d8\u5316\u91cf","title":"\u5f27\u5f39\u6027\u8ba1\u7b97\u8981\u7528\u4e2d\u70b9\uff0c\u6709\u65f6\u5019\u8981\u4f7f\u7528\u5f27\u5f39\u6027\u8ba1\u7b97\u53d8\u5316\u91cf","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5b9e\u9645\u4e2d\u5e02\u573a\u4ef7\u683c\u662f\u600e\u4e48\u51b3\u5b9a\u7684","title":"\u5b9e\u9645\u4e2d\uff0c\u5e02\u573a\u4ef7\u683c\u662f\u600e\u4e48\u51b3\u5b9a\u7684","text":"<ul> <li>\u4f9b\u7ed9\u548c\u9700\u6c42\u66f2\u7ebf\u5171\u540c\u51b3\u5b9a\u5e02\u573a\u4ef7\u683c</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7968\u8d29\u5b50\u4e3a\u4ec0\u4e48\u6253\u51fb\u4e0d\u5c3d","title":"\u7968\u8d29\u5b50\u4e3a\u4ec0\u4e48\u6253\u51fb\u4e0d\u5c3d\uff1f","text":"<ul> <li>\u56fd\u5bb6\u91c7\u53d6\u4ef7\u683c\u9650\u5236</li> <li>\u4ec0\u4e48\u662f\u4ef7\u683c\u9650\u5236\uff1f</li> <li>\u4ef7\u683c\u9650\u5236\u7684\u7ed3\u679c\uff1a\u4f9b\u4e0d\u5e94\u6c42\uff0c\u6392\u961f\uff0c\u9ed1\u5e02\u4ea4\u6613</li> <li>\u7968\u8d29\u5b50\u5c5e\u4e8e\u9ed1\u5e02\uff0c\u7531\u4e8e\u5e02\u573a\u4e00\u76f4\u6709\u5229\u53ef\u56fe\uff0c\u6240\u4ee5\u5c61\u7981\u4e0d\u6b62</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u6295\u673a\u662f\u597d\u8fd8\u662f\u574f\u4e3a\u4ec0\u4e48","title":"\u6295\u673a\u662f\u597d\u8fd8\u662f\u574f\uff1f\u4e3a\u4ec0\u4e48\uff1f","text":"<ul> <li>\u597d</li> <li>\u6295\u673a\u662f\u6307\u4e0d\u4e3a\u4ece\u4e8b\u751f\u4ea7\u548c\u6d88\u8d39\u800c\u4ec5\u4e3a\u8d5a\u94b1\u8fdb\u884c\u7684\u4e70\u5356\u6d3b\u52a8</li> <li> <ol> <li>\u53ef\u4ee5 * \u5728\u7a7a\u95f4\u4e0a\u8c03\u5242\u4f59\u7f3a\uff0c\u80fd\u771f\u6b63\u8282\u7ea6\u751f\u4ea7\u6210\u672c\uff0c\u4ece\u800c\u521b\u9020\u4ef7\u503c</li> </ol> </li> <li> <ol> <li>\u7a33\u5b9a\u4ef7\u683c\uff0c\u5728\u4ef7\u683c\u4f4e\u65f6\u8d2d\u5165\uff0c\u9632\u6b62\u4ef7\u683c\u8fdb\u4e00\u6b65\u964d\u4f4e\uff1b\u5728\u4ef7\u683c\u9ad8\u65f6\u5356\u51fa\uff0c\u9632\u6b62\u4ef7\u683c\u8fdb\u4e00\u6b65\u4e0a\u6da8</li> </ol> </li> <li> <ol> <li>\u4e3a\u5176\u4ed6\u6709\u5173\u7684\u7ecf\u6d4e\u6d3b\u52a8\u63d0\u4f9b\u4e86\u51c6\u786e\u7684\u4ef7\u683c\u4fe1\u53f7\uff0c\u53ef\u4ee5\u51c6\u786e\u8ba1\u7b97\u51fa\u76c8\u4e8f\u7ed3\u679c</li> </ol> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u6211\u56fd\u653f\u5e9c\u5bf9\u7cae\u98df\u5b9e\u884c\u652f\u6301\u4ef7\u683c\u8fd8\u662f\u9650\u5236\u4ef7\u683c\u4e3a\u4ec0\u4e48","title":"\u6211\u56fd\u653f\u5e9c\u5bf9\u7cae\u98df\u5b9e\u884c\u652f\u6301\u4ef7\u683c\u8fd8\u662f\u9650\u5236\u4ef7\u683c\uff1f\u4e3a\u4ec0\u4e48\uff1f","text":"<ol> <li>\u6539\u9769\u524d\uff0c\u9650\u5236\u4ef7\u683c<ol> <li>\u4ec0\u4e48\u662f\u9650\u5236\u4ef7\u683c</li> <li>\u76ee\u7684\uff1a\u7a33\u5b9a\u751f\u6d3b\u5fc5\u9700\u54c1\u4ef7\u683c\uff0c\u4fdd\u62a4\u6d88\u8d39\u8005\u6743\u76ca\uff0c\u6709\u5229\u4e8e\u5b89\u5b9a\u6c11\u5fc3\uff0c\u5229\u4e8e\u4ee5\u519c\u8865\u5de5\u653f\u7b56</li> </ol> </li> <li>\u6539\u5f00\u540e\uff0c\u652f\u6301\u4ef7\u683c<ol> <li>\u4ec0\u4e48\u662f\u652f\u6301\u4ef7\u683c</li> <li>\u76ee\u7684\uff1a\u4fdd\u969c\u519c\u6c11\u6743\u76ca\uff0c\u8c03\u52a8\u519c\u6c11\u751f\u4ea7\u79ef\u6781\u6027</li> </ol> </li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7ecf\u6d4e\u5b66\u89d2\u5ea6\u5206\u6790\u5982\u4f55\u51cf\u5c11\u8ff7\u5e7b\u5546\u54c1","title":"\u7ecf\u6d4e\u5b66\u89d2\u5ea6\u5206\u6790\u5982\u4f55\u51cf\u5c11\u8ff7\u5e7b\u5546\u54c1\uff1f","text":"<ol> <li>\u76f4\u63a5\u7acb\u6cd5\u6267\u6cd5\u6548\u679c\u6709\u9650<ol> <li>\u4f9b\u7ed9\u51cf\u5c11\uff0c\u4ef7\u683c\u62ac\u9ad8\uff0c\u6709\u5229\u53ef\u56fe</li> </ol> </li> <li>\u8981\u600e\u4e48\u505a<ol> <li>\u5ba3\u4f20\u6559\u80b2\uff0c\u964d\u4f4e\u9700\u6c42\uff0c\u66f4\u52a0\u6709\u6548</li> </ol> </li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4e3a\u4ec0\u4e48\u5316\u5986\u54c1\u53ef\u4ee5\u8584\u5229\u591a\u9500\u800c\u836f\u54c1\u4e0d\u53ef\u4ee5","title":"\u4e3a\u4ec0\u4e48\u5316\u5986\u54c1\u53ef\u4ee5\u8584\u5229\u591a\u9500\u800c\u836f\u54c1\u4e0d\u53ef\u4ee5","text":"<ul> <li>\u9700\u6c42\u4ef7\u683c\u5f39\u6027\u89d2\u5ea6\uff0c\u5f39\u6027\u5927\u7684\u53ef\u4ee5\u8584\u5229\u591a\u9500\u589e\u52a0\u9500\u552e\u989d\uff0c\u5f39\u6027\u5c0f\u7684\u4f1a\u51cf\u5c11\u9500\u552e\u989d</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5fc5\u9700\u54c1\u548c\u5962\u4f88\u54c1\u54ea\u4e2a\u961f\u793e\u4f1a\u53d1\u5c55\u53ef\u80fd\u66f4\u91cd\u8981\u4e9b\u4e3a\u4ec0\u4e48","title":"\u5fc5\u9700\u54c1\u548c\u5962\u4f88\u54c1\u54ea\u4e2a\u961f\u793e\u4f1a\u53d1\u5c55\u53ef\u80fd\u66f4\u91cd\u8981\u4e9b\uff1f\u4e3a\u4ec0\u4e48\uff1f","text":"<ul> <li>\u5962\u4f88\u54c1</li> <li>\u5962\u4f88\u54c1\u9700\u6c42\u6536\u5165\u5f39\u6027\u5927\uff0c\u6536\u5165\u53d8\u5316\u65f6\u9700\u6c42\u53d8\u5316\u5e45\u5ea6\u5927\u3002</li> <li>\u4eba\u4eec\u6536\u5165\u589e\u52a0\u540e\uff0c\u5bf9\u5962\u4f88\u54c1\u7684\u9700\u6c42\u4f1a\u5927\u5e45\u4e0a\u5347\uff0c\u80fd\u591f\u62c9\u52a8\u5185\u9700\u3001\u5b58\u8fdb\u7ecf\u6d4e\u53d1\u5c55</li> <li>\u800c\u5fc5\u9700\u54c1\u7684\u9700\u6c42\u5f39\u6027\u5f88\u5c0f\uff0c\u5bf9\u5185\u9700\u62c9\u52a8\u7684\u4f5c\u7528\u5c0f</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7b2c\u4e09\u7ae0-\u6d88\u8d39\u8005\u884c\u4e3a","title":"\u7b2c\u4e09\u7ae0 \u6d88\u8d39\u8005\u884c\u4e3a","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u8bf7\u89e3\u91ca\u4e9a\u5f53\u65af\u5bc6\u63d0\u51fa\u7684\u4ef7\u503c\u4e4b\u8c1c\u7684\u4f7f\u4ef7\u503c\u5f88\u4ea4\u6362\u4ef7\u503c\u5374\u5f88\u94bb\u7684\u4f7f\u4ef7\u503c\u5f88\u4f46\u4ea4\u6362\u4ef7\u503c\u5374\u5f88","title":"\u8bf7\u89e3\u91ca\u4e9a\u5f53\u00b7\u65af\u5bc6\u63d0\u51fa\u7684\u201c\u4ef7\u503c\u4e4b\u8c1c\u201d\u2014\u2014\u2f54\u7684\u4f7f\u2f64\u4ef7\u503c\u5f88\u2f24\uff0c\u2f7d\u4ea4\u6362\u4ef7\u503c\u5374\u5f88\u2f29\uff1b\u94bb\u2f6f\u7684\u4f7f\u2f64\u4ef7\u503c\u5f88\u2f29\uff0c\u4f46\u4ea4\u6362\u4ef7\u503c\u5374\u5f88\u2f24\u3002","text":"<p>\u5546\u54c1\u7684\u4ef7\u683c\u4f1a\u53d7\u8fb9\u9645\u4ef7\u683c\u5f71\u54cd\uff08\u6700\u540e\u4e00\u5355\u4f4d\u7684\u6548\u7528\uff09.\u6c34\u7684\u4f9b\u7ed9\u662f\u8fdc\u5927\u4e8e\u94bb\u77f3\uff0c\u6839\u636e\u8fb9\u9645\u6548\u76ca\u9012\u51cf\u89c4\u5f8b\uff0c\u867d\u7136\u53e3\u6e34\u7684\u65f6\u5019\u7b2c\u4e00\u53e3\u6c34\u73cd\u8d35\u65e0\u6bd4\uff0c\u4f46\u968f\u7740\u6c34\u7684\u4f9b\u7ed9\u7684\u589e\u52a0\uff0c\u6c34\u5c31\u4e0d\u503c\u94b1\u4e86\u3002\u4f46\u662f\u94bb\u77f3\u7531\u4e8e\u5176\u7a00\u5c11\u6027,\u4fdd\u6301\u7740\u6602\u8d35\u7684\u4ef7\u683c\u3002</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u57fa\u6570\u548c\u5e8f\u6570\u5bf9\u6d88\u8d39\u8005\u5747\u8861\u7684\u89e3\u91ca\u6709\u4f55\u5f02\u540c","title":"\u57fa\u6570\u548c\u5e8f\u6570\u5bf9\u6d88\u8d39\u8005\u5747\u8861\u7684\u89e3\u91ca\u6709\u4f55\u5f02\u540c","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u6c42\u89e3\u66ff\u4ee3\u6548\u5e94\u548c\u6536\u5165\u6548\u5e94\u5927\u5c0f\u95ee\u9898","title":"\u6c42\u89e3\u66ff\u4ee3\u6548\u5e94\u548c\u6536\u5165\u6548\u5e94\u5927\u5c0f\u95ee\u9898","text":"<ul> <li>\u9996\u5148\u6c42\u51fa\u539f\u6765\u7684\u5747\u8861\u548c\u65b0\u7684\u5747\u8861</li> <li>\u7136\u540e\u4ee4 U \u4e0d\u53d8\uff08\u540c\u4e00\u6761\u65e0\u5dee\u5f02\u66f2\u7ebf\uff09\uff0c\u8ba1\u7b97\u5f97\u5230\u66ff\u4ee3\u6548\u5e94\u7684\u4f5c\u7528\u70b9<ul> <li>\u4e0e\u539f\u6765\u7684\u5747\u8861\u6bd4\u8f83\u5f97\u5230\u66ff\u4ee3\u6548\u5e94</li> <li>\u4e0e\u65b0\u7684\u5747\u8861\u6bd4\u8f83\u5f97\u5230\u6536\u5165\u6548\u5e94</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4e3a\u4ec0\u4e48\u8fb9\u9645\u6548\u662f\u9012\u51cf\u7684\u662f\u5426\u5b58\u5728\u8fb9\u9645\u6548\u9012\u51cf\u89c4\u5f8b\u7684\u53cd\u4f8b\u5462","title":"\u4e3a\u4ec0\u4e48\u8fb9\u9645\u6548\u2f64\u662f\u9012\u51cf\u7684\uff1f\u662f\u5426\u5b58\u5728\u8fb9\u9645\u6548\u2f64\u9012\u51cf\u89c4\u5f8b\u7684\u53cd\u4f8b\u5462\uff1f","text":"<ul> <li>\u4e00\u5b9a\u65f6\u95f4\u5185\u6d88\u8d39\u67d0\u79cd\u5546\u54c1\uff0c\u6b32\u671b\u5f3a\u5ea6\u4f1a\u9010\u6e10\u51cf\u5f31\uff0c\u968f\u7740\u6570\u91cf\u589e\u52a0\u8fbe\uff0c\u6ee1\u8db3\u5230\u9971\u548c\u72b6\u6001\uff0c\u6b32\u671b\u51cf\u5f31\u5230\u6700\u4f4e\u9650\u5ea6</li> <li>\u6240\u4ee5\u6bcf\u4e00\u5355\u4f4d\u589e\u91cf\u5e26\u6765\u7684\u6ee1\u8db3\u611f\u6216\u6548\u7528\u4f1a\u8d8a\u6765\u8d8a\u5c0f</li> <li>\u5b58\u5728\u53cd\u4f8b\uff0c\u5bf9\u4e00\u9879\u4e8b\u7269\u6709\u7279\u6b8a\u7231\u597d\u7684\u4eba\u6765\u8bf4\uff0c\u4ed6\u559c\u7231\u7684\u6d88\u8d39\u54c1\u5e76\u4e0d\u7b26\u5408\u8fb9\u9645\u6548\u5e94\u9012\u51cf\u7684\u539f\u7406\uff0c\u4f8b\u5982\u96c6\u90ae</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7a77\u4e0e\u5bcc\u7684\u8d27\u5e01\u7684\u8fb9\u9645\u6548\u54ea\u4e2a\u4e3a\u4ec0\u4e48\u8fd9\u7ed9\u4f60\u4ec0\u4e48\u542f-\u8054\u7cfb\u8bd5\u5377\u539f\u9898","title":"\u7a77\u2f08\u4e0e\u5bcc\u2f08\u7684\u8d27\u5e01\u7684\u8fb9\u9645\u6548\u2f64\u54ea\u4e2a\u2fbc\uff1f\u4e3a\u4ec0\u4e48\uff1f\u8fd9\u7ed9\u4f60\u4ec0\u4e48\u542f\u2f70\uff1f \u8054\u7cfb\u8bd5\u5377\u539f\u9898","text":"<p>\u6839\u636e\u8fb9\u9645\u6548\u76ca\u9012\u51cf\u7406\u8bba\uff0c\u968f\u7740\u6570\u91cf\u7684\u589e\u52a0\uff0c\u8fb9\u9645\u6548\u5e94\u4f1a\u8d8a\u6765\u8d8a\u5c0f\uff0c\u5bcc\u4eba\u62e5\u6709\u6bd4\u7a77\u4eba\u66f4\u591a\u7684\u8d22\u5bcc,\u6570\u91cf\u5927\uff0c\u8fb9\u9645\u6548\u5e94\u5c0f\u3002\u4e3a\u589e\u52a0\u5168\u793e\u4f1a\u7684\u603b\u6548\u7528\uff0c\u6839\u636e\u6d88\u8d39\u8005\u5747\u8861\u6761\u4ef6\uff08\u5373\u6bcf\u79cd\u7269\u54c1\u7684\u8fb9\u9645\u6548\u7528\u4e0e\u4ef7\u683c\u4e4b\u6bd4\u76f8\u540c)\uff0c\u653f\u5e9c\u5e94\u8be5\u5411\u5bcc\u4eba\u5f81\u7a0e\uff0c\u5e76\u901a\u8fc7\u8f6c\u79fb\u652f\u4ed8\u7684\u65b9\u5f0f\u7ed9\u7a77\u4eba\u3002</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4e3a\u4ec0\u4e48\u8d44\u4e0a\u5347\u6709\u4f1a\u589e\u52a0\u4f5c\u65f6\u95f4\u53e6\u4e9b\u4f1a\u51cf\u5c11\u4f5c\u65f6-\u95f4\u6216\u8005\u5bf9\u4e8e\u540c\u5f00\u59cb\u65f6\u589e\u52a0\u4f5c\u65f6\u95f4\u968f\u7740\u8d44\u7684\u7ee7\u7eed\u4e0a\u5347\u4f1a-\u51cf\u5c11\u4f5c\u65f6\u95f4","title":"\u4e3a\u4ec0\u4e48\u2f2f\u8d44\u4e0a\u5347\uff0c\u6709\u2f08\u4f1a\u589e\u52a0\u2f2f\u4f5c\u65f6\u95f4\u2f7d\u53e6\u2f00\u4e9b\u2f08\u4f1a\u51cf\u5c11\u2f2f\u4f5c\u65f6 \u95f4\uff1f\u6216\u8005\u5bf9\u4e8e\u540c\u2f00\u2f08\u5f00\u59cb\u65f6\u589e\u52a0\u2f2f\u4f5c\u65f6\u95f4\uff0c\u2f7d\u968f\u7740\u2f2f\u8d44\u7684\u7ee7\u7eed\u4e0a\u5347\u4f1a \u51cf\u5c11\u2f2f\u4f5c\u65f6\u95f4\uff1f","text":"<p>\u628a\u95f2\u6687\u548c\u6536\u5165\u770b\u505a\u67d0\u4eba\u8981\u9009\u62e9\u7684\u4e24\u6837\u5546\u54c1 (\u753b\u51fa\u65e0\u5dee\u5f02\u66f2\u7ebf)\u3002\u5f53\u6536\u5165\u589e\u52a0\u65f6\uff0c\u95f2\u6687\u7684\u673a\u4f1a\u6210\u672c\u4e0a\u5347\u4e86\uff0c\u8fd9\u6837\u5c31\u4f1a\u9f13\u52b1\u4ed6\u591a\u5de5\u4f5c.\u8fd9\u5c31\u662f\u66ff\u4ee3\u6548\u5e94\u3002\u518d\u6765\u8003\u8651\u6536\u5165\u6548\u5e94,\u5f53\u5de5\u8d44\u589e\u52a0\u65f6\uff0c\u9884\u7b97\u7ebf\u5411\u53f3\u79fb\u52a8\uff0c\u968f\u7740\u6536\u5165\u7684\u589e\u52a0\uff0c\u4ed6\u5c31\u66f4\u503e\u5411\u4e8e\u4eab\u53d7\u66f4\u591a\u95f2\u6687\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6536\u5165\u6548\u5e94\u5bfc\u81f4\u5de5\u4f5c\u65f6\u95f4\u51cf\u5c11\u3002</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u653f\u5e9c\u5bf9\u5229\u606f\u5f81\u7a0e\u4e3a\u4ec0\u4e48\u4e0d-\u5b9a\u80fd\u4fc3\u8fdb\u6d88\u8d39","title":"\u653f\u5e9c\u5bf9\u5229\u606f\u5f81\u7a0e\u4e3a\u4ec0\u4e48\u4e0d \u2f00\u5b9a\u80fd\u4fc3\u8fdb\u6d88\u8d39\uff1f","text":"<p>\u628a\u672a\u6765\u6d88\u8d39\u548c\u73b0\u671f\u6d88\u8d39\u770b\u505a\u67d0\u4eba\u8981\u9009\u62e9\u7684\u4e24\u6837\u5546\u54c1\uff08\u753b\u51fa\u65e0\u5dee\u5f02\u66f2\u7ebf\uff09\u3002\u5bf9\u5229\u606f\u5f81\u7a0e\uff0c\u4ece\u66ff\u4ee3\u6548\u5e94\u770b\uff0c\u50a8\u84c4\u7684\u5b9e\u9645\u5229\u606f\u7387\u4e0b\u964d\uff0c\u76f8\u5bf9\u4e8e\u672a\u6765\u6d88\u8d39\u800c\u8a00\uff0c\u50a8\u84c4\u7684\u6536\u76ca\u6216\u73b0\u671f\u6d88\u8d39\u7684\u673a\u4f1a\u6210\u672c\u964d\u4f4e\u4e86\uff0c\u4eba\u4eec\u589e\u52a0\u73b0\u5728\u6d88\u8d39\u800c\u51cf\u5c11\u672a\u6765\u6d88\u8d39\uff1b\u4ece\u6536\u5165\u6548\u5e94\u770b\uff0c\u5b9e\u9645\u6536\u5165\u4e0b\u964d\uff0c\u79fb\u52a8\u5230\u964d\u4f4e\u7684\u65e0\u5dee\u5f02\u66f2\u7ebf\uff0c\u53ea\u8981\u4e24\u4e2a\u65f6\u671f\u7684\u6d88\u8d39\u4e3a\u6b63\u5e38\u5546\u54c1\uff0c\u4eba\u4eec\u51cf\u5c11\u73b0\u5728\u6d88\u8d39,\u589e\u52a0\u50a8\u84c4\u3002\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u53d6\u51b3\u4e8e\u6536\u5165\u6548\u5e94\u548c\u66ff\u4ee3\u6548\u5e94\u7684\u5927\u5c0f\u6bd4\u8f83\u3002</p> <ul> <li>\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u5229\u606f\u964d\u4f4e\uff0c\u800c\u5229\u606f\u662f\u5f53\u4e0b\u6d88\u8d39\u7684\u673a\u4f1a\u6210\u672c\uff0c\u6240\u4ee5\u673a\u4f1a\u6210\u672c\u964d\u4f4e\uff0c\u66ff\u4ee3\u6548\u5e94\u4f7f\u5f97\u4eba\u4eec\u589e\u52a0\u5f53\u4e0b\u6d88\u8d39\uff0c\u51cf\u5c11\u672a\u6765\u6d88\u8d39</li> <li>\u4ece\u6536\u5165\u6548\u5e94\u5206\u6790\uff0c\u7531\u4e8e\u5229\u606f\u51cf\u5c11\uff0c\u5f15\u8d77\u4e86\u6536\u5165\u7684\u51cf\u5c11\uff0c\u4eba\u4eec\u4f1a\u51cf\u5c11\u5f53\u4e0b\u6d88\u8d39</li> <li>\u4f46\u662f\u54ea\u4e2a\u4f5c\u7528\u66f4\u5927\u4e0d\u597d\u5224\u65ad\uff0c\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u6784\u53d6\u51b3\u4e8e\u4e24\u79cd\u6548\u5e94\u5927\u5c0f\u7684\u6bd4\u8f83</li> <li>\u5982\u679c\u6536\u5165\u6548\u5e94\u5927\u4e8e\u66ff\u4ee3\u6548\u5e94\uff0c\u5219\u4e0d\u80fd\u4fc3\u8fdb\u6d88\u8d39\uff0c\u653f\u5e9c\u5e94\u5f53\u5408\u7406\u8c03\u6574\u7a0e\u7387</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4e3a\u4ec0\u4e48\u8bb8\u591a\u5546\u54c1\u53ef\u4ee5\u8ba8\u4ef7\u8fd8\u4ef7\u53e6\u4e9b\u5546\u54c1\u5374\u4e0d\u5141\u8bb8\u8ba8\u4ef7\u8fd8\u4ef7","title":"\u4e3a\u4ec0\u4e48\u8bb8\u591a\u5546\u54c1\u53ef\u4ee5\u8ba8\u4ef7\u8fd8\u4ef7\uff0c\u2f7d\u53e6\u2f00\u4e9b\u5546\u54c1\u5374\u4e0d\u5141\u8bb8\u8ba8\u4ef7\u8fd8\u4ef7\uff1f","text":"<ul> <li>\u53ef\u4ee5\u8ba8\u4ef7\u8fd8\u4ef7\u7684\u5546\u54c1<ul> <li>\u5982\u679c\u5546\u54c1\u5bcc\u6709\u9700\u6c42\u5f39\u6027\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u8ba8\u4ef7\u8fd8\u4ef7\u4e2d\u7684\u964d\u4ef7\u6765\u5438\u5f15\u6d88\u8d39\u8005\uff0c\u589e\u52a0\u9500\u552e\u6536\u5165</li> <li>\u8fd9\u540c\u65f6\u4e5f\u4fdd\u7559\u4e86\u613f\u610f\u9ad8\u4ef7\u8d2d\u4e70\u7684\u6d88\u8d39\u8005\u548c\u613f\u610f\u8ba8\u4ef7\u8fd8\u4ef7\u7684\u6d88\u8d39\u8005\uff0c\u5b9e\u73b0\u4e86\u4e8c\u7ea7\u4ef7\u683c\u6b67\u89c6\uff0c\u6709\u5229\u4e8e\u5229\u6da6\u6700\u5927\u5316</li> </ul> </li> <li>\u4e0d\u80fd\u8ba8\u4ef7\u8fd8\u4ef7\u7684\u5546\u54c1<ul> <li>\u751f\u4ea7\u8005\u5269\u4f59\u63a5\u8fd1\u4e8e 0\uff0c\u591a\u53d1\u751f\u5728\u7ade\u4e89\u6bd4\u8f83\u5145\u5206\u7684\u5e02\u573a\u4e0a\uff0c\u8ba8\u4ef7\u8fd8\u4ef7\u4f1a\u5bfc\u81f4\u4e8f\u635f</li> <li>\u5546\u54c1\u7f3a\u4e4f\u9700\u6c42\u5f39\u6027\uff0c\u8ba8\u4ef7\u8fd8\u4ef7\u4f1a\u51cf\u5c11\u9500\u552e\u6536\u76ca</li> </ul> </li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7b2c\u56db\u7ae0-\u751f\u4ea7\u8005\u884c\u4e3a","title":"\u7b2c\u56db\u7ae0 \u751f\u4ea7\u8005\u884c\u4e3a","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u77ed\u671f\u751f\u4ea7\u51fd\u6570\u4e0e\u957f\u671f\u751f\u4ea7\u51fd\u6570\u7684\u533a\u522b\u5c31\u5728\u4e8e\u662f\u5426\u6240\u6709\u81ea\u53d8\u91cf\u90fd\u53ef\u4ee5\u53d8\u5316","title":"\u77ed\u671f\u751f\u4ea7\u51fd\u6570\u4e0e\u957f\u671f\u751f\u4ea7\u51fd\u6570\u7684\u533a\u522b\u5c31\u5728\u4e8e\u662f\u5426\u6240\u6709\u81ea\u53d8\u91cf\u90fd\u53ef\u4ee5\u53d8\u5316","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u77ed\u671f\u4ea7\u7684\u4e09\u533a\u95f4\u662f\u5982\u4f55\u5212\u5206\u7684\u4e3a\u4ec0\u4e48\u4f01\u4e1a\u53ea\u4f1a\u5728\u7b2c\u2171\u533a\u95f4\u9009\u62e9-\u6295","title":"\u77ed\u671f\u2f63\u4ea7\u7684\u4e09\u533a\u95f4\u662f\u5982\u4f55\u5212\u5206\u7684\uff0c\u4e3a\u4ec0\u4e48\u4f01\u4e1a\u53ea\u4f1a\u5728\u7b2c\u2161\u533a\u95f4\u9009\u62e9 \u6295\u2f0a\uff1f","text":"<ul> <li>\u753b\u56fe\uff0c\u753b\u51fa\u4e09\u4e2a\u533a\u95f4\u5e76\u89e3\u91ca</li> <li>\u5206\u522b\u5bf9\u6bd4\u4e09\u4e2a\u533a\u95f4\uff0c\u6307\u51fa\u4e3a\u4ec0\u4e48\u5728\u7b2c\u4e8c\u533a\u95f4</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5355\u4e2a\u4ea7\u8981\u7d20\u7684\u8fb9\u9645\u6536\u76ca\u9012\u51cf\u4e0e\u89c4\u6a21\u6536\u76ca\u4e0d\u53d8\u76fe\u5417\u4e3a\u4ec0\u4e48","title":"\u5355\u4e2a\u2f63\u4ea7\u8981\u7d20\u7684\u8fb9\u9645\u6536\u76ca\u9012\u51cf\u4e0e\u89c4\u6a21\u6536\u76ca\u4e0d\u53d8\u2f6d\u76fe\u5417\uff1f\u4e3a\u4ec0\u4e48\uff1f","text":"<p>\u4e0d\u77db\u76fe\uff0c\u4e24\u8005\u662f\u4e0d\u540c\u6982\u5ff5.\u89c4\u6a21\u6536\u76ca\u95ee\u9898\u5206\u6790\u7684\u662f\u4f01\u4e1a\u7684\u751f\u4ea7\u89c4\u6a21\u53d8\u5316\u4e0e\u6240\u5f15\u8d77\u7684\u4ea7\u91cf\u53d8\u5316\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u5047\u5b9a\u751f\u4ea7\u4e2d\u7684\u5168\u90e8\u751f\u4ea7\u8981\u7d20\u90fd\u4ee5\u76f8\u540c\u7684\u6bd4\u4f8b\u53d1\u751f\u53d8\u5316\uff0c\u6307\u6240\u6709\u751f\u4ea7\u8981\u7d20\u6309\u540c\u4e00\u6bd4\u4f8b\u53d8\u5316\u4ece\u800c\u4f7f\u751f\u4ea7\u89c4\u6a21\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u5f15\u8d77\u4ea7\u91cf\u53d8\u52a8\u7684\u89c4\u5f8b\u6027\u3002\u5728\u4f01\u4e1a\u7684\u89c4\u6a21\u4ece\u5f88\u5c0f\u5f00\u59cb\u9010\u6b65\u6269\u5927\u7684\u8fc7\u7a0b\u4e2d,\u4f1a\u987a\u6b21\u5448\u73b0\u51fa\u89c4\u6a21\u6536\u76ca\u9012\u589e\u3001\u4e0d\u53d8\u548c\u9012\u51cf\u4e09\u4e2a\u9636\u6bb5\u3002\u5982\u679c\u4ea7\u91cf\u589e\u52a0\u7684\u6bd4\u4f8b\u7b49\u4e8e\u5404\u79cd\u751f\u4ea7\u8981\u7d20\u589e\u52a0\u7684\u6bd4\u4f8b\uff0c\u5219\u4e3a\u89c4\u6a21\u6536\u76ca\u4e0d\u53d8\u3002\u800c\u201c\u8fb9\u9645\u6536\u76ca\u9012\u51cf\u89c4\u5f8b\u201d\u662f\u6307\u5f53\u5176\u4ed6\u751f\u4ea7\u8981\u7d20\u4e0d\u53d8\uff08\u5373\u751f\u4ea7\u89c4\u6a21\u4e0d\u53d8\uff09\u65f6\uff0c\u7531\u4e00\u79cd\u8981\u7d20\u6295\u5165\u7684\u589e\u51cf\u5e26\u6765\u7684\u4ea7\u91cf\u53d8\u52a8\u7684\u89c4\u5f8b\u3002</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5bb6\u4f01\u4e1a\u7684\u4ea7\u51fd\u6570\u968f\u7740\u4ea7\u51fa\u7684\u589e\u52a0\u662f\u5426\u53ef\u80fd\u51fa\u73b0\u89c4\u6a21\u6536\u76ca\u9012\u589e-\u89c4\u6a21\u6536\u76ca\u4e0d\u53d8\u89c4\u6a21\u6536\u76ca\u9012\u51cf\u4e09\u79cd\u60c5\u51b5","title":"\u2f00\u5bb6\u4f01\u4e1a\u7684\u2f63\u4ea7\u51fd\u6570\u968f\u7740\u4ea7\u51fa\u7684\u589e\u52a0\u662f\u5426\u53ef\u80fd\u51fa\u73b0\u89c4\u6a21\u6536\u76ca\u9012\u589e\u3001 \u89c4\u6a21\u6536\u76ca\u4e0d\u53d8\u3001\u89c4\u6a21\u6536\u76ca\u9012\u51cf\u4e09\u79cd\u60c5\u51b5\uff1f","text":"<p>\u4f1a.\u89c4\u6a21\u6536\u76ca\u7684\u9012\u589e\u3001\u4e0d\u53d8\u548c\u9012\u51cf\u4f53\u73b0\u7684\u662f\u4ea7\u91cf\u589e\u52a0\u7684\u6bd4\u4f8b\u4e0e\u5404\u79cd\u751f\u4ea7\u8981\u7d20\u589e\u52a0\u7684\u6bd4\u4f8b\u7684\u5173\u7cfb.\u4ea7\u91cf\u589e\u52a0\u7684\u6bd4\u4f8b\u5927\u4e8e\u5404\u79cd\u751f\u4ea7\u8981\u7d20\u589e\u52a0\u7684\u6bd4\u4f8b\uff0c\u5219\u4e3a\u89c4\u6a21\u6536\u76ca\u9012\u589e,\u7b49\u4e8e\u5219\u4e3a\u89c4\u6a21\u6536\u76ca\u4e0d\u53d8\uff0c\u5c0f\u4e8e\u5219\u4e3a\u89c4\u6a21\u6536\u76ca\u9012\u51cf\uff0c\u89c4\u6a21\u6536\u76ca\u9012\u51cf\u4e0d\u7b49\u4e8e\u4ea7\u51fa\u7684\u51cf\u5c11\u3002\u4e00\u822c\u8bf4\u6765\uff0c\u5728\u4f01\u4e1a\u7684\u89c4\u6a21\u4ece\u5f88\u5c0f\u5f00\u59cb\u9010\u6b65\u6269\u5927\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u987a\u6b21\u5448\u73b0\u51fa\u89c4\u6a21\u6536\u76ca\u9012\u589e\u3001\u4e0d\u53d8\u548c\u9012\u51cf\u4e09\u4e2a\u9636\u6bb5\u3002\u5f00\u59cb\u65f6,\u5382\u5546\u7684\u6269\u5927\u89c4\u6a21\uff0c\u4f1a\u4f7f\u6536\u76ca\u589e\u52a0,\u56e0\u800c\u89c4\u6a21\u6536\u76ca\u662f\u9012\u589e\u7684.\u4f46\u5f53\u5382\u5546\u7684\u89c4\u6a21\u6269\u5927\u5230\u4e00\u5b9a\u7a0b\u5ea6\u540e,\u5382\u5546\u5185\u90e8\u5206\u5de5\u53d7\u5230\u7834\u574f,\u5404\u4e2a\u751f\u4ea7\u90e8\u95e8\u7684\u534f\u8c03\u5931\u7075\uff0c\u4ece\u800c\u8868\u73b0\u4e3a\u89c4\u6a21\u6536\u76ca\u9012\u51cf\u3002</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5728-\u6761\u65e2\u5b9a\u7684\u7b49\u4ea7\u91cf\u66f2\u7ebf\u4e0a\u4e3a\u4ec0\u4e48\u968f\u7740\u52b3\u52a8\u5bf9\u8d44\u672c\u7684\u4e0d\u65ad\u66ff\u4ee3-\u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387-mrtslk-\u662f\u9012\u51cf\u7684","title":"\u5728 \u2f00\u6761\u65e2\u5b9a\u7684\u7b49\u4ea7\u91cf\u66f2\u7ebf\u4e0a\uff0c\u4e3a\u4ec0\u4e48\u968f\u7740\u52b3\u52a8\u5bf9\u8d44\u672c\u7684\u4e0d\u65ad\u66ff\u4ee3\uff0c \u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387 MRTSLK \u662f\u9012\u51cf\u7684\uff1f","text":"<p>\u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387\u4e4b\u6240\u4ee5\u4f1a\u51fa\u73b0\u9012\u51cf\u8d8b\u52bf\uff0c\u662f\u7531\u4e8e\u8fb9\u9645\u4ea7\u91cf\u9012\u51cf\u89c4\u5f8b\u53d1\u6325\u4f5c\u7528\u7684\u7ed3\u679c\u3002\u5728\u4ea7\u91cf\u4fdd\u6301\u4e0d\u53d8\u7684\u6761\u4ef6\u4e0b\uff0c\u968f\u7740\u4e00\u79cd\u8981\u7d20\u7684\u589e\u52a0\uff0c\u53e6\u4e00\u79cd\u8981\u7d20\u4f1a\u51cf\u5c11\u3002\u7531\u4e8e\u8fb9\u9645\u4ea7\u91cf\u662f\u9012\u51cf\u7684\uff0c\u5f53\u67d0\u79cd\u8981\u7d20\u589e\u52a0\u4e00\u5355\u4f4d\u65f6,\u6240\u5f15\u8d77\u7684\u4ea7\u91cf\u589e\u52a0\u91cf\u662f\u9010\u6e10\u51cf\u5c11\u7684,\u5728\u7ef4\u6301\u4ea7\u91cf\u4e0d\u53d8\u7684\u6761\u4ef6\u4e0b\uff0c\u8be5\u8981\u7d20\u6240\u66ff\u4ee3\u7684\u5176\u4ed6\u8981\u7d20\u6570\u91cf\u5c31\u4f1a\u51cf\u5c11\u3002</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u79c1\u8425\u4f01\u4e1a\u4e3b\u822c\u8981\u627f\u62c5\u54ea\u4e9b\u663e\u6027\u6210\u672c\u548c\u9690\u6027\u6210\u672c\u5728\u8d2d\u4e70\u6216\u79df\u501f-\u6ca1\u6709\u7684\u4ea7\u8981\u7d20\u65f6\u5fc5\u987b\u4ed8\u4ec0\u4e48\u6837\u7684\u4ef7\u683c","title":"\u79c1\u8425\u4f01\u4e1a\u4e3b\u2f00\u822c\u8981\u627f\u62c5\u54ea\u4e9b\u663e\u6027\u6210\u672c\u548c\u9690\u6027\u6210\u672c\uff1f\u5728\u8d2d\u4e70\u6216\u79df\u501f\u2f83 \u2f9d\u6ca1\u6709\u7684\u2f63\u4ea7\u8981\u7d20\u65f6\uff0c\u5fc5\u987b\u2f40\u4ed8\u4ec0\u4e48\u6837\u7684\u4ef7\u683c\uff1f","text":"<ul> <li>\u663e\u6027\u6210\u672c\uff1a\u4f1a\u8ba1\u6210\u672c\uff0c\u539f\u6750\u6599\u3001\u4eba\u5de5\u3001\u5e93\u5b58\u3001\u8fd0\u8f93\u3001\u552e\u540e\u670d\u52a1</li> <li>\u9690\u6027\u6210\u672c\uff1a\u7ecf\u6d4e\u6210\u672c\u51cf\u53bb\u4f1a\u8ba1\u6210\u672c\uff0c\u8bbe\u5907\u6298\u65e7\u3001\u884c\u653f\u7ba1\u7406\u6548\u7387\u4f4e\u6548\u3001\u6ca1\u6709\u8f6c\u79fb\u7ecf\u8425\u65b9\u5411\u7684\u673a\u4f1a\u6210\u672c</li> <li>\u9700\u8981\u652f\u4ed8</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#sac-lac","title":"SAC LAC","text":"<p>\u539f\u7406:LAC \u662f\u5728\u76f8\u540c\u4ea7\u91cf\u6761\u4ef6\u4e0b\u4ece\u6240\u6709\u4e0d\u540c\u89c4\u6a21\u7684\u4f01\u4e1a\u4e2d\u9009\u62e9\u6700\u4f4e\u5e73\u5747\u6210\u672c,\u800c\u4e0d\u662f\u5728\u67d0\u4e00\u786e\u5b9a\u89c4\u6a21\u7684\u4f01\u4e1a\u4e2d\u9009\u62e9\u6700\u4f4e\u7684\u5e73\u5747\u6210\u672c\u3002\u660e\u5728\u201c\u957f\u671f\u201d\u4e2d\u5b58\u5728\u7740\u4f01\u4e1a\u751f\u4ea7\u80fd\u529b\u5229\u7528\u4e0d\u8db3 (\u6216\u8fc7\u5ea6\u5229\u7528\uff09\u7684\u95ee\u9898\u3002</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u586b\u8868","title":"\u586b\u8868","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4e92\u8054\u7f51\u662f\u5426\u7b26\u5408\u8fb9\u9645\u6536\u76ca\u9012\u51cf\u89c4\u5f8b\u4e3a\u4ec0\u4e48-\u8fd9\u662f\u5f00\u653e\u9898\u5427","title":"\u4e92\u8054\u7f51\u662f\u5426\u7b26\u5408\u8fb9\u9645\u6536\u76ca\u9012\u51cf\u89c4\u5f8b\uff0c\u4e3a\u4ec0\u4e48\uff1f \u8fd9\u662f\u5f00\u653e\u9898\u5427","text":"<ul> <li>\u4e0d\u7b26\u5408</li> <li>\u4e92\u8054\u7f51\u7684\u8054\u901a\u8282\u70b9\u8d8a\u591a\uff0c\u5176\u603b\u6548\u679c\u8d8a\u5927\uff0c\u603b\u6536\u76ca\u8d8a\u5927</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4f01\u4e1a\u7684\u89c4\u6a21\u662f\u5426\u8d8a\u8d8a\u597d\u4e3a\u4ec0\u4e48","title":"\u4f01\u4e1a\u7684\u89c4\u6a21\u662f\u5426\u8d8a\u2f24\u8d8a\u597d\uff1f\u4e3a\u4ec0\u4e48\uff1f","text":"<ul> <li>\u4ece\u89c4\u6a21\u6536\u76ca\u9012\u589e\uff0c\u9012\u51cf\u7684\u89d2\u5ea6\u89e3\u91ca</li> <li>\u4ece\u89c4\u6a21\u6536\u76ca\u9012\u51cf\u7684\u539f\u56e0\u89e3\u91ca</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4f01\u4e1a\u5b9e\u73b0-\u4ea7\u8981\u7d20\u6700\u9002\u7ec4\u5408\u65f6\u5b9a\u5b9e\u73b0\u4e86\u5229\u6da6\u6700\u5316\u5417\u4e3a\u4ec0\u4e48","title":"\u4f01\u4e1a\u5b9e\u73b0 \u2f63\u4ea7\u8981\u7d20\u6700\u9002\u7ec4\u5408\u65f6\u2f00\u5b9a\u5b9e\u73b0\u4e86\u5229\u6da6\u6700\u2f24\u5316\u5417\uff1f\u4e3a\u4ec0\u4e48\uff1f","text":"<p>\u662f\u3002\u5382\u5546\u7684\u5229\u6da6\u6700\u5927\u5316\u5f52\u7ed3\u4e3a\u65e2\u5b9a\u6210\u672c\u4e0b\u7684\u4ea7\u91cf\u6700\u5927\u5316\u6216\u8005\u4ea7\u91cf\u65e2\u5b9a\u4e0b\u7684\u6210\u672c\u6700\u5c0f\u5316\u3002\u751f\u4ea7\u8981\u7d20\u6700\u9002\u7ec4\u5408\u4e00\u822c\u662f\u6307\u52b3\u52a8\u529b L \u548c\u8d44\u672c K \u8fd9\u4e24\u4e2a\u751f\u4ea7\u8981\u7d20\u5728\u603b\u4ea7\u91cf\u4e3a\u5e38\u6570 Q \u6052\u5b9a\u4e0d\u53d8\u65f6\u7684\u6210\u672c\u6700\u5c0f\u5316; \u6216\u662f\u6307\u5728\u603b\u751f\u4ea7\u6210\u672c C \u4e3a\u5e38\u6570\u65f6\u7684\u4ea7\u91cf Q \u7684\u6700\u5927\u5316\u3002\u4e24\u8005\u662f\u540c\u4e00\u6982\u5ff5.</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u57ce\u5e02\u5316\u4e0e\u5730\u4e0a\u52b3\u52a8\u7684\u8fb9\u9645\u6536\u76ca\u9012\u51cf\u6709\u5173\u7cfb\u5417","title":"\u57ce\u5e02\u5316\u4e0e\u2f1f\u5730\u4e0a\u52b3\u52a8\u7684\u8fb9\u9645\u6536\u76ca\u9012\u51cf\u6709\u5173\u7cfb\u5417\uff1f","text":"<p>\u6709\u5173\u7cfb</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4fe1\u606f\u4ea7\u54c1\u7684\u6210\u672c\u7ed3\u6784\u5177\u6709\u4ec0\u4e48\u7279\u5f81","title":"\u4fe1\u606f\u4ea7\u54c1\u7684\u6210\u672c\u7ed3\u6784\u5177\u6709\u4ec0\u4e48\u7279\u5f81\uff1f","text":"<ul> <li>\u7b2c\u4e00\u5355\u4f4d\u7684\u8fb9\u9645\u6210\u672c\u5f88\u9ad8\uff0c\u56e0\u4e3a\u6d89\u53ca\u5230\u5f00\u53d1\u3001\u64b0\u5199\u7b49\u6210\u672c</li> <li>\u6b64\u540e\u7684\u8fb9\u9645\u6210\u672c\u53ea\u6709\u4fe1\u606f\u8f7d\u4f53\uff08\u5982\u5370\u5237\u3001\u523b\u5f55\u3001\u53d1\u884c\uff09\u7684\u6210\u672c</li> <li>\u4f46\u662f\u4e3a\u4e86\u652f\u4ed8\u524d\u671f\u5f00\u53d1\u6210\u672c\uff0c\u6700\u7ec8\u4ef7\u683c\u4e0d\u4f1a\u7b49\u4e8e\u8fb9\u9645\u6210\u672c</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5982\u4f55\u673a\u4f1a\u6210\u672c\u6982\u5ff5\u6765\u8bf4\u660e\u8d38\u6613\u7684\u4ea7","title":"\u5982\u4f55\u2f64\u673a\u4f1a\u6210\u672c\u6982\u5ff5\u6765\u8bf4\u660e\u8d38\u6613\u7684\u4ea7\u2f63\uff1f","text":"<ul> <li>\u673a\u4f1a\u6210\u672c\u662f\u6307\u628a\u4e00\u5b9a\u7684\u7ecf\u6d4e\u8d44\u6e90\u80fd\u7528\u4e8e\u751f\u4ea7\u67d0\u79cd\u4ea7\u54c1\u65f6\u653e\u5f03\u7684\u53e6\u4e00\u4e9b\u4ea7\u54c1\u751f\u4ea7\u4e0a\u7684\u6700\u5927\u6536\u76ca</li> <li>\u4e00\u79cd\u751f\u4ea7\u8d44\u6e90\u7684\u4ef7\u503c\u53d6\u51b3\u4e8e\u5176\u4e0d\u540c\u7684\u7528\u9014\u6240\u80fd\u4ea7\u751f\u7684\u4ef7\u503c\u4e4b\u95f4\u7684\u6bd4\u8f83\uff0c\u4eba\u4eec\u5728\u9009\u62e9\u751f\u4ea7\u8d44\u6e90\u7684\u7528\u9014\u65f6\uff0c\u5c31\u8981\u8003\u8651\u5230\u673a\u4f1a\u6210\u672c\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u751f\u4ea7\u8d44\u6e90\u624d\u4f1a\u6d41\u5230\u7ecf\u6d4e\u6548\u76ca\u9ad8\u7684\u6da9\u4f1a\u7ed9\u4f60\u4ea7\u7528\u9014\u4e0a\u53bb\uff0c\u4ece\u800c\u4ea7\u751f\u4e86\u8d38\u6613</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7b2c\u4e94\u7ae0-\u5b8c\u5168\u7ade\u4e89\u5e02\u573a","title":"\u7b2c\u4e94\u7ae0 \u5b8c\u5168\u7ade\u4e89\u5e02\u573a","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5b8c\u5168\u7ade\u4e89\u7684\u542b\u4e49","title":"\u5b8c\u5168\u7ade\u4e89\u7684\u542b\u4e49","text":"<ul> <li>\u975e\u5e38\u591a\u5382\u5546\u548c\u6d88\u8d39\u8005</li> <li>\u5e02\u573a\u81ea\u7531\u8fdb\u51fa</li> <li>\u4fe1\u606f\u5bf9\u79f0\u4e14\u5b8c\u5168</li> <li>\u4ea7\u54c1\u5b8c\u5168\u540c\u8d28</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5728\u671f\u5747\u8861\u70b9\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u4e2d\u6bcf\u4e2a\u5546\u7684\u5229\u6da6\u90fd\u4e3a\u96f6\u56e0-\u5f53\u4ef7\u683c\u4e0b\u964d\u65f6\u6240\u6709\u8fd9\u4e9b\u5546\u5c31\u6cd5\u7ee7\u7eed\u7ecf\u8425\u4f60\u662f\u5426\u540c\u610f\u8fd9\u89c2-\u70b9\u8bf7\u8bf4\u660e\u7406\u7531","title":"\u201c\u5728\u2ed3\u671f\u5747\u8861\u70b9\uff0c\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u4e2d\u6bcf\u4e2a\u2f1a\u5546\u7684\u5229\u6da6\u90fd\u4e3a\u96f6\u3002\u56e0\u2f7d\uff0c \u5f53\u4ef7\u683c\u4e0b\u964d\u65f6\uff0c\u6240\u6709\u8fd9\u4e9b\u2f1a\u5546\u5c31\u2f46\u6cd5\u7ee7\u7eed\u7ecf\u8425\u3002\u201d\u4f60\u662f\u5426\u540c\u610f\u8fd9\u2f00\u89c2 \u70b9\uff0c\u8bf7\u8bf4\u660e\u7406\u7531\u3002","text":"<ul> <li>\u4e0d\u540c\u610f</li> <li>\u957f\u671f\u4e2d\u6bcf\u5bb6\u5382\u5546\u90fd\u53ef\u4ee5\u8c03\u6574\u89c4\u6a21\uff0c\u4ece\u800c\u4e0d\u65ad\u8c03\u6574\u5230\u6700\u9002\u89c4\u6a21\uff0c\u5f53\u4ef7\u683c\u4e0b\u964d\u65f6\uff0c\u4f1a\u51cf\u5c0f\u89c4\u6a21\u4f7f\u5f97\u4ef7\u683c\u56de\u5230\u539f\u6765\u7684\u6c34\u5e73</li> <li>\u53e6\u5916\uff0c\u7531\u4e8e\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u81ea\u7531\u8fdb\u51fa\uff0c\u957f\u671f\u6765\u770b\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u4ef7\u683c\u4e0b\u964d\uff0c\u5c31\u4f1a\u6709\u5382\u5546\u9000\u51fa\u5e02\u573a\uff0c\u51cf\u5c11\u4f9b\u7ed9\uff0c\u4ef7\u683c\u5c31\u4f1a\u56de\u5347\u5230\u539f\u6765\u7684\u6c34\u5e73</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5b8c\u5168\u7ade\u4e89\u4e1a\u7684\u77ed\u671f\u4f9b\u7ed9\u66f2\u7ebf\u662f\u8be5\u4e1a\u4e2d\u5546\u7684\u77ed\u671f\u4f9b\u7ed9\u66f2\u7ebf\u7684-\u5e73\u76f8\u52a0\u80fd\u5426\u8bf4\u8be5\u4e1a\u671f\u4f9b\u7ed9\u66f2\u7ebf\u4e5f\u662f\u8be5\u4e1a\u4e2d\u5546\u7684\u4f9b\u7ed9\u66f2\u7ebf\u7684-\u5e73\u76f8\u52a0","title":"\u5b8c\u5168\u7ade\u4e89\u2f8f\u4e1a\u7684\u77ed\u671f\u4f9b\u7ed9\u66f2\u7ebf\u662f\u8be5\u2f8f\u4e1a\u4e2d\u2f1a\u5546\u7684\u77ed\u671f\u4f9b\u7ed9\u66f2\u7ebf\u7684\u2f54 \u5e73\u76f8\u52a0\uff0c\u80fd\u5426\u8bf4\u8be5\u2f8f\u4e1a\u2ed3\u671f\u4f9b\u7ed9\u66f2\u7ebf\u4e5f\u662f\u8be5\u2f8f\u4e1a\u4e2d\u2f1a\u5546\u7684\u4f9b\u7ed9\u66f2\u7ebf\u7684 \u2f54\u5e73\u76f8\u52a0\uff1f","text":"<ul> <li>\u5f53\u957f\u671f\u884c\u4e1a\u6cbf\u7740\u4f9b\u7ed9\u66f2\u7ebf\u8fdb\u884c\u8c03\u6574\u65f6\uff0c\u5b58\u5728\u5382\u5546\u8fdb\u5165\u6216\u9000\u51fa\u5e02\u573a</li> <li>\u5bf9\u4e8e\u6210\u672c\u9012\u589e\u6216\u9012\u51cf\u7684\u884c\u4e1a\u6765\u8bf4\uff0c\u5382\u5546\u7684\u8fb9\u9645\u6210\u672c\u66f2\u7ebf\u672c\u8eab\u4e5f\u4f1a\u7531\u4e8e\u6295\u5165\u54c1\u7684\u4ef7\u683c\u53d8\u5316\u800c\u79fb\u52a8</li> <li>\u56e0\u6b64\uff0c\u4e0d\u80fd\u8fdb\u884c\u52a0\u603b</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5982\u679c\u4e1a\u4e2d\u6bcf\u4e2a\u5546\u90fd\u5904\u4e8e\u671f\u5747\u8861\u72b6\u6001\u6574\u4e2a\u4e1a\u662f\u5426\u5fc5\u5b9a\u5904\u4e8e-\u671f\u5747\u8861\u72b6\u6001\u53cd\u4e4b\u662f\u5426\u4ea6\u7136\u5982\u679c\u5546\u548c\u4e1a\u90fd\u5904\u4e8e\u671f\u5747\u8861\u72b6-\u6001\u5b83\u4eec\u662f\u5426\u5fc5\u7136\u5904\u4e8e\u77ed\u671f\u5747\u8861\u72b6\u6001\u53cd\u4e4b\u662f\u5426\u4ea6\u7136","title":"\u5982\u679c\u2f8f\u4e1a\u4e2d\u6bcf\u4e2a\u2f1a\u5546\u90fd\u5904\u4e8e\u2ed3\u671f\u5747\u8861\u72b6\u6001\uff0c\u6574\u4e2a\u2f8f\u4e1a\u662f\u5426\u5fc5\u5b9a\u5904\u4e8e \u2ed3\u671f\u5747\u8861\u72b6\u6001\uff0c\u53cd\u4e4b\u662f\u5426\u4ea6\u7136\uff1f\u5982\u679c\u2f1a\u5546\u548c\u2f8f\u4e1a\u90fd\u5904\u4e8e\u2ed3\u671f\u5747\u8861\u72b6 \u6001\uff0c\u5b83\u4eec\u662f\u5426\u5fc5\u7136\u5904\u4e8e\u77ed\u671f\u5747\u8861\u72b6\u6001\uff1f\u53cd\u4e4b\u662f\u5426\u4ea6\u7136\uff1f","text":"<p>\u5173\u952e\u5728\u4e8e\uff0c\u5355\u4e2a\u4f01\u4e1a\u7684\u957f\u671f\u5747\u8861\u53ea\u8981\u6c42 \\(P=SMC=LMC\\)\uff0c\u4f46\u662f\u6574\u4e2a\u5e02\u573a\u5fc5\u987b\u5728\u6ca1\u6709\u7ecf\u6d4e\u5229\u6da6\u7684 \\(P=SMC=LMC=SAC=LAC\\) \u624d\u80fd\u5747\u8861</p> <p>\uff081\uff09\u5982\u679c\u884c\u4e1a\u4e2d\u6bcf\u4e2a\u4f01\u4e1a\u90fd\u5904\u4e8e\u957f\u671f\u5747\u8861\u72b6\u6001\uff0c\u5219 P=SMC=LMC\u3002\u4f46\u662f\u6574\u4e2a\u884c\u4e1a\u5904\u4e8e\u957f\u671f\u5747\u8861\u72b6\u6001\u7684\u8bdd\uff0c\u5219\u4e0d\u4f46\u8981\u6c42 P=SMC=LMC\uff0c\u8fd8\u8981\u6c42 P=SMC=LMC=SAC=LAC\u3002P=SMC=LMC \u65f6\uff0c\u4e0d\u4e00\u5b9a\u5c31\u6709 P=SMC=LMC=SAC=LAC\u3002\u53ef\u89c1\uff0c\u5373\u4f7f\u6bcf\u4e2a\u4f01\u4e1a\u90fd\u5904\u4e8e\u957f\u671f\u5747\u8861\u72b6\u6001\uff0c\u6574\u4e2a\u884c\u4e1a\u8fd8\u4e0d\u4e00\u5b9a\u5904\u4e8e\u957f\u671f\u5747\u8861\u72b6\u6001\u3002\u4f46 P=SMC=LMC=SAC=LAC \u65f6\uff0c\u5fc5\u5b9a\u6709 P=SMC=LMC,\u5373\u5982\u679c\u6574\u4e2a\u884c\u4e1a\u5904\u4e8e\u957f\u671f\u5747\u8861\u72b6\u6001,\u5219\u884c\u4e1a\u4e2d\u7684\u6bcf\u4e2a\u4f01\u4e1a\u5fc5\u5b9a\u5904\u4e8e\u957f\u671f\u5747\u8861\u72b6\u6001\u3002</p> <p>\uff082\uff09\u5982\u679c\u4f01\u4e1a\u548c\u884c\u4e1a\u90fd\u5904\u4e8e\u957f\u671f\u5747\u8861\u72b6\u6001\uff0c\u5373 P=SMC=LMC=SAC=LAC,\u5219\u4f01\u4e1a\u5fc5\u7136\u5904\u4e8e\u77ed\u671f\u5747\u8861\u72b6\u6001\uff0c\u56e0\u6b64\u4f01\u4e1a\u77ed\u671f\u5747\u8861\u7684\u6761\u4ef6\u662f P=SMC.\u5982\u679c\u6240\u6709\u7684\u4f01\u4e1a\u90fd\u5904\u4e8e\u957f\u671f\u5747\u8861\u72b6\u6001\uff0c\u4ea7\u54c1\u7684\u4ef7\u683c\u548c\u4ea7\u91cf\u4e0d\u518d\u53d1\u751f\u53d8\u52a8\uff0c\u90a3\u4e48\u8be5\u884c\u4e1a\u4e5f\u5c31\u5904\u4e8e\u77ed\u671f\u5747\u8861\u72b6\u6001\u3002\u4f46\u5f53\u884c\u4e1a\u5904\u4e8e\u77ed\u671f\u5747\u8861\u72b6\u6001\u65f6\uff0c\u884c\u4e1a\u4e2d\u7684\u6bcf\u4e2a\u4f01\u4e1a\u4e0d\u4e00\u5b9a\u5904\u4e8e\u957f\u671f\u5747\u8861\u72b6\u6001\u3002\u56e0\u4e3a\u5982\u4e0a\u6240\u8ff0\uff0cP=SMC\uff0c\u4e0d\u4e00\u5b9a\u6709 P=SMC=LMC=SAC=LAC.</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4e3a\u4ec0\u4e48\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u662f\u6709\u6548\u7387\u7684-\u5bf9\u5e02\u573a\u7684\u9884\u53ef\u80fd\u5bfc\u81f4\u6548\u7387\u635f-\u5931","title":"\u4e3a\u4ec0\u4e48\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u662f\u6709\u6548\u7387\u7684 \uff1f\u2f7d\u5bf9\u5e02\u573a\u7684\u2f32\u9884\u53ef\u80fd\u5bfc\u81f4\u6548\u7387\u635f \u5931\uff1f","text":"<p>\u5e02\u573a\u8fd0\u884c\u7684\u7ecf\u6d4e\u6548\u7387\u662f\u6307\u53c2\u4e0e\u5e02\u573a\u6d3b\u52a8\u7684\u5546\u5bb6\u5229\u7528\u793e\u4f1a\u8d44\u6e90\u7684\u7a0b\u5ea6\uff0c\u8d44\u6e90\u5229\u7528\u7684\u8d8a\u5145\u5206,\u7ecf\u6d4e\u6548\u7387\u5c31\u8d8a\u9ad8\u3002\u5fae\u89c2\u7ecf\u6d4e\u5b66\u8ba4\u4e3a,\u5728\u5b8c\u5168\u7ade\u4e89\u7684\u5e02\u573a\u4e0a\uff0c\u5546\u5bb6\u5904\u4e8e\u957f\u671f\u5747\u8861\u65f6\uff0c\u8fb9\u9645\u6210\u672c\u7b49\u4e8e\u5e73\u5747\u6210\u672c\u90fd\u7b49\u4e8e\u5e02\u573a\u4ef7\u683c\uff0c\u56e0\u800c\u662f\u6709\u6548\u7387\u7684\u3002</p> <p>1\uff09\u8fb9\u9645\u6210\u672c\u7b49\u4e8e\u5e02\u573a\u4ef7\u683c\u610f\u5473\u7740\uff0c\u6700\u540e\u4e00\u5355\u4f4d\u4ea7\u91cf\u6240\u6d88\u8017\u8d44\u6e90\u7684\u4ef7\u503c\u7b49\u4e8e\u8be5\u5355\u4f4d\u4ea7\u91cf\u7684\u793e\u4f1a\u4ef7\u503c</p> <p>2\uff09\u5e73\u5747\u6210\u672c\u7b49\u4e8e\u4ef7\u683c\uff1a\u5382\u5546\u63d0\u4f9b\u7684\u751f\u4ea7\u91cf\u6070\u597d\u51fa\u4e8e\u5e73\u5747\u6210\u672c\u7684\u6700\u4f4e\u70b9\uff0c\u5382\u5546\u4f7f\u7528\u7684\u751f\u4ea7\u6280\u672f\u662f\u7684\u751f\u4ea7\u6210\u672c\u4e3a\u6700\u4f4e\u3002</p> <p>3\uff09\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u7684\u957f\u671f\u5747\u8861\u662f\u901a\u8fc7\u4ef7\u683c\u7684\u81ea\u53d1\u8c03\u8282\u6765\u5b9e\u73b0\u7684\uff0c\u5f53\u6d88\u8d39\u8005\u7684\u504f\u597d\u6536\u5165\u56e0\u7d20\u53d8\u52a8\u800c\u5f15\u8d77\u5e02\u573a\u9700\u6c42\u53d1\u751f\u53d8\u52a8\u65f6\uff0c\u5e02\u573a\u4ef7\u683c\u53ef\u4ee5\u8fc5\u901f\u505a\u51fa\u53cd\u5e94</p> <p>4\uff09\u5982\u679c\u4ee5\u7ecf\u6d4e\u5269\u4f59\u6765\u8861\u91cf\u4ea4\u6613\u4e2d\u6240\u83b7\u5229\u7684\u5c3a\u5ea6\uff0c\u5e76\u4ee5\u7ecf\u6d4e\u5269\u4f59\u6700\u5927\u5316\u8868\u793a\u5e02\u573a\u673a\u5236\u7684\u6548\u7387\uff0c\u90a3\u4e48\u5b8c\u5168\u7ade\u4e89\u5e76\u51fa\u4e8e\u5747\u8861\u65f6\uff0c\u5b9e\u73b0\u7ecf\u6d4e\u5269\u4f59\u6700\u5927\u5316,\u4ece\u800c\u662f\u6709\u6548\u7684\u3002</p> <p>\u5e02\u573a\u5747\u8861\u65f6\u7ecf\u6d4e\u5269\u4f59\u6700\u5927\uff0c\u4ece\u800c\u8bf4\u660e\u5e02\u573a\u673a\u5236\u662f\u6709\u6548\u7387\u7684.\u5982\u679c\u653f\u5e9c\u5e72\u9884\u4e86\uff0c\u5c31\u4f1a\u5bfc\u81f4\u7ecf\u6d4e\u5269\u4f59\u7684\u635f\u5931\uff0c\u8868\u660e\u653f\u5e9c\u5e72\u9884\u7684\u6548\u7387\u635f\u5931</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5b8c\u5168\u7ade\u4e89\u5546\u7684\u5229\u6da6\u6700\u5316\u6761\u4ef6\u8868\u4e3a-pmc\u5176\u7ecf\u6d4e\u542b\u4e49\u662f\u4ec0-\u4e48\u5bf9\u5546\u51b3\u7b56\u6709\u4f55\u542f","title":"\u5b8c\u5168\u7ade\u4e89\u2f1a\u5546\u7684\u5229\u6da6\u6700\u2f24\u5316\u6761\u4ef6\u8868\u2f70\u4e3a P\uff1dMC\uff0c\u5176\u7ecf\u6d4e\u542b\u4e49\u662f\u4ec0 \u4e48\uff1f\u5bf9\u2f1a\u5546\u51b3\u7b56\u6709\u4f55\u542f\u2f70","text":"<ul> <li>\u5382\u5546\u6ca1\u6709\u5b9a\u4ef7\u6743 \\(P=MR=AR\\)</li> <li>\u5382\u5546\u5229\u6da6\u6700\u5927\u5316\u6761\u4ef6\u4e3a \\(MR=MC\\)</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4e0d\u5b8c\u5168\u7ade\u4e89\u5e02\u573a","title":"\u4e0d\u5b8c\u5168\u7ade\u4e89\u5e02\u573a","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4e3a\u4ec0\u4e48\u5b8c\u5168\u7ade\u4e89\u5546\u7684\u5229\u6da6\u6700\u5316\u539f\u5219\u662f\u4ef7\u683c\u7b49\u4e8e\u8fb9\u9645\u6210\u672c\u5784-\u65ad\u5546\u5229\u6da6\u6700\u5316\u65f6\u4ef7\u683c\u4e8e\u5176\u8fb9\u9645\u6210\u672c","title":"\u4e3a\u4ec0\u4e48\u5b8c\u5168\u7ade\u4e89\u2f1a\u5546\u7684\u5229\u6da6\u6700\u2f24\u5316\u539f\u5219\u662f\u4ef7\u683c\u7b49\u4e8e\u8fb9\u9645\u6210\u672c\uff0c\u2f7d\u5784 \u65ad\u2f1a\u5546\u5229\u6da6\u6700\u2f24\u5316\u65f6\u4ef7\u683c\u2f24\u4e8e\u5176\u8fb9\u9645\u6210\u672c\uff1f","text":"<ul> <li>\u4e24\u8005\u5b9e\u73b0\u5229\u6da6\u6700\u5927\u5316\u7684\u6761\u4ef6\u90fd\u662f \\(MR=MC\\)</li> <li>\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u7531\u4e8e\u81ea\u7531\u8fdb\u51fa\uff0c\u6ca1\u6709\u7ecf\u6d4e\u5229\u6da6\uff0c\u5e02\u573a\u7684\u9700\u6c42\u66f2\u7ebf\u4e3a\u6c34\u5e73\u7ebf\uff1b\u5b8c\u5168\u7ade\u4e89\u5382\u5546\u6ca1\u6709\u5b9a\u4ef7\u6743\uff0c\u53ea\u80fd\u63a5\u53d7\u5e02\u573a\u5b9a\u4ef7\uff0c\u8fb9\u9645\u6536\u76ca\u5c31\u662f\u5e02\u573a\u4ef7\u683c\uff0c\u6240\u4ee5 \\(P=MR=MC\\)</li> <li>\u5784\u65ad\u5e02\u573a\u5382\u5546\u6709\u5b9a\u4ef7\u7684\u6743\u5229\uff0c\u9762\u4e34\u7684\u662f\u5411\u53f3\u4e0b\u65b9\u503e\u659c\u7684\u9700\u6c42\u66f2\u7ebf\uff0c\u6240\u4ee5\u53d6 \\(MR=MC\\) \u65f6\uff0c\u5e02\u573a\u4ef7\u683c \\(P&gt;MR\\)</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5784\u65ad\u5546\u7684\u671f\u5747\u8861\u70b9\u662f\u5426\u548c\u5b8c\u5168\u7ade\u4e89\u5546\u6837\u4f4d\u4e8e\u5176\u671f\u5e73\u5747-\u6210\u672c\u7684\u6700\u4f4e\u70b9\u4e3a\u4ec0\u4e48","title":"\u5784\u65ad\u2f1a\u5546\u7684\u2ed3\u671f\u5747\u8861\u70b9\u662f\u5426\u548c\u5b8c\u5168\u7ade\u4e89\u2f1a\u5546\u2f00\u6837\uff0c\u4f4d\u4e8e\u5176\u2ed3\u671f\u5e73\u5747 \u6210\u672c\u7684\u6700\u4f4e\u70b9\uff1f\u4e3a\u4ec0\u4e48\uff1f","text":"<ul> <li>\u5e76\u4e0d\u662f\uff0c\u753b\u56fe</li> <li>\u5b8c\u5168\u7ade\u4e89\u5382\u5546\u957f\u671f\u5747\u8861\u4e3a \\(P=MR=LMC=LAC\\)\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u81ea\u7531\u8fdb\u51fa\uff0c\u6ca1\u6709\u7ecf\u6d4e\u5229\u6da6</li> <li>\u4f46\u662f\u5784\u65ad\u5382\u5546\u7684\u957f\u671f\u5747\u8861\u70b9\u4e3a \\(P&gt;MR=LMC\\)\uff0c\u4e14 \\(P&gt;LAC\\)\uff0c \u5e76\u4e0d\u5728\u957f\u671f\u5e73\u5747\u6210\u672c\u7684\u6700\u4f4e\u70b9\uff0c\u8fd9\u662f\u56e0\u4e3a\u5784\u65ad\u5382\u5546\u6709\u5b9a\u4ef7\u6743\uff0c\u9762\u4e34\u7740\u5411\u53f3\u4e0b\u65b9\u503e\u659c\u7684\u9700\u6c42\u66f2\u7ebf\uff0c\u5176\u5229\u6da6\u6700\u5927\u5316\u70b9 \\(MR=LMC\\) \u5bf9\u5e94\u7684\u4ef7\u683c \\(P&gt;MR\\) \uff0c\u6240\u4ee5\u5b58\u5728\u8d85\u989d\u5229\u6da6\uff0c\u5373 \\(P&gt;LAC\\)</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5047\u8bbe\u4e2a\u504f\u8fdc\u9547\u4e0a\u53ea\u6709\u5bb6\u79c1\u8bca\u6240\u8bd5\u8bf4\u660e\u8be5\u533b\u4e3a\u4ec0\u4e48\u80fd\u5b9e-\u4e09\u7ea7\u4ef7\u683c\u6b67\u89c6","title":"\u5047\u8bbe\u2f00\u4e2a\u504f\u8fdc\u2f29\u9547\u4e0a\u53ea\u6709\u2f00\u5bb6\u79c1\u2f08\u8bca\u6240\uff0c\u8bd5\u8bf4\u660e\u8be5\u533b\u2f63\u4e3a\u4ec0\u4e48\u80fd\u5b9e \u2f8f\u4e09\u7ea7\u4ef7\u683c\u6b67\u89c6\uff1f","text":"<ul> <li>\u5177\u6709\u5784\u65ad\u4f4e\u4f4d\uff0c\u5177\u6709\u5b9a\u4ef7\u6743</li> <li>\u4e0d\u540c\u7684\u5c45\u6c11\u5bb6\u5ead\u6709\u4e0d\u540c\u7684\u6536\u5165\u60c5\u51b5\uff0c\u533b\u751f\u53ef\u4ee5\u6839\u636e\u5176\u751f\u6d3b\u73af\u5883\u5224\u65ad\u5176\u6536\u5165\u6c34\u5e73\uff0c\u8fdb\u800c\u63a8\u65ad\u5176\u652f\u4ed8\u610f\u613f\uff0c\u5bf9\u6536\u5165\u6c34\u5e73\u4f4e\u7684\u5bb6\u5ead\u62a5\u8f83\u4f4e\u7684\u4ef7\u683c\uff0c\u5bf9\u6536\u5165\u6c34\u5e73\u9ad8\u7684\u5bb6\u5ead\u62a5\u8f83\u9ad8\u7684\u4ef7\u683c</li> <li>\u533b\u7597\u670d\u52a1\u4e0d\u53ef\u88ab\u6d88\u8d39\u8005\u8f6c\u5356</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4ea7\u54c1\u5dee\u522b\u5bf9\u5784\u65ad\u5e02\u573a\u5f62\u6210\u7684\u610f\u4e49","title":"\u4ea7\u54c1\u5dee\u522b\u5bf9\u5784\u65ad\u5e02\u573a\u5f62\u6210\u7684\u610f\u4e49","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u89e3\u91ca\u5784\u65ad\u7ade\u4e89\u5546\u7684\u4e24\u6761\u9700\u6c42\u66f2\u7ebf\u7684\u542b\u4e49\u53ca\u5176\u76f8\u4e92\u5173\u7cfb\u5e76\u8fdb\u6b65-\u56fe\u8bf4\u660e\u5784\u65ad\u7ade\u4e89\u5546\u7684\u77ed\u671f\u5747\u8861\u548c\u671f\u5747\u8861\u7684\u5f62\u6210\u53ca\u5176\u6761\u4ef6","title":"\u89e3\u91ca\u5784\u65ad\u7ade\u4e89\u2f1a\u5546\u7684\u4e24\u6761\u9700\u6c42\u66f2\u7ebf\u7684\u542b\u4e49\u53ca\u5176\u76f8\u4e92\u5173\u7cfb\uff0c\u5e76\u8fdb\u2014\u6b65 \u2f64\u56fe\u8bf4\u660e\u5784\u65ad\u7ade\u4e89\u2f1a\u5546\u7684\u77ed\u671f\u5747\u8861\u548c\u2ed3\u671f\u5747\u8861\u7684\u5f62\u6210\u53ca\u5176\u6761\u4ef6\u3002","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5047\u8bbe\u5728\u4e2a\u5784\u65ad\u7ade\u4e89\u4e1a\u4e2d\u7684\u6240\u6709\u5546\u90fd\u88ab\u5e76\u4e2a\u5546\u8fd9\u4e2a-\u65b0\u5546\u4f1a\u4ecd\u7136\u4ea7\u90a3\u4e48\u591a\u54c1\u724c\u5417\u6216\u8005\u5b83\u4f1a\u53ea\u4ea7\u79cd\u5355\u54c1\u724c\u8bf7-\u89e3\u91ca","title":"\u5047\u8bbe\u5728\u2f00\u4e2a\u5784\u65ad\u7ade\u4e89\u2f8f\u4e1a\u4e2d\u7684\u6240\u6709\u2f1a\u5546\u90fd\u88ab\u5e76\u2f0a\u2f00\u4e2a\u2f24\u2f1a\u5546\uff0c\u8fd9\u4e2a \u65b0\u2f1a\u5546\u4f1a\u4ecd\u7136\u2f63\u4ea7\u90a3\u4e48\u591a\u54c1\u724c\u5417\uff1f\u6216\u8005\u5b83\u4f1a\u53ea\u2f63\u4ea7\u2f00\u79cd\u5355\u2f00\u54c1\u724c\uff1f\u8bf7 \u89e3\u91ca\u3002","text":"<ul> <li>\u4f1a\u4fdd\u7559\u53d7\u6d88\u8d39\u8005\u6b22\u8fce\u7684\u54c1\u724c\uff0c\u5c06\u8981\u7d20\u6295\u5165\u8fd9\u4e9b\u54c1\u724c\u6765\u5b9e\u73b0\u6548\u7387\u6700\u5927\u5316</li> <li>\u4f46\u4e5f\u4e0d\u4f1a\u53ea\u4fdd\u7559\u5355\u4e00\u54c1\u724c\uff0c\u56e0\u4e3a\u8fd9\u6837\u5c06\u5931\u53bb\u90e8\u5206\u6d88\u8d39\u8005</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4e3a\u4ec0\u4e48\u53c2\u52a0\u5361\u7279\u5c14\u7684\u5404\u5546\u4f1a\u6309\u76f8\u540c\u7684\u4ef7\u683c\u51fa\u552e\u4ea7\u54c1\u4e0d\u4f1a\u8981\u6c42-\u4ea7\u76f8\u7b49\u7684\u4ea7\u91cf","title":"\u4e3a\u4ec0\u4e48\u53c2\u52a0\u5361\u7279\u5c14\u7684\u5404\u2f1a\u5546\u4f1a\u6309\u76f8\u540c\u7684\u4ef7\u683c\u51fa\u552e\u4ea7\u54c1\u2f7d\u4e0d\u4f1a\u8981\u6c42\u2f63 \u4ea7\u76f8\u7b49\u7684\u4ea7\u91cf\uff1f","text":"<ul> <li>\u5361\u7279\u5c14\u7684\u76ee\u7684\u662f\u5b9e\u73b0\u4ef7\u683c\u63a7\u5236\uff0c\u8fbe\u5230\u96c6\u56e2\u603b\u4f53\u5229\u6da6\u6700\u5927\u5316\uff0c\u6240\u4ee5\u6210\u5458\u5382\u5546\u4f1a\u6309\u7167\u540c\u610f\u7684\u4ef7\u683c\u53bb\u51fa\u552e\u4ea7\u54c1\uff0c\u4fdd\u8bc1\u603b\u4f53\u7684\u5229\u6da6\u6700\u5927\u5316</li> <li>\u5404\u5382\u5546\u5982\u679c\u751f\u4ea7\u76f8\u7b49\u7684\u4ea7\u91cf\uff0c\u7531\u4e8e\u6bcf\u4e2a\u5382\u5546\u7684\u6548\u7387\u4e0d\u540c\uff0c\u6240\u4ee5\u4f9b\u7ed9\u4e0d\u540c\uff0c\u4f1a\u5bfc\u81f4\u5e02\u573a\u4ef7\u683c\u4e0d\u662f\u603b\u4f53\u5229\u6da6\u6700\u5927\u4ef7\u683c</li> <li>\u5404\u5382\u5546\u6309\u7167\u76f8\u540c\u7684\u4ef7\u683c\u51fa\u552e\u4ea7\u54c1\uff0c\u5229\u6da6\u7531\u5361\u7279\u5c14\u5185\u90e8\u6309\u7167\u89c4\u5219\u5206\u914d</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5784\u65ad\u7ade\u4e89\u5e02\u573a\u4e2d\u67d0\u5546\u7684\u671f\u603b\u6210\u672c\u51fd\u6570\u4e3a-ltc0001q30425q2-85q\u5176\u4e2d-q-\u4e3a\u4ea7\u91cf\u5047\u8bbe\u4e0d\u5b58\u5728\u8fdb\u969c\u788d\u4ea7\u91cf\u7531\u8be5\u5e02\u573a\u7684\u6574\u4e2a-\u4e1a\u8c03\u6574\u5982\u679c\u4e1a\u4e2d\u6240\u6709\u5546\u6309\u540c\u6837\u4f8b\u8c03\u6574\u67d0\u4ef7\u683c\u51fa\u552e\u4ea7\u54c1\u7684-\u5b9e\u9645\u9700\u6c42\u66f2\u7ebf\u4e3a-q30025p\u8bd5\u8ba1\u7b971\u5546\u7684\u671f\u5747\u8861\u4ea7\u91cf\u548c-\u4ef7\u683c2\u5546\u4e3b\u89c2\u9700\u6c42\u66f2\u7ebf\u4e0a\u7684\u671f\u5747\u8861\u70b9\u7684\u5f39\u60273\u82e5\u5546-\u4e3b\u89c2\u9700\u6c42\u66f2\u7ebf\u662f\u7ebf\u6027\u7684\u6c42\u51fa\u5546\u671f\u5747\u8861\u65f6\u7684\u4e3b\u89c2\u9700\u6c42\u66f2\u7ebf","title":"\u5784\u65ad\u7ade\u4e89\u5e02\u573a\u4e2d\u67d0\u2f1a\u5546\u7684\u2ed3\u671f\u603b\u6210\u672c\u51fd\u6570\u4e3a LTC\uff1d0.001q3\uff0d0.425q2 \uff0b85q\uff0c\u5176\u4e2d q \u4e3a\u2f49\u4ea7\u91cf\u3002\u5047\u8bbe\u4e0d\u5b58\u5728\u8fdb\u2f0a\u969c\u788d\uff0c\u4ea7\u91cf\u7531\u8be5\u5e02\u573a\u7684\u6574\u4e2a \u2f8f\u4e1a\u8c03\u6574\u3002\u5982\u679c\u2f8f\u4e1a\u4e2d\u6240\u6709\u2f1a\u5546\u6309\u540c\u6837\u2f50\u4f8b\u8c03\u6574\u67d0\u4ef7\u683c\uff0c\u51fa\u552e\u4ea7\u54c1\u7684 \u5b9e\u9645\u9700\u6c42\u66f2\u7ebf\u4e3a q\uff1d300\uff0d2.5P\u3002\u8bd5\u8ba1\u7b97\uff1a\uff081\uff09\u2f1a\u5546\u7684\u2ed3\u671f\u5747\u8861\u4ea7\u91cf\u548c \u4ef7\u683c\uff1b\uff082\uff09\u2f1a\u5546\u4e3b\u89c2\u9700\u6c42\u66f2\u7ebf\u4e0a\u7684\u2ed3\u671f\u5747\u8861\u70b9\u7684\u5f39\u6027\uff1b\uff083\uff09\u82e5\u2f1a\u5546 \u4e3b\u89c2\u9700\u6c42\u66f2\u7ebf\u662f\u7ebf\u6027\u7684\uff0c\u6c42\u51fa\u2f1a\u5546\u2ed3\u671f\u5747\u8861\u65f6\u7684\u4e3b\u89c2\u9700\u6c42\u66f2\u7ebf\u3002","text":"<ul> <li>\u4e3b\u89c2\u9700\u6c42\u66f2\u7ebf\u4e0e LAC \u5728\u957f\u671f\u5747\u8861\u70b9\u76f8\u5207</li> <li></li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4e00\u9053\u9898\u76ee","title":"\u4e00\u9053\u9898\u76ee","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5224\u65ad\u6240\u5c5e\u7684\u5e02\u573a\u7ed3\u6784","title":"\u5224\u65ad\u6240\u5c5e\u7684\u5e02\u573a\u7ed3\u6784","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u6536\u8d2d\u884c\u4e3a","title":"\u6536\u8d2d\u884c\u4e3a","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u8ba8\u8bba\u56db\u79cd\u5e02\u573a\u7c7b\u578b\u7684\u4f18\u7f3a\u70b9","title":"\u8ba8\u8bba\u56db\u79cd\u5e02\u573a\u7c7b\u578b\u7684\u4f18\u7f3a\u70b9","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u8bd5\u8bba\u6211\u56fd\u7ecf\u6d4e\u8f6c\u578b\u8fc7\u7a0b\u4e2d\u67d0\u5e02\u573a\u7684\u6f14\u8fdb\u8fc7\u7a0b","title":"\u8bd5\u8bba\u6211\u56fd\u7ecf\u6d4e\u8f6c\u578b\u8fc7\u7a0b\u4e2d\u67d0\u2f00\u5e02\u573a\u7684\u6f14\u8fdb\u8fc7\u7a0b","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7ade\u4e89\u4e0e\u5784\u65ad\u54ea\u4e2a\u66f4\u6709\u5229\u4e8e\u6280\u672f\u521b\u65b0","title":"\u7ade\u4e89\u4e0e\u5784\u65ad\u54ea\u4e2a\u66f4\u6709\u5229\u4e8e\u6280\u672f\u521b\u65b0\uff1f","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5386\u5e74\u5377\u7b80\u7b54\u9898","title":"\u5386\u5e74\u5377\u7b80\u7b54\u9898","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#07-08-\u51ac-a-\u6709\u7b54\u6848","title":"07-08 \u51ac A \u6709\u7b54\u6848","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u8bf7\u5bf9-\u8c37\u8d31\u4f24\u519c\u7ed9\u51fa\u7ecf\u6d4e\u5b66\u5206\u6790","title":"\u8bf7\u5bf9 \u201c\u8c37\u8d31\u4f24\u519c\u201d\u7ed9\u51fa\u7ecf\u6d4e\u5b66\u5206\u6790","text":"<ol> <li>\u753b\u56fe\uff0c\u753b\u51fa\u4f9b\u7ed9\u66f2\u7ebf\u7684\u79fb\u52a8\u548c\u603b\u6536\u5165\u9762\u79ef</li> <li>\uff08\u662f\u4ec0\u4e48\uff09\u201c\u8c37\u8d31\u4f24\u519c\u201d\u662f\u6307\u7cae\u98df\u4e30\u6536\u5bfc\u81f4\u7cae\u4ef7\u4e0b\u964d\u8fdb\u800c\u5bfc\u81f4\u519c\u6c11\u6536\u5165\u51cf\u5c11\u7684\u73b0\u8c61</li> <li>\uff08\u4e3a\u4ec0\u4e48\uff09\u5176\u539f\u56e0\u5728\u4e8e\uff0c\u7cae\u98df\u662f\u4e00\u79cd\u9700\u6c42\u7f3a\u4e4f\u5f39\u6027\u7684\u5fc5\u9700\u54c1</li> <li>\uff08\u8fc7\u7a0b\u5206\u6790\uff09\u5f53\u7cae\u98df\u4e30\u6536\uff0c\u7cae\u98df\u4f9b\u7ed9\u589e\u52a0\u5bfc\u81f4\u7cae\u98df\u5747\u8861\u4ef7\u683c\u4e0b\u964d\uff0c\u9700\u6c42\u4e0a\u6da8\uff0c\u4f46\u7531\u4e8e\u9700\u6c42\u7f3a\u4e4f\u5f39\u6027\uff0c\u519c\u6c11\u56e0\u9700\u6c42\u589e\u52a0\u800c\u589e\u52a0\u7684\u6536\u76ca\u5c0f\u4e8e\u56e0\u7cae\u4ef7\u4e0b\u964d\u51cf\u5c11\u7684\u6536\u76ca\uff0c\u4ece\u800c\u4ea7\u751f\u4e30\u6536\u53cd\u800c\u9020\u6210\u519c\u6c11\u6536\u5165\u51cf\u5c11\u7684\u73b0\u8c61</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u8bf7\u7528\u66ff\u4ee3\u6548\u5e94\u4e0e\u6536\u5165\u6548\u5e94\u7684\u5173\u7cfb\u89e3\u91ca\u4f4e\u6863\u5546\u54c1\u548c\u5409\u82ac\u5546\u54c1\u7684\u533a\u522b","title":"\u8bf7\u7528\u66ff\u4ee3\u6548\u5e94\u4e0e\u6536\u5165\u6548\u5e94\u7684\u5173\u7cfb\u89e3\u91ca\u4f4e\u6863\u5546\u54c1\u548c\u5409\u82ac\u5546\u54c1\u7684\u533a\u522b","text":"<ol> <li>\u753b\u56fe\uff0c\u5c31\u662f\u9700\u6c42\u548c\u4f9b\u7ed9\u7684\u56fe</li> <li>\uff08\u662f\u4ec0\u4e48\uff09\u4ef7\u683c\u6548\u5e94\u5206\u4e3a\u4e24\u79cd<ol> <li>\u66ff\u4ee3\u6548\u5e94\u662f\u6307\u6536\u5165\u4e0d\u53d8\u65f6\uff0c\u67d0\u79cd\u5546\u54c1\u4ef7\u683c\u53d8\u5316\u5f15\u8d77\u4e24\u79cd\u5546\u54c1\u4e4b\u95f4\u7684\u76f8\u5bf9\u4ef7\u683c\u53d8\u5316\u800c\u5bfc\u81f4\u5bf9\u8be5\u79cd\u5546\u54c1\u7684\u9700\u6c42\u91cf\u7684\u53d8\u5316</li> <li>\u6536\u5165\u6548\u5e94\u662f\u6307\u67d0\u79cd\u5546\u54c1\u7684\u4ef7\u683c\u53d8\u5316\u5bfc\u81f4\u6d88\u8d39\u8005\u5b9e\u9645\u6536\u5165\u4ece\u800c\u5bfc\u81f4\u5bf9\u8be5\u5546\u54c1\u9700\u6c42\u91cf\u7684\u53d8\u5316</li> </ol> </li> <li>\uff08\u5206\u6790\uff09<ol> <li>\u67d0\u79cd\u4f4e\u6863\u5546\u54c1\u4ef7\u683c\u4e0b\u964d\u7684\u66ff\u4ee3\u6548\u5e94\u589e\u52a0\u6d88\u8d39\u8005\u5bf9\u8be5\u5546\u54c1\u7684\u9700\u6c42\u91cf\uff0c\u4f46\u6536\u5165\u6548\u5e94\u5374\u4f7f\u6d88\u8d39\u8005\u51cf\u5c11\u9700\u6c42\u91cf\uff0c\u4f46\u662f\uff0c\u4e24\u79cd\u6548\u5e94\u7684\u5927\u5c0f\u4e0d\u786e\u5b9a</li> <li>\u5982\u679c\u4e00\u79cd\u4f4e\u6863\u5546\u54c1\u7684\u6536\u5165\u6548\u5e94\u8d85\u8fc7\u4e86\u66ff\u4ee3\u6548\u5e94\uff0c\u90a3\u4e48\u4ef7\u683c\u7684\u4e0b\u964d\u5c06\u4f1a\u5bfc\u81f4\u5176\u9700\u6c42\u91cf\u7684\u4e0b\u964d\uff0c\u8fd9\u79cd\u5546\u54c1\u5c31\u662f\u5409\u82ac\u5546\u54c1</li> </ol> </li> <li>\u7efc\u4e0a\uff0c\u5409\u82ac\u5546\u54c1\u4e00\u5b9a\u662f\u4f4e\u6863\u5546\u54c1\uff0c\u4f46\u662f\u4f4e\u6863\u5546\u54c1\u4e0d\u4e00\u5b9a\u662f\u5409\u82ac\u5546\u54c1</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u8bf4\u660e\u77ed\u671f\u6210\u672c\u51fd\u6570\u662f\u600e\u4e48\u4ece\u77ed\u671f\u751f\u4ea7\u51fd\u6570\u83b7\u5f97\u7684-\u4f7f\u7528\u6570\u7406\u63a8\u5bfc","title":"\u8bf4\u660e\u77ed\u671f\u6210\u672c\u51fd\u6570\u662f\u600e\u4e48\u4ece\u77ed\u671f\u751f\u4ea7\u51fd\u6570\u83b7\u5f97\u7684 \u4f7f\u7528\u6570\u7406\u63a8\u5bfc","text":"<ol> <li>\\(Q=f(L, K)\\)\uff0c\u5176\u4e2d K \u4e3a\u56fa\u5b9a\u751f\u4ea7\u8981\u7d20\uff0cL \u4e3a\u53ef\u53d8\u751f\u4ea7\u8981\u7d20\uff08\u52b3\u52a8\uff09\uff0c\u6545 f \u4e3a\u5355\u53d8\u91cf\u51fd\u6570</li> <li>\u5f97\u51fa\u53cd\u51fd\u6570 \\(L = f^{-1}(Q)\\)</li> <li>\u8ba1\u7b97\u6210\u672c \\(TC=wL+rK=wf^{-1}(Q)+rK\\)</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7528\u56fe\u50cf\u8bf4\u660e\u5382\u5546\u5728\u65e2\u5b9a\u6210\u672c\u4e0b\u5b9e\u73b0\u4ea7\u91cf\u6700\u5927\u5316\u7684\u6700\u9002\u8981\u7d20\u7ec4\u5408\u539f\u5219-\u4e0e\u540e\u9762\u7684\u662f\u540c\u4e00\u9053\u9898","title":"\u7528\u56fe\u50cf\u8bf4\u660e\u5382\u5546\u5728\u65e2\u5b9a\u6210\u672c\u4e0b\u5b9e\u73b0\u4ea7\u91cf\u6700\u5927\u5316\u7684\u6700\u9002\u8981\u7d20\u7ec4\u5408\u539f\u5219 %% \u4e0e\u540e\u9762\u7684\u662f\u540c\u4e00\u9053\u9898%%","text":"<ol> <li>\u753b\u56fe\uff0c\u7b49\u6210\u672c\u7ebf\u548c\u7b49\u4ea7\u91cf\u7ebf</li> <li>\u8bf4\u660e\u5185\u5916\uff0c\u4e3a\u4ec0\u4e48\u8981\u53d6\u5207\u70b9</li> <li>\u659c\u7387\u76f8\u7b49 \\(MP_L/MP_K=w/r\\)</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7b80\u8981\u8bf4\u660e\u5e02\u573a\u5931\u7075\u7684\u539f\u56e0","title":"\u7b80\u8981\u8bf4\u660e\u5e02\u573a\u5931\u7075\u7684\u539f\u56e0","text":"<ol> <li>\uff08\u662f\u4ec0\u4e48\uff09\u5e02\u573a\u5931\u7075\u6307\u7684\u662f\u5e02\u573a\u673a\u5236\u4e0d\u80fd\u6216\u4e0d\u80fd\u5f88\u597d\u5730\u53d1\u6325\u4f5c\u7528\u5bfc\u81f4\u4e0d\u80fd\u8fbe\u5230\u5e15\u7d2f\u6258\u6700\u4f18\u72b6\u51b5</li> <li>\u9020\u6210\u5e02\u573a\u5931\u7075\u7684\u539f\u56e0\u4e3b\u8981\u6709<ol> <li>\u5784\u65ad\uff1a\u4f1a\u9020\u6210\u9ad8\u4ef7\u4f4e\u4ea7\uff0c\u635f\u5bb3\u6d88\u8d39\u8005\u798f\u5229\uff0c\u4ee5\u53ca\u51c0\u6548\u7387\u635f\u5931</li> <li>\u4fe1\u606f\u4e0d\u5b8c\u5168\u4e0e\u4e0d\u5bf9\u79f0\uff1a\u4f1a\u5bfc\u81f4\u5404\u5382\u5546\u65e0\u6cd5\u8fbe\u5230\u8981\u7d20\u7684\u6700\u4f73\u914d\u7f6e\uff0c\u6216\u7ed9\u51fa\u6700\u4f18\u7684\u4ef7\u683c</li> <li>\u5916\u90e8\u6027\uff1a\u4f1a\u5bfc\u81f4\u793e\u4f1a\u6210\u672c\u4e0d\u7b49\u4e8e\u79c1\u4eba\u6210\u672c\uff0c\u5bfc\u81f4\u793e\u4f1a\u603b\u6548\u7528\u65e0\u6cd5\u6700\u5927\u5316</li> <li>\u516c\u5171\u7269\u54c1\uff1a\u5b58\u5728\u642d\u4fbf\u8f66\u95ee\u9898</li> </ol> </li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4ece\u7ecf\u6d4e\u5b66\u89d2\u5ea6\u5206\u6790\u76d7\u7248\u76db\u884c\u7684\u539f\u56e0","title":"\u4ece\u7ecf\u6d4e\u5b66\u89d2\u5ea6\u5206\u6790\u76d7\u7248\u76db\u884c\u7684\u539f\u56e0","text":"<ol> <li>\uff08\u89e3\u91ca\u4e3a\u4ec0\u4e48\u76d7\u7248\u66f4\u52a0\u4fbf\u5b9c\uff09<ol> <li>\u8fd9\u7c7b\u4fe1\u606f\u4ea7\u54c1\u751f\u4ea7\u7684\u7b2c\u4e00\u5355\u4f4d\u6210\u672c\u5f88\u9ad8\uff0c\u800c\u4ece\u7b2c\u4e8c\u5355\u4f4d\u5f00\u59cb\u8fb9\u9645\u6210\u672c\u5f88\u4f4e</li> <li>\u6b63\u7248\u4e2d\u4e3a\u4e86\u5206\u644a\u524d\u671f\u5f00\u53d1\u3001\u64b0\u5199\u7b49\u6210\u672c\uff0c\u4ef7\u683c\u8f83\u9ad8</li> <li>\u76d7\u7248\u53ea\u7528\u8fb9\u9645\u6210\u672c\u5b9a\u4ef7\uff0c\u6240\u4ee5\u4ef7\u683c\u5f88\u4f4e</li> </ol> </li> <li>\uff08\u8ba8\u8bba\u6d88\u8d39\u8005\u7684\u4e0d\u540c\u9700\u6c42\uff09\u5728\u6b63\u7248\u548c\u76d7\u7248\u5dee\u5f02\u5f88\u5c0f\u7684\u60c5\u51b5\u4e0b\uff0c\u6d88\u8d39\u8005\u5206\u4e3a\u4e24\u7c7b<ol> <li>\u4e00\u7c7b\u53ea\u5728\u610f\u5176\u54c1\u8d28\uff0c\u800c\u4e0d\u5728\u610f\u4ef7\u683c\uff0c\u4ed6\u4eec\u7684\u9700\u6c42\u4ef7\u683c\u5f39\u6027\u6bd4\u8f83\u5c0f\uff0c\u4f1a\u9009\u62e9\u6b63\u7248</li> <li>\u53e6\u4e00\u7c7b\u66f4\u52a0\u5728\u610f\u4ef7\u683c\uff0c\u4ed6\u4eec\u7684\u9700\u6c42\u4ef7\u683c\u5f39\u6027\u6bd4\u8f83\u5927\uff0c\u4f1a\u9009\u62e9\u76d7\u7248</li> </ol> </li> <li>\uff08\u8ba8\u8bba\u5382\u5546\u548c\u6d88\u8d39\u8005\u7684\u9009\u62e9\u7b56\u7565\uff09<ol> <li>\u5bf9\u4e8e\u5382\u5546\u6765\u8bf4\uff0c\u5b9e\u73b0\u5229\u6da6\u6700\u5927\u5316\u7684\u65b9\u6cd5\u662f\u540c\u65f6\u751f\u4ea7\u6b63\u7248\u548c\u76d7\u7248\uff0c\u540c\u65f6\u5411\u4e24\u4e2a\u6d88\u8d39\u8005\u7fa4\u4f53\u9500\u552e</li> <li>\u5bf9\u4e8e\u6d88\u8d39\u8005\u6765\u8bf4\uff0c\u5728\u4ea7\u54c1\u5dee\u5f02\u8f83\u5c0f\u7684\u60c5\u51b5\u4e0b\uff0c\u6839\u636e\u4e2a\u4eba\u9700\u6c42\u4ef7\u683c\u5f39\u6027\u9009\u62e9\uff0c\u53ef\u4ee5\u5b9e\u73b0\u6d88\u8d39\u8005\u6548\u7528\u6700\u5927\u5316</li> </ol> </li> <li>\u7ed3\u679c\u5c31\u662f\u76d7\u7248\u76db\u884c\uff0c\u9a71\u9010\u6b63\u7248</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u6709\u4eba\u8ba4\u4e3a\u5f88\u9ad8\u7684\u56fa\u5b9a\u6210\u672c\u662f\u5382\u5546\u4e8f\u635f\u7684\u539f\u56e0\u4f46\u6c38\u8fdc\u4e0d\u4f1a\u662f\u5382\u5546\u505c\u4e1a\u7684\u539f\u56e0\u4f60\u540c\u610f\u5417\u8bf7\u5206\u6790","title":"\u6709\u4eba\u8ba4\u4e3a\u5f88\u9ad8\u7684\u56fa\u5b9a\u6210\u672c\u662f\u5382\u5546\u4e8f\u635f\u7684\u539f\u56e0\uff0c\u4f46\u6c38\u8fdc\u4e0d\u4f1a\u662f\u5382\u5546\u505c\u4e1a\u7684\u539f\u56e0\uff0c\u4f60\u540c\u610f\u5417\uff0c\u8bf7\u5206\u6790","text":"<ol> <li>\u753b\u56fe\uff0c\u8981\u8fdb\u4e00\u6b65\u753b\u51fa\u751f\u4ea7\u66f2\u7ebf </li> <li>\u540c\u610f\uff0c\u5382\u5546\u505c\u4e1a\u5e76\u4e0d\u662f\u56fa\u5b9a\u6210\u672c\u51b3\u5b9a\u7684\uff0c\u800c\u662f\u53d6\u51b3\u4e8e\u4ef7\u683c\u548c\u5e73\u5747\u53ef\u53d8\u6210\u672c\u7684\u5173\u7cfb</li> <li>\u5f53\u5382\u5546\u6309\u7167 \\(P=MR=MC\\) \u8fdb\u884c\u5229\u6da6\u6700\u5927\u5316\u65f6\uff1a<ol> <li>\u5982\u679c \\(P&lt;AVC\\)\uff0c\u90a3\u4e48\u5382\u5546\u5728\u635f\u5931\u56fa\u5b9a\u6210\u672c\u7684\u57fa\u7840\u4e0a\u4f1a\u8fdb\u4e00\u6b65\u4e8f\u635f\uff0c\u6240\u4ee5\u4e00\u5b9a\u4f1a\u9009\u62e9\u505c\u5de5</li> <li>\u5982\u679c \\(P=AVC\\)\uff0c\u90a3\u4e48\u5382\u5546\u751f\u4ea7\u4e0e\u5426\u5bf9\u5229\u6da6\u6ca1\u6709\u5f71\u54cd\uff0c\u53ef\u4ee5\u9009\u62e9\u751f\u4ea7\u6216\u505c\u5de5</li> <li>\u5982\u679c \\(P&gt;AVC\\)\uff0c\u90a3\u4e48\u5382\u5546\u751f\u4ea7\u7684\u6536\u76ca\u53ef\u4ee5\u5f25\u8865\u56fa\u5b9a\u6210\u672c\uff0c\u751a\u81f3\u53ef\u80fd\u5b9e\u73b0\u76c8\u5229\u3002\u8fd9\u65f6\uff0c\u5373\u4f7f\u4e0d\u5b9e\u73b0\u76c8\u5229\uff0c\u4e8f\u635f\u4e5f\u6bd4\u4e0d\u751f\u4ea7\u8981\u5c11\uff0c\u6240\u4ee5\u4f1a\u9009\u62e9\u751f\u4ea7</li> </ol> </li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#07-08-\u51ac-b-\u6709\u7b54\u6848","title":"07-08 \u51ac B \u6709\u7b54\u6848","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u653f\u5e9c\u5b9e\u884c\u9650\u5236\u4ef7\u683c\u7684\u540e\u679c","title":"\u653f\u5e9c\u5b9e\u884c\u9650\u5236\u4ef7\u683c\u7684\u540e\u679c","text":"<ol> <li>\u9650\u5236\u4ef7\u683c\u6307\u7684\u662f\u653f\u5e9c\u4e3a\u4e86\u9632\u6b62\u67d0\u79cd\u5546\u54c1\u7684\u4ef7\u683c\u4e0a\u5347\u4e8c\u89c4\u5b9a\u7684\u4f4e\u4e8e\u5e02\u573a\u5747\u8861\u4ef7\u683c\u7684\u6700\u9ad8\u9650\u4ef7</li> <li>\u5b9e\u884c\u9650\u5236\u4ef7\u683c\uff0c\u4f1a\u51fa\u73b0\u4f9b\u4e0d\u5e94\u6c42\uff0c\u53d1\u751f\u77ed\u7f3a\u3001\u6392\u961f\u3001\u9ed1\u5e02\u3001\u5f3a\u8feb\u66ff\u4ee3\u7b49</li> <li>\u4e3a\u4e86\u7ef4\u6301\u9650\u5236\u4ef7\u683c\uff0c\u653f\u5e9c\u5f80\u5f80\u91c7\u53d6\u914d\u7ed9\u5236</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7528\u65e0\u5dee\u5f02\u66f2\u7ebf\u5206\u6790\u6d88\u8d39\u8005\u5747\u8861\u7684\u5b9e\u73b0","title":"\u7528\u65e0\u5dee\u5f02\u66f2\u7ebf\u5206\u6790\u6d88\u8d39\u8005\u5747\u8861\u7684\u5b9e\u73b0","text":"<ol> <li>\u753b\u56fe\uff0c\u4e09\u6761\u65e0\u5dee\u5f02\u66f2\u7ebf\uff0c\u4e00\u6761\u9884\u7b97\u7ea6\u675f\u7ebf</li> <li>\u8bf4\u660e\u6761\u4ef6<ol> <li>\u65e0\u5dee\u5f02\u66f2\u7ebf\u7684\u659c\u7387\u7edd\u5bf9\u503c\u4e0e\u9884\u7b97\u7ebf\u659c\u7387\u7edd\u5bf9\u503c\u76f8\u7b49</li> <li>\\(MRS_{XY}=P_X/P_Y\\) \u6216 \\(MU_X/MU_Y=P_X/P_Y\\)</li> </ol> </li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u753b\u56fe\u5e76\u89e3\u91ca-sac-avc-afc-smc-\u7684\u53d8\u5316\u89c4\u5f8b\u548c\u5173\u7cfb","title":"\u753b\u56fe\u5e76\u89e3\u91ca SAC, AVC, AFC, SMC \u7684\u53d8\u5316\u89c4\u5f8b\u548c\u5173\u7cfb","text":"<ol> <li>\u968f\u7740\u4ea7\u91cf\u7684\u589e\u52a0\uff0cAFC \u4e0d\u65ad\u4e0b\u964d</li> <li>AVC, SMC, SAC \u90fd\u662f\u5148\u4e0b\u964d\u540e\u4e0a\u5347</li> <li>SAC \u66f2\u7ebf\u662f AVC \u4e0e AFC \u7684\u5782\u76f4\u52a0\u603b\uff0c\u4ea7\u91cf\u8d8a\u5927\uff0c\u8d8a\u63a5\u8fd1 AVC \u66f2\u7ebf</li> <li>SMC \u66f2\u7ebf\u5148\u540e\u901a\u8fc7 AVC, SAC \u66f2\u7ebf\u7684\u6700\u4f4e\u70b9</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4e3a\u4ec0\u4e48\u5229\u6da6\u6700\u5927\u5316\u662f-mrmc","title":"\u4e3a\u4ec0\u4e48\u5229\u6da6\u6700\u5927\u5316\u662f \\(MR=MC\\)","text":"<ol> <li>\u6839\u636e \\(\\pi=TR-TC\\)\uff0c\u4e3a\u4e86\u4f7f\u5f97\u5229\u6da6\u6700\u5927\uff0c\u6c42\u5bfc\u5f97\u5230 \\(\\pi'=MR-MC\\) \u5e76\u53d6\u5bfc\u6570\u4e3a 0</li> <li>\u5f97\u5230 \\(MR=MC\\)</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4e3a\u4ec0\u4e48\u5784\u65ad\u662f\u4f4e\u6548\u7684","title":"\u4e3a\u4ec0\u4e48\u5784\u65ad\u662f\u4f4e\u6548\u7684","text":"<ol> <li>\u753b\u56fe</li> <li>\u9ad8\u4ef7\u4f4e\u4ea7</li> <li>\u957f\u671f\u4e0d\u5728\u5e73\u5747\u6210\u672c\u7ebf\u4e0a\u751f\u4ea7\uff0c\u635f\u5bb3\u6d88\u8d39\u8005\u798f\u5229</li> <li>\u51c0\u6548\u7387\u635f\u5931</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5bcc\u4eba\u548c\u7a77\u4eba\u7684\u8d27\u5e01\u8fb9\u9645\u6548\u7528\u54ea\u4e2a\u9ad8-\u4e3a\u4ec0\u4e48\u8fd9\u5bf9\u653f\u5e9c\u6536\u5165\u5206\u914d\u6709\u4ec0\u4e48\u542f\u793a","title":"\u5bcc\u4eba\u548c\u7a77\u4eba\u7684\u8d27\u5e01\u8fb9\u9645\u6548\u7528\u54ea\u4e2a\u9ad8 \uff1f\u4e3a\u4ec0\u4e48\uff1f\u8fd9\u5bf9\u653f\u5e9c\u6536\u5165\u5206\u914d\u6709\u4ec0\u4e48\u542f\u793a\uff1f","text":"<ol> <li>\u8fb9\u9645\u6548\u7528\u9012\u51cf\u539f\u5219\u6307\u51fa\uff0c\u5f53\u5176\u4ed6\u6761\u4ef6\u4e0d\u53d8\u65f6\uff0c\u6d88\u8d39\u8005\u8fde\u7eed\u6d88\u8d39\u67d0\u79cd\u7269\u54c1\u7684\u8fb9\u9645\u6548\u7528\u7ec8\u5c06\u65f6\u9012\u51cf\u7684\u3002</li> <li>\u7531\u4e8e\u7a77\u4eba\u62e5\u6709\u7684\u8d27\u5e01\u8f83\u5c11\uff0c\u6240\u4ee5\u7a77\u4eba\u7684\u8d27\u5e01\u8fb9\u9645\u6548\u7528\u8f83\u9ad8\uff1b\u5bcc\u4eba\u62e5\u6709\u7684\u8d27\u5e01\u8f83\u591a\uff0c\u6240\u4ee5\u5bcc\u4eba\u7684\u8d27\u5e01\u8fb9\u9645\u6548\u7528\u8f83\u4f4e</li> <li>\u4e3a\u4e86\u589e\u52a0\u5168\u793e\u4f1a\u7684\u603b\u6548\u7528\uff0c\u6309\u7167\u6d88\u8d39\u8005\u5747\u8861\u7684\u6761\u4ef6\uff08\u8d2d\u4e70\u6bcf\u79cd\u7269\u54c1\u7684\u8fb9\u9645\u6548\u7528\u4e0e\u4ef7\u683c\u4e4b\u6bd4\u76f8\u7b49\uff09\uff0c\u653f\u5e9c\u5e94\u5411\u5bcc\u4eba\u5f81\u7a0e\uff0c\u901a\u8fc7\u8f6c\u79fb\u652f\u4ed8\u7684\u65b9\u5f0f\u7ed9\u7a77\u4eba</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u6709\u4eba\u8bf4\u4f01\u4e1a\u7684\u89c4\u6a21\u8d8a\u5927\u8d8a\u597d-\u6709\u4eba\u8bf4\u8d8a\u5c0f\u8d8a\u597d\u4f60\u600e\u4e48\u770b","title":"\u6709\u4eba\u8bf4\u4f01\u4e1a\u7684\u89c4\u6a21\u8d8a\u5927\u8d8a\u597d \uff0c\u6709\u4eba\u8bf4\u8d8a\u5c0f\u8d8a\u597d\uff0c\u4f60\u600e\u4e48\u770b\uff1f","text":"<ol> <li>\u8fd9\u4e24\u79cd\u8bf4\u6cd5\u90fd\u6709\u6b20\u7f3a\uff0c\u4f01\u4e1a\u7684\u89c4\u6a21\u5e76\u975e\u8d8a\u5927\u8d8a\u597d\uff0c\u4e5f\u5e76\u975e\u8d8a\u5c0f\u8d8a\u597d\uff0c\u800c\u662f\u8981\u4ece\u89c4\u6a21\u7ecf\u6d4e\u7684\u89d2\u5ea6\u627e\u5230\u6700\u9002\u89c4\u6a21\uff0c\\(Q=\\lambda L^\\alpha K^\\beta\\)</li> <li>\u5982\u4f01\u4e1a\u89c4\u6a21\u592a\u5927\uff0c\u53ef\u80fd\u5bfc\u81f4\u7ba1\u7406\u548c\u534f\u8c03\u4e0d\u7075\u6d3b\u3001\u751f\u4ea7\u51b3\u7b56\u4fe1\u606f\u4f20\u9012\u6162\u4e14\u5931\u771f\u3001\u5e94\u53d8\u80fd\u529b\u5f31\uff0c\u9020\u6210\u89c4\u6a21\u4e0d\u7ecf\u6d4e</li> <li>\u5982\u4f01\u4e1a\u89c4\u6a21\u592a\u5c0f\uff0c\u53ef\u80fd\u5bfc\u81f4\u89c4\u6a21\u7ecf\u6d4e\u6ca1\u6709\u5f97\u5230\u8f83\u597d\u7684\u53d1\u6325\uff0c\u6ca1\u6709\u8db3\u591f\u7684\u89c4\u6a21\u5c06\u751f\u4ea7\u8981\u7d20\u7684\u6f5c\u80fd\u53d1\u6325\u9053\u6781\u81f4</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#22-23-\u6625\u590f","title":"22-23 \u6625\u590f","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5982\u4f55\u4ece\u4e2a\u4eba\u9700\u6c42\u9000\u51fa\u5e02\u573a\u9700\u6c42","title":"\u5982\u4f55\u4ece\u4e2a\u4eba\u9700\u6c42\u9000\u51fa\u5e02\u573a\u9700\u6c42","text":"<ol> <li>\u5355\u4e2a\u6d88\u8d39\u8005\u7684\u9700\u6c42\u66f2\u7ebf\uff0c\u662f\u5728\u5176\u4ed6\u6761\u4ef6\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u6709\u610f\u613f\u4e14\u6709\u80fd\u529b\u8d2d\u4e70\u67d0\u5546\u54c1\u7684\u6570\u91cf\u548c\u5546\u54c1\u4ef7\u683c\u7684\u5173\u7cfb\uff0c\u8868\u73b0\u4e3a\u5411\u53f3\u4e0b\u65b9\u503e\u659c\u7684\u66f2\u7ebf\uff0c\u5982\u56fe</li> <li>\u5e02\u573a\u7684\u9700\u6c42\u66f2\u7ebf\u662f\u4e00\u4e2a\u5e02\u573a\u4e2d\u6240\u6709\u6d88\u8d39\u8005\u7fa4\u4f53\u7684\u9700\u6c42\u4e4b\u548c\uff0c\u4e5f\u8868\u73b0\u4e3a\u5411\u53f3\u4e0b\u503e\u659c\u7684\u66f2\u7ebf\uff0c\u5bf9\u4e8e\u4e0d\u540c\u6027\u8d28\u7684\u4ea7\u54c1\u6709\u4e0d\u540c\u7684\u8ba1\u7b97\u65b9\u6cd5<ol> <li>\u5bf9\u4e8e\u79c1\u4eba\u4eab\u6709\u7684\u4ea7\u54c1\uff0c\u5e02\u573a\u9700\u6c42\u66f2\u7ebf\u662f\u4e2a\u4eba\u9700\u6c42\u66f2\u7ebf\u7684\u6c34\u5e73\u52a0\u603b\uff0c\u5373\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4ef7\u683c\uff0c\u5c06\u5e02\u573a\u4e0a\u6bcf\u4e2a\u6d88\u8d39\u8005\u7684\u9700\u6c42\u91cf\u6c42\u548c</li> <li>\u5bf9\u4e8e\u516c\u5171\u5546\u54c1\uff08\u5982\u4e00\u5ea7\u57ce\u5e02\u5bf9\u6f14\u5531\u4f1a\u6570\u91cf\u7684\u9700\u6c42\u548c\u6f14\u5531\u4f1a\u95e8\u7968\u7684\u5173\u7cfb\uff09\uff0c\u82e5\u6240\u6709\u7684\u6d88\u8d39\u8005\u90fd\u540c\u65f6\u4f7f\u7528\u8fd9\u4e2a\u516c\u5171\u5546\u54c1\uff0c\u5219\u5e02\u573a\u9700\u6c42\u66f2\u7ebf\u548c\u4e2a\u4eba\u9700\u6c42\u66f2\u7ebf\u7684\u5782\u76f4\u52a0\u603b</li> </ol> </li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7528\u66ff\u4ee3\u6548\u5e94\u548c\u6536\u5165\u6548\u5e94\u8bf4\u660e\u4f4e\u6863\u5546\u54c1\u548c\u5409\u82ac\u5546\u54c1\u7684\u533a\u522b-\u89c1-07-08-\u5377","title":"\u7528\u66ff\u4ee3\u6548\u5e94\u548c\u6536\u5165\u6548\u5e94\u8bf4\u660e\u4f4e\u6863\u5546\u54c1\u548c\u5409\u82ac\u5546\u54c1\u7684\u533a\u522b \u89c1 07-08 \u5377","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4e3a\u4ec0\u4e48\u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387\u662f\u9012\u51cf\u7684","title":"\u4e3a\u4ec0\u4e48\u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387\u662f\u9012\u51cf\u7684","text":"<ol> <li>\u753b\u56fe L-K</li> <li>\uff08\u89e3\u91ca\u5b9a\u4e49\uff09\u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387\u6307\u7684\u662f\u5728\u4fdd\u6301\u4ea7\u91cf\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u589e\u52a0\u4e00\u5355\u4f4d\u6280\u672f\u6295\u5165\u80fd\u591f\u51cf\u5c11\u5176\u4ed6\u52b3\u52a8\u6295\u5165\u7684\u91cf\uff0c\u4f8b\u5982\u52b3\u52a8\u5bf9\u8d44\u672c\u7684\u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387\u4e3a \\(MRTS_{L, K}=-\\frac{\\Delta K}{\\Delta L}|_{Q \u4e0d\u53d8}\\)</li> <li>\u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387\u6ee1\u8db3\u8fb9\u9645\u62a5\u916c\u9012\u51cf\u8fd9\u4e2a\u7ecf\u6d4e\u5b66\u539f\u7406\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a<ol> <li>\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4efb\u4f55\u8981\u7d20\u4e4b\u95f4\u90fd\u5b58\u5728\u6700\u9002\u6bd4\u4f8b\uff0c\u8981\u7d20\u4e4b\u95f4\u7684\u66ff\u4ee3\u662f\u6709\u9650\u5236\u7684\u3002\u4f8b\u5982\u52b3\u52a8\u548c\u8d44\u672c\uff0c\u5f53\u52b3\u52a8\u6570\u91cf\u975e\u5e38\u5927\u65f6\uff0c\u4e5f\u65e0\u6cd5\u5b8c\u5168\u66ff\u4ee3\u8d44\u672c\uff0c\u6240\u4ee5\u52b3\u52a8\u5bf9\u8d44\u672c\u7684\u8fb9\u9645\u6280\u672f\u66ff\u4ee3\u7387\u968f\u7740\u52b3\u52a8\u7684\u589e\u52a0\u800c\u9012\u51cf\uff0c\u6700\u7ec8\u8d8b\u4e8e 0\uff0c\u800c\u8d44\u672c\u65e0\u6cd5\u88ab\u5b8c\u5168\u66ff\u4ee3</li> <li>\u7b49\u4ea7\u91cf\u7ebf\u8868\u73b0\u4e3a\u51f8\u5411\u539f\u70b9\u7684\u66f2\u7ebf\uff0c\u5f53\u4efb\u610f\u4e00\u79cd\u8981\u7d20\u6570\u91cf\u589e\u52a0\u65f6\uff0c\u5176\u8fb9\u9645\u4ea7\u91cf\u51cf\u5c11\uff0c\u800c\u53e6\u4e00\u79cd\u8981\u7d20\u7684\u8fb9\u9645\u4ea7\u91cf\u589e\u52a0</li> <li>\u6240\u4ee5\uff0c\u8fd9\u8bf4\u660e\u5728\u4e0d\u65ad\u589e\u52a0\u67d0\u4e00\u79cd\u8981\u7d20\u65f6\uff0c\u8fd9\u79cd\u8981\u7d20\u5bf9\u5176\u4ed6\u8981\u7d20\u7684\u8fb9\u9645\u66ff\u4ee3\u7387\u65f6\u9012\u51cf\u7684</li> </ol> </li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4e3a\u4ec0\u4e48\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u5229\u6da6\u6700\u5927\u5316\u65e2\u53ef\u4ee5\u662f-mrmc-\u53c8\u53ef\u4ee5\u662f-pmc","title":"\u4e3a\u4ec0\u4e48\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u5229\u6da6\u6700\u5927\u5316\uff0c\u65e2\u53ef\u4ee5\u662f \\(MR=MC\\) \u53c8\u53ef\u4ee5\u662f \\(P=MC\\)","text":"<ol> <li>\uff08\u5b9a\u4e49\u540d\u8bcd\u89e3\u91ca\uff09\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u4e2d\uff0c\u6bcf\u4e2a\u5382\u5546\u7684\u5e02\u573a\u4efd\u989d\u90fd\u5fae\u4e0d\u8db3\u9053\uff0c\u90fd\u6ca1\u6709\u5b9a\u4ef7\u6743\uff0c\u4ef7\u683c\u7531\u5e02\u573a\u7ade\u4e89\u51b3\u5b9a\u3002\u800c\u7531\u4e8e\u5e02\u573a\u81ea\u7531\u8fdb\u51fa\uff0c\u4ea7\u54c1\u540c\u8d28\uff0c\u7ade\u4e89\u7684\u5747\u8861\u7ed3\u679c\u5c31\u662f\u6240\u6709\u5382\u5546\u90fd\u6ca1\u6709\u7ecf\u6d4e\u5229\u6da6\uff0c\u5373 \\(P=MC\\) \u53ef\u4ee5\u753b\u56fe</li> <li>\u5728\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u4e2d\uff0c\u5382\u5546\u8bd5\u56fe\u5b9e\u73b0\u5229\u6da6\u6700\u5927\u5316 \\(\\pi=TR-TC\\)\uff0c\u5373\u6c42\u6781\u503c\u70b9\uff0c\u6c42\u5bfc\u5f97\u5230 \\(MR=MC\\)</li> <li>\u6240\u4ee5\uff0c\u7efc\u5408\u4e0a\u8ff0\u6761\u4ef6\uff0c\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u4e2d\u5382\u5546\u7684\u5229\u6da6\u6700\u5927\u5316\uff0c\u65e2\u53ef\u4ee5\u662f \\(MR=MC\\) \u53c8\u53ef\u4ee5\u662f \\(P=MC\\)</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u753b\u56fe\u8bf4\u660e\u5b8c\u5168\u5784\u65ad\u5e02\u573a\u7684\u51c0\u798f\u5229\u635f\u5931","title":"\u753b\u56fe\u8bf4\u660e\u5b8c\u5168\u5784\u65ad\u5e02\u573a\u7684\u51c0\u798f\u5229\u635f\u5931","text":"<ol> <li>\u7531\u4e8e\u5784\u65ad\u5382\u5546\u5b9e\u73b0\u5229\u6da6\u6700\u5927\u5316\u5747\u8861\u4e3a \\(MR=MC\\)\uff0c\u5382\u5546\u4f1a\u9009\u62e9\u8fd9\u4e2a\u6761\u4ef6\u4e0b\u5bf9\u5e94\u7684\u4ef7\u683c \\(P\\) \u8fdb\u884c\u5b9a\u4ef7</li> <li>\u8fd9\u79cd\u5b9a\u4ef7\u4e0b\uff0c\u5784\u65ad\u5382\u5546\u62ac\u9ad8\u4e86\u5546\u54c1\u4ef7\u683c\uff0c\u867d\u7136\u6700\u5927\u5316\u4e86\u81ea\u8eab\u5229\u6da6\uff0c\u4f46\u662f\u63a0\u593a\u4e86\u6d88\u8d39\u8005\u5269\u4f59\uff0c\u5bf9\u793e\u4f1a\u798f\u5229\u9020\u6210\u635f\u5931</li> <li>\u5784\u65ad\u5382\u5546\u9650\u5236\u4e86\u4ea7\u54c1\u4ea7\u91cf\uff0c\u51cf\u5c11\u751f\u4ea7\u4f7f\u793e\u4f1a\u5931\u53bb\u8fd9\u90e8\u5206\u521b\u9020\u4ef7\u503c\u7684\u673a\u4f1a</li> <li>\u5728\u56fe\u4e2d\uff0c\u51c0\u798f\u5229\u635f\u5931\u8868\u73b0\u4e3a\u4e09\u89d2\u5f62\u9634\u5f71\u90e8\u5206\uff0c\u8868\u793a\u7684\u662f\u65e2\u4e0d\u5c5e\u4e8e\u5382\u5546\u4e5f\u4e0d\u5c5e\u4e8e\u6d88\u8d39\u8005\u7684\u793e\u4f1a\u603b\u4ef7\u503c\u635f\u5931</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5728\u89e3\u91ca\u6d88\u8d39\u8005\u5747\u8861\u65f6\u57fa\u6570\u6548\u7528\u7406\u8bba\u548c\u5e8f\u6570\u6548\u7528\u7406\u8bba\u7531\u4ec0\u4e48\u8054\u7cfb\u4e0e\u533a\u522b","title":"\u5728\u89e3\u91ca\u6d88\u8d39\u8005\u5747\u8861\u65f6\uff0c\u57fa\u6570\u6548\u7528\u7406\u8bba\u548c\u5e8f\u6570\u6548\u7528\u7406\u8bba\u7531\u4ec0\u4e48\u8054\u7cfb\u4e0e\u533a\u522b","text":"<ol> <li>\u533a\u522b<ol> <li>\u57fa\u6570\u6548\u7528\u7406\u8bba<ol> <li>\u8ba4\u4e3a\u6548\u7528\u53ef\u4ee5\u7528\u6570\u5b57\uff08\u6574\u6570\uff09\u8868\u793a\u5e76\u6bd4\u8f83\uff0c\u4ece\u800c\u901a\u8fc7\u8fb9\u9645\u6548\u7528\u6765\u8bf4\u660e\u6548\u7528\u6700\u5927\u5316</li> <li>\u6d88\u8d39\u8005\u5747\u8861\u6761\u4ef6\u4e3a\uff0c\u5f53\u6d88\u8d39\u8005\u5728\u6240\u6709\u5546\u54c1\u4e0a\u82b1\u7684\u6700\u540e\u4e00\u5143\u94b1\u5e26\u6765\u7684\u6548\u7528\u76f8\u540c\uff0c\u8ba1\u7b97\u7684\u6d88\u8d39\u8005\u5747\u8861\u4e3a \\(MU_X/MU_Y=P_X/P_Y\\)</li> </ol> </li> <li>\u5e8f\u6570\u6548\u7528\u7406\u8bba<ol> <li>\u8ba4\u4e3a\u6548\u7528\u53ea\u80fd\u901a\u8fc7\u6392\u5e8f\u8fdb\u884c\u91cf\u5316\u6bd4\u8f83\uff0c\u901a\u8fc7\u65e0\u5dee\u5f02\u66f2\u7ebf\u548c\u9884\u7b97\u7ea6\u675f\u7ebf\u6765\u8bf4\u660e</li> <li>\u6d88\u8d39\u8005\u5747\u8861\u70b9\u4e3a\u9884\u7b97\u7ea6\u675f\u7ebf\u548c\u65e0\u5dee\u5f02\u66f2\u7ebf\u7684\u552f\u4e00\u5207\u70b9\uff0c\u5373 \\(MRS_{X,Y}=-P_X/P_Y\\)</li> </ol> </li> </ol> </li> <li>\u8054\u7cfb<ol> <li>\u4e24\u8005\u90fd\u7528\u6765\u63cf\u8ff0\u6d88\u8d39\u8005\u6d88\u8d39\u5546\u54c1\u5e26\u6765\u7684\u6548\u7528\uff0c\u90fd\u53ef\u4ee5\u7528\u6765\u5206\u6790\u6d88\u8d39\u8005\u504f\u597d</li> <li>\u4e24\u8005\u5747\u628a\u6d88\u8d39\u8005\u884c\u4e3a\u7406\u60f3\u5316\u4e3a\u9884\u7b97\u6761\u4ef6\u65e2\u5b9a\u60c5\u51b5\u4e0b\u8ffd\u6c42\u6700\u5927\u5316\u6548\u7528\u7684\u8fc7\u7a0b</li> <li>\u4e24\u8005\u5f97\u51fa\u7684\u6d88\u8d39\u8005\u5747\u8861\u7ed3\u8bba\u662f\u7b49\u4ef7\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a \\(MU_X/MU_Y=\\Delta X / \\Delta Y=-MRS_{X, Y}=P_X/P_Y\\)</li> </ol> </li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5784\u65ad\u7ade\u4e89\u5e02\u573a\u6548\u7387\u4f4e\u4e8e\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u4e3a\u4ec0\u4e48\u5784\u65ad\u7ade\u4e89\u5e02\u5728\u73b0\u5b9e\u4e2d\u666e\u904d\u800c\u5927\u91cf\u5b58\u5728\u753b\u56fe\u5206\u6790","title":"\u5784\u65ad\u7ade\u4e89\u5e02\u573a\u6548\u7387\u4f4e\u4e8e\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\uff0c\u4e3a\u4ec0\u4e48\u5784\u65ad\u7ade\u4e89\u5e02\u5728\u73b0\u5b9e\u4e2d\u666e\u904d\u800c\u5927\u91cf\u5b58\u5728\uff08\u753b\u56fe\u5206\u6790\uff09","text":"<ol> <li>\u5784\u65ad\u7ade\u4e89\u5e02\u573a</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#19-20-\u79cb\u51ac","title":"19-20 \u79cb\u51ac","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4ea4\u53c9\u4ef7\u683c\u5f39\u6027\u7684\u6982\u5ff5-\u5982\u4f55\u901a\u8fc7\u4ea4\u53c9\u4ef7\u683c\u5f39\u6027\u6765\u5206\u6790\u4e24\u79cd\u5546\u54c1\u7684\u5173\u7cfb","title":"\u4ea4\u53c9\u4ef7\u683c\u5f39\u6027\u7684\u6982\u5ff5 \uff0c\u5982\u4f55\u901a\u8fc7\u4ea4\u53c9\u4ef7\u683c\u5f39\u6027\u6765\u5206\u6790\u4e24\u79cd\u5546\u54c1\u7684\u5173\u7cfb","text":"<ol> <li>\uff08\u6982\u5ff5\uff09\u4ea4\u53c9\u4ef7\u683c\u5f39\u6027\u63cf\u8ff0\u7684\u662f\u67d0\u79cd\u5546\u54c1\u4ef7\u683c\u53d8\u52a8\u5bf9\u53e6\u4e00\u79cd\u5546\u54c1\u5747\u8861\u4ea7\u91cf\u7684\u5f71\u54cd\uff0c\u8868\u793a\u4e3a \\(E_c=\\frac{dQ_A/Q_A}{dP_B/P_B}\\)</li> <li>\u5bf9\u4e8e AB \u4e24\u79cd\u5546\u54c1\uff0c\u8ba1\u7b97 A \u7684\u5747\u8861\u4ea7\u91cf\u5bf9 B \u7684\u4ef7\u683c\u7684\u5f39\u6027 \\(E_c\\)\uff0c\u5219<ol> <li>\u82e5 \\(E_c&gt;0\\)\uff0c\u8bf4\u660e B \u6da8\u4ef7\u4f1a\u5bfc\u81f4 A \u9500\u91cf\u63d0\u9ad8\uff0cAB \u4e92\u4e3a\u66ff\u4ee3\u54c1</li> <li>\u82e5 \\(E_c &lt;0\\)\uff0c\u8bf4\u660e B \u6da8\u4ef7\u4f1a\u5bfc\u81f4 A \u9500\u91cf\u964d\u4f4e\uff0cAB \u4e92\u4e3a\u4e92\u8865\u54c1</li> <li>\u82e5 \\(E_c=0\\)\uff0c\u5219 AB \u4e4b\u95f4\u6ca1\u6709\u5173\u8054\uff0cAB \u4e92\u4e3a\u65e0\u5173\u54c1</li> </ol> </li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5b8c\u5168\u7ade\u4e89\u548c\u5784\u65ad\u7ade\u4e89\u7684\u5f02\u540c","title":"\u5b8c\u5168\u7ade\u4e89\u548c\u5784\u65ad\u7ade\u4e89\u7684\u5f02\u540c","text":"<ol> <li>\u76f8\u540c\u70b9<ol> <li>\u5382\u5546\u6570\u91cf\u90fd\u5f88\u591a\uff0c\u5e02\u573a\u4efd\u989d\u5fae\u4e0d\u8db3\u9053</li> <li>\u5e02\u573a\u81ea\u7531\u8fdb\u51fa</li> <li>\u4e24\u4e2a\u5e02\u573a\u7684\u957f\u671f\u8d85\u989d\u5229\u6da6\u90fd\u4e3a 0\uff0c\u77ed\u671f\u8d85\u989d\u5229\u6da6\u90fd\u53ef\u6b63\u53ef\u8d1f\uff0c\u4e5f\u53ef\u4e3a 0</li> </ol> </li> <li>\u4e0d\u540c\u70b9<ol> <li>\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u4ea7\u54c1\u5b8c\u5168\u540c\u8d28\uff0c\u800c\u5784\u65ad\u7ade\u4e89\u5e02\u573a\u4ea7\u54c1\u5c5e\u4e8e\u540c\u7c7b\u4ea7\u54c1\uff0c\u4f46\u6709\u4e00\u5b9a\u5dee\u5f02</li> <li>\u5747\u8861\u6761\u4ef6\u4e0d\u540c<ol> <li>\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u7684\u4ef7\u683c\u7b49\u4e8e\u8fb9\u9645\u6210\u672c\uff0c\u5382\u5546\u6ca1\u6709\u7ecf\u6d4e\u5229\u6da6\uff1b\u5784\u65ad\u7ade\u4e89\u5e02\u573a\u7684\u5b9a\u4ef7\u53ef\u4ee5\u7565\u9ad8\u4e8e\u8fb9\u9645\u6210\u672c\uff0c\u5382\u5546\u53ef\u4ee5\u6709\u7ecf\u6d4e\u5229\u6da6</li> <li>\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u7684\u4ea7\u91cf\u6bd4\u5784\u65ad\u7ade\u4e89\u5e02\u573a\u5927</li> </ol> </li> <li>\u5b8c\u5168\u7ade\u4e89\u5e02\u573a\u7684\u7ecf\u6d4e\u6548\u7387\u6bd4\u5784\u65ad\u7ade\u4e89\u5e02\u573a\u9ad8</li> </ol> </li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4ec0\u4e48\u662f\u7eb3\u4ec0\u5747\u8861-\u7eb3\u4ec0\u5747\u8861\u548c\u5360\u4f18\u7b56\u7565\u5747\u8861\u6709\u4ec0\u4e48\u4e0d\u540c\u4e4b\u5904","title":"\u4ec0\u4e48\u662f\u7eb3\u4ec0\u5747\u8861 \uff0c\u7eb3\u4ec0\u5747\u8861\u548c\u5360\u4f18\u7b56\u7565\u5747\u8861\u6709\u4ec0\u4e48\u4e0d\u540c\u4e4b\u5904","text":"<ol> <li>\u7eb3\u4ec0\u5747\u8861\u662f\u535a\u5f08\u4e2d\u7684\u4e00\u79cd\u7b56\u7565\u7ec4\u5408\uff0c\u4efb\u4f55\u53c2\u4e0e\u4eba\u5355\u72ec\u6539\u53d8\u7b56\u7565\u90fd\u4e0d\u4f1a\u5f97\u5230\u66f4\u9ad8\u6536\u76ca\uff0c\u7ec4\u5408\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7b56\u7565\u90fd\u662f\u5bf9\u535a\u5f08\u5bf9\u624b\u7b56\u7565\u7684\u6700\u4f18\u53cd\u5e94 \u5173\u952e\u5728\u4e8e\u8ba9\u522b\u4eba\u6ca1\u6709\u597d\u5904\u62ff</li> <li>\u5360\u4f18\u5747\u8861\u6307\u7684\u662f\uff0c\u65e0\u8bba\u5bf9\u624b\u91c7\u7528\u4ec0\u4e48\u7b56\u7565\uff0c\u90fd\u80fd\u7ed9\u53c2\u4e0e\u8005\u5e26\u6765\u6700\u9ad8\u6536\u76ca\u7684\u7b56\u7565 \u5360\u4f18\u5747\u8861_\u767e\u5ea6\u767e\u79d1 (baidu.com)</li> <li>\u4e24\u8005\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u5b9a\u4e49\u7684\u4e0d\u540c\uff0c\u7531\u6b64\u4e5f\u53ef\u4ee5\u63a8\u65ad\u51fa\uff0c\u5360\u4f18\u5747\u8861\u4e00\u5b9a\u662f\u7eb3\u4ec0\u5747\u8861\uff0c\u4f46\u7eb3\u4ec0\u5747\u8861\u4e0d\u4e00\u5b9a\u662f\u5360\u4f18\u5747\u8861</li> <li>\u5360\u4f18\u5747\u8861\uff1a\u201c\u4e0d\u7ba1\u4f60\u600e\u4e48\u505a\uff0c\u6211\u6240\u505a\u7684\u90fd\u662f\u6211\u80fd\u505a\u5f97\u6700\u597d\u7684\u3002\u201d\u7eb3\u4ec0\u5747\u8861\uff1a\u201c\u7ed9\u5b9a\u4f60\u7684\u505a\u6cd5\u540e\uff0c\u6211\u6240\u505a\u7684\u662f\u6211\u80fd\u505a\u5f97\u6700\u597d\u7684\u3002\u201d</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u67d0\u7f51\u7ad9\u901a\u8fc7\u8ba9\u4e58\u5ba2\u81ea\u5df1\u9009\u62e9\u673a\u7968\u7684\u4ef7\u683c-\u7136\u540e\u822a\u53f8\u6839\u636e\u8fd9\u4e9b\u4fe1\u606f\u6765\u5b89\u6392\u822a\u73ed\u4e00\u65e6\u88ab\u5b89\u6392\u4e0a\u5c31\u65e0\u6cd5\u9000\u7968\u5206\u6790\u8fd9\u4e2a\u7b56\u7565\u7684\u53ef\u884c\u6027","title":"\u67d0\u7f51\u7ad9\u901a\u8fc7\u8ba9\u4e58\u5ba2\u81ea\u5df1\u9009\u62e9\u673a\u7968\u7684\u4ef7\u683c \uff0c\u7136\u540e\u822a\u53f8\u6839\u636e\u8fd9\u4e9b\u4fe1\u606f\u6765\u5b89\u6392\u822a\u73ed\uff0c\u4e00\u65e6\u88ab\u5b89\u6392\u4e0a\u5c31\u65e0\u6cd5\u9000\u7968\u3002\u5206\u6790\u8fd9\u4e2a\u7b56\u7565\u7684\u53ef\u884c\u6027\u3002","text":"<ol> <li>\u6709\u5229\u4e8e\u4fe1\u606f\u900f\u660e\u3002\u822a\u7a7a\u516c\u53f8\u53ef\u4ee5\u901a\u8fc7\u4e58\u5ba2\u7684\u62a5\u4ef7\u6765\u4e86\u89e3\u5e02\u573a\u9700\u6c42\u548c\u4ef7\u683c\u63a5\u53d7\u5ea6\uff0c\u4ece\u800c\u4f18\u5316\u822a\u73ed\u5b89\u6392\uff0c\u51cf\u5c11\u7a7a\u5ea7\u7387\uff0c\u63d0\u9ad8\u822a\u73ed\u7684\u7ecf\u6d4e\u6548\u76ca</li> <li>\u4e0d\u540c\u4e58\u5ba2\u7fa4\u4f53\u5bf9\u673a\u7968\u7684\u9700\u6c42\u5f39\u6027\u4e0d\u540c\uff0c\u613f\u610f\u652f\u4ed8\u7684\u4ef7\u683c\u4e5f\u4e0d\u540c\uff0c\u8fd9\u79cd\u7b56\u7565\u53ef\u4ee5\u5438\u5f15\u9700\u6c42\u5f39\u6027\u9ad8\u7684\u4e58\u5ba2\uff0c\u540c\u65f6\u4e5f\u4e0d\u662f\u53bb\u613f\u610f\u652f\u4ed8\u9ad8\u4ef7\u7684\u4e58\u5ba2\uff0c\u5b9e\u9645\u4e0a\u662f\u5b9e\u884c\u4e00\u7ea7\u4ef7\u683c\u6b67\u89c6\uff0c\u6709\u5229\u4e8e\u822a\u7a7a\u516c\u53f8\u5229\u6da6\u6700\u5927\u5316</li> <li>\u8fd9\u79cd\u7b56\u7565\u80fd\u591f\u5438\u5f15\u66f4\u591a\u4e58\u5ba2\u6765\u53c2\u4e0e\uff0c\u53c2\u4e0e\u7684\u4eba\u6570\u8d8a\u591a\uff0c\u6536\u96c6\u5230\u7684\u6570\u636e\u4e5f\u8d8a\u6709\u4ef7\u503c</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u8be5\u7f51\u7ad9\u53c8\u9488\u5bf9\u6c7d\u6cb9\u91c7\u7528\u4e86\u540c\u6837\u7684\u7b56\u7565-\u5374\u5931\u8d25\u4e86\u8bf7\u5206\u6790\u5931\u8d25\u7684\u539f\u56e0","title":"\u8be5\u7f51\u7ad9\u53c8\u9488\u5bf9\u6c7d\u6cb9\u91c7\u7528\u4e86\u540c\u6837\u7684\u7b56\u7565 \uff0c\u5374\u5931\u8d25\u4e86\uff0c\u8bf7\u5206\u6790\u5931\u8d25\u7684\u539f\u56e0","text":"<ol> <li>\u4ea7\u54c1\u7684\u7279\u6027\u4e0d\u540c\uff0c\u6c7d\u6cb9\u4f5c\u4e3a\u65e5\u5e38\u5fc5\u9700\u54c1\uff0c\u9700\u6c42\u5f39\u6027\u5c0f\uff0c\u9700\u6c42\u91cf\u53d8\u5316\u4e0d\u5927\uff0c\u4e14\u6c7d\u6cb9\u5b58\u50a8\u56f0\u96be\uff0c\u666e\u901a\u6d88\u8d39\u8005\u4e0d\u4f1a\u56e0\u4e3a\u4ef7\u683c\u6ce2\u52a8\u800c\u5927\u91cf\u56e4\u79ef</li> <li>\u6c7d\u6cb9\u5e02\u573a\u4ef7\u683c\u900f\u660e\u5ea6\u9ad8\uff0c\u6c7d\u6cb9\u4ef7\u683c\u53d7\u5168\u7403\u5f71\u54cd\uff0c\u4e5f\u53d7\u653f\u5e9c\u8c03\u63a7\uff0c\u6d88\u8d39\u8005\u4e0d\u4f1a\u613f\u610f\u9884\u8ba2\u6c7d\u6cb9\uff0c\u66f4\u4e0d\u4f1a\u613f\u610f\u4ee5\u6bd4\u5f53\u524d\u5e02\u573a\u4ef7\u683c\u9ad8\u7684\u4ef7\u683c\u9884\u8ba2\u6c7d\u6cb9\uff0c\u8fd9\u6837\u7684\u7b56\u7565\u9650\u5236\u4e86\u6c7d\u6cb9\u516c\u53f8\u7684\u5229\u6da6\u7a7a\u95f4</li> <li>\u590d\u6742\u7684\u51fa\u4ef7\u8d2d\u4e70\u7b56\u7565\u4e0d\u7b26\u5408\u6d88\u8d39\u8005\u8d2d\u4e70\u6c7d\u6cb9\u7684\u4e60\u60ef\uff0c\u6d88\u8d39\u8005\u51fa\u4ef7\u7684\u610f\u613f\u8f83\u4f4e</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#18-19-\u6625\u590f","title":"18-19 \u6625\u590f","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7b80\u8ff0\u89c4\u6a21\u7ecf\u6d4e\u4e0e\u89c4\u6a21\u4e0d\u7ecf\u6d4e","title":"\u7b80\u8ff0\u89c4\u6a21\u7ecf\u6d4e\u4e0e\u89c4\u6a21\u4e0d\u7ecf\u6d4e","text":"<ol> <li>\u751f\u4ea7\u8981\u7d20\u540c\u6bd4\u4f8b\u589e\u52a0\u65f6\uff0c\u82e5\u751f\u4ea7\u5e73\u5747\u6210\u672c<ol> <li>\u4e0b\u964d\uff0c\u5219\u4f01\u4e1a\u5904\u4e8e\u89c4\u6a21\u7ecf\u6d4e\u72b6\u6001</li> <li>\u4e0a\u5347\uff0c\u5219\u4f01\u4e1a\u5904\u4e8e\u89c4\u6a21\u4e0d\u7ecf\u6d4e\u72b6\u6001</li> <li>\u4e0d\u53d8\uff0c\u5219\u4f01\u4e1a\u5904\u4e8e\u89c4\u6a21\u6536\u76ca\u4e0d\u53d8\u72b6\u6001\uff0c\u4e5f\u5373\u6700\u9002\u89c4\u6a21</li> </ol> </li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5784\u65ad\u7ade\u4e89\u5382\u5546\u957f\u671f\u5747\u8861\u6761\u4ef6\u7684\u63a8\u5bfc","title":"\u5784\u65ad\u7ade\u4e89\u5382\u5546\u957f\u671f\u5747\u8861\u6761\u4ef6\u7684\u63a8\u5bfc","text":"<ol> <li>\u5bf9\u4e8e\u5784\u65ad\u7ade\u4e89\u5e02\u573a\uff0c\u7531\u4e8e\u5382\u5546\u53ef\u4ee5\u81ea\u7531\u8fdb\u5165\uff0c\u5982\u679c\u957f\u671f\u5747\u8861\u5229\u6da6\u5927\u4e8e 0\uff0c\u5219\u4f1a\u6709\u65b0\u7684\u5382\u5546\u8fdb\u5165\u5e02\u573a\u74dc\u5206\u5229\u6da6\uff0c\u5982\u679c\u957f\u671f\u5747\u8861\u5229\u6da6\u5c0f\u4e8e 0\uff0c\u5219\u4f1a\u6709\u5382\u5546\u9000\u51fa\u5e02\u573a\u3002\u56e0\u6b64\uff0c\u5784\u65ad\u7ade\u4e89\u5382\u5546\u7684\u957f\u671f\u5747\u8861\u5229\u6da6\u4e3a 0</li> <li>\u753b\u56fe\u5206\u6790\uff08\u53ef\u9009\uff1f\uff09 </li> <li>\u56e0\u6b64\uff0c\u6839\u636e\u5229\u6da6\u6700\u5927\u5316\u6709 \\(MR=LMC\\)</li> <li>\u540c\u65f6\uff0c\u7531\u4e8e\u6ca1\u6709\u8d85\u989d\u5229\u6da6\uff0c\\(P=LAC=AR\\)</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u8fb9\u9645\u66ff\u4ee3\u7387\u4e3a\u4ec0\u4e48\u9012\u51cf","title":"\u8fb9\u9645\u66ff\u4ee3\u7387\u4e3a\u4ec0\u4e48\u9012\u51cf","text":"<ol> <li>\u8fb9\u9645\u66ff\u4ee3\u7387\uff08MRS\uff09\u6307\u7684\u662f\u5728\u7ef4\u6301\u603b\u6548\u7528\uff08\u4ea7\u91cf\uff09\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u79cd\u7269\u54c1\u589e\u52a0\u5355\u4f4d\u6570\u91cf\u4f7f\u5f97\u5176\u4ed6\u7269\u54c1\u51cf\u5c11\u7684\u6570\u91cf\u7684\u6bd4\u7387\uff0c\\(MRS_{X, Y}=-\\frac{\\Delta Y}{\\Delta X}\\)</li> <li>\u5f53 X \u4e0d\u65ad\u589e\u52a0\u65f6\uff0c\u7531\u4e8e\u5b58\u5728\u6700\u9002\u7684 X \u4e0e Y \u7ec4\u5408\uff0cX \u4ea7\u751f\u7684\u8fb9\u9645\u6548\u7528\u4e0d\u65ad\u51cf\u5c11\uff0c\u6240\u4ee5\u589e\u52a0\u4e00\u5355\u4f4d X \u80fd\u591f\u66ff\u4ee3\u7684 Y \u7684\u6570\u91cf\u4e0d\u65ad\u51cf\u5c11\uff0c\u6240\u4ee5 X \u5bf9 Y \u7684\u8fb9\u9645\u66ff\u4ee3\u7387\u9012\u51cf</li> <li>\u5728\u65e0\u5dee\u5f02\u66f2\u7ebf\u56fe\u4e2d\uff0c\u8868\u73b0\u4e3a\u51f8\u5411\u539f\u70b9\uff0c\u4e0e\u5750\u6807\u8f74\u4e0d\u76f8\u4ea4\u7684\u66f2\u7ebf\uff0c\u5728\u4e00 X \u589e\u5927\u65f6\u659c\u7387\u9010\u6e10\u51cf\u5c0f</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5355\u4e2a\u751f\u4ea7\u8981\u7d20\u7684\u8fb9\u9645\u62a5\u916c\u9012\u51cf\u4e0e\u89c4\u6a21\u62a5\u916c\u9012\u589e\u77db\u76fe\u5417-\u8bf4\u660e\u7406\u7531","title":"\u5355\u4e2a\u751f\u4ea7\u8981\u7d20\u7684\u8fb9\u9645\u62a5\u916c\u9012\u51cf\u4e0e\u89c4\u6a21\u62a5\u916c\u9012\u589e\u77db\u76fe\u5417 \uff1f\u8bf4\u660e\u7406\u7531","text":"<ol> <li>\u4e0d\u77db\u76fe</li> <li>\u5355\u4e2a\u751f\u4ea7\u8981\u7d20\u7684\u8fb9\u9645\u62a5\u916c\u9012\u51cf\u6307\u7684\u662f\uff0c\u5728\u5176\u4ed6\u751f\u4ea7\u8981\u7d20\u6295\u5165\u4e00\u5b9a\u65f6\uff0c\u4e0d\u65ad\u6295\u5165\u5355\u4e2a\u751f\u4ea7\u8981\u7d20\u5bf9\u603b\u4ea7\u91cf\u589e\u52a0\u7684\u8fb9\u9645\u4f5c\u7528\u9012\u51cf\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e0d\u540c\u751f\u4ea7\u8981\u7d20\u4e4b\u95f4\u5b58\u5728\u6700\u4f18\u914d\u6bd4\uff0c\u8d85\u8fc7\u8fd9\u4e2a\u914d\u6bd4\u4f1a\u5bfc\u81f4\u6548\u7387\u964d\u4f4e</li> <li>\u89c4\u6a21\u62a5\u916c\u9012\u51cf\u6307\u7684\u662f\uff0c\u5728\u6700\u9002\u751f\u4ea7\u8981\u7d20\u914d\u6bd4\u4e0b\uff0c\u7b49\u6bd4\u4f8b\u5730\u589e\u52a0\u6bcf\u4e2a\u8981\u7d20\u7684\u6295\u5165\u91cf\u65f6\uff0c\u5e73\u5747\u6210\u672c\u5347\u9ad8\uff0c\u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u4f01\u4e1a\u7684\u89c4\u6a21\u8d85\u8fc7\u6700\u9002\u89c4\u6a21\uff0c\u53d7\u5230\u884c\u653f\u7ba1\u7406\u6548\u7387\u7b49\u56e0\u7d20\u7684\u9650\u5236\u65e0\u6cd5\u7ee7\u7eed\u63d0\u5347\u89c4\u6a21\u62a5\u916c</li> <li>\u6240\u4ee5\uff0c\u8fd9\u4e24\u79cd\u73b0\u8c61\u5e76\u4e0d\u77db\u76fe\uff0c\u56e0\u4e3a\u5b83\u4eec\u672c\u8d28\u4e0a\u5728\u63cf\u8ff0\u5b8c\u5168\u4e0d\u540c\u7684\u60c5\u666f</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u957f\u671f\u5e73\u5747\u6210\u672c\u7684\u63a8\u5bfc","title":"\u957f\u671f\u5e73\u5747\u6210\u672c\u7684\u63a8\u5bfc","text":"<ol> <li>\u957f\u671f\u751f\u4ea7\u51fd\u6570 \\(Q=F(L, K)\\)</li> <li>\u957f\u671f\u751f\u4ea7\u6210\u672c \\(LTC=wL+rK\\)</li> <li>\u6839\u636e \\(MP_L/w=MP_K/r\\) \u7684\u539f\u5219\u5f97\u5230 \\(F'_L/w=F'_K/r\\)\uff0c\u5f97\u5230\u6700\u4f18\u8981\u7d20\u914d\u6bd4\u4e0b L \u4e0e K \u7684\u5173\u7cfb</li> <li>\u5e26\u56de 1 \u5f0f\uff0c\u5f97\u5230 \\(L=f(Q),\\;K=g(Q)\\)</li> <li>\u6240\u4ee5 \\(LAC=LTC/Q=(f(Q)+g(Q))/Q\\)</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u8bba\u63d0\u9ad8\u5de5\u8d44\u80fd\u5426\u589e\u52a0\u4e2a\u4eba\u52b3\u52a8\u91cf","title":"\u8bba\u63d0\u9ad8\u5de5\u8d44\u80fd\u5426\u589e\u52a0\u4e2a\u4eba\u52b3\u52a8\u91cf","text":"<ol> <li>\u4ef7\u683c\u6548\u5e94\u5305\u62ec\u4e24\u79cd\u6548\u5e94<ol> <li>\u6536\u5165\u6548\u5e94\uff1a\u5176\u4ed6\u6761\u4ef6\u4e0d\u53d8\uff0c\u4e00\u79cd\u5546\u54c1\u4ef7\u683c\u53d8\u52a8\u5bfc\u81f4\u6d88\u8d39\u8005\u5b9e\u9645\u6536\u5165\u53d1\u751f\u53d8\u5316\uff0c\u4ece\u800c\u6d88\u8d39\u8005\u5bf9\u8fd9\u79cd\u5546\u54c1\u7684\u9700\u6c42\u53d1\u751f\u53d8\u5316</li> <li>\u66ff\u4ee3\u6548\u5e94\uff1a\u5176\u4ed6\u6761\u4ef6\u4e0d\u53d8\uff0c\u4e00\u79cd\u5546\u54c1\u4ef7\u683c\u7684\u53d8\u52a8\u5bfc\u81f4\u4e24\u79cd\u5546\u54c1\u4e4b\u95f4\u7684\u76f8\u5bf9\u4ef7\u683c\u6bd4\u4f8b\u53d1\u751f\u53d8\u5316\uff0c\u6539\u53d8\u6d88\u8d39\u8005\u7684\u9009\u62e9\u503e\u5411\uff0c\u4ece\u800c\u6539\u53d8\u5bf9\u8fd9\u79cd\u5546\u54c1\u7684\u9700\u6c42</li> </ol> </li> <li>\u8fd9\u4e2a\u60c5\u666f\u4e2d\uff0c\u5de5\u4f5c\u548c\u95f2\u6687\u5c31\u662f\u4e24\u79cd\u5546\u54c1\uff0c\u5de5\u4f5c\u8005\u7684\u65f6\u95f4\u5c31\u662f\u603b\u9884\u7b97\u3002\u5de5\u8d44\u63d0\u9ad8\u65f6\uff0c\u6536\u5165\u6548\u5e94\u4f1a\u4f7f\u5f97\u5de5\u4eba\u5de5\u4f5c\u66f4\u957f\u65f6\u95f4\u4ee5\u5f97\u5230\u66f4\u591a\u5de5\u8d44\uff0c\u540c\u65f6\u66ff\u4ee3\u6548\u5e94\u4f1a\u51cf\u5c11\u5de5\u4eba\u5de5\u4f5c\u7684\u65f6\u95f4\u4ee5\u6362\u53d6\u66f4\u591a\u95f2\u6687\uff0c\u4e00\u822c\u53ef\u4ee5\u8868\u793a\u6210\u5982\u4e0b\u7684\u56fe\u7247</li> <li>\u6240\u4ee5\uff0c\u63d0\u9ad8\u5de5\u8d44\u4e0d\u4e00\u5b9a\u80fd\u591f\u589e\u52a0\u4e2a\u4eba\u52b3\u52a8\u91cf<ol> <li>\u5982\u679c\u6536\u5165\u6548\u5e94\u5927\u4e8e\u66ff\u4ee3\u6548\u5e94\uff0c\u5de5\u4eba\u4f1a\u589e\u52a0\u52b3\u52a8\u91cf</li> <li>\u5982\u679c\u66ff\u4ee3\u6548\u5e94\u5927\u4e8e\u6536\u5165\u6548\u5e94\uff0c\u5de5\u4eba\u4f1a\u51cf\u5c11\u52b3\u52a8\u91cf</li> <li>\u6839\u636e\u56fe\u7247\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u5728\u5de5\u8d44\u8f83\u4f4e\u65f6\u63d0\u9ad8\u5de5\u8d44\uff0c\u53ef\u4ee5\u589e\u52a0\u5de5\u4eba\u52b3\u52a8\u91cf\uff1b\u5728\u5de5\u8d44\u8f83\u9ad8\u65f6\u63d0\u9ad8\u5de5\u8d44\uff0c\u4f1a\u51cf\u5c11\u5de5\u4eba\u52b3\u52a8\u91cf</li> </ol> </li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u867d\u7136\u5f88\u9ad8\u7684\u56fa\u5b9a\u6210\u672c\u65f6\u5382\u5546\u4e8f\u635f\u7684\u539f\u56e0\u4f46\u6c38\u8fdc\u4e0d\u4f1a\u662f\u5382\u5546\u505c\u4e1a\u7684\u539f\u56e0\u4f60\u540c\u610f\u8fd9\u79cd\u8bf4\u6cd5\u5417\u8bf7\u7ed9\u51fa\u7406\u7531","title":"\u201c\u867d\u7136\u5f88\u9ad8\u7684\u56fa\u5b9a\u6210\u672c\u65f6\u5382\u5546\u4e8f\u635f\u7684\u539f\u56e0\uff0c\u4f46\u6c38\u8fdc\u4e0d\u4f1a\u662f\u5382\u5546\u505c\u4e1a\u7684\u539f\u56e0\u201d\u4f60\u540c\u610f\u8fd9\u79cd\u8bf4\u6cd5\u5417\uff0c\u8bf7\u7ed9\u51fa\u7406\u7531","text":"<ul> <li>\u524d\u9762\u6709\u8fc7</li> <li>\u4e00\u5b9a\u8981\u753b\u56fe\uff0c\u8bf4\u660e\u767d\u751f\u4ea7\u66f2\u7ebf\u600e\u4e48\u5206\u5e03\u7684</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#17-18-\u6625\u590f","title":"17-18 \u6625\u590f","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u653f\u5e9c\u5bf9\u4f4f\u623f\u8fdb\u884c\u4ef7\u683c\u9650\u5236\u4f1a\u53d1\u751f\u4ec0\u4e48\u6548\u5e94\u8981\u753b\u56fe-\u524d\u9762\u6709\u8fc7","title":"\u653f\u5e9c\u5bf9\u4f4f\u623f\u8fdb\u884c\u4ef7\u683c\u9650\u5236\u4f1a\u53d1\u751f\u4ec0\u4e48\u6548\u5e94\u8981\u753b\u56fe \u524d\u9762\u6709\u8fc7","text":"<ul> <li>\u753b\u56fe\uff0c\u753b\u51fa\u4ef7\u683c\u4f4e\u4e8e\u4f9b\u9700\u5747\u8861\u4ef7\u683c</li> <li>\u8bf4\u660e\u9650\u5236\u4ef7\u683c\u7684\u542b\u4e49\uff1a\u653f\u5e9c\u4e3a\u4e86\u9632\u6b62\u4ef7\u683c\u4e0a\u5347\uff0c\u8bbe\u7f6e\u7684\u4f4e\u4e8e\u5e02\u573a\u5747\u8861\u4ef7\u683c\u7684\u4ef7\u683c\u4e0a\u9650</li> <li>\u5f71\u54cd\uff1a\u4f4f\u623f\u4f9b\u4e0d\u5e94\u6c42\uff0c\u6392\u961f\u8d2d\u623f\uff0c</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u53d1\u6563\u86db\u7f51\u7684\u539f\u56e0\u8981\u753b\u56fe","title":"\u53d1\u6563\u86db\u7f51\u7684\u539f\u56e0\u8981\u753b\u56fe","text":"<ul> <li>\u753b\u56fe\uff0c\u4e09\u79cd\u56fe\uff0c\u5e76\u7ed9\u51fa\u6570\u5b66\u8868\u8fbe\u5f0f \\(Q_d^t=f(P_t),\\;Q_s^t=g(P_{t-1})\\)</li> <li>\u86db\u7f51\u6a21\u578b\u662f\u5bf9\u6709\u4e00\u5b9a\u751f\u4ea7\u5468\u671f\u5546\u54c1\u7684\u4ef7\u683c\u548c\u4ea7\u91cf\u5931\u53bb\u5747\u8861\u7684\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u5e02\u573a\u6ce2\u52a8\u7684\u52a8\u6001\u5206\u6790</li> <li>\u6839\u636e\u56fe\u50cf\uff0c\u5f53\u4e14\u4ec5\u5f53\u4f9b\u7ed9\u66f2\u7ebf\u7684\u659c\u7387\u7edd\u5bf9\u503c\u5c0f\u4e8e\u9700\u6c42\u66f2\u7ebf\u659c\u7387\u7684\u7edd\u5bf9\u503c\u65f6\uff0c\u5373\u4f9b\u7ed9\u4ef7\u683c\u5f39\u6027\u5927\u4e8e\u9700\u6c42\u4ef7\u683c\u5f39\u6027\u65f6\uff0c\u86db\u7f51\u6a21\u578b\u4f1a\u53d1\u6563\uff0c\u5e02\u573a\u6ce2\u52a8\u5e45\u5ea6\u53d8\u5927</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5382\u5546\u5728\u65e2\u5b9a\u6210\u672c\u4e0b\u5b9e\u73b0\u6700\u5927\u4ea7\u91cf\u7684\u6700\u662f\u8981\u7d20\u7ec4\u5408","title":"\u5382\u5546\u5728\u65e2\u5b9a\u6210\u672c\u4e0b\u5b9e\u73b0\u6700\u5927\u4ea7\u91cf\u7684\u6700\u662f\u8981\u7d20\u7ec4\u5408","text":"<ol> <li>\u751f\u4ea7\u51fd\u6570 \\(Q=f(x_1, x_2, x_3, \\dots, x_n)\\)</li> <li>\u6210\u672c\u51fd\u6570 \\(C=P_1 x_1+P_2 x_2+\\dots+P_nx_n\\) \u4e3a\u5b9a\u503c</li> <li>\u4f7f\u7528\u62c9\u683c\u6717\u65e5\u4e58\u6570\u6cd5 \\(L(x_1, x_2, x_3, \\dots, x_n, \\lambda)=f(x_1, x_2, x_3, \\dots, x_n)+\\lambda(P_1x_1+P_2x_2+\\dots+P_nx_n-C)\\)</li> <li>\u4e00\u9636\u6761\u4ef6 \\(\\frac{\\partial L}{\\partial x_1}-\\lambda P_1 = \\frac{\\partial L}{\\partial x_2}-\\lambda P_2 = \\dots = \\frac{\\partial L}{\\partial x_n}=P_1x_1+\\dots+P_nx_n-C=0\\)</li> <li>\u7531\u4e8e \\(\\frac{\\partial L}{\\partial x_i}=\\frac{\\partial Q}{\\partial x_i}=MP_{i}\\)</li> <li>\u6240\u4ee5\u6700\u4f18\u6761\u4ef6 \\(MP_1/P_1=MP_2/P 2=\\dots=MP_n/P_n\\)</li> <li>\u5f97\u5230 \\(x\\) \u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5e26\u5165 2 \u5f0f\u6c42\u5f97\u6240\u6709\u8981\u7d20\u7684\u6295\u5165</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u63a8\u5bfc\u5b8c\u5168\u7ade\u4e89\u5382\u5546\u7684\u77ed\u671f\u4f9b\u7ed9\u8981\u753b\u56fe","title":"\u63a8\u5bfc\u5b8c\u5168\u7ade\u4e89\u5382\u5546\u7684\u77ed\u671f\u4f9b\u7ed9\u8981\u753b\u56fe","text":"<ul> <li>\u5229\u6da6\u6700\u5927\u5316\u6761\u4ef6 \\(P=MR=SMC\\)</li> <li>\u505c\u6b62\u8425\u4e1a\u70b9 \\(P=SMC=AVC_{min}\\)<ul> <li>\u5206\u7c7b\u5206\u6790\u4e00\u4e0b</li> </ul> </li> <li>\u753b\u51fa\u6298\u7ebf\uff08\u66f2\u7ebf\uff09</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u56fe\u793a\u65af\u5a01\u9f50\u6a21\u578b-\u5fae\u89c207-\u5784\u65ad\u7ade\u4e89\u4e0e\u5be1\u5934\u5784\u65ad1-page-31","title":"\u56fe\u793a\u65af\u5a01\u9f50\u6a21\u578b \u5fae\u89c207 \u5784\u65ad\u7ade\u4e89\u4e0e\u5be1\u5934\u5784\u65ad(1), page 31","text":"<ol> <li>\uff08\u89e3\u91ca\uff09\u65af\u5a01\u9f50\u6a21\u578b\u5047\u8bbe\u5be1\u5934\u4f01\u4e1a\u964d\u4f4e\u4ef7\u683c\uff0c\u5176\u4ed6\u4f01\u4e1a\u4e5f\u4f1a\u8ddf\u7740\u964d\u4f4e\u4ef7\u683c\uff1b\u5be1\u5934\u4f01\u4e1a\u63d0\u9ad8\u4ef7\u683c\uff0c\u5176\u4ed6\u4f01\u4e1a\u7ef4\u6301\u539f\u6765\u7684\u4ef7\u683c\u3002\u56e0\u6b64\uff0c\u5be1\u5934\u9762\u4e34\u7684\u9700\u6c42\u66f2\u7ebf\u662f\u626d\u6298\u7684\uff0c\u4ef7\u683c\u63d0\u9ad8\u65f6\u9700\u6c42\u4e0b\u964d\u591a\uff0c\u4ef7\u683c\u964d\u4f4e\u65f6\u9700\u6c42\u589e\u52a0\u5c11</li> <li>\uff08\u89e3\u91ca\uff09\u65af\u5a01\u9f50\u6a21\u578b\u63d0\u51fa\u4ef7\u683c\u521a\u6027\uff0c\u6307\u7684\u662f\u5be1\u5934\u5784\u65ad\u5e02\u573a\u4e0a\u7684\u4ef7\u683c\u6bd4\u8f83\u7a33\u5b9a\uff0c\u6210\u672c\u548c\u9700\u6c42\u5728\u4e00\u5b9a\u8303\u56f4\u7684\u53d8\u5316\u4e0d\u4f1a\u5f15\u8d77\u4ef7\u683c\u53d8\u5316</li> <li>\u7531\u4e8e\u5229\u6da6\u6700\u5927\u5316\u6761\u4ef6 \\(MC=MR=P(1+1/E_d)\\) \u5f97\u5230 \\(P=MC/(1+1/E_d)\\)\uff0c\u6240\u4ee5\u5728\u9700\u6c42\u66f2\u7ebf\u626d\u6298\u5904\uff0c\u4ef7\u683c\u4f1a\u53d1\u751f\u95f4\u65ad</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5bf9\u4e8e\u7a77\u4eba\u6765\u8bf4\u653f\u5e9c\u53d1\u653e\u73b0\u91d1\u8fd8\u662f\u7b49\u989d\u98df\u54c1\u5238","title":"\u5bf9\u4e8e\u7a77\u4eba\u6765\u8bf4\uff0c\u653f\u5e9c\u53d1\u653e\u73b0\u91d1\u8fd8\u662f\u7b49\u989d\u98df\u54c1\u5238","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5784\u65ad\u5e02\u573a\u7ecf\u6d4e\u6548\u7387\u4f4e\u4e3a\u4ec0\u4e48\u5784\u65ad\u7ade\u4e89\u5e02\u573a\u5374\u5f88\u666e\u904d\u8981\u753b\u56fe","title":"\u5784\u65ad\u5e02\u573a\u7ecf\u6d4e\u6548\u7387\u4f4e\uff0c\u4e3a\u4ec0\u4e48\u5784\u65ad\u7ade\u4e89\u5e02\u573a\u5374\u5f88\u666e\u904d\u8981\u753b\u56fe","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#17-18-\u6625\u590f\u671f\u4e2d","title":"17-18 \u6625\u590f\u671f\u4e2d","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5206\u6790\u653f\u5e9c\u5b9e\u884c\u4ef7\u683c\u9650\u5236\u7684\u540e\u679c\u753b\u56fe","title":"\u5206\u6790\u653f\u5e9c\u5b9e\u884c\u4ef7\u683c\u9650\u5236\u7684\u540e\u679c\u753b\u56fe","text":"<ul> <li>\u4ec0\u4e48\u662f\u4ef7\u683c\u9650\u5236</li> <li>\u5bfc\u81f4\u4f9b\u4e0d\u5e94\u6c42\uff0c\u6392\u961f\uff0c\u77ed\u7f3a\uff0c\u9ed1\u5e02\u4ea4\u6613\uff0c\u5f3a\u8feb\u66ff\u4ee3</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7528\u65e0\u5dee\u5f02\u66f2\u7ebf\u5206\u6790\u6d88\u8d39\u8005\u5747\u8861\u7684\u5b9e\u73b0\u8981\u753b\u56fe","title":"\u7528\u65e0\u5dee\u5f02\u66f2\u7ebf\u5206\u6790\u6d88\u8d39\u8005\u5747\u8861\u7684\u5b9e\u73b0\u8981\u753b\u56fe","text":"<ul> <li>\u4ec0\u4e48\u662f\u6d88\u8d39\u8005\u5747\u8861</li> <li>\u56fe\u50cf\uff0c\u4e09\u79cd\u60c5\u51b5</li> </ul>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7528\u66ff\u4ee3\u6548\u5e94\u548c\u6536\u5165\u6548\u5e94\u7684\u5173\u7cfb\u89e3\u91ca\u4f4e\u6863\u5546\u54c1\u548c\u5409\u82ac\u5546\u54c1\u4e4b\u95f4\u7684\u533a\u522b","title":"\u7528\u66ff\u4ee3\u6548\u5e94\u548c\u6536\u5165\u6548\u5e94\u7684\u5173\u7cfb\u89e3\u91ca\u4f4e\u6863\u5546\u54c1\u548c\u5409\u82ac\u5546\u54c1\u4e4b\u95f4\u7684\u533a\u522b","text":"<p>\u8bf7\u7528\u66ff\u4ee3\u6548\u5e94\u4e0e\u6536\u5165\u6548\u5e94\u7684\u5173\u7cfb\u89e3\u91ca\u4f4e\u6863\u5546\u54c1\u548c\u5409\u82ac\u5546\u54c1\u7684\u533a\u522b</p>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u753b\u56fe\u5e76\u89e3\u91ca-sac-avc-afc-smc-\u7684\u53d8\u5316\u89c4\u5f8b\u548c\u5173\u7cfb_1","title":"\u753b\u56fe\u5e76\u89e3\u91ca SAC, AVC, AFC, SMC \u7684\u53d8\u5316\u89c4\u5f8b\u548c\u5173\u7cfb","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4e3a\u4ec0\u4e48-mrmc-\u662f\u5382\u5546\u5b9e\u73b0\u5229\u6da6\u6700\u5927\u5316\u7684\u539f\u5219","title":"\u4e3a\u4ec0\u4e48 \\(MR=MC\\) \u662f\u5382\u5546\u5b9e\u73b0\u5229\u6da6\u6700\u5927\u5316\u7684\u539f\u5219","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5e94\u7528\u5e8f\u6570\u6548\u7528\u7406\u8bba\u63a8\u5bfc\u51fa\u9700\u6c42\u66f2\u7ebf","title":"\u5e94\u7528\u5e8f\u6570\u6548\u7528\u7406\u8bba\u63a8\u5bfc\u51fa\u9700\u6c42\u66f2\u7ebf","text":"<ol> <li>\u753b\u56fe\uff0c\u6d88\u8d39\u8005\u4e0d\u6d88\u8d39\u548c\u6d88\u8d39\u4e24\u79cd\u9009\u62e9\u7684\u6570\u91cf\u6784\u6210\u5173\u7cfb\uff0c\u5b58\u5728\u65e0\u5dee\u5f02\u66f2\u7ebf\u548c\u9884\u7b97\u7ea6\u675f\u7ebf</li> <li>\u5f53\u5546\u54c1\u4ef7\u683c\u53d8\u5316\u65f6\uff0c\u9884\u7b97\u7ea6\u675f\u7ebf\u53d1\u751f\u53d8\u5316\uff0c\u4e0e\u65b0\u7684\u5dee\u5f02\u66f2\u7ebf\u4ea7\u751f\u65b0\u7684\u5207\u70b9\uff08\u5747\u8861\u70b9\uff09\uff0c\u7531\u6b64\u5f97\u5230\u4ef7\u683c - \u6d88\u8d39\u6269\u5c55\u66f2\u7ebf \\(Q_m=f(Q_t)\\)</li> <li>\u7ecf\u8fc7\u6570\u5b66\u8ba1\u7b97 \\(P=\\frac{M-Q_m}{Q_t}=\\frac{M-f(Q_t)}{Q_t}\\) \u5f97\u5230\u4e86 P \u548c Q \u7684\u5173\u7cfb</li> <li>\u5c06\u8fd9\u4e2a\u66f2\u7ebf\u753b\u5728\u4ef7\u683c - \u9700\u6c42\u91cf\u5750\u6807\u7cfb\u5185\uff0c\u5c31\u5f97\u5230\u4e86\u9700\u6c42\u66f2\u7ebf</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u867d\u7136\u5f88\u9ad8\u7684\u56fa\u5b9a\u6210\u672c\u662f\u5382\u5546\u4e8f\u635f\u7684\u539f\u56e0\u4f46\u6c38\u8fdc\u4e0d\u4f1a\u662f\u5382\u5546\u505c\u4e1a\u7684\u539f\u56e0\u4f60\u540c\u610f\u8fd9\u79cd\u8bf4\u6cd5\u5417\u4e3a\u4ec0\u4e48","title":"\u201c\u867d\u7136\u5f88\u9ad8\u7684\u56fa\u5b9a\u6210\u672c\u662f\u5382\u5546\u4e8f\u635f\u7684\u539f\u56e0\uff0c\u4f46\u6c38\u8fdc\u4e0d\u4f1a\u662f\u5382\u5546\u505c\u4e1a\u7684\u539f\u56e0\u201d\u4f60\u540c\u610f\u8fd9\u79cd\u8bf4\u6cd5\u5417\uff1f\u4e3a\u4ec0\u4e48\uff1f","text":"<ol> <li>\u77ed\u671f\u5185\uff0c\u56fa\u5b9a\u6210\u672c\u5e76\u4e0d\u51b3\u5b9a\u662f\u5426\u505c\u4e1a\uff0c\u800c\u4ef7\u683c\u548c\u6700\u5c0f\u5e73\u5747\u53ef\u53d8\u6210\u672c\u51b3\u5b9a\u662f\u5426\u505c\u4e1a</li> <li>\u5382\u5546\u6309\u7167\u5229\u6da6\u6700\u5927\u5316 \\(P=MR=MC\\) \u8fdb\u884c\u4f9b\u7ed9<ol> <li>\u5982\u679c \\(P&lt;AVC_{min}\\) .........</li> </ol> </li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#11-12-\u6625\u590f\u671f\u4e2d-\u6709\u7b54\u6848","title":"11-12 \u6625\u590f\u671f\u4e2d \u6709\u7b54\u6848","text":""},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u4ec0\u4e48\u662f\u7406\u6027\u4eba\u5047\u8bbe\u8bd5\u4e3e\u4f8b\u8bf4\u660e\u5fae\u89c2\u7ecf\u6d4e\u5b66\u662f\u5efa\u7acb\u5728\u8fd9\u4e2a\u5047\u8bbe\u57fa\u7840\u4e0a\u7684","title":"\u4ec0\u4e48\u662f\u7406\u6027\u4eba\u5047\u8bbe\uff1f\u8bd5\u4e3e\u4f8b\u8bf4\u660e\u5fae\u89c2\u7ecf\u6d4e\u5b66\u662f\u5efa\u7acb\u5728\u8fd9\u4e2a\u5047\u8bbe\u57fa\u7840\u4e0a\u7684\uff1f","text":"<ol> <li>\u7406\u6027\u4eba\u5047\u8bbe\uff0c\u5047\u8bbe\u6bcf\u4e00\u4e2a\u4ece\u4e8b\u7ecf\u6d4e\u6d3b\u52a8\u7684\u4eba\u90fd\u662f\u5229\u5df1\u7684\uff0c\u4ee5\u6700\u5c0f\u7684\u7ecf\u6d4e\u4ee3\u4ef7\u53bb\u83b7\u53d6\u6700\u5927\u7684\u7ecf\u6d4e\u5229\u76ca</li> <li>\u4ee5\u6d88\u8d39\u8005\u9009\u62e9\u4e3a\u4f8b\uff0c\u6bcf\u4e2a\u6d88\u8d39\u8005\u90fd\u8ffd\u6c42\u81ea\u8eab\u6548\u7528\u7684\u6700\u5927\u5316\uff0c\u76f4\u81f3\u8fbe\u5230\u6d88\u8d39\u8005\u5747\u8861</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5b9e\u8bc1\u5206\u6790\u548c\u89c4\u8303\u5206\u6790\u6709\u4ec0\u4e48\u533a\u522b","title":"\u5b9e\u8bc1\u5206\u6790\u548c\u89c4\u8303\u5206\u6790\u6709\u4ec0\u4e48\u533a\u522b\uff1f","text":"<ol> <li>\u5b9e\u8bc1\u5206\u6790\u662f\u7528\u7406\u8bba\u5bf9\u793e\u4f1a\u5404\u79cd\u7ecf\u6d4e\u73b0\u8c61\u8fdb\u884c\u89e3\u91ca\u3001\u5206\u6790\u3001\u8bc1\u5b9e\u548c\u9884\u6d4b\u3002\u5b83\u8981\u8bf4\u660e\u201c\u662f\u4ec0\u4e48\u201d\u7684\u95ee\u9898\u3002\u5b83\u7814\u7a76\u4e00\u4e2a\u793e\u4f1a\u6240\u9762\u4e34\u7684\u7ecf\u6d4e\u95ee\u9898\u662f\u5982\u4f55\u88ab\u5207\u5b9e\u89e3\u51b3\u7684\u3002\u5b83\u4e0d\u6d89\u53ca\u4ef7\u503c\u5224\u65ad\u95ee\u9898\uff0c\u5373\u5224\u65ad\u67d0\u4e00\u4e8b\u7269\u662f\u597d\u8fd8\u662f\u574f\u7684\u95ee\u9898</li> <li>\u89c4\u8303\u5206\u6790\u5219\u662f\u4ee5\u4e00\u5b9a\u7684\u4ef7\u503c\u5224\u65ad\u4f5c\u4e3a\u51fa\u53d1\u70b9\uff0c\u63d0\u51fa\u884c\u4e3a\u7684\u6807\u51c6\uff0c\u5e76\u7814\u7a76\u5982\u4f55\u624d\u80fd\u7b26\u5408\u8fd9\u4e9b\u6807\u51c6\u3002\u5b83\u8981\u8bf4\u660e\u201c\u5e94\u8be5\u662f\u4ec0\u4e48\u201d\u7684\u95ee\u9898\uff0c\u5373\u5b83\u7814\u7a76\u4e00\u4e2a\u793e\u4f1a\u6240\u9762\u4e34\u7684\u7ecf\u6d4e\u95ee\u9898\u5982\u4f55\u89e3\u51b3</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7b80\u8ff0\u65e0\u5dee\u5f02\u66f2\u7ebf\u7684\u6027\u8d28","title":"\u7b80\u8ff0\u65e0\u5dee\u5f02\u66f2\u7ebf\u7684\u6027\u8d28","text":"<ol> <li>\u65e0\u5dee\u5f02\u66f2\u7ebf\u659c\u7387\u4e3a\u8d1f\uff0c\u51f8\u5411\u539f\u70b9</li> <li>\u65e0\u5dee\u5f02\u66f2\u7ebf\u79bb\u539f\u70b9\u8d8a\u8fdc\uff0c\u6548\u7528\u8d8a\u5927</li> <li>\u65e0\u5dee\u5f02\u66f2\u7ebf\u56fe\u4e2d\u7684\u4efb\u610f\u4e24\u6761\u65e0\u5dee\u5f02\u66f2\u7ebf\u4e0d\u80fd\u76f8\u4ea4</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7b80\u8ff0\u9700\u6c42\u89c4\u5f8b\u7684\u542b\u4e49","title":"\u7b80\u8ff0\u9700\u6c42\u89c4\u5f8b\u7684\u542b\u4e49","text":"<ol> <li>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5176\u4ed6\u6761\u4ef6\u4e0d\u53d8\uff0c\u5546\u54c1\u7684\u4ef7\u683c\u8d8a\u9ad8\uff0c\u6d88\u8d39\u8005\u613f\u610f\u4e14\u80fd\u591f\u8d2d\u4e70\u5546\u54c1\u7684\u6570\u91cf\uff0c\u5373\u9700\u6c42\u91cf\u8d8a\u5c0f</li> <li>\u53cd\u4e4b\uff0c\u5546\u54c1\u7684\u4ef7\u683c\u8d8a\u4f4e\uff0c\u9700\u6c42\u91cf\u8d8a\u5927</li> <li>\u753b\u56fe\u6ee1\u8db3\u9700\u6c42\u89c4\u5f8b\u7684\u9700\u6c42\u66f2\u7ebf\u5411\u53f3\u4e0b\u65b9\u503e\u659c</li> <li>\u9700\u6c42\u89c4\u5f8b\u7ed9\u51fa\u4e86\u6d88\u8d39\u8005\u5bf9\u5546\u54c1\u9700\u6c42\u7684\u57fa\u672c\u7279\u5f81</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u8fb9\u9645\u6548\u7528\u9012\u51cf\u548c\u8fb9\u9645\u66ff\u4ee3\u7387\u9012\u51cf\u6709\u4f55\u5173\u7cfb","title":"\u8fb9\u9645\u6548\u7528\u9012\u51cf\u548c\u8fb9\u9645\u66ff\u4ee3\u7387\u9012\u51cf\u6709\u4f55\u5173\u7cfb","text":"<ol> <li>\u8fb9\u9645\u6548\u7528\u9012\u51cf\u662f\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\uff0c\u5176\u4ed6\u5546\u54c1\u6d88\u8d39\u6570\u91cf\u4e0d\u53d8\u7684\u6761\u4ef6\u4e0b\uff0c\u968f\u7740\u6d88\u8d39\u8005\u5bf9\u67d0\u4e00\u5546\u54c1\u6d88\u8d39\u6570\u91cf\u7684\u589e\u52a0\uff0c\u5176\u6bcf\u4e00\u5355\u4f4d\u7684\u6d88\u8d39\u4e2d\u5e26\u6765\u7684\u6548\u7528\u589e\u91cf\u662f\u9012\u51cf\u7684\u3002</li> <li>\u8fb9\u9645\u66ff\u4ee3\u7387\u9012\u51cf\u662f\u5728\u603b\u6548\u7528\u4e00\u5b9a\u7684\u524d\u63d0\u4e0b\uff0c\u968f\u7740\u4e00\u79cd\u5546\u54c1\u6d88\u8d39\u91cf\u7684\u589e\u52a0\uff0c\u6d88\u8d39\u8005\u4e3a\u4e86\u5f97\u5230\u6bcf\u4e00\u5355\u4f4d\u8fd9\u79cd\u5546\u54c1\u6240\u653e\u5f03\u7684\u5176\u4ed6\u5546\u54c1\u7684\u6570\u91cf\u662f\u9010\u6e10\u9012\u51cf\u7684\u3002</li> <li>\u56e0\u4e3a\u968f\u7740\u4e00\u79cd\u5546\u54c1\u6d88\u8d39\u91cf\u7684\u589e\u52a0\uff0c\u8fd9\u79cd\u5546\u54c1\u7684\u8fb9\u9645\u6548\u7528\u9012\u51cf\uff0c\u6240\u4ee5\u6d88\u8d39\u8005\u4e3a\u4e86\u591a\u83b7\u5f97\u4e00\u5355\u4f4d\u8be5\u5546\u54c1\u9700\u8981\u653e\u5f03\u7684\u5176\u4ed6\u5546\u54c1\u6570\u91cf\u4f1a\u51cf\u5c11\uff08\u8be5\u6492\u8c0e\u7ed9\u4f60\u54c1\u53ef\u4ee5\u66ff\u4ee3\u7684\u5176\u4ed6\u5546\u54c1\u7684\u6570\u91cf\u4f1a\u51cf\u5c11\uff09\u3002\u6240\u4ee5\uff0c\u8fb9\u9645\u6548\u7528\u9012\u51cf\u51b3\u5b9a\u4e86\u8fb9\u9645\u66ff\u4ee3\u7387\u9012\u51cf</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u7b80\u8ff0\u66ff\u4ee3\u6548\u5e94\u4e0e\u6536\u5165\u6548\u5e94\u7684\u542b\u4e49","title":"\u7b80\u8ff0\u66ff\u4ee3\u6548\u5e94\u4e0e\u6536\u5165\u6548\u5e94\u7684\u542b\u4e49","text":"<ol> <li>\u66ff\u4ee3\u6548\u5e94\u6307\u7684\u662f\uff0c\u67d0\u4e00\u5546\u54c1\u4ef7\u683c\u53d8\u52a8\u5f15\u8d77\u4e86\u4e0e\u5176\u4ed6\u5546\u54c1\u4e4b\u95f4\u76f8\u5bf9\u4ef7\u683c\u7684\u53d8\u52a8\uff0c\u8fdb\u800c\u5bfc\u81f4\u6d88\u8d39\u8005\u5bf9\u8be5\u5546\u54c1\u7684\u9700\u6c42\u91cf\u7684\u53d8\u52a8</li> <li>\u6536\u5165\u6548\u5e94\u6307\u7684\u662f\uff0c\u67d0\u4e00\u5546\u54c1\u4ef7\u683c\u7684\u53d8\u52a8\u5f15\u8d77\u4e86\u6d88\u8d39\u8005\u5b9e\u9645\u6536\u5165\u6c34\u5e73\u7684\u53d8\u52a8\uff0c\u8fdb\u800c\u5bfc\u81f4\u6d88\u8d39\u8005\u5bf9\u8be5\u5546\u54c1\u9700\u6c42\u91cf\u7684\u53d8\u52a8</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u5206\u6790\u8c37\u8d31\u4f24\u519c\u80cc\u540e\u7684\u7ecf\u6d4e\u5b66\u539f\u7406","title":"\u5206\u6790\u201c\u8c37\u8d31\u4f24\u519c\u201d\u80cc\u540e\u7684\u7ecf\u6d4e\u5b66\u539f\u7406","text":"<ol> <li>\u753b\u56fe</li> <li>\u201c\u8c37\u8d31\u4f24\u519c\u201d\u6307\u7684\u662f</li> <li>\u6839\u672c\u539f\u56e0\uff1a\u519c\u4ea7\u54c1\u7f3a\u4e4f\u9700\u6c42\u4ef7\u683c\u5f39\u6027</li> <li>\u9700\u6c42\u4ef7\u683c\u5f39\u6027\u662f\u4ec0\u4e48\uff1f</li> <li>\u7f3a\u4e4f\u5f39\u6027\uff0c\u5219\u4ea7\u91cf\u589e\u52a0\uff0c\u4ef7\u683c\u964d\u4f4e\u4f1a\u51cf\u5c11\u5382\u5546\u7684\u9500\u552e\u6536\u5165<ol> <li>\u539f\u56e0\u5728\u4e8e\uff0c\u4e24\u4e2a\u4f5c\u7528\uff0c\u54ea\u4e2a\u4f5c\u7528\u66f4\u663e\u8457</li> </ol> </li> <li>\u7ed3\u8bba\uff0c\u6240\u4ee5\uff0c\u519c\u4f5c\u7269\u589e\u4ea7\u964d\u4ef7\u4f1a\u5bfc\u81f4\u519c\u6c11\u9500\u552e\u6536\u5165\u51cf\u5c11</li> <li>\u5bf9\u56fe\u50cf\u8fdb\u884c\u89e3\u91ca</li> </ol>"},{"location":"ZJU-%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%EF%BC%88%E7%94%B2%EF%BC%89/Final.html#\u73b0\u91d1\u548c\u5b9e\u7269\u8865\u52a9\u54ea\u79cd\u6548\u7528\u6700\u5927","title":"\u73b0\u91d1\u548c\u5b9e\u7269\u8865\u52a9\uff0c\u54ea\u79cd\u6548\u7528\u6700\u5927","text":""},{"location":"index/codinglang/index.html","title":"Coding & Language","text":""},{"location":"index/codinglang/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>\u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u7840</li> </ul>"},{"location":"index/dsalgo/index.html","title":"Data Structure & Algorithm","text":""},{"location":"index/dsalgo/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>Fundamentals of Data Structures</li> <li>Advanced Data Structure &amp; Algorithm Analysis</li> <li>Algorithms in Game Design</li> </ul>"},{"location":"index/graphics/index.html","title":"Graphics","text":""},{"location":"index/graphics/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>GAMES101</li> </ul>"},{"location":"index/others/index.html","title":"Others","text":""},{"location":"index/others/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>\u5fae\u89c2\u7ecf\u6d4e\u5b66\uff08\u7532\uff09</li> </ul>"},{"location":"index/system/index.html","title":"System","text":""},{"location":"index/system/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>HPC101</li> <li>Computer Organization</li> </ul>"}]}